{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/alipay.png","path":"images/alipay.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/wechatpay.png","path":"images/wechatpay.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/love.js","path":"js/love.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/Hadoop-HDFS.md","hash":"a38e014f21e627078f1b6a1633143cb6a982270f","modified":1727590568946},{"_id":"source/_posts/Hadoop-MapReduce.md","hash":"83983ceffc148d23a28d8aac8e6cc1e2124dd257","modified":1727350974000},{"_id":"source/_posts/Hive优化.md","hash":"b24e50540c2f75c2767fa9c81c2328abd459f959","modified":1727879778342},{"_id":"source/_posts/MySQL学习.md","hash":"a50ab80d246f41d47c3cae2959e20eded5c67914","modified":1727349944000},{"_id":"source/_posts/Hadoop-Yarn.md","hash":"d56bedd568390dc0c2af48aa2ff18d0453c28690","modified":1727350974000},{"_id":"source/_posts/Python-Selenium脚本.md","hash":"ebe1c45b72fdbf1f61dea2ceaaff02de6e082cbb","modified":1727350144000},{"_id":"source/_posts/Next主题博客美化.md","hash":"f2ec3e9ec94cb143d9d2466240b16ab654af0f10","modified":1727350076000},{"_id":"source/_posts/Python学习.md","hash":"0ae9202b89ae127ad9a8505ea63b48d67ec12780","modified":1727349988000},{"_id":"source/_posts/Python爬虫.md","hash":"c7cf65a675c2ce53467fd482033e10b5717774fa","modified":1727349976000},{"_id":"source/_posts/hexo使用方法及命令.md","hash":"47ab77372e9a2b0072b3cca4763d3edbcf3565df","modified":1727349926000},{"_id":"source/_posts/数开-内外关联过滤条件置于on和where时结果差异.md","hash":"de9251be115bf53f53a808913dc9cc3ed1fd5a40","modified":1727350162000},{"_id":"source/_posts/Python数据分析与挖掘.md","hash":"aee548bd87bb3ac1bca35e95bdc41bfd224415f3","modified":1727350026000},{"_id":"source/_posts/selenium自动化测试.md","hash":"2e3af6b94dd7b8423808a19c30ad21e11e8e642d","modified":1727350112000},{"_id":"source/_posts/Python-Selenium脚本/检查类医嘱运行终端截图.png","hash":"af27c0f4291c5f1370ff17d1d60c5b938b7752f7","modified":1698311222000},{"_id":"source/_posts/Python-Selenium脚本/检验类医嘱运行终端截图.png","hash":"499acdebaf2c2f254a86b9c4252c02c661193d79","modified":1698301024000},{"_id":"source/_posts/Python学习/名片管理系统效果图1.jpg","hash":"429e9597424259d8e33637ca0bebb1d7577e23d1","modified":1649227290000},{"_id":"source/_posts/Python学习/名片管理系统效果图2.jpg","hash":"aef6af33f7cdc00e76bd8a46da950c4771096ccf","modified":1649227302000},{"_id":"source/_posts/Python学习/名片管理系统效果图3.jpg","hash":"7a6cf265ff31c54bef67df688dd01176a5591403","modified":1649227316000},{"_id":"source/_posts/Python数据分析与挖掘/1.png","hash":"c0662cb30fb759e61b578135341bd7d4f63d9654","modified":1657685078000},{"_id":"source/_posts/Python学习/飞机大战.jpg","hash":"fbc57f7c126b0deb189c870bd7fac7fad8faa5d4","modified":1649229232000},{"_id":"source/_posts/Python数据分析与挖掘/10.png","hash":"081c5a767309c81de62a5444276a8e2f862f3777","modified":1657686158000},{"_id":"source/_posts/Python数据分析与挖掘/11.png","hash":"4a7bcc37d78482e0694c3996a78f8ae3f319e6c8","modified":1657686174000},{"_id":"source/_posts/Python数据分析与挖掘/13.png","hash":"7cfd4fb8f53e07b4d2c3b6ff0b7cdf9684d80337","modified":1657686202000},{"_id":"source/_posts/Python数据分析与挖掘/12.png","hash":"b589db22cb09abbae259e20b76794d7142aa585d","modified":1657686188000},{"_id":"source/_posts/Python数据分析与挖掘/14.png","hash":"145eba0e221362fc5f81f94a4c52b0c3c4a037fd","modified":1657686216000},{"_id":"source/_posts/Python数据分析与挖掘/15.png","hash":"bb0aa32bf4ffb2b11e3e641ef76883887d358f0b","modified":1657686230000},{"_id":"source/_posts/Python数据分析与挖掘/16.png","hash":"940c8ea2207d1a39f84019204b9d12759789724b","modified":1657686242000},{"_id":"source/_posts/Python数据分析与挖掘/17.png","hash":"dcee4a1dbc021b269e421f6656e8ffbe9f6e6bc9","modified":1657686260000},{"_id":"source/_posts/Python数据分析与挖掘/2.png","hash":"b0691562f2745097302f8a011d00364136b5dd83","modified":1657685172000},{"_id":"source/_posts/Python数据分析与挖掘/3.png","hash":"ce0370f3ca7e26a4b31cb9002727bdf32aee4175","modified":1657685224000},{"_id":"source/_posts/Python数据分析与挖掘/5.png","hash":"ceee892b83b430b121d5331a4ee155f7efff5d66","modified":1657685744000},{"_id":"source/_posts/Python数据分析与挖掘/4.png","hash":"59d9ecd4c928addfd0b90fa7730d9d6888e3df91","modified":1657685328000},{"_id":"source/_posts/Python数据分析与挖掘/6.png","hash":"7481e4a66899d72bd68c8f6c7ec4376793549033","modified":1657685814000},{"_id":"source/_posts/Python数据分析与挖掘/8.png","hash":"2679c796a328d87114c0142b5fbde25d1e90e7d2","modified":1657685916000},{"_id":"source/_posts/Python数据分析与挖掘/7.png","hash":"cbdf1e94c327d2286c9f31242aa552d57e225e1d","modified":1657685902000},{"_id":"source/_posts/Python数据分析与挖掘/9.png","hash":"ef64d04e1d4c3b0b3c67c756c0ed66725eed1867","modified":1657686146000},{"_id":"source/_posts/Python数据分析与挖掘/bit1.png","hash":"6bea21d160c3a9d0e40f95e4cd5ef9ee3f982123","modified":1657683148000},{"_id":"source/_posts/Python数据分析与挖掘/bit3.png","hash":"e01e5ed978fb00b10058f7d9cbec47fa9bbdb10c","modified":1657684102000},{"_id":"source/_posts/Python数据分析与挖掘/bit2.png","hash":"a9975f51929da32b9a62f5886228db6ee09aef86","modified":1657684094000},{"_id":"source/_posts/Python爬虫/sogou.png","hash":"81489ae958e85b6249d5906eea0b24285cea48da","modified":1649925152000},{"_id":"source/_posts/Python爬虫/地址查询.png","hash":"c8bea37df9f9ba331fa93cc5940a9b5f3b9f7357","modified":1649928388000},{"_id":"source/_posts/Python爬虫/翻译.png","hash":"f1633014f8c2b7339dd04decd0cdeaa07aab5f7f","modified":1649926450000},{"_id":"source/_posts/selenium自动化测试/flags设置.png","hash":"d3a9342e66778a46df898916f5143743b9db1ee5","modified":1694670776000},{"_id":"source/_posts/数开-内外关联过滤条件置于on和where时结果差异/1.png","hash":"998624672b26810e4d18d1fa60b3612794e94e73","modified":1727346888000},{"_id":"source/_posts/数开-内外关联过滤条件置于on和where时结果差异/2.png","hash":"a525b92ad64ad48256219736f1a1dc1c0f61f976","modified":1727348798000},{"_id":"source/_posts/KBJ-ISSUE记录.md","hash":"b08e68cadcf7f1f7ec910d0cb04b7d4ceb357bb3","modified":1727350052000},{"_id":"source/_posts/Python-Selenium脚本/pickshell运行终端截图.png","hash":"c9df75a75a2434fab38c5df2cdfbeb63057880cc","modified":1698228494000},{"_id":"source/_posts/Python-Selenium脚本/医嘱详细信息录入.png","hash":"48934b52b94686669ea17dd06080ee0aca99e714","modified":1698222222000},{"_id":"source/_posts/Python爬虫/wuhan.png","hash":"7cb7e0b2f9e14dabf04e3f27fd9298fe7ac43778","modified":1649925782000},{"_id":"source/_posts/Python-Selenium脚本/Outpatient_registration.png","hash":"31f05c0047ad6f4851fb94c2c2bb2bc0b553c704","modified":1696842896000},{"_id":"source/_posts/Python-Selenium脚本/pickshell输入医嘱.png","hash":"1b482f270cba4e452c0d2e01c8ac43b9dd005457","modified":1698222216000},{"_id":"source/_posts/Python-Selenium脚本/pickshell运行系统截图.png","hash":"8c3bb72096631821b28d6aba784e0befb41da906","modified":1698228584000},{"_id":"source/_posts/Python-Selenium脚本/Outpatient_doctor_station.png","hash":"0c2b0adae787514ad2093c361953e79bcf2e9819","modified":1696841982000},{"_id":"source/_posts/Python-Selenium脚本/医嘱保存重复校验.png","hash":"12e60fb6b86285191209532f2c9706253bc1e081","modified":1698226530000},{"_id":"source/_posts/Python-Selenium脚本/医嘱保存成功校验.png","hash":"8ec1997bf5fd8ce319c28f17d7219cdb7e9fdc96","modified":1698226782000},{"_id":"source/_posts/Python-Selenium脚本/检查类医嘱开立方法.png","hash":"ed9d59f7419a44e3bcecdefb3ccb9aa6857caee4","modified":1698309256000},{"_id":"source/_posts/Python-Selenium脚本/检查类医嘱运行系统截图.png","hash":"6027553bc7965cf56c1138b8303c5aa4670353bc","modified":1698311080000},{"_id":"source/_posts/Python-Selenium脚本/检验类医嘱开立方法.png","hash":"f2279ea3b560958e9da6145a3934ed85b4ff103f","modified":1698298904000},{"_id":"source/_posts/Python-Selenium脚本/检验类医嘱运行系统截图.png","hash":"92c82ac4c4cba63723d4fc76b073c2d66e3638d5","modified":1698300874000},{"_id":"source/_posts/Python数据分析与挖掘/GMM.png","hash":"3755d74e8112ede50836a5eee54bc60edb94fd16","modified":1657682528000},{"_id":"source/_posts/Python-Selenium脚本/医嘱重复弹窗.png","hash":"6726157cff8cd130ddad566c3b3ce3e06bba4e0a","modified":1698222584000},{"_id":"source/_posts/Python-Selenium脚本/医生看诊页面.png","hash":"545c5af294e387b80766e33a33b48d2a3a9fa1e1","modified":1698141110000},{"_id":"source/_posts/Python学习/迭代器实例.jpg","hash":"e3f589f4ad86294617a783db7767c010385c3ccd","modified":1668668478000},{"_id":"source/_posts/Python数据分析与挖掘/航空.png","hash":"947181215686abb2de23523fba0aa3e95e4dfff8","modified":1657684402000},{"_id":"source/_posts/Python-Selenium脚本/登录子页面.png","hash":"053c07e322c3363ac16ecab3593bd3d624635956","modified":1697794790000},{"_id":"source/_posts/Python学习/迭代器和生成器.jpg","hash":"0f245d581b328b45618a81cadb2e926d92485a8d","modified":1668668460000},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1687326618000},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1687326618000},{"_id":"themes/next/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1687326618000},{"_id":"themes/next/.gitignore","hash":"83418530da80e6a78501e1d62a89c3bf5cbaec3d","modified":1687326618000},{"_id":"themes/next/.travis.yml","hash":"379f31a140ce41e441442add6f673bf397d863ea","modified":1687326618000},{"_id":"themes/next/_config.yml","hash":"ddca061fca7e2037c504a9b18a92194d0d7ccebe","modified":1687330388000},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1687326618000},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1687326618000},{"_id":"themes/next/package.json","hash":"b099e7cea4406e209130410d13de87988ba37b2a","modified":1687326618000},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1687326618000},{"_id":"themes/next/gulpfile.js","hash":"0c76a1ac610ee8cbe8e2cc9cca1c925ffd0edf98","modified":1687326618000},{"_id":"themes/next/README.md","hash":"7d56751b580d042559b2acf904fca4b42bcb30a7","modified":1687326618000},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"778b7e052993ed59f21ed266ba7119ee2e5253fb","modified":1687326618000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ddde54fb50d11dc08cec899a3588addb56aa386","modified":1687326618000},{"_id":"themes/next/.github/mergeable.yml","hash":"1c1cb77a62df1e3654b151c2da34b4a10d351170","modified":1687326618000},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"533fbe6b2f87d7e7ec6949063bb7ea7eb4fbe52d","modified":1687326618000},{"_id":"themes/next/.github/config.yml","hash":"df3d970700e6b409edc3d23be8d553db78d5ba3f","modified":1687326618000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"d2f8e6b65783e31787feb05d2ccea86151f53f35","modified":1687326618000},{"_id":"themes/next/.github/issue-close-app.yml","hash":"b14756e65546eb9ecc9d4393f0c9a84a3dac1824","modified":1687326618000},{"_id":"themes/next/.github/lock.yml","hash":"3ce3d0a26030a1cd52b273cc6a6d444d7c8d85c2","modified":1687326618000},{"_id":"themes/next/.github/stale.yml","hash":"590b65aca710e0fba75d3cf5361a64d13b6b0f63","modified":1687326618000},{"_id":"themes/next/.github/release-drafter.yml","hash":"09c3352b2d643acdc6839601ceb38abc38ab97c5","modified":1687326618000},{"_id":"themes/next/.github/support.yml","hash":"7ce2722d6904c31a086444c422dc49b6aa310651","modified":1687326618000},{"_id":"themes/next/docs/INSTALLATION.md","hash":"07ea00bee149a1bdc9073e903ee6b411e9f2f818","modified":1687326618000},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"60c7e9ef0c578deebad43e9395c958fa61096baf","modified":1687326618000},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1687326618000},{"_id":"themes/next/docs/AUTHORS.md","hash":"cde7cc095ac31b421a573042cf61060f90d9ad0d","modified":1687326618000},{"_id":"themes/next/docs/DATA-FILES.md","hash":"980fb8d37701f7fd96b30bb911519de3bbb473d1","modified":1687326618000},{"_id":"themes/next/languages/ar.yml","hash":"abcf220bd615cec0dd50e4d98da56580169d77e1","modified":1687326618000},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"6cc663db5e99fd86bb993c10d446ad26ada88e58","modified":1687326618000},{"_id":"themes/next/languages/de.yml","hash":"15078b7ede1b084e8a6a15d271f0db9c325bd698","modified":1687326618000},{"_id":"themes/next/languages/en.yml","hash":"dbb64776f9c001c54d0058256c415a9a0724ed5d","modified":1687326618000},{"_id":"themes/next/languages/es.yml","hash":"f064c793d56a5e0f20cda93b6f0e355044efc7d8","modified":1687326618000},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1687326618000},{"_id":"themes/next/languages/fa.yml","hash":"6c0a7d5bcc26eb45a9f3e02f13117c668e77fffd","modified":1687326618000},{"_id":"themes/next/languages/fr.yml","hash":"3e2f89d4bb4441d33ecc7b5a4ee114f627603391","modified":1687326618000},{"_id":"themes/next/languages/hu.yml","hash":"0ea89ffaefd02a10494995f05a2a59d5e5679a28","modified":1687326618000},{"_id":"themes/next/languages/id.yml","hash":"7599bb0ecf278beb8fde3d17bfc148a3241aef82","modified":1687326618000},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1687326618000},{"_id":"themes/next/languages/ja.yml","hash":"bf279d0eb1911806d01a12f27261fbc76a3bb3f9","modified":1687326618000},{"_id":"themes/next/languages/ko.yml","hash":"af4be6cb394abd4e2e9a728418897d2ed4cc5315","modified":1687326618000},{"_id":"themes/next/languages/nl.yml","hash":"9749cf90b250e631dd550a4f32ada3bb20f66dd0","modified":1687326618000},{"_id":"themes/next/languages/it.yml","hash":"46222f468e66789e9ba13095809eb5e5b63edf30","modified":1687326618000},{"_id":"themes/next/languages/tr.yml","hash":"c4e9ab7e047ae13a19f147c6bec163c3ba2c6898","modified":1687326618000},{"_id":"themes/next/languages/pt-BR.yml","hash":"69aa3bef5710b61dc9a0f3b3a8f52f88c4d08c00","modified":1687326618000},{"_id":"themes/next/languages/pt.yml","hash":"f6606dd0b916a465c233f24bd9a70adce34dc8d6","modified":1687326618000},{"_id":"themes/next/languages/ru.yml","hash":"012abc694cf9de281a0610f95f79c594f0a16562","modified":1687326618000},{"_id":"themes/next/languages/vi.yml","hash":"6a578cc28773bd764f4418110500478f185d6efa","modified":1687326618000},{"_id":"themes/next/languages/uk.yml","hash":"69ef00b1b8225920fcefff6a6b6f2f3aad00b4ce","modified":1687326618000},{"_id":"themes/next/languages/zh-HK.yml","hash":"92ccee40c234626bf0142152949811ebe39fcef2","modified":1687326618000},{"_id":"themes/next/languages/zh-CN.yml","hash":"81d73e21402dad729053a3041390435f43136a68","modified":1687326618000},{"_id":"themes/next/languages/zh-TW.yml","hash":"cf0740648725983fb88409d6501876f8b79db41d","modified":1687326618000},{"_id":"themes/next/layout/archive.swig","hash":"d9bca77f6dcfef71e300a294f731bead11ce199f","modified":1687326618000},{"_id":"themes/next/layout/_layout.swig","hash":"24873f2f27d32188c45431a09c3d1e7c2b72490b","modified":1687684508000},{"_id":"themes/next/layout/index.swig","hash":"8dfd96fb6f833dd5d037de800813105654e8e8e6","modified":1687326618000},{"_id":"themes/next/layout/post.swig","hash":"5f0b5ba2e0a5b763be5e7e96611865e33bba24d7","modified":1687326618000},{"_id":"themes/next/scripts/renderer.js","hash":"e3658eea97b1183ee2e9f676231e53f7994741f6","modified":1687326618000},{"_id":"themes/next/layout/category.swig","hash":"c546b017a956faaa5f5643c7c8a363af7ac9d6b9","modified":1687326618000},{"_id":"themes/next/layout/page.swig","hash":"357d916694d4c9a0fd1140fa56d3d17e067d8b52","modified":1687326618000},{"_id":"themes/next/layout/tag.swig","hash":"d44ff8755727f6532e86fc9fc8dc631200ffe161","modified":1687326618000},{"_id":"themes/next/docs/MATH.md","hash":"f56946053ade0915ff7efa74d43c38b8dd9e63bb","modified":1687326618000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"e67146befddec3a0dc47dc80d1109070c71d5d04","modified":1687326618000},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"1e86d32063b490d204baa9d45d8d3cb22c24a37d","modified":1687326618000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d5aa1a3323639a36bcd9a401484b67537043cd3c","modified":1687326618000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"6beeca0f45a429cd932b6e648617f548ff64c27c","modified":1687326618000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"59275aa0582f793fee7be67904dcf52ad33a7181","modified":1687326618000},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"54e6a067ed95268eab6be2ba040a7e9b1907928e","modified":1687326618000},{"_id":"themes/next/docs/ru/README.md","hash":"1e5ddb26ad6f931f8c06ce2120f257ff38b74fdf","modified":1687326618000},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"a9cfe5ac9ef727a8650b2b6584482751a26b1460","modified":1687326618000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"611f2930c2b281b80543531b1bf33d082531456a","modified":1687326618000},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"cb8e39c377fc4a14aaf133b4d1338a48560e9e65","modified":1687326618000},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"3202be9a8d31986caac640e7a4c7ce22e99917eb","modified":1687326618000},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7e6f227f2aaf30f400d4c065650a4e3d0d61b9e1","modified":1687326618000},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"50ab381c27611d5bf97bb3907b5ca9998f28187d","modified":1687326618000},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"0d46f9f50cf2e4183970adce705d1041155b0d37","modified":1687326618000},{"_id":"themes/next/layout/_macro/post.swig","hash":"c3fd56bac90ce45a0c79ddfe68beb223ad0d72b4","modified":1687326618000},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"2d868cd271d78b08775e28c5b976de8836da4455","modified":1687326618000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"30ade8c806d7826cc50a4a3e46a9e6213fddf333","modified":1687326618000},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"716111dd36d276f463c707dfcc9937fea2a1cf7a","modified":1687326618000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"5bffdb1448caca7db7b1f84e1693e6657a106d50","modified":1687326618000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"142efb4c6b73d8f736f6784804b40d5871333172","modified":1687326618000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1687326618000},{"_id":"themes/next/layout/_partials/languages.swig","hash":"c3ea82604a5853fb44c5f4e4663cbe912aa5dcf8","modified":1687326618000},{"_id":"themes/next/layout/_scripts/index.swig","hash":"1822eaf55bbb4bec88871c324fc18ad95580ccb4","modified":1687326618000},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"ccff5a773644d33ff22f6b45b6734f52b048f22b","modified":1687326618000},{"_id":"themes/next/layout/_scripts/three.swig","hash":"6b092c6d882b2dfa5273e1b3f60b244cb7c29fcd","modified":1687326618000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"244ca2d74ee0d497c87572c6a26b43c62a952673","modified":1687326618000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"221759dd950fdb88f86b1904c66c19f759f7afa4","modified":1687673686000},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"28b0a7e843ec4365db1963646659a153753cd746","modified":1687326618000},{"_id":"themes/next/layout/_third-party/index.swig","hash":"c6b63cbc80938e6e09578b8c67e01adf13a9e3bd","modified":1687326618000},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"5392dcbb504266f0f61d5b8219914068ef9cdc25","modified":1687326618000},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"7b9e0f776a5be6c3f95bc7f394e1424ba02ba93b","modified":1687326618000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"269102fc5e46bd1ce75abdcce161f0570ae70e2f","modified":1687326618000},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"5ae5adcd6f63ed98b2071e4f7e5e38c4d7d24e1b","modified":1687326618000},{"_id":"themes/next/scripts/events/index.js","hash":"5c355f10fe8c948a7f7cd28bd8120adb7595ebde","modified":1687326618000},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"ad321db012cea520066deb0639335e9bc0dcc343","modified":1687326618000},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"305d03c1e45782988809298c3e3b3c5d5ee438aa","modified":1687326618000},{"_id":"themes/next/scripts/filters/locals.js","hash":"a5e7d05d3bd2ae6dcffad5a8ea0f72c6e55dbd02","modified":1687326618000},{"_id":"themes/next/scripts/filters/minify.js","hash":"21196a48cb127bf476ce598f25f24e8a53ef50c2","modified":1687326618000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"8f7c0d0b766024152591d4ccfac715c8e18b37f3","modified":1687326618000},{"_id":"themes/next/scripts/filters/post.js","hash":"57f2d817578dd97e206942604365e936a49854de","modified":1687326618000},{"_id":"themes/next/scripts/helpers/font.js","hash":"8fb1c0fc745df28e20b96222974402aab6d13a79","modified":1687326618000},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"b8d7ddfa4baa9b8d6b9066a634aa81c6243beec9","modified":1687326618000},{"_id":"themes/next/scripts/helpers/engine.js","hash":"eb6b8bbc1dce4846cd5e0fac0452dbff56d07b5d","modified":1687326618000},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"4044129368d0e2811859a9661cad8ab47118bc32","modified":1687326618000},{"_id":"themes/next/scripts/tags/button.js","hash":"bb0e8abbc0a6d5b3a1a75a23976f2ac3075aab31","modified":1687326618000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"93ccd3f99d3cb42674f29183c756df63acb5d7f8","modified":1687326618000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"e2d0184bc4a557e1017395b80ff46880078d8537","modified":1687326618000},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1687326618000},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"840536754121e0da5968f5ad235f29200fc5d769","modified":1687326618000},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1687326618000},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1687326618000},{"_id":"themes/next/source/css/_colors.styl","hash":"11aef31a8e76f0f332a274a8bfd4537b73d4f88f","modified":1687326618000},{"_id":"themes/next/scripts/tags/pdf.js","hash":"37b53661ad00a01a2ca7d2e4a5ad3a926073f8e2","modified":1687326618000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"c70a4a66fd0c28c98ccb6c5d5f398972e5574d28","modified":1687326618000},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1687326618000},{"_id":"themes/next/source/images/alipay.png","hash":"cd74eb519890736867b40d40dfdca7c404379028","modified":1687327428000},{"_id":"themes/next/source/css/main.styl","hash":"815ef30987d02f3d76dbe4b5ee3a72135a152678","modified":1687326620000},{"_id":"themes/next/source/css/_mixins.styl","hash":"072a3fa473c19b20ccd7536a656cda044dbdae0a","modified":1687326620000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1687326620000},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1687326620000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1687326620000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1687326620000},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"b3201934b966bc731eaf8a4dad4ba4bdcd300c10","modified":1687326618000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1687326620000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1687326620000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1687326620000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1687326620000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1687326620000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1687326620000},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1687326620000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1687326620000},{"_id":"themes/next/source/js/local-search.js","hash":"cfa6a0f3f9c2bc759ee507668a21f4e8f250f42a","modified":1687326620000},{"_id":"themes/next/source/js/motion.js","hash":"d5aa1a08cdf3c8d1d8d550fb1801274cc41e5874","modified":1687326620000},{"_id":"themes/next/source/js/love.js","hash":"3694591e3d8465c7e0f80c8303b3ffe90611834d","modified":1687673956000},{"_id":"themes/next/source/js/next-boot.js","hash":"250d8dcd6322e69e3fbadd0f3e37081c97b47c52","modified":1687326620000},{"_id":"themes/next/source/js/utils.js","hash":"26a82e46fdcadc7c3c2c56a7267284b61a26f7f3","modified":1687326620000},{"_id":"themes/next/source/lib/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1687326620000},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"7d638e413f2548fc990c4a467dd03de6c81fc960","modified":1687326618000},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"90cce9f407e9490756ba99580e3eb09f55b05eaa","modified":1687326618000},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"91c0addb33006619faa4c32e5d66874e25f1e9b3","modified":1687326618000},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"8d4e3dd0d3631ce0b21bc15c259f6ac886de631d","modified":1687326618000},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"91056a6c98cca63ff8cc6956e531ee3faf4b8ad9","modified":1687326618000},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"4baa86ca631168fc6388d27f4b1b501b40c877a8","modified":1687326618000},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"0dd316f153c492c0a03bd0273d50fa322bc81f11","modified":1687326618000},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"90d3eaba6fbe69bee465ddd67c467fd2c0239dc4","modified":1687326618000},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"bed6cc2b48cf2655036ba39c9bae73a295228a4d","modified":1687326618000},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"d8f785c062c6b0763a778bd4a252e6f5fee0e432","modified":1687326618000},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1687326620000},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"f2eb455c8bf13533427254f0c9b4b17b2498168b","modified":1687326618000},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"ce712c110b5ce8aacba7a86b0558ff89700675c9","modified":1687326618000},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"bc7b047a6246df07767373644b1637d91c3a88b1","modified":1687326618000},{"_id":"themes/next/source/js/algolia-search.js","hash":"6a813410e33824d7acc65a369a2983912bb3420c","modified":1687326620000},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"f349a226e5370075bb6924e60da8b0170c7cfcc1","modified":1687326618000},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"98fd1f5df044f4534e1d4ca9ab092ba5761739a9","modified":1687326618000},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a6c761d5193cb6f22e9422dbbcf209e05471b0ed","modified":1687326618000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"128f7d679bb4d53b29203d598d217f029a66dee7","modified":1687326618000},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"7b2ef5db9615267a24b884388925de1e9b447c1f","modified":1687326618000},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"34c05e9d73b0f081db70990c296b6d6a0f8ea2ca","modified":1687326618000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1687326618000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1687326618000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1687326618000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1687326618000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"84adaadd83ce447fa9da2cff19006334c9fcbff9","modified":1687326618000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b8819bd056f8a580c5556d4415836a906ed5d7a4","modified":1687326618000},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"91c2cb900c76224c5814eeb842d1d5f517f9bf05","modified":1687326618000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"85b60e222712ca3b2c4dc2039de2dc36b8d82940","modified":1687326618000},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"2642e8aef5afbe23a2a76efdc955dab2ee04ed48","modified":1687326618000},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"fb94ee487d75e484e59b7fba96e989f699ff8a83","modified":1687326618000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"9298e6d6c4a62a0862fc0f4060ed99779d7b68cb","modified":1687326618000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1b29b99fa921f12c25d3dc95facdf84ef7bb1b5c","modified":1687326618000},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"a42f97eda3748583bac2253c47fe5dfa54f07b8f","modified":1687326618000},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"606ad14a29320157df9b8f33738282c51bb393d9","modified":1687326618000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"ae2707d6e47582bb470c075649ec7bad86a6d5a9","modified":1687326618000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"3d91899ca079e84d95087b882526d291e6f53918","modified":1687326618000},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"59df21fcfe9d0ada8cee3188cb1075529c1c3eb8","modified":1687326618000},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"276f523e414d4aa7f350a8f2fd3df8a3d8ea9656","modified":1687326618000},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"1f34b2d3c753a3589ab6c462880bd4eb7df09914","modified":1687326618000},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"fd726aad77a57b288f07d6998ec29291c67c7cbb","modified":1687326618000},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"aa6ab95b8b76611694613defb4bf25003d1b927f","modified":1687326618000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"58296a5c1883f26464c2a5ccf734c19f5fbf395a","modified":1687326618000},{"_id":"themes/next/source/js/bookmark.js","hash":"9f05fd3672789311dc0cf5b37e40dc654cb04a2a","modified":1687326620000},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"619338ddacf01e3df812e66a997e778f672f4726","modified":1687326618000},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"5a223b60406cee7438cfe3a5e41d1284425aa7a5","modified":1687326618000},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d2f0e4c598410ec33785abe302c7ea7492bb791a","modified":1687326618000},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"01d94354d07e72cad47100482068b6be69fcc033","modified":1687326618000},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"53a0760c75d5aaabb3ce8e8aa8e003510d59807f","modified":1687326618000},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"964cd6bac668cf6d211a2624fbef3948cfdece55","modified":1687326618000},{"_id":"themes/next/scripts/events/lib/config.js","hash":"aefe3b38a22bc155d485e39187f23e4f2ee5680a","modified":1687326618000},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"c171ea94e9afbba97f06856904264da331559463","modified":1687326618000},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"e73f697bb160b223fdde783237148be5f41c1d78","modified":1687326618000},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"08496b71c9939718e7955704d219e44d7109247b","modified":1687326618000},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"2f22f48f7370470cef78561a47c2a47c78035385","modified":1687326618000},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3a80559df0b670ccb065ea9d3bb587d0b61be3a4","modified":1687326618000},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"713056d33dbcd8e9748205c5680b456c21174f4e","modified":1687326618000},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"0c3bea89d64bc12c1bbe6f208a83773c6fb5375a","modified":1687326618000},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"67cf90d9a2428c14eb113a64bdd213c22a019aef","modified":1687326618000},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"323a47df6ded894944a2647db44556d6163e67c4","modified":1687326618000},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"a4f3153ac76a7ffdf6cc70f52f1b2cc218ed393e","modified":1687326618000},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"851359f5ff90f733a9bd7fe677edbee8b8ac714c","modified":1687326618000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"583ff1e7a2ca889f1f54eb0ca793894466823c7c","modified":1687326620000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4e33774b1fe6d0a51f3a428c54c5e600e83bf154","modified":1687326620000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"5980abbbbeacd8541121f436fa414d24ad5e97c2","modified":1687326620000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"ad680efdfb2f86546182bf3f59886efbcf3c1b2d","modified":1687326620000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c22b58af3327236ec54d5706501aa5a20e15012e","modified":1687326620000},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"b85a6e2af1387fe64b51e7cd3e2da8616e6f5a3f","modified":1687326620000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1687326620000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1687326620000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"d17236df3b4d6def1e4e81133ef4729c390de3ac","modified":1687326618000},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"c52648a7b09f9fe37858f5694fcc1ffc709ad147","modified":1687326618000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"0534b329d279a6f255112b3305ff92c810f31724","modified":1687326618000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"510a6f0ba7485dd54ce347cca890ab52c4957081","modified":1687326618000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7a95c27762e1303bf06ee808c63f616cb192fcaf","modified":1687326618000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5540c9259cb7895a5f10a289c7937e5470a7c134","modified":1687326620000},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"4b068d0d898f4e624937503f0e1428993050bd65","modified":1687326620000},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"45f4badac6ec45cf24355f6157aece1d4d3f1134","modified":1687326620000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1687326620000},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"b619f39e18398422e0ac4999d8f042a5eaebe9cd","modified":1687326620000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"f317d2e3886e94f5fbb8781c2e68edd19669ff58","modified":1687326620000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1687326620000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"e342b8f8e11a3a6aa5a029912c9778c25bf5d135","modified":1687326620000},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"20e0e3e3eba384930c022e21511214d244b4c9e7","modified":1687326620000},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"8674bd88df076a1dfe4023ed6750ded1f5b00223","modified":1687326620000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"49c76bc723d3952abb613d9d68398ed7305da999","modified":1687326620000},{"_id":"themes/next/source/js/schemes/muse.js","hash":"a18559a9c332199efad0100cf84bb0c23fc0f17a","modified":1687326620000},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1687326620000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1687326620000},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"a2ee16cac29a82cfce26804c160286fcbee94161","modified":1687326618000},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"9898323ee5a7ac2a5d4f633c653112280beb2643","modified":1687326620000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"716e8b0f056bf6393e6bc6969ac84598ab8e7a6f","modified":1687326620000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4b7f057dbb53efd7cbe7eac7835a793ab3cbb135","modified":1687326620000},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"558794fced306339b98dc2b0ee7f0576802f1355","modified":1687326620000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5de34e1d8a290751641ae456c942410852d5e809","modified":1687326620000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"c5142739e01e9f25c8b32b2209af85c787bb2b42","modified":1687326620000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"dc9318992ce2eb086ebaa2fe56b325e56d24098b","modified":1687326620000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b69ac38b9da8c9c1b7de696fdeea7f9d7705213a","modified":1687326620000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1687326620000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0a9f0d9eb042595502d200fb8c65efb0e6c89aa9","modified":1687326620000},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"82e34d28f8a1169b20b60101d5bb0446deba3514","modified":1687326620000},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1687326620000},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"12b265f82840f27112ca2b1be497677f20f87545","modified":1687326620000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"236a039b0900f4267de566b46f62314ad967d30f","modified":1687326618000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"18edddb2ffb3f85a68e4367f81e06c461e07bc25","modified":1687326618000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1687326618000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"b9e87d32da24264bda247c1526afe140c858b0ef","modified":1687326620000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"f6f05f02d50f742c84ee5122016c0563a8bb2cf9","modified":1687326618000},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"7eeb22c5696f8e0c95161dc57703973cf81c8c12","modified":1687326618000},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"97974c231b4659b8aa5e9321c4d54db5c816d0db","modified":1687326618000},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"b87f4a06c0db893df4f756f24be182e1a4751f24","modified":1687326618000},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"d83102771df652769e51ddfd041cf5f4ca1a041d","modified":1687326618000},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"bad99f4cccb93b3cefe990a2c85124e60698d32e","modified":1687326618000},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"8ed7a9d5dfac592de703421b543978095129aa5b","modified":1687326618000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1f6b0d3ab227697ca115e57fd61122ea7950e19d","modified":1687326618000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a52f8cae599099231866298ed831fdf76c9b6717","modified":1687326618000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"70b3eb9d36543ab92796ac163544e9cf51b7c1e6","modified":1687326618000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"9af620eba5ccceea21a0e3bc69f6f1fa7637c2f3","modified":1687326618000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e1c29b81a32273a0dedd926cda199a71aea72624","modified":1687326620000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"97dec98d0403097d66822f1c90b50b2890c84698","modified":1687326618000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0dfb97703a519d9438f64f9e41ab1dd37381f733","modified":1687326618000},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"93ba8172c0d2c37d738e6dbd44fcd5a2e23b92f3","modified":1687326618000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"2c24829d95c742eb9e8316ebf2fbe9f2c168b59a","modified":1687326618000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"09dda2667628d1f91b2e37d8fc6df1413f961b64","modified":1687326618000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5cc9e7394c927065c688cba5edd6e0a27587f1d8","modified":1687326618000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"66fc406796b6efe6cea76550573b7a632112406a","modified":1687326618000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b266d2ce5e2b117be01537889e839a69004dc0bb","modified":1687326618000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"fcd64c23d17775b3635325f6758b648d932e79b5","modified":1687326618000},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"6d5f26646e2914474f295de8bf6dc327d4acd529","modified":1687326618000},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"b4f4bae437d4f994af93cf142494ffcd86bae46b","modified":1687326618000},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"300058ca12e81013e77ba01fe66ac210525768b6","modified":1687326618000},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"7a3a56b10ab714c0e2ed240d0939deeecdcad167","modified":1687326618000},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"3d16ac0f4ccaeed868c246d4d49bde543d1f62cb","modified":1687326618000},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b8c816fba0a9b4a35fbae03ba5b1b2da96ba2687","modified":1687326618000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"49722d555a2edb18094bb2cb3d7336dd72051b93","modified":1687326618000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"357f825f0a649b2e28cba1481d4c9a0cb402e43a","modified":1687326618000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"096f908c08ce553e482aadfd3e767a0145191093","modified":1687326618000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"525242ce9e912c4adfe5134347c67dbdb9e98e3d","modified":1687326618000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"12f7eaf6b56624cbc411528562d6bb848ff97039","modified":1687326618000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"fa0a2ea57b7b4ce75b5d18c264af2d92ea3192f9","modified":1687326618000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"b11b04737a1a0fea3bd9f0081d96ee6c015358d4","modified":1687326618000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"098b4bdf49c7300490f959386d5d1185a32543f6","modified":1687326620000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"5d540f683018745a5ed1d6f635df28ea610c1244","modified":1687326620000},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"67a1fcb33535122d41acd24f1f49cf02c89b88fa","modified":1687326620000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"83bd737f663a8461e66985af8ddbfc0a731fc939","modified":1687326620000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"80488259271bcfe38031f4c2e902463daba9336b","modified":1687326620000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"c911045b2ce9a66e38d9dd30c7ed078abbc10cbf","modified":1687326620000},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"ceacfa6218f6084c71a230b086e5d2708d29927e","modified":1687326620000},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"aca7bb220fc14ef2a8f96282d2a95a96a9238d46","modified":1687326620000},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"8b7aafb911850c73074cdb6cc87abe4ac8c12e99","modified":1687326620000},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"adaf0f580fccf4158169eeaf534a18005b39a760","modified":1687326620000},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"03a5bcecc0b12231462ef6ffe432fa77ee71beff","modified":1687326620000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"3256e39f281f06751a1c0145d9806a0e56d68170","modified":1687326620000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"51d46fa3c7c6b691c61a2c2b0ac005c97cfbf72b","modified":1687326620000},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"b31c86d1a4f89837f9187bed646bda96b2cd286c","modified":1687326618000},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"57b9a179675f1536e017cba457b6ac575e397c4f","modified":1687326618000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"4079e616fbf36112dec0674c1e0713d1d9769068","modified":1687326620000},{"_id":"themes/next/source/images/wechatpay.png","hash":"62d90c27fb1f40eb324424113b501f7ecfd6e27e","modified":1687327430000},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1687326620000},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1687326620000},{"_id":"source/_posts/Python-Selenium脚本/登录主页面.png","hash":"109eff163bd4184bb51947201611b1d1cee00193","modified":1697794756000},{"_id":"public/search.xml","hash":"4f79956f579e934ee1471bd1714dcd7828511068","modified":1727879796699},{"_id":"public/sitemap.xml","hash":"cfe0d980b295c5fcd2d6281d2e18063056bdbc03","modified":1727879796699},{"_id":"public/sitemap.txt","hash":"419a6111d2cadade1a71896223dead114e8339de","modified":1727879796699},{"_id":"public/posts/2cf3653f.html","hash":"f0d9ce1f88ab0fce811bda2f27536698f7c799c0","modified":1727879796699},{"_id":"public/posts/b2b0389b.html","hash":"5c134f5fa971ebe5349f6d7011896a1f09217b7e","modified":1727879796699},{"_id":"public/posts/36f328db.html","hash":"c95eacd1f2634c03bfe98529b57361e11188d6ae","modified":1727879796699},{"_id":"public/posts/39223cc.html","hash":"687367de8b6f5628e169f09856356223ecb4321e","modified":1727879796699},{"_id":"public/posts/e4f344ea.html","hash":"97ae5339e09d33843275d0c4f522ea5425d20800","modified":1727879796699},{"_id":"public/posts/2f22026c.html","hash":"27dbb186c041c8f39f300fa34382c2609bda2ad8","modified":1727879796699},{"_id":"public/posts/3cb24475.html","hash":"f54185ee568633a181c3925d24485c72cbcec9af","modified":1727879796699},{"_id":"public/posts/5f967442.html","hash":"11078f9f428f3c3c3b217cecd1581608c673e018","modified":1727879796699},{"_id":"public/posts/e23f9c5e.html","hash":"b7e43ac36d4b69396e8dd77f0e4881da90672dbe","modified":1727879796699},{"_id":"public/posts/c1c7733e.html","hash":"3c7e46b12b9ff725354adefac1329982d9c78caa","modified":1727879796699},{"_id":"public/posts/e39e2a4e.html","hash":"d887458ea097fc703f0eecfd75727c71ab06a847","modified":1727879796699},{"_id":"public/posts/c386cf1b.html","hash":"e453989e6750d1429991175483c0026a59502fb4","modified":1727879796699},{"_id":"public/posts/c6fb831a.html","hash":"1d2bfdcc88fcd5b712393799c3f21aec02c76a95","modified":1727879796699},{"_id":"public/posts/1eb58338.html","hash":"c4fb93184786957d7361ef4f7def5078af8424c7","modified":1727879796699},{"_id":"public/archives/index.html","hash":"43669b5b480110332f64162c54d7eab86ae1cabd","modified":1727879796699},{"_id":"public/archives/page/2/index.html","hash":"1023f8ca8868308a8a0890ec3536498f6660a924","modified":1727879796699},{"_id":"public/archives/2022/index.html","hash":"d56b0cd03dbe6849a25a524bdd35891f97ebc24d","modified":1727879796699},{"_id":"public/archives/2022/06/index.html","hash":"cc895eefb22e0fbafbfb742392b0ee05da1fbb64","modified":1727879796699},{"_id":"public/archives/2022/12/index.html","hash":"b62c27ef8227038f15ca84459a40ee5d8594972c","modified":1727879796699},{"_id":"public/archives/2022/09/index.html","hash":"45e07686f1b7d4f0481b464d563d4c240b67df36","modified":1727879796699},{"_id":"public/archives/2022/07/index.html","hash":"e0272d01d2a265a670fc191b4165207ca67ba7a6","modified":1727879796699},{"_id":"public/archives/2023/index.html","hash":"fc219ab1576aae97e70d5392c7ba110994d5ee68","modified":1727879796699},{"_id":"public/archives/2024/index.html","hash":"64c5f9c3e111ccfaeaed39ca12280823c58330a1","modified":1727879796699},{"_id":"public/archives/2023/05/index.html","hash":"6b8c7a485623ca9945aa9d642b17e242b421ce62","modified":1727879796699},{"_id":"public/archives/2024/09/index.html","hash":"c04721e783c12487b83c8fdd1f3ec09df63ad7c7","modified":1727879796699},{"_id":"public/index.html","hash":"22d298d13bb8a6ee657494785f677bd26e9f3fae","modified":1727879796699},{"_id":"public/page/2/index.html","hash":"f12eef732739664a2080d106d7ceda455b7033dd","modified":1727879796699},{"_id":"public/tags/6/index.html","hash":"70988bc0468b9dafaa46b0b101f942f50b91083c","modified":1727879796699},{"_id":"public/tags/2/index.html","hash":"a44b58d49e9fa08d0d991d4e819bf0a324021d07","modified":1727879796699},{"_id":"public/tags/4/index.html","hash":"b8ae1a0bd86b0807ca5e2bb1744d0123b437bffc","modified":1727879796699},{"_id":"public/tags/7/index.html","hash":"a94a4842bb01db3ff9b105694787460b03aabb17","modified":1727879796699},{"_id":"public/tags/5/index.html","hash":"bf48581d90a9b93f928d327774c469f3c810751a","modified":1727879796699},{"_id":"public/tags/3/index.html","hash":"37d2d1dd3c036316ac9e6f5355b8f2ec367eae14","modified":1727879796699},{"_id":"public/tags/1/index.html","hash":"4ee03a33a7ef1ae1219c21163ec85dd2b4450342","modified":1727879796699},{"_id":"public/images/alipay.png","hash":"cd74eb519890736867b40d40dfdca7c404379028","modified":1727879796699},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1727879796699},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1727879796699},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1727879796699},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1727879796699},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1727879796699},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1727879796699},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1727879796699},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1727879796699},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1727879796699},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1727879796699},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1727879796699},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1727879796699},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1727879796699},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1727879796699},{"_id":"public/posts/e39e2a4e/名片管理系统效果图1.jpg","hash":"429e9597424259d8e33637ca0bebb1d7577e23d1","modified":1727879796699},{"_id":"public/posts/e39e2a4e/名片管理系统效果图2.jpg","hash":"aef6af33f7cdc00e76bd8a46da950c4771096ccf","modified":1727879796699},{"_id":"public/posts/e39e2a4e/名片管理系统效果图3.jpg","hash":"7a6cf265ff31c54bef67df688dd01176a5591403","modified":1727879796699},{"_id":"public/posts/e39e2a4e/飞机大战.jpg","hash":"fbc57f7c126b0deb189c870bd7fac7fad8faa5d4","modified":1727879796699},{"_id":"public/css/main.css","hash":"521c0a8f8647cb80974deb6afd3b6e190e0fefe8","modified":1727879796699},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1727879796699},{"_id":"public/images/wechatpay.png","hash":"62d90c27fb1f40eb324424113b501f7ecfd6e27e","modified":1727879796699},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1727879796699},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1727879796699},{"_id":"public/posts/e4f344ea/pickshell运行终端截图.png","hash":"c9df75a75a2434fab38c5df2cdfbeb63057880cc","modified":1727879796699},{"_id":"public/posts/e4f344ea/医嘱详细信息录入.png","hash":"48934b52b94686669ea17dd06080ee0aca99e714","modified":1727879796699},{"_id":"public/posts/e4f344ea/检查类医嘱运行终端截图.png","hash":"af27c0f4291c5f1370ff17d1d60c5b938b7752f7","modified":1727879796699},{"_id":"public/posts/e4f344ea/检验类医嘱运行终端截图.png","hash":"499acdebaf2c2f254a86b9c4252c02c661193d79","modified":1727879796699},{"_id":"public/posts/c386cf1b/sogou.png","hash":"81489ae958e85b6249d5906eea0b24285cea48da","modified":1727879796699},{"_id":"public/posts/c386cf1b/地址查询.png","hash":"c8bea37df9f9ba331fa93cc5940a9b5f3b9f7357","modified":1727879796699},{"_id":"public/posts/c1c7733e/1.png","hash":"c0662cb30fb759e61b578135341bd7d4f63d9654","modified":1727879796699},{"_id":"public/posts/c386cf1b/翻译.png","hash":"f1633014f8c2b7339dd04decd0cdeaa07aab5f7f","modified":1727879796699},{"_id":"public/posts/c1c7733e/10.png","hash":"081c5a767309c81de62a5444276a8e2f862f3777","modified":1727879796699},{"_id":"public/posts/c1c7733e/11.png","hash":"4a7bcc37d78482e0694c3996a78f8ae3f319e6c8","modified":1727879796699},{"_id":"public/posts/c1c7733e/12.png","hash":"b589db22cb09abbae259e20b76794d7142aa585d","modified":1727879796699},{"_id":"public/posts/c1c7733e/15.png","hash":"bb0aa32bf4ffb2b11e3e641ef76883887d358f0b","modified":1727879796699},{"_id":"public/posts/c1c7733e/13.png","hash":"7cfd4fb8f53e07b4d2c3b6ff0b7cdf9684d80337","modified":1727879796699},{"_id":"public/posts/c1c7733e/14.png","hash":"145eba0e221362fc5f81f94a4c52b0c3c4a037fd","modified":1727879796699},{"_id":"public/posts/c1c7733e/17.png","hash":"dcee4a1dbc021b269e421f6656e8ffbe9f6e6bc9","modified":1727879796699},{"_id":"public/posts/c1c7733e/16.png","hash":"940c8ea2207d1a39f84019204b9d12759789724b","modified":1727879796699},{"_id":"public/posts/c1c7733e/2.png","hash":"b0691562f2745097302f8a011d00364136b5dd83","modified":1727879796699},{"_id":"public/posts/c1c7733e/4.png","hash":"59d9ecd4c928addfd0b90fa7730d9d6888e3df91","modified":1727879796699},{"_id":"public/posts/c1c7733e/3.png","hash":"ce0370f3ca7e26a4b31cb9002727bdf32aee4175","modified":1727879796699},{"_id":"public/posts/c1c7733e/6.png","hash":"7481e4a66899d72bd68c8f6c7ec4376793549033","modified":1727879796699},{"_id":"public/posts/c1c7733e/5.png","hash":"ceee892b83b430b121d5331a4ee155f7efff5d66","modified":1727879796699},{"_id":"public/posts/c1c7733e/7.png","hash":"cbdf1e94c327d2286c9f31242aa552d57e225e1d","modified":1727879796699},{"_id":"public/posts/c1c7733e/8.png","hash":"2679c796a328d87114c0142b5fbde25d1e90e7d2","modified":1727879796699},{"_id":"public/posts/c1c7733e/9.png","hash":"ef64d04e1d4c3b0b3c67c756c0ed66725eed1867","modified":1727879796699},{"_id":"public/posts/c1c7733e/bit2.png","hash":"a9975f51929da32b9a62f5886228db6ee09aef86","modified":1727879796699},{"_id":"public/posts/c1c7733e/bit1.png","hash":"6bea21d160c3a9d0e40f95e4cd5ef9ee3f982123","modified":1727879796699},{"_id":"public/posts/c1c7733e/bit3.png","hash":"e01e5ed978fb00b10058f7d9cbec47fa9bbdb10c","modified":1727879796699},{"_id":"public/posts/3cb24475/flags设置.png","hash":"d3a9342e66778a46df898916f5143743b9db1ee5","modified":1727879796699},{"_id":"public/posts/2f22026c/1.png","hash":"998624672b26810e4d18d1fa60b3612794e94e73","modified":1727879796699},{"_id":"public/live2dw/assets/exp/f00.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1727879796699},{"_id":"public/posts/2f22026c/2.png","hash":"a525b92ad64ad48256219736f1a1dc1c0f61f976","modified":1727879796699},{"_id":"public/live2dw/assets/mtn/idle.mtn","hash":"f6b879d9f1d096509a7edbc971b8fdd9697932e9","modified":1727879796699},{"_id":"public/live2dw/assets/z16.model.json","hash":"e69f3d2ecc9bf51b3972ad9df8f6aaa31956910c","modified":1727879796699},{"_id":"public/live2dw/assets/z16.physics.json","hash":"67f13f60030d7e4c7f824c001ab5254ce4b9bafd","modified":1727879796699},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1727879796699},{"_id":"public/live2dw/assets/moc/z16.256/texture_00.png","hash":"19f22619c246067d519aa1e6e477497cc4342414","modified":1727879796699},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1727879796699},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1727879796699},{"_id":"public/js/love.js","hash":"8eaeb7c52403c1f34c7beff33dfc2fb13e5bbdf4","modified":1727879796699},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1727879796699},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1727879796699},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1727879796699},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1727879796699},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1727879796699},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1727879796699},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1727879796699},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1727879796699},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1727879796699},{"_id":"public/posts/e4f344ea/Outpatient_doctor_station.png","hash":"0c2b0adae787514ad2093c361953e79bcf2e9819","modified":1727879796699},{"_id":"public/posts/e4f344ea/Outpatient_registration.png","hash":"31f05c0047ad6f4851fb94c2c2bb2bc0b553c704","modified":1727879796699},{"_id":"public/posts/e4f344ea/pickshell输入医嘱.png","hash":"1b482f270cba4e452c0d2e01c8ac43b9dd005457","modified":1727879796699},{"_id":"public/posts/e4f344ea/pickshell运行系统截图.png","hash":"8c3bb72096631821b28d6aba784e0befb41da906","modified":1727879796699},{"_id":"public/live2dw/assets/moc/z16.512/texture_00.png","hash":"251b9f944fb1575c01a62b8a9d7522fe76954b3b","modified":1727879796699},{"_id":"public/posts/e4f344ea/医嘱保存成功校验.png","hash":"8ec1997bf5fd8ce319c28f17d7219cdb7e9fdc96","modified":1727879796699},{"_id":"public/posts/e4f344ea/医嘱保存重复校验.png","hash":"12e60fb6b86285191209532f2c9706253bc1e081","modified":1727879796699},{"_id":"public/posts/c386cf1b/wuhan.png","hash":"7cb7e0b2f9e14dabf04e3f27fd9298fe7ac43778","modified":1727879796699},{"_id":"public/live2dw/assets/moc/z16.moc","hash":"6b0241e80e94664d694b43ad05333960de2550c1","modified":1727879796699},{"_id":"public/css/hbe.style.css","hash":"72959894400fd5c350106cb558c39fa51f722cbd","modified":1727879796699},{"_id":"public/lib/hbe.js","hash":"fb05fcd82bb28d3b2887d388cabea7f9b1a318eb","modified":1727879796699},{"_id":"public/posts/e4f344ea/检查类医嘱开立方法.png","hash":"ed9d59f7419a44e3bcecdefb3ccb9aa6857caee4","modified":1727879796699},{"_id":"public/posts/e4f344ea/检查类医嘱运行系统截图.png","hash":"6027553bc7965cf56c1138b8303c5aa4670353bc","modified":1727879796699},{"_id":"public/posts/e4f344ea/检验类医嘱开立方法.png","hash":"f2279ea3b560958e9da6145a3934ed85b4ff103f","modified":1727879796699},{"_id":"public/posts/e4f344ea/检验类医嘱运行系统截图.png","hash":"92c82ac4c4cba63723d4fc76b073c2d66e3638d5","modified":1727879796699},{"_id":"public/posts/c1c7733e/GMM.png","hash":"3755d74e8112ede50836a5eee54bc60edb94fd16","modified":1727879796699},{"_id":"public/live2dw/assets/moc/z16.1024/texture_00.png","hash":"c4f7c067d7d37601490554438ab801fce1feb92d","modified":1727879796699},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1727879796699},{"_id":"public/posts/e4f344ea/医嘱重复弹窗.png","hash":"6726157cff8cd130ddad566c3b3ce3e06bba4e0a","modified":1727879796699},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1727879796699},{"_id":"public/posts/e4f344ea/医生看诊页面.png","hash":"545c5af294e387b80766e33a33b48d2a3a9fa1e1","modified":1727879796699},{"_id":"public/posts/e39e2a4e/迭代器实例.jpg","hash":"e3f589f4ad86294617a783db7767c010385c3ccd","modified":1727879796699},{"_id":"public/posts/e39e2a4e/迭代器和生成器.jpg","hash":"0f245d581b328b45618a81cadb2e926d92485a8d","modified":1727879796699},{"_id":"public/posts/c1c7733e/航空.png","hash":"947181215686abb2de23523fba0aa3e95e4dfff8","modified":1727879796699},{"_id":"public/posts/e4f344ea/登录子页面.png","hash":"053c07e322c3363ac16ecab3593bd3d624635956","modified":1727879796699},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1727879796699},{"_id":"public/posts/e4f344ea/登录主页面.png","hash":"109eff163bd4184bb51947201611b1d1cee00193","modified":1727879796699}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hadoop-HDFS","abbrlink":"39223cc","date":"2024-09-26T11:42:30.000Z","_content":"\n**这是一个测试脚本！**\n","source":"_posts/Hadoop-HDFS.md","raw":"---\ntitle: Hadoop-HDFS\nabbrlink: 39223cc\ndate: 2024-09-26 19:42:30\ntags:\n---\n\n**这是一个测试脚本！**\n","slug":"Hadoop-HDFS","published":1,"updated":"2024-09-29T06:16:08.946Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm1rz0oen000018ql1risbu9z","content":"<p><strong>这是一个测试脚本！</strong></p>\n","site":{"data":{}},"length":9,"excerpt":"","more":"<p><strong>这是一个测试脚本！</strong></p>\n"},{"title":"Hadoop-MapReduce","abbrlink":"b2b0389b","date":"2024-09-26T11:42:44.000Z","_content":"","source":"_posts/Hadoop-MapReduce.md","raw":"---\ntitle: Hadoop-MapReduce\nabbrlink: b2b0389b\ndate: 2024-09-26 19:42:44\ntags:\n---\n","slug":"Hadoop-MapReduce","published":1,"updated":"2024-09-26T11:42:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm1rz0oer000118ql3oca6oj6","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"Hadoop-Yarn","abbrlink":"36f328db","date":"2024-09-26T11:42:37.000Z","_content":"","source":"_posts/Hadoop-Yarn.md","raw":"---\ntitle: Hadoop-Yarn\nabbrlink: 36f328db\ndate: 2024-09-26 19:42:37\ntags:\n---\n","slug":"Hadoop-Yarn","published":1,"updated":"2024-09-26T11:42:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm1rz0oes000218qlfnu72gtq","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"Hive优化","abbrlink":"2cf3653f","date":"2024-09-29T12:25:05.000Z","_content":"\nHive 优化 | MapReduce 优化 | 数据倾斜\n\n<!--more-->\n\n# Hive 优化\n\n## ① Fetch 抓取\n\nFetch抓取 是指 Hive 中某些情况的查询可以不走 MR 计算\n\n在 hive-default.xml.template 文件中 hive.fetch.task.conversion 默认是more，老版本默认是minimal\n\n该属性[none, minimal, more]修改为more后，在全局查找、字段查找、limit查找等是不会走MR。\n\n```xml\n<property>\n    <name>hive.fetch.task.conversion</name>\n    <value>more</value>\n</property>\n```\n\n## ② 本地模式\n\n大多数的 Hadoop Job 是需要 Hadoop 提供的完整的可扩展性来处理大数据集的。不过，有时 Hive 的输入数据量较小时，启用集群资源的耗时可能比任务执行本身要更久。故可以采用 Hive本地模式在单台机器上处理任务。对于小数据集，执行时间可以明显缩短。\n\n用户可以设置 MR本地模式 参数，local MR 的最大输入数据量，local MR 的最大输入文件个数等参数进行配置\n\n```SQL\n-- MR本地模式\nset hive.exec.mode.local.auto=true;\n\n-- 设置local MR的最大输入数据量，当小于此值时采用local MR，默认134217728，128M\nset hive.exec.mode.local.auto.inputbytes.max=500000000;\n\n-- 设置local MR的最大输入文件个数，当小于此值时采用local MR，默认为4\nset hive.exec.mode.local.auto.input.files.max=10;\n```\n\n```sql\n-- 项目实测：\n-- 开启本地模式\nhive > set hive.exec.mode.local.auto=true;\nhive > select * from insurance_ods.customers; \nTime taken: 3.597 seconds, Fetched: 1054 row(s)\n-- 关闭本地模式\nhive > set hive.exec.mode.local.auto=false;\nhive > select * from insurance_ods.customers; \nTime taken: 34.03 seconds, Fetched: 1054 row(s)\n```\n\n## ③ 表的优化\n\n### Ⅰ：小表 Join 大表\n\n将key相对分散、并且数据量较小的表放在join的左边，这样可以有效减少内存溢出错误发生的几率；再进一步，可以使用Group让小的维度表（1000条以下）先进内存。在Map端完成Reduce。\n\n```SQL\n-- 项目实测:\n-- 关闭map join参数\nset hive.auto.convert.join=false;\n\n-- 小表 Join 大表\ninsert overwrite table xxxx\nselect xxx from xxxx smalltable\nleft join xxxx bigtable\non smalltable.id = bigtable.id;\n-- Time taken: 27.43 seconds;\n\n-- 大表 Join 小表\ninsert overwrite table xxxx\nselect xxx from xxxx bigtable\nleft join xxxx smalltable\non bigtable.id = smalltable.id\n-- Time taken: 29.18 seconds;\n```\n\n### Ⅱ：大表 Join 大表\n\n#### 1 ）空 key 过滤\n\n有些大表某些key对应的数据太多，相同key对应的数据会发给相同的Reduce处理，从而造成少数Reduce效率过慢，数据倾斜，内存不足等问题。可以根据业务数据，分析这些key是否为异常数据，在SQL表关联时将这部分key数据过滤掉。\n\n```sql\n-- 项目实测:\n-- 测试不过滤空id\ninsert overwrite table xxxx\nselect xxxx from t1 left join t2 on t1.id = t2.id;\n-- Time taken: 42.038 seconds;\n\n-- 测试过滤空id\ninsert overwrite table xxxx\nselect xxxx from (select * from t1 where id is not null) t1 left join t2 on t1.id = t2.id;\n-- Time taken: 31.725 seconds;\n```\n\n#### 2）空 key 转换\n\n空key过滤用于处理的是key过多且此类数据为无用异常数据的情况，但如果业务数据中存在key过多但均是有效数据的，不得过滤掉此类数据，可以选择为其赋上一个随机的值（加盐），让同key数据随机均分到不同的Reduce上。\n\n```sql\n-- 项目实测:\n-- 设置5个reduce个数\nset mapreduce.job.reduces=5;\n\n-- 不随机分布null值\ninsert overwrite table xxxx\nselect xxxx from t1 \n\tleft join t2 on t1.id = t2.id;\n\n-- 随机分布null值\ninsert overwrite table xxxx\nselect xxxx from t1 \n\tleft join t2 on (case when t1.id is null then concat('hive', rand()) else t1.id) = t2.id;\n```\n\n### Ⅲ：Map Join\n\n笼统的说，Hive中的Join可分为Common Join（Reduce阶段完成join）和Map Join（Map阶段完成join）。\n\n如果不指定MapJoin或者不符合MapJoin的条件，那么Hive解析器会将Join操作转换成Common Join，即在Reduce阶段完成join，容易发生数据倾斜。Common Join整个过程包含Map、Shuffle、Reduce阶段。\n\n可以用MapJoin把小表全部加载到内存在Map端进行Join，避免Reducer处理。\n\n```sql\n-- 开启Map Join参数\nset hive.auto.convert.join=true;\n\n-- 设置大表小表的阈值(默认25M以下是小表)\nset hive.mapjoin.smalltable.filesize=25000000;\n```\n\n### Ⅳ：Group By\n\n#### 1) Map端提前聚合\n\n默认情况下，Map阶段相同key的数据分发给一个Reduce，当一个key数据过大时就倾斜了。而并不是所有的聚合操作都需要在Reduce端完成，很多聚合操作可以先在Map端进行部分聚合，最后在Reduce端得出最终结果。\n\n```sql\n-- 开启Map端提前聚合参数(默认开启)\nset hive.map.aggr=true;\n\n-- 在Map端进行聚合操作的条目数\nset hive.groupby.mapaggr.checkinterval=100000;\n```\n\n#### 2) 负载均衡\n\n开启负载均衡参数后，任务执行会有两个MR Job。\n\n第一个MR中，Map的输出结果会随机分布到Reduce中，每个Reduce做部分聚合操作并输出结果。这样处理的结果是相同的Group By Key有可能被分发到不同的Reduce中，从而达到负载均衡的目的。\n\n第二个MR再根据预处理的数据结果按照Group By Key分布到Reduce中，这一过程可以保证相同的Group By Key被分布到同一个Reduce中，最后完成最终的聚合操作。\n\n```sql\n-- 开启负载均衡参数(默认关闭)\nset hive.groupby.skewindata=true;\n```\n\n### Ⅴ：count(distinct) 去重统计\n\ncount(distinct)操作只会调用一个Reduce Task来完成，所以当数据量过大时，其处理的速度、效率则会降低。所以去重统计的场景一般会先使用group by再count来替换。虽然会多用一个Job来完成，但是处理数据量大的场景时，这绝对是值得的。\n\n```sql\n-- 项目实测:\n-- 设置5个reduce\nset mapreduce.job.reduce=5;\n\nselect count(distinct id) from bigtable;\n-- Stage-Stage-1: Map:1 Reduce:1\n-- Time taken:23.607 seconds, Fetched:1 row(s)\n-- Time taken:34.941 seconds, Fetched:1 row(s)\n\nselect count(id) from (select id from bigtable group by id) t1;\n-- Stage-Stage-1: Map:1 Reduce:5\n-- Stage-Stage-2: Map:3 Reduce:1\n-- Time taken:50.795 seconds, Fetched:1 row(s)\n```\n\n### Ⅵ：行列过滤\n\n列处理：在select时，尽可能只拿需要的列，如果有分区字段尽量使用分区过滤，少用select * 。\n\n行处理：表关联时，提前将要关联的表进行过滤，去除掉无用数据，然后再两表关联。\n\n```sql\n-- 例:\nselect t2.* from t1 join t2 on t1.id = t2.id;\n\nselect t2.* from t1 join (select * from t2 where id is not null) on t1.id = t2.id;\n```\n\n### Ⅶ：动态分区调整\n\n关系型数据库中，对分区表insert数据时，数据库会自动根据分区字段的值，将数据插入到相应的分区中，Hive也提供了类似的机制，即动态分区，只不过使用Hive动态分区时需要进行相应的配置。\n\n```sql\n-- 开启动态分区参数(默认开启)\nset hive.exec.dynamic.partition=true;\n\n-- 设置为非严格模式(strict | nonstrict)\n-- (动态分区的模式，默认严格，表示必须指定至少一个分区为静态分区，非严格表示允许所有分区字段都可以使用动态分区)\nset hive.exec.dynamic.partition.mode=nonstrict;\n\n-- 在所有执行MR的节点上，最大一共可以创建多少个动态分区\nset hive.exec.max.dynamic.partitions=1000;\n\n-- 在每个执行MR的节点上，最大可以创建多少个动态分区\n-- (该参数需要结合实际的数据来设定，比如：源数据包含一年的数据，date分区字段有365个值，该参数则应设置大于365，如果使用默认值100，则会报错)\nset hive.exec.max.dynamic.partitions.pernode=100;\n\n-- 整个MR Job中，最大可以创建多少个HDFS文件\nset hive.exec.max.created.files=100000;\n\n-- 当有空分区生成时，是否抛出异常。一般不需要设置。\nset hive.error.on.empty.partition=false;\n```\n\n```sql\n-- 例:\nset hive.exec.dynamic.partition=true;\nset hive.exec.dynamic.partition.mode=nonstrict;\nset hive.exec.max.dynamic.partitions=1000;\nset hive.exec.max.dynamic.partitions.pernode=100;\nset hive.exec.max.created.files=100000;\nset hive.error.on.empty.partition=false;\n\ninsert overwrite table xxxx partition(date)\nselect xxxx from xxxx;\n\n-- 查看分区表的分区情况\nshow partitions table_name;\n```\n\n### Ⅷ：分桶\n\n分桶应用场景不多，主要可以用在抽样检测上。比较好理解，只做简单说明。\n\n分桶字段必须为表中已存在字段，在建表时指明分桶字段 clustered by xxxx into N buckets，对每条数据的该分桶字段Hash取模，结果值相同的置于同一桶中。建表时分为几桶，HDFS上即有几个文件，可以打散key以缓解数据倾斜问题。\n\n```sql\ncreate table xxxx\n...\nclustered by xxxx into N buckets;\n```\n\n### Ⅸ：分区\n\n分区表的应用场景就显而易见了，大多都是以时间字段作为分区字段。分区字段是一个全新的不同于表中的字段。分区的作用就是避免全表扫描，查表时可以到指定分区查询，避免了全表扫描所造成的一定的效率问题。\n\n```sql\ncreate table xxxx\n...\npartition by (dt string);\n\n-- 查看分区表的分区情况\nshow partitions table_name;\n```\n\n## ④ 数据倾斜\n\n### Ⅰ：Map数\n\nMap个数的决定因素主要有：输入文件的总个数、输入文件的大小、集群设置的文件块大小等\n\n通常来讲，Map端输入文件会被切分为多个Block块(默认128M，可参数控制)，有多少个Block块走MR时就对应产生多少个Map Task。\n\n两个结论：\n\n① Map个数不是越多越好\n\n任务小文件很多，切块时会导致Block块数量极多，对应的Map个数也会变多，一个Map任务的启动和初始化时间甚至远大于处理任务的时间，这就会造成资源的浪费，而且同时可执行的Map数量也是受限的。\n\n② 不是保证 每个Map都处理接近128M的文件块就好了\n\n127M的文件理论上是用一个Map去完成，但这个文件只有一两个小字段，却有几千万条数据，如果Map处理的逻辑比较复杂，用一个Map去做就更耗时。\n\n针对这两个结论，我们需要结合业务场景增加或减少Map个数\n\n### Ⅱ：小文件合并\n\nMap执行前合并小文件，以减少Map数：CombineHiveInputFormat具有对小文件进行合并的功能，从而提高任务的执行效率\n\n```sql\nset hive.input.format = org.apache.hadoop.hive.ql.io.CombineHiveInputFormat;\n```\n\n### Ⅲ：复杂文件增加Map数\n\n当输入文件很大，任务计算逻辑复杂，Map执行就会非常慢，此时可以考虑增加Map个数，从而提高执行效率。\n\n增加Map的方法：\n\n根据ComputeSliteSize(Math.max(minSize, Math.min(maxSize, blocksize))) = blocksize = 128M的公式，调整maxsize的最大值，即减小maxsize设置的值使其小于blocksize的128M，就可以增加Map的个数。\n\n``` sql\n-- 例:\nselect count(1) from xxxx;\n-- Hadoop jon information for Stage-1: number of mapper: 1; number of reducers: 1.\n\n-- 调小最大切片值为100M\nset mapreduce.input.fileinputformat.split.maxsize=100;\nselect count(1) from xxxx;\n-- Hadoop jon information for Stage-1: number of mapper: 6; number of reducers: 1.\n```\n\n### Ⅳ：Reduce数\n\n方法一：\n\n(1)\t每个Reduce处理的数据量默认是256M\n\nhive.exec.reducers.bytes.per.reducer=256000000;\n\n(2)\t每个任务最大的reduce数，默认为1009\n\nhive.exec.reducers.max=1009\n\n(3)\t计算reducer的公式\n\nN = min( 参数2， 文件总输入数据量 / 参数1)\t\t参数1、2对应上面的(1)、(2)\n\n方法二：\n\n在hadoop的mapred-default.xml文件中修改\n\n设置每个Job的Reduce个数：set mapreduce.job.reduces=15;\n\n注：reduce个数也不是越多越好，它的启动与初始化需要时间和资源。有多少个Reduce就会有多少个输出文件，也会导致小文件过多的问题。\n\n**处理大数据量利用合适的Reduce数，使单个Reduce任务处理数据量大小要合适。**\n\n后续待补充从资料第57页开始\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Hive优化.md","raw":"---\ntitle: Hive优化\nabbrlink: 2cf3653f\ndate: 2024-09-29 20:25:05\ntags:\n---\n\nHive 优化 | MapReduce 优化 | 数据倾斜\n\n<!--more-->\n\n# Hive 优化\n\n## ① Fetch 抓取\n\nFetch抓取 是指 Hive 中某些情况的查询可以不走 MR 计算\n\n在 hive-default.xml.template 文件中 hive.fetch.task.conversion 默认是more，老版本默认是minimal\n\n该属性[none, minimal, more]修改为more后，在全局查找、字段查找、limit查找等是不会走MR。\n\n```xml\n<property>\n    <name>hive.fetch.task.conversion</name>\n    <value>more</value>\n</property>\n```\n\n## ② 本地模式\n\n大多数的 Hadoop Job 是需要 Hadoop 提供的完整的可扩展性来处理大数据集的。不过，有时 Hive 的输入数据量较小时，启用集群资源的耗时可能比任务执行本身要更久。故可以采用 Hive本地模式在单台机器上处理任务。对于小数据集，执行时间可以明显缩短。\n\n用户可以设置 MR本地模式 参数，local MR 的最大输入数据量，local MR 的最大输入文件个数等参数进行配置\n\n```SQL\n-- MR本地模式\nset hive.exec.mode.local.auto=true;\n\n-- 设置local MR的最大输入数据量，当小于此值时采用local MR，默认134217728，128M\nset hive.exec.mode.local.auto.inputbytes.max=500000000;\n\n-- 设置local MR的最大输入文件个数，当小于此值时采用local MR，默认为4\nset hive.exec.mode.local.auto.input.files.max=10;\n```\n\n```sql\n-- 项目实测：\n-- 开启本地模式\nhive > set hive.exec.mode.local.auto=true;\nhive > select * from insurance_ods.customers; \nTime taken: 3.597 seconds, Fetched: 1054 row(s)\n-- 关闭本地模式\nhive > set hive.exec.mode.local.auto=false;\nhive > select * from insurance_ods.customers; \nTime taken: 34.03 seconds, Fetched: 1054 row(s)\n```\n\n## ③ 表的优化\n\n### Ⅰ：小表 Join 大表\n\n将key相对分散、并且数据量较小的表放在join的左边，这样可以有效减少内存溢出错误发生的几率；再进一步，可以使用Group让小的维度表（1000条以下）先进内存。在Map端完成Reduce。\n\n```SQL\n-- 项目实测:\n-- 关闭map join参数\nset hive.auto.convert.join=false;\n\n-- 小表 Join 大表\ninsert overwrite table xxxx\nselect xxx from xxxx smalltable\nleft join xxxx bigtable\non smalltable.id = bigtable.id;\n-- Time taken: 27.43 seconds;\n\n-- 大表 Join 小表\ninsert overwrite table xxxx\nselect xxx from xxxx bigtable\nleft join xxxx smalltable\non bigtable.id = smalltable.id\n-- Time taken: 29.18 seconds;\n```\n\n### Ⅱ：大表 Join 大表\n\n#### 1 ）空 key 过滤\n\n有些大表某些key对应的数据太多，相同key对应的数据会发给相同的Reduce处理，从而造成少数Reduce效率过慢，数据倾斜，内存不足等问题。可以根据业务数据，分析这些key是否为异常数据，在SQL表关联时将这部分key数据过滤掉。\n\n```sql\n-- 项目实测:\n-- 测试不过滤空id\ninsert overwrite table xxxx\nselect xxxx from t1 left join t2 on t1.id = t2.id;\n-- Time taken: 42.038 seconds;\n\n-- 测试过滤空id\ninsert overwrite table xxxx\nselect xxxx from (select * from t1 where id is not null) t1 left join t2 on t1.id = t2.id;\n-- Time taken: 31.725 seconds;\n```\n\n#### 2）空 key 转换\n\n空key过滤用于处理的是key过多且此类数据为无用异常数据的情况，但如果业务数据中存在key过多但均是有效数据的，不得过滤掉此类数据，可以选择为其赋上一个随机的值（加盐），让同key数据随机均分到不同的Reduce上。\n\n```sql\n-- 项目实测:\n-- 设置5个reduce个数\nset mapreduce.job.reduces=5;\n\n-- 不随机分布null值\ninsert overwrite table xxxx\nselect xxxx from t1 \n\tleft join t2 on t1.id = t2.id;\n\n-- 随机分布null值\ninsert overwrite table xxxx\nselect xxxx from t1 \n\tleft join t2 on (case when t1.id is null then concat('hive', rand()) else t1.id) = t2.id;\n```\n\n### Ⅲ：Map Join\n\n笼统的说，Hive中的Join可分为Common Join（Reduce阶段完成join）和Map Join（Map阶段完成join）。\n\n如果不指定MapJoin或者不符合MapJoin的条件，那么Hive解析器会将Join操作转换成Common Join，即在Reduce阶段完成join，容易发生数据倾斜。Common Join整个过程包含Map、Shuffle、Reduce阶段。\n\n可以用MapJoin把小表全部加载到内存在Map端进行Join，避免Reducer处理。\n\n```sql\n-- 开启Map Join参数\nset hive.auto.convert.join=true;\n\n-- 设置大表小表的阈值(默认25M以下是小表)\nset hive.mapjoin.smalltable.filesize=25000000;\n```\n\n### Ⅳ：Group By\n\n#### 1) Map端提前聚合\n\n默认情况下，Map阶段相同key的数据分发给一个Reduce，当一个key数据过大时就倾斜了。而并不是所有的聚合操作都需要在Reduce端完成，很多聚合操作可以先在Map端进行部分聚合，最后在Reduce端得出最终结果。\n\n```sql\n-- 开启Map端提前聚合参数(默认开启)\nset hive.map.aggr=true;\n\n-- 在Map端进行聚合操作的条目数\nset hive.groupby.mapaggr.checkinterval=100000;\n```\n\n#### 2) 负载均衡\n\n开启负载均衡参数后，任务执行会有两个MR Job。\n\n第一个MR中，Map的输出结果会随机分布到Reduce中，每个Reduce做部分聚合操作并输出结果。这样处理的结果是相同的Group By Key有可能被分发到不同的Reduce中，从而达到负载均衡的目的。\n\n第二个MR再根据预处理的数据结果按照Group By Key分布到Reduce中，这一过程可以保证相同的Group By Key被分布到同一个Reduce中，最后完成最终的聚合操作。\n\n```sql\n-- 开启负载均衡参数(默认关闭)\nset hive.groupby.skewindata=true;\n```\n\n### Ⅴ：count(distinct) 去重统计\n\ncount(distinct)操作只会调用一个Reduce Task来完成，所以当数据量过大时，其处理的速度、效率则会降低。所以去重统计的场景一般会先使用group by再count来替换。虽然会多用一个Job来完成，但是处理数据量大的场景时，这绝对是值得的。\n\n```sql\n-- 项目实测:\n-- 设置5个reduce\nset mapreduce.job.reduce=5;\n\nselect count(distinct id) from bigtable;\n-- Stage-Stage-1: Map:1 Reduce:1\n-- Time taken:23.607 seconds, Fetched:1 row(s)\n-- Time taken:34.941 seconds, Fetched:1 row(s)\n\nselect count(id) from (select id from bigtable group by id) t1;\n-- Stage-Stage-1: Map:1 Reduce:5\n-- Stage-Stage-2: Map:3 Reduce:1\n-- Time taken:50.795 seconds, Fetched:1 row(s)\n```\n\n### Ⅵ：行列过滤\n\n列处理：在select时，尽可能只拿需要的列，如果有分区字段尽量使用分区过滤，少用select * 。\n\n行处理：表关联时，提前将要关联的表进行过滤，去除掉无用数据，然后再两表关联。\n\n```sql\n-- 例:\nselect t2.* from t1 join t2 on t1.id = t2.id;\n\nselect t2.* from t1 join (select * from t2 where id is not null) on t1.id = t2.id;\n```\n\n### Ⅶ：动态分区调整\n\n关系型数据库中，对分区表insert数据时，数据库会自动根据分区字段的值，将数据插入到相应的分区中，Hive也提供了类似的机制，即动态分区，只不过使用Hive动态分区时需要进行相应的配置。\n\n```sql\n-- 开启动态分区参数(默认开启)\nset hive.exec.dynamic.partition=true;\n\n-- 设置为非严格模式(strict | nonstrict)\n-- (动态分区的模式，默认严格，表示必须指定至少一个分区为静态分区，非严格表示允许所有分区字段都可以使用动态分区)\nset hive.exec.dynamic.partition.mode=nonstrict;\n\n-- 在所有执行MR的节点上，最大一共可以创建多少个动态分区\nset hive.exec.max.dynamic.partitions=1000;\n\n-- 在每个执行MR的节点上，最大可以创建多少个动态分区\n-- (该参数需要结合实际的数据来设定，比如：源数据包含一年的数据，date分区字段有365个值，该参数则应设置大于365，如果使用默认值100，则会报错)\nset hive.exec.max.dynamic.partitions.pernode=100;\n\n-- 整个MR Job中，最大可以创建多少个HDFS文件\nset hive.exec.max.created.files=100000;\n\n-- 当有空分区生成时，是否抛出异常。一般不需要设置。\nset hive.error.on.empty.partition=false;\n```\n\n```sql\n-- 例:\nset hive.exec.dynamic.partition=true;\nset hive.exec.dynamic.partition.mode=nonstrict;\nset hive.exec.max.dynamic.partitions=1000;\nset hive.exec.max.dynamic.partitions.pernode=100;\nset hive.exec.max.created.files=100000;\nset hive.error.on.empty.partition=false;\n\ninsert overwrite table xxxx partition(date)\nselect xxxx from xxxx;\n\n-- 查看分区表的分区情况\nshow partitions table_name;\n```\n\n### Ⅷ：分桶\n\n分桶应用场景不多，主要可以用在抽样检测上。比较好理解，只做简单说明。\n\n分桶字段必须为表中已存在字段，在建表时指明分桶字段 clustered by xxxx into N buckets，对每条数据的该分桶字段Hash取模，结果值相同的置于同一桶中。建表时分为几桶，HDFS上即有几个文件，可以打散key以缓解数据倾斜问题。\n\n```sql\ncreate table xxxx\n...\nclustered by xxxx into N buckets;\n```\n\n### Ⅸ：分区\n\n分区表的应用场景就显而易见了，大多都是以时间字段作为分区字段。分区字段是一个全新的不同于表中的字段。分区的作用就是避免全表扫描，查表时可以到指定分区查询，避免了全表扫描所造成的一定的效率问题。\n\n```sql\ncreate table xxxx\n...\npartition by (dt string);\n\n-- 查看分区表的分区情况\nshow partitions table_name;\n```\n\n## ④ 数据倾斜\n\n### Ⅰ：Map数\n\nMap个数的决定因素主要有：输入文件的总个数、输入文件的大小、集群设置的文件块大小等\n\n通常来讲，Map端输入文件会被切分为多个Block块(默认128M，可参数控制)，有多少个Block块走MR时就对应产生多少个Map Task。\n\n两个结论：\n\n① Map个数不是越多越好\n\n任务小文件很多，切块时会导致Block块数量极多，对应的Map个数也会变多，一个Map任务的启动和初始化时间甚至远大于处理任务的时间，这就会造成资源的浪费，而且同时可执行的Map数量也是受限的。\n\n② 不是保证 每个Map都处理接近128M的文件块就好了\n\n127M的文件理论上是用一个Map去完成，但这个文件只有一两个小字段，却有几千万条数据，如果Map处理的逻辑比较复杂，用一个Map去做就更耗时。\n\n针对这两个结论，我们需要结合业务场景增加或减少Map个数\n\n### Ⅱ：小文件合并\n\nMap执行前合并小文件，以减少Map数：CombineHiveInputFormat具有对小文件进行合并的功能，从而提高任务的执行效率\n\n```sql\nset hive.input.format = org.apache.hadoop.hive.ql.io.CombineHiveInputFormat;\n```\n\n### Ⅲ：复杂文件增加Map数\n\n当输入文件很大，任务计算逻辑复杂，Map执行就会非常慢，此时可以考虑增加Map个数，从而提高执行效率。\n\n增加Map的方法：\n\n根据ComputeSliteSize(Math.max(minSize, Math.min(maxSize, blocksize))) = blocksize = 128M的公式，调整maxsize的最大值，即减小maxsize设置的值使其小于blocksize的128M，就可以增加Map的个数。\n\n``` sql\n-- 例:\nselect count(1) from xxxx;\n-- Hadoop jon information for Stage-1: number of mapper: 1; number of reducers: 1.\n\n-- 调小最大切片值为100M\nset mapreduce.input.fileinputformat.split.maxsize=100;\nselect count(1) from xxxx;\n-- Hadoop jon information for Stage-1: number of mapper: 6; number of reducers: 1.\n```\n\n### Ⅳ：Reduce数\n\n方法一：\n\n(1)\t每个Reduce处理的数据量默认是256M\n\nhive.exec.reducers.bytes.per.reducer=256000000;\n\n(2)\t每个任务最大的reduce数，默认为1009\n\nhive.exec.reducers.max=1009\n\n(3)\t计算reducer的公式\n\nN = min( 参数2， 文件总输入数据量 / 参数1)\t\t参数1、2对应上面的(1)、(2)\n\n方法二：\n\n在hadoop的mapred-default.xml文件中修改\n\n设置每个Job的Reduce个数：set mapreduce.job.reduces=15;\n\n注：reduce个数也不是越多越好，它的启动与初始化需要时间和资源。有多少个Reduce就会有多少个输出文件，也会导致小文件过多的问题。\n\n**处理大数据量利用合适的Reduce数，使单个Reduce任务处理数据量大小要合适。**\n\n后续待补充从资料第57页开始\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Hive优化","published":1,"updated":"2024-10-02T14:36:18.342Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm1rz0oes000318ql3zpodpb4","content":"<p>Hive 优化 | MapReduce 优化 | 数据倾斜</p>\n<span id=\"more\"></span>\n\n<h1 id=\"Hive-优化\"><a href=\"#Hive-优化\" class=\"headerlink\" title=\"Hive 优化\"></a>Hive 优化</h1><h2 id=\"①-Fetch-抓取\"><a href=\"#①-Fetch-抓取\" class=\"headerlink\" title=\"① Fetch 抓取\"></a>① Fetch 抓取</h2><p>Fetch抓取 是指 Hive 中某些情况的查询可以不走 MR 计算</p>\n<p>在 hive-default.xml.template 文件中 hive.fetch.task.conversion 默认是more，老版本默认是minimal</p>\n<p>该属性[none, minimal, more]修改为more后，在全局查找、字段查找、limit查找等是不会走MR。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hive.fetch.task.conversion<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>more<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"②-本地模式\"><a href=\"#②-本地模式\" class=\"headerlink\" title=\"② 本地模式\"></a>② 本地模式</h2><p>大多数的 Hadoop Job 是需要 Hadoop 提供的完整的可扩展性来处理大数据集的。不过，有时 Hive 的输入数据量较小时，启用集群资源的耗时可能比任务执行本身要更久。故可以采用 Hive本地模式在单台机器上处理任务。对于小数据集，执行时间可以明显缩短。</p>\n<p>用户可以设置 MR本地模式 参数，local MR 的最大输入数据量，local MR 的最大输入文件个数等参数进行配置</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- MR本地模式</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.exec.mode.local.auto<span class=\"operator\">=</span><span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 设置local MR的最大输入数据量，当小于此值时采用local MR，默认134217728，128M</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.exec.mode.local.auto.inputbytes.max<span class=\"operator\">=</span><span class=\"number\">500000000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 设置local MR的最大输入文件个数，当小于此值时采用local MR，默认为4</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.exec.mode.local.auto.input.files.max<span class=\"operator\">=</span><span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 项目实测：</span></span><br><span class=\"line\"><span class=\"comment\">-- 开启本地模式</span></span><br><span class=\"line\">hive <span class=\"operator\">&gt;</span> <span class=\"keyword\">set</span> hive.exec.mode.local.auto<span class=\"operator\">=</span><span class=\"literal\">true</span>;</span><br><span class=\"line\">hive <span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> insurance_ods.customers; </span><br><span class=\"line\"><span class=\"type\">Time</span> taken: <span class=\"number\">3.597</span> seconds, Fetched: <span class=\"number\">1054</span> <span class=\"type\">row</span>(s)</span><br><span class=\"line\"><span class=\"comment\">-- 关闭本地模式</span></span><br><span class=\"line\">hive <span class=\"operator\">&gt;</span> <span class=\"keyword\">set</span> hive.exec.mode.local.auto<span class=\"operator\">=</span><span class=\"literal\">false</span>;</span><br><span class=\"line\">hive <span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> insurance_ods.customers; </span><br><span class=\"line\"><span class=\"type\">Time</span> taken: <span class=\"number\">34.03</span> seconds, Fetched: <span class=\"number\">1054</span> <span class=\"type\">row</span>(s)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"③-表的优化\"><a href=\"#③-表的优化\" class=\"headerlink\" title=\"③ 表的优化\"></a>③ 表的优化</h2><h3 id=\"Ⅰ：小表-Join-大表\"><a href=\"#Ⅰ：小表-Join-大表\" class=\"headerlink\" title=\"Ⅰ：小表 Join 大表\"></a>Ⅰ：小表 Join 大表</h3><p>将key相对分散、并且数据量较小的表放在join的左边，这样可以有效减少内存溢出错误发生的几率；再进一步，可以使用Group让小的维度表（1000条以下）先进内存。在Map端完成Reduce。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 项目实测:</span></span><br><span class=\"line\"><span class=\"comment\">-- 关闭map join参数</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.auto.convert.join<span class=\"operator\">=</span><span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 小表 Join 大表</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> overwrite <span class=\"keyword\">table</span> xxxx</span><br><span class=\"line\"><span class=\"keyword\">select</span> xxx <span class=\"keyword\">from</span> xxxx smalltable</span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">join</span> xxxx bigtable</span><br><span class=\"line\"><span class=\"keyword\">on</span> smalltable.id <span class=\"operator\">=</span> bigtable.id;</span><br><span class=\"line\"><span class=\"comment\">-- Time taken: 27.43 seconds;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 大表 Join 小表</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> overwrite <span class=\"keyword\">table</span> xxxx</span><br><span class=\"line\"><span class=\"keyword\">select</span> xxx <span class=\"keyword\">from</span> xxxx bigtable</span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">join</span> xxxx smalltable</span><br><span class=\"line\"><span class=\"keyword\">on</span> bigtable.id <span class=\"operator\">=</span> smalltable.id</span><br><span class=\"line\"><span class=\"comment\">-- Time taken: 29.18 seconds;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Ⅱ：大表-Join-大表\"><a href=\"#Ⅱ：大表-Join-大表\" class=\"headerlink\" title=\"Ⅱ：大表 Join 大表\"></a>Ⅱ：大表 Join 大表</h3><h4 id=\"1-）空-key-过滤\"><a href=\"#1-）空-key-过滤\" class=\"headerlink\" title=\"1 ）空 key 过滤\"></a>1 ）空 key 过滤</h4><p>有些大表某些key对应的数据太多，相同key对应的数据会发给相同的Reduce处理，从而造成少数Reduce效率过慢，数据倾斜，内存不足等问题。可以根据业务数据，分析这些key是否为异常数据，在SQL表关联时将这部分key数据过滤掉。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 项目实测:</span></span><br><span class=\"line\"><span class=\"comment\">-- 测试不过滤空id</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> overwrite <span class=\"keyword\">table</span> xxxx</span><br><span class=\"line\"><span class=\"keyword\">select</span> xxxx <span class=\"keyword\">from</span> t1 <span class=\"keyword\">left</span> <span class=\"keyword\">join</span> t2 <span class=\"keyword\">on</span> t1.id <span class=\"operator\">=</span> t2.id;</span><br><span class=\"line\"><span class=\"comment\">-- Time taken: 42.038 seconds;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 测试过滤空id</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> overwrite <span class=\"keyword\">table</span> xxxx</span><br><span class=\"line\"><span class=\"keyword\">select</span> xxxx <span class=\"keyword\">from</span> (<span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> t1 <span class=\"keyword\">where</span> id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">null</span>) t1 <span class=\"keyword\">left</span> <span class=\"keyword\">join</span> t2 <span class=\"keyword\">on</span> t1.id <span class=\"operator\">=</span> t2.id;</span><br><span class=\"line\"><span class=\"comment\">-- Time taken: 31.725 seconds;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2）空-key-转换\"><a href=\"#2）空-key-转换\" class=\"headerlink\" title=\"2）空 key 转换\"></a>2）空 key 转换</h4><p>空key过滤用于处理的是key过多且此类数据为无用异常数据的情况，但如果业务数据中存在key过多但均是有效数据的，不得过滤掉此类数据，可以选择为其赋上一个随机的值（加盐），让同key数据随机均分到不同的Reduce上。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 项目实测:</span></span><br><span class=\"line\"><span class=\"comment\">-- 设置5个reduce个数</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> mapreduce.job.reduces<span class=\"operator\">=</span><span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 不随机分布null值</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> overwrite <span class=\"keyword\">table</span> xxxx</span><br><span class=\"line\"><span class=\"keyword\">select</span> xxxx <span class=\"keyword\">from</span> t1 </span><br><span class=\"line\">\t<span class=\"keyword\">left</span> <span class=\"keyword\">join</span> t2 <span class=\"keyword\">on</span> t1.id <span class=\"operator\">=</span> t2.id;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 随机分布null值</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> overwrite <span class=\"keyword\">table</span> xxxx</span><br><span class=\"line\"><span class=\"keyword\">select</span> xxxx <span class=\"keyword\">from</span> t1 </span><br><span class=\"line\">\t<span class=\"keyword\">left</span> <span class=\"keyword\">join</span> t2 <span class=\"keyword\">on</span> (<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> t1.id <span class=\"keyword\">is</span> <span class=\"keyword\">null</span> <span class=\"keyword\">then</span> concat(<span class=\"string\">&#x27;hive&#x27;</span>, rand()) <span class=\"keyword\">else</span> t1.id) <span class=\"operator\">=</span> t2.id;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Ⅲ：Map-Join\"><a href=\"#Ⅲ：Map-Join\" class=\"headerlink\" title=\"Ⅲ：Map Join\"></a>Ⅲ：Map Join</h3><p>笼统的说，Hive中的Join可分为Common Join（Reduce阶段完成join）和Map Join（Map阶段完成join）。</p>\n<p>如果不指定MapJoin或者不符合MapJoin的条件，那么Hive解析器会将Join操作转换成Common Join，即在Reduce阶段完成join，容易发生数据倾斜。Common Join整个过程包含Map、Shuffle、Reduce阶段。</p>\n<p>可以用MapJoin把小表全部加载到内存在Map端进行Join，避免Reducer处理。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 开启Map Join参数</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.auto.convert.join<span class=\"operator\">=</span><span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 设置大表小表的阈值(默认25M以下是小表)</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.mapjoin.smalltable.filesize<span class=\"operator\">=</span><span class=\"number\">25000000</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Ⅳ：Group-By\"><a href=\"#Ⅳ：Group-By\" class=\"headerlink\" title=\"Ⅳ：Group By\"></a>Ⅳ：Group By</h3><h4 id=\"1-Map端提前聚合\"><a href=\"#1-Map端提前聚合\" class=\"headerlink\" title=\"1) Map端提前聚合\"></a>1) Map端提前聚合</h4><p>默认情况下，Map阶段相同key的数据分发给一个Reduce，当一个key数据过大时就倾斜了。而并不是所有的聚合操作都需要在Reduce端完成，很多聚合操作可以先在Map端进行部分聚合，最后在Reduce端得出最终结果。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 开启Map端提前聚合参数(默认开启)</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.map.aggr<span class=\"operator\">=</span><span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 在Map端进行聚合操作的条目数</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.groupby.mapaggr.checkinterval<span class=\"operator\">=</span><span class=\"number\">100000</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-负载均衡\"><a href=\"#2-负载均衡\" class=\"headerlink\" title=\"2) 负载均衡\"></a>2) 负载均衡</h4><p>开启负载均衡参数后，任务执行会有两个MR Job。</p>\n<p>第一个MR中，Map的输出结果会随机分布到Reduce中，每个Reduce做部分聚合操作并输出结果。这样处理的结果是相同的Group By Key有可能被分发到不同的Reduce中，从而达到负载均衡的目的。</p>\n<p>第二个MR再根据预处理的数据结果按照Group By Key分布到Reduce中，这一过程可以保证相同的Group By Key被分布到同一个Reduce中，最后完成最终的聚合操作。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 开启负载均衡参数(默认关闭)</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.groupby.skewindata<span class=\"operator\">=</span><span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Ⅴ：count-distinct-去重统计\"><a href=\"#Ⅴ：count-distinct-去重统计\" class=\"headerlink\" title=\"Ⅴ：count(distinct) 去重统计\"></a>Ⅴ：count(distinct) 去重统计</h3><p>count(distinct)操作只会调用一个Reduce Task来完成，所以当数据量过大时，其处理的速度、效率则会降低。所以去重统计的场景一般会先使用group by再count来替换。虽然会多用一个Job来完成，但是处理数据量大的场景时，这绝对是值得的。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 项目实测:</span></span><br><span class=\"line\"><span class=\"comment\">-- 设置5个reduce</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> mapreduce.job.reduce<span class=\"operator\">=</span><span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"built_in\">count</span>(<span class=\"keyword\">distinct</span> id) <span class=\"keyword\">from</span> bigtable;</span><br><span class=\"line\"><span class=\"comment\">-- Stage-Stage-1: Map:1 Reduce:1</span></span><br><span class=\"line\"><span class=\"comment\">-- Time taken:23.607 seconds, Fetched:1 row(s)</span></span><br><span class=\"line\"><span class=\"comment\">-- Time taken:34.941 seconds, Fetched:1 row(s)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"built_in\">count</span>(id) <span class=\"keyword\">from</span> (<span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> bigtable <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> id) t1;</span><br><span class=\"line\"><span class=\"comment\">-- Stage-Stage-1: Map:1 Reduce:5</span></span><br><span class=\"line\"><span class=\"comment\">-- Stage-Stage-2: Map:3 Reduce:1</span></span><br><span class=\"line\"><span class=\"comment\">-- Time taken:50.795 seconds, Fetched:1 row(s)</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Ⅵ：行列过滤\"><a href=\"#Ⅵ：行列过滤\" class=\"headerlink\" title=\"Ⅵ：行列过滤\"></a>Ⅵ：行列过滤</h3><p>列处理：在select时，尽可能只拿需要的列，如果有分区字段尽量使用分区过滤，少用select * 。</p>\n<p>行处理：表关联时，提前将要关联的表进行过滤，去除掉无用数据，然后再两表关联。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 例:</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> t2.<span class=\"operator\">*</span> <span class=\"keyword\">from</span> t1 <span class=\"keyword\">join</span> t2 <span class=\"keyword\">on</span> t1.id <span class=\"operator\">=</span> t2.id;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> t2.<span class=\"operator\">*</span> <span class=\"keyword\">from</span> t1 <span class=\"keyword\">join</span> (<span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> t2 <span class=\"keyword\">where</span> id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">null</span>) <span class=\"keyword\">on</span> t1.id <span class=\"operator\">=</span> t2.id;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Ⅶ：动态分区调整\"><a href=\"#Ⅶ：动态分区调整\" class=\"headerlink\" title=\"Ⅶ：动态分区调整\"></a>Ⅶ：动态分区调整</h3><p>关系型数据库中，对分区表insert数据时，数据库会自动根据分区字段的值，将数据插入到相应的分区中，Hive也提供了类似的机制，即动态分区，只不过使用Hive动态分区时需要进行相应的配置。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 开启动态分区参数(默认开启)</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.exec.dynamic.partition<span class=\"operator\">=</span><span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 设置为非严格模式(strict | nonstrict)</span></span><br><span class=\"line\"><span class=\"comment\">-- (动态分区的模式，默认严格，表示必须指定至少一个分区为静态分区，非严格表示允许所有分区字段都可以使用动态分区)</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.exec.dynamic.partition.mode<span class=\"operator\">=</span>nonstrict;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 在所有执行MR的节点上，最大一共可以创建多少个动态分区</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.exec.max.dynamic.partitions<span class=\"operator\">=</span><span class=\"number\">1000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 在每个执行MR的节点上，最大可以创建多少个动态分区</span></span><br><span class=\"line\"><span class=\"comment\">-- (该参数需要结合实际的数据来设定，比如：源数据包含一年的数据，date分区字段有365个值，该参数则应设置大于365，如果使用默认值100，则会报错)</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.exec.max.dynamic.partitions.pernode<span class=\"operator\">=</span><span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 整个MR Job中，最大可以创建多少个HDFS文件</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.exec.max.created.files<span class=\"operator\">=</span><span class=\"number\">100000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 当有空分区生成时，是否抛出异常。一般不需要设置。</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.error.on.empty.partition<span class=\"operator\">=</span><span class=\"literal\">false</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 例:</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.exec.dynamic.partition<span class=\"operator\">=</span><span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.exec.dynamic.partition.mode<span class=\"operator\">=</span>nonstrict;</span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.exec.max.dynamic.partitions<span class=\"operator\">=</span><span class=\"number\">1000</span>;</span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.exec.max.dynamic.partitions.pernode<span class=\"operator\">=</span><span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.exec.max.created.files<span class=\"operator\">=</span><span class=\"number\">100000</span>;</span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.error.on.empty.partition<span class=\"operator\">=</span><span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">insert</span> overwrite <span class=\"keyword\">table</span> xxxx <span class=\"keyword\">partition</span>(<span class=\"type\">date</span>)</span><br><span class=\"line\"><span class=\"keyword\">select</span> xxxx <span class=\"keyword\">from</span> xxxx;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查看分区表的分区情况</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> partitions table_name;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Ⅷ：分桶\"><a href=\"#Ⅷ：分桶\" class=\"headerlink\" title=\"Ⅷ：分桶\"></a>Ⅷ：分桶</h3><p>分桶应用场景不多，主要可以用在抽样检测上。比较好理解，只做简单说明。</p>\n<p>分桶字段必须为表中已存在字段，在建表时指明分桶字段 clustered by xxxx into N buckets，对每条数据的该分桶字段Hash取模，结果值相同的置于同一桶中。建表时分为几桶，HDFS上即有几个文件，可以打散key以缓解数据倾斜问题。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> xxxx</span><br><span class=\"line\">...</span><br><span class=\"line\">clustered <span class=\"keyword\">by</span> xxxx <span class=\"keyword\">into</span> N buckets;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Ⅸ：分区\"><a href=\"#Ⅸ：分区\" class=\"headerlink\" title=\"Ⅸ：分区\"></a>Ⅸ：分区</h3><p>分区表的应用场景就显而易见了，大多都是以时间字段作为分区字段。分区字段是一个全新的不同于表中的字段。分区的作用就是避免全表扫描，查表时可以到指定分区查询，避免了全表扫描所造成的一定的效率问题。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> xxxx</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> (dt string);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查看分区表的分区情况</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> partitions table_name;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"④-数据倾斜\"><a href=\"#④-数据倾斜\" class=\"headerlink\" title=\"④ 数据倾斜\"></a>④ 数据倾斜</h2><h3 id=\"Ⅰ：Map数\"><a href=\"#Ⅰ：Map数\" class=\"headerlink\" title=\"Ⅰ：Map数\"></a>Ⅰ：Map数</h3><p>Map个数的决定因素主要有：输入文件的总个数、输入文件的大小、集群设置的文件块大小等</p>\n<p>通常来讲，Map端输入文件会被切分为多个Block块(默认128M，可参数控制)，有多少个Block块走MR时就对应产生多少个Map Task。</p>\n<p>两个结论：</p>\n<p>① Map个数不是越多越好</p>\n<p>任务小文件很多，切块时会导致Block块数量极多，对应的Map个数也会变多，一个Map任务的启动和初始化时间甚至远大于处理任务的时间，这就会造成资源的浪费，而且同时可执行的Map数量也是受限的。</p>\n<p>② 不是保证 每个Map都处理接近128M的文件块就好了</p>\n<p>127M的文件理论上是用一个Map去完成，但这个文件只有一两个小字段，却有几千万条数据，如果Map处理的逻辑比较复杂，用一个Map去做就更耗时。</p>\n<p>针对这两个结论，我们需要结合业务场景增加或减少Map个数</p>\n<h3 id=\"Ⅱ：小文件合并\"><a href=\"#Ⅱ：小文件合并\" class=\"headerlink\" title=\"Ⅱ：小文件合并\"></a>Ⅱ：小文件合并</h3><p>Map执行前合并小文件，以减少Map数：CombineHiveInputFormat具有对小文件进行合并的功能，从而提高任务的执行效率</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> hive.input.format <span class=\"operator\">=</span> org.apache.hadoop.hive.ql.io.CombineHiveInputFormat;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Ⅲ：复杂文件增加Map数\"><a href=\"#Ⅲ：复杂文件增加Map数\" class=\"headerlink\" title=\"Ⅲ：复杂文件增加Map数\"></a>Ⅲ：复杂文件增加Map数</h3><p>当输入文件很大，任务计算逻辑复杂，Map执行就会非常慢，此时可以考虑增加Map个数，从而提高执行效率。</p>\n<p>增加Map的方法：</p>\n<p>根据ComputeSliteSize(Math.max(minSize, Math.min(maxSize, blocksize))) &#x3D; blocksize &#x3D; 128M的公式，调整maxsize的最大值，即减小maxsize设置的值使其小于blocksize的128M，就可以增加Map的个数。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 例:</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"built_in\">count</span>(<span class=\"number\">1</span>) <span class=\"keyword\">from</span> xxxx;</span><br><span class=\"line\"><span class=\"comment\">-- Hadoop jon information for Stage-1: number of mapper: 1; number of reducers: 1.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 调小最大切片值为100M</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> mapreduce.input.fileinputformat.split.maxsize<span class=\"operator\">=</span><span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"built_in\">count</span>(<span class=\"number\">1</span>) <span class=\"keyword\">from</span> xxxx;</span><br><span class=\"line\"><span class=\"comment\">-- Hadoop jon information for Stage-1: number of mapper: 6; number of reducers: 1.</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Ⅳ：Reduce数\"><a href=\"#Ⅳ：Reduce数\" class=\"headerlink\" title=\"Ⅳ：Reduce数\"></a>Ⅳ：Reduce数</h3><p>方法一：</p>\n<p>(1)\t每个Reduce处理的数据量默认是256M</p>\n<p>hive.exec.reducers.bytes.per.reducer&#x3D;256000000;</p>\n<p>(2)\t每个任务最大的reduce数，默认为1009</p>\n<p>hive.exec.reducers.max&#x3D;1009</p>\n<p>(3)\t计算reducer的公式</p>\n<p>N &#x3D; min( 参数2， 文件总输入数据量 &#x2F; 参数1)\t\t参数1、2对应上面的(1)、(2)</p>\n<p>方法二：</p>\n<p>在hadoop的mapred-default.xml文件中修改</p>\n<p>设置每个Job的Reduce个数：set mapreduce.job.reduces&#x3D;15;</p>\n<p>注：reduce个数也不是越多越好，它的启动与初始化需要时间和资源。有多少个Reduce就会有多少个输出文件，也会导致小文件过多的问题。</p>\n<p><strong>处理大数据量利用合适的Reduce数，使单个Reduce任务处理数据量大小要合适。</strong></p>\n<p>后续待补充从资料第57页开始</p>\n","site":{"data":{}},"length":6677,"excerpt":"<p>Hive 优化 | MapReduce 优化 | 数据倾斜</p>","more":"<h1 id=\"Hive-优化\"><a href=\"#Hive-优化\" class=\"headerlink\" title=\"Hive 优化\"></a>Hive 优化</h1><h2 id=\"①-Fetch-抓取\"><a href=\"#①-Fetch-抓取\" class=\"headerlink\" title=\"① Fetch 抓取\"></a>① Fetch 抓取</h2><p>Fetch抓取 是指 Hive 中某些情况的查询可以不走 MR 计算</p>\n<p>在 hive-default.xml.template 文件中 hive.fetch.task.conversion 默认是more，老版本默认是minimal</p>\n<p>该属性[none, minimal, more]修改为more后，在全局查找、字段查找、limit查找等是不会走MR。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hive.fetch.task.conversion<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>more<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"②-本地模式\"><a href=\"#②-本地模式\" class=\"headerlink\" title=\"② 本地模式\"></a>② 本地模式</h2><p>大多数的 Hadoop Job 是需要 Hadoop 提供的完整的可扩展性来处理大数据集的。不过，有时 Hive 的输入数据量较小时，启用集群资源的耗时可能比任务执行本身要更久。故可以采用 Hive本地模式在单台机器上处理任务。对于小数据集，执行时间可以明显缩短。</p>\n<p>用户可以设置 MR本地模式 参数，local MR 的最大输入数据量，local MR 的最大输入文件个数等参数进行配置</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- MR本地模式</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.exec.mode.local.auto<span class=\"operator\">=</span><span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 设置local MR的最大输入数据量，当小于此值时采用local MR，默认134217728，128M</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.exec.mode.local.auto.inputbytes.max<span class=\"operator\">=</span><span class=\"number\">500000000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 设置local MR的最大输入文件个数，当小于此值时采用local MR，默认为4</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.exec.mode.local.auto.input.files.max<span class=\"operator\">=</span><span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 项目实测：</span></span><br><span class=\"line\"><span class=\"comment\">-- 开启本地模式</span></span><br><span class=\"line\">hive <span class=\"operator\">&gt;</span> <span class=\"keyword\">set</span> hive.exec.mode.local.auto<span class=\"operator\">=</span><span class=\"literal\">true</span>;</span><br><span class=\"line\">hive <span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> insurance_ods.customers; </span><br><span class=\"line\"><span class=\"type\">Time</span> taken: <span class=\"number\">3.597</span> seconds, Fetched: <span class=\"number\">1054</span> <span class=\"type\">row</span>(s)</span><br><span class=\"line\"><span class=\"comment\">-- 关闭本地模式</span></span><br><span class=\"line\">hive <span class=\"operator\">&gt;</span> <span class=\"keyword\">set</span> hive.exec.mode.local.auto<span class=\"operator\">=</span><span class=\"literal\">false</span>;</span><br><span class=\"line\">hive <span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> insurance_ods.customers; </span><br><span class=\"line\"><span class=\"type\">Time</span> taken: <span class=\"number\">34.03</span> seconds, Fetched: <span class=\"number\">1054</span> <span class=\"type\">row</span>(s)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"③-表的优化\"><a href=\"#③-表的优化\" class=\"headerlink\" title=\"③ 表的优化\"></a>③ 表的优化</h2><h3 id=\"Ⅰ：小表-Join-大表\"><a href=\"#Ⅰ：小表-Join-大表\" class=\"headerlink\" title=\"Ⅰ：小表 Join 大表\"></a>Ⅰ：小表 Join 大表</h3><p>将key相对分散、并且数据量较小的表放在join的左边，这样可以有效减少内存溢出错误发生的几率；再进一步，可以使用Group让小的维度表（1000条以下）先进内存。在Map端完成Reduce。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 项目实测:</span></span><br><span class=\"line\"><span class=\"comment\">-- 关闭map join参数</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.auto.convert.join<span class=\"operator\">=</span><span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 小表 Join 大表</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> overwrite <span class=\"keyword\">table</span> xxxx</span><br><span class=\"line\"><span class=\"keyword\">select</span> xxx <span class=\"keyword\">from</span> xxxx smalltable</span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">join</span> xxxx bigtable</span><br><span class=\"line\"><span class=\"keyword\">on</span> smalltable.id <span class=\"operator\">=</span> bigtable.id;</span><br><span class=\"line\"><span class=\"comment\">-- Time taken: 27.43 seconds;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 大表 Join 小表</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> overwrite <span class=\"keyword\">table</span> xxxx</span><br><span class=\"line\"><span class=\"keyword\">select</span> xxx <span class=\"keyword\">from</span> xxxx bigtable</span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">join</span> xxxx smalltable</span><br><span class=\"line\"><span class=\"keyword\">on</span> bigtable.id <span class=\"operator\">=</span> smalltable.id</span><br><span class=\"line\"><span class=\"comment\">-- Time taken: 29.18 seconds;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Ⅱ：大表-Join-大表\"><a href=\"#Ⅱ：大表-Join-大表\" class=\"headerlink\" title=\"Ⅱ：大表 Join 大表\"></a>Ⅱ：大表 Join 大表</h3><h4 id=\"1-）空-key-过滤\"><a href=\"#1-）空-key-过滤\" class=\"headerlink\" title=\"1 ）空 key 过滤\"></a>1 ）空 key 过滤</h4><p>有些大表某些key对应的数据太多，相同key对应的数据会发给相同的Reduce处理，从而造成少数Reduce效率过慢，数据倾斜，内存不足等问题。可以根据业务数据，分析这些key是否为异常数据，在SQL表关联时将这部分key数据过滤掉。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 项目实测:</span></span><br><span class=\"line\"><span class=\"comment\">-- 测试不过滤空id</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> overwrite <span class=\"keyword\">table</span> xxxx</span><br><span class=\"line\"><span class=\"keyword\">select</span> xxxx <span class=\"keyword\">from</span> t1 <span class=\"keyword\">left</span> <span class=\"keyword\">join</span> t2 <span class=\"keyword\">on</span> t1.id <span class=\"operator\">=</span> t2.id;</span><br><span class=\"line\"><span class=\"comment\">-- Time taken: 42.038 seconds;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 测试过滤空id</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> overwrite <span class=\"keyword\">table</span> xxxx</span><br><span class=\"line\"><span class=\"keyword\">select</span> xxxx <span class=\"keyword\">from</span> (<span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> t1 <span class=\"keyword\">where</span> id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">null</span>) t1 <span class=\"keyword\">left</span> <span class=\"keyword\">join</span> t2 <span class=\"keyword\">on</span> t1.id <span class=\"operator\">=</span> t2.id;</span><br><span class=\"line\"><span class=\"comment\">-- Time taken: 31.725 seconds;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2）空-key-转换\"><a href=\"#2）空-key-转换\" class=\"headerlink\" title=\"2）空 key 转换\"></a>2）空 key 转换</h4><p>空key过滤用于处理的是key过多且此类数据为无用异常数据的情况，但如果业务数据中存在key过多但均是有效数据的，不得过滤掉此类数据，可以选择为其赋上一个随机的值（加盐），让同key数据随机均分到不同的Reduce上。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 项目实测:</span></span><br><span class=\"line\"><span class=\"comment\">-- 设置5个reduce个数</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> mapreduce.job.reduces<span class=\"operator\">=</span><span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 不随机分布null值</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> overwrite <span class=\"keyword\">table</span> xxxx</span><br><span class=\"line\"><span class=\"keyword\">select</span> xxxx <span class=\"keyword\">from</span> t1 </span><br><span class=\"line\">\t<span class=\"keyword\">left</span> <span class=\"keyword\">join</span> t2 <span class=\"keyword\">on</span> t1.id <span class=\"operator\">=</span> t2.id;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 随机分布null值</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> overwrite <span class=\"keyword\">table</span> xxxx</span><br><span class=\"line\"><span class=\"keyword\">select</span> xxxx <span class=\"keyword\">from</span> t1 </span><br><span class=\"line\">\t<span class=\"keyword\">left</span> <span class=\"keyword\">join</span> t2 <span class=\"keyword\">on</span> (<span class=\"keyword\">case</span> <span class=\"keyword\">when</span> t1.id <span class=\"keyword\">is</span> <span class=\"keyword\">null</span> <span class=\"keyword\">then</span> concat(<span class=\"string\">&#x27;hive&#x27;</span>, rand()) <span class=\"keyword\">else</span> t1.id) <span class=\"operator\">=</span> t2.id;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Ⅲ：Map-Join\"><a href=\"#Ⅲ：Map-Join\" class=\"headerlink\" title=\"Ⅲ：Map Join\"></a>Ⅲ：Map Join</h3><p>笼统的说，Hive中的Join可分为Common Join（Reduce阶段完成join）和Map Join（Map阶段完成join）。</p>\n<p>如果不指定MapJoin或者不符合MapJoin的条件，那么Hive解析器会将Join操作转换成Common Join，即在Reduce阶段完成join，容易发生数据倾斜。Common Join整个过程包含Map、Shuffle、Reduce阶段。</p>\n<p>可以用MapJoin把小表全部加载到内存在Map端进行Join，避免Reducer处理。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 开启Map Join参数</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.auto.convert.join<span class=\"operator\">=</span><span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 设置大表小表的阈值(默认25M以下是小表)</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.mapjoin.smalltable.filesize<span class=\"operator\">=</span><span class=\"number\">25000000</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Ⅳ：Group-By\"><a href=\"#Ⅳ：Group-By\" class=\"headerlink\" title=\"Ⅳ：Group By\"></a>Ⅳ：Group By</h3><h4 id=\"1-Map端提前聚合\"><a href=\"#1-Map端提前聚合\" class=\"headerlink\" title=\"1) Map端提前聚合\"></a>1) Map端提前聚合</h4><p>默认情况下，Map阶段相同key的数据分发给一个Reduce，当一个key数据过大时就倾斜了。而并不是所有的聚合操作都需要在Reduce端完成，很多聚合操作可以先在Map端进行部分聚合，最后在Reduce端得出最终结果。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 开启Map端提前聚合参数(默认开启)</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.map.aggr<span class=\"operator\">=</span><span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 在Map端进行聚合操作的条目数</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.groupby.mapaggr.checkinterval<span class=\"operator\">=</span><span class=\"number\">100000</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-负载均衡\"><a href=\"#2-负载均衡\" class=\"headerlink\" title=\"2) 负载均衡\"></a>2) 负载均衡</h4><p>开启负载均衡参数后，任务执行会有两个MR Job。</p>\n<p>第一个MR中，Map的输出结果会随机分布到Reduce中，每个Reduce做部分聚合操作并输出结果。这样处理的结果是相同的Group By Key有可能被分发到不同的Reduce中，从而达到负载均衡的目的。</p>\n<p>第二个MR再根据预处理的数据结果按照Group By Key分布到Reduce中，这一过程可以保证相同的Group By Key被分布到同一个Reduce中，最后完成最终的聚合操作。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 开启负载均衡参数(默认关闭)</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.groupby.skewindata<span class=\"operator\">=</span><span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Ⅴ：count-distinct-去重统计\"><a href=\"#Ⅴ：count-distinct-去重统计\" class=\"headerlink\" title=\"Ⅴ：count(distinct) 去重统计\"></a>Ⅴ：count(distinct) 去重统计</h3><p>count(distinct)操作只会调用一个Reduce Task来完成，所以当数据量过大时，其处理的速度、效率则会降低。所以去重统计的场景一般会先使用group by再count来替换。虽然会多用一个Job来完成，但是处理数据量大的场景时，这绝对是值得的。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 项目实测:</span></span><br><span class=\"line\"><span class=\"comment\">-- 设置5个reduce</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> mapreduce.job.reduce<span class=\"operator\">=</span><span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"built_in\">count</span>(<span class=\"keyword\">distinct</span> id) <span class=\"keyword\">from</span> bigtable;</span><br><span class=\"line\"><span class=\"comment\">-- Stage-Stage-1: Map:1 Reduce:1</span></span><br><span class=\"line\"><span class=\"comment\">-- Time taken:23.607 seconds, Fetched:1 row(s)</span></span><br><span class=\"line\"><span class=\"comment\">-- Time taken:34.941 seconds, Fetched:1 row(s)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"built_in\">count</span>(id) <span class=\"keyword\">from</span> (<span class=\"keyword\">select</span> id <span class=\"keyword\">from</span> bigtable <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> id) t1;</span><br><span class=\"line\"><span class=\"comment\">-- Stage-Stage-1: Map:1 Reduce:5</span></span><br><span class=\"line\"><span class=\"comment\">-- Stage-Stage-2: Map:3 Reduce:1</span></span><br><span class=\"line\"><span class=\"comment\">-- Time taken:50.795 seconds, Fetched:1 row(s)</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Ⅵ：行列过滤\"><a href=\"#Ⅵ：行列过滤\" class=\"headerlink\" title=\"Ⅵ：行列过滤\"></a>Ⅵ：行列过滤</h3><p>列处理：在select时，尽可能只拿需要的列，如果有分区字段尽量使用分区过滤，少用select * 。</p>\n<p>行处理：表关联时，提前将要关联的表进行过滤，去除掉无用数据，然后再两表关联。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 例:</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> t2.<span class=\"operator\">*</span> <span class=\"keyword\">from</span> t1 <span class=\"keyword\">join</span> t2 <span class=\"keyword\">on</span> t1.id <span class=\"operator\">=</span> t2.id;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> t2.<span class=\"operator\">*</span> <span class=\"keyword\">from</span> t1 <span class=\"keyword\">join</span> (<span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> t2 <span class=\"keyword\">where</span> id <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">null</span>) <span class=\"keyword\">on</span> t1.id <span class=\"operator\">=</span> t2.id;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Ⅶ：动态分区调整\"><a href=\"#Ⅶ：动态分区调整\" class=\"headerlink\" title=\"Ⅶ：动态分区调整\"></a>Ⅶ：动态分区调整</h3><p>关系型数据库中，对分区表insert数据时，数据库会自动根据分区字段的值，将数据插入到相应的分区中，Hive也提供了类似的机制，即动态分区，只不过使用Hive动态分区时需要进行相应的配置。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 开启动态分区参数(默认开启)</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.exec.dynamic.partition<span class=\"operator\">=</span><span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 设置为非严格模式(strict | nonstrict)</span></span><br><span class=\"line\"><span class=\"comment\">-- (动态分区的模式，默认严格，表示必须指定至少一个分区为静态分区，非严格表示允许所有分区字段都可以使用动态分区)</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.exec.dynamic.partition.mode<span class=\"operator\">=</span>nonstrict;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 在所有执行MR的节点上，最大一共可以创建多少个动态分区</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.exec.max.dynamic.partitions<span class=\"operator\">=</span><span class=\"number\">1000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 在每个执行MR的节点上，最大可以创建多少个动态分区</span></span><br><span class=\"line\"><span class=\"comment\">-- (该参数需要结合实际的数据来设定，比如：源数据包含一年的数据，date分区字段有365个值，该参数则应设置大于365，如果使用默认值100，则会报错)</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.exec.max.dynamic.partitions.pernode<span class=\"operator\">=</span><span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 整个MR Job中，最大可以创建多少个HDFS文件</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.exec.max.created.files<span class=\"operator\">=</span><span class=\"number\">100000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 当有空分区生成时，是否抛出异常。一般不需要设置。</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.error.on.empty.partition<span class=\"operator\">=</span><span class=\"literal\">false</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 例:</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.exec.dynamic.partition<span class=\"operator\">=</span><span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.exec.dynamic.partition.mode<span class=\"operator\">=</span>nonstrict;</span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.exec.max.dynamic.partitions<span class=\"operator\">=</span><span class=\"number\">1000</span>;</span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.exec.max.dynamic.partitions.pernode<span class=\"operator\">=</span><span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.exec.max.created.files<span class=\"operator\">=</span><span class=\"number\">100000</span>;</span><br><span class=\"line\"><span class=\"keyword\">set</span> hive.error.on.empty.partition<span class=\"operator\">=</span><span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">insert</span> overwrite <span class=\"keyword\">table</span> xxxx <span class=\"keyword\">partition</span>(<span class=\"type\">date</span>)</span><br><span class=\"line\"><span class=\"keyword\">select</span> xxxx <span class=\"keyword\">from</span> xxxx;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查看分区表的分区情况</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> partitions table_name;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Ⅷ：分桶\"><a href=\"#Ⅷ：分桶\" class=\"headerlink\" title=\"Ⅷ：分桶\"></a>Ⅷ：分桶</h3><p>分桶应用场景不多，主要可以用在抽样检测上。比较好理解，只做简单说明。</p>\n<p>分桶字段必须为表中已存在字段，在建表时指明分桶字段 clustered by xxxx into N buckets，对每条数据的该分桶字段Hash取模，结果值相同的置于同一桶中。建表时分为几桶，HDFS上即有几个文件，可以打散key以缓解数据倾斜问题。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> xxxx</span><br><span class=\"line\">...</span><br><span class=\"line\">clustered <span class=\"keyword\">by</span> xxxx <span class=\"keyword\">into</span> N buckets;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Ⅸ：分区\"><a href=\"#Ⅸ：分区\" class=\"headerlink\" title=\"Ⅸ：分区\"></a>Ⅸ：分区</h3><p>分区表的应用场景就显而易见了，大多都是以时间字段作为分区字段。分区字段是一个全新的不同于表中的字段。分区的作用就是避免全表扫描，查表时可以到指定分区查询，避免了全表扫描所造成的一定的效率问题。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> xxxx</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> (dt string);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查看分区表的分区情况</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> partitions table_name;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"④-数据倾斜\"><a href=\"#④-数据倾斜\" class=\"headerlink\" title=\"④ 数据倾斜\"></a>④ 数据倾斜</h2><h3 id=\"Ⅰ：Map数\"><a href=\"#Ⅰ：Map数\" class=\"headerlink\" title=\"Ⅰ：Map数\"></a>Ⅰ：Map数</h3><p>Map个数的决定因素主要有：输入文件的总个数、输入文件的大小、集群设置的文件块大小等</p>\n<p>通常来讲，Map端输入文件会被切分为多个Block块(默认128M，可参数控制)，有多少个Block块走MR时就对应产生多少个Map Task。</p>\n<p>两个结论：</p>\n<p>① Map个数不是越多越好</p>\n<p>任务小文件很多，切块时会导致Block块数量极多，对应的Map个数也会变多，一个Map任务的启动和初始化时间甚至远大于处理任务的时间，这就会造成资源的浪费，而且同时可执行的Map数量也是受限的。</p>\n<p>② 不是保证 每个Map都处理接近128M的文件块就好了</p>\n<p>127M的文件理论上是用一个Map去完成，但这个文件只有一两个小字段，却有几千万条数据，如果Map处理的逻辑比较复杂，用一个Map去做就更耗时。</p>\n<p>针对这两个结论，我们需要结合业务场景增加或减少Map个数</p>\n<h3 id=\"Ⅱ：小文件合并\"><a href=\"#Ⅱ：小文件合并\" class=\"headerlink\" title=\"Ⅱ：小文件合并\"></a>Ⅱ：小文件合并</h3><p>Map执行前合并小文件，以减少Map数：CombineHiveInputFormat具有对小文件进行合并的功能，从而提高任务的执行效率</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> hive.input.format <span class=\"operator\">=</span> org.apache.hadoop.hive.ql.io.CombineHiveInputFormat;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Ⅲ：复杂文件增加Map数\"><a href=\"#Ⅲ：复杂文件增加Map数\" class=\"headerlink\" title=\"Ⅲ：复杂文件增加Map数\"></a>Ⅲ：复杂文件增加Map数</h3><p>当输入文件很大，任务计算逻辑复杂，Map执行就会非常慢，此时可以考虑增加Map个数，从而提高执行效率。</p>\n<p>增加Map的方法：</p>\n<p>根据ComputeSliteSize(Math.max(minSize, Math.min(maxSize, blocksize))) &#x3D; blocksize &#x3D; 128M的公式，调整maxsize的最大值，即减小maxsize设置的值使其小于blocksize的128M，就可以增加Map的个数。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 例:</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"built_in\">count</span>(<span class=\"number\">1</span>) <span class=\"keyword\">from</span> xxxx;</span><br><span class=\"line\"><span class=\"comment\">-- Hadoop jon information for Stage-1: number of mapper: 1; number of reducers: 1.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 调小最大切片值为100M</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> mapreduce.input.fileinputformat.split.maxsize<span class=\"operator\">=</span><span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"built_in\">count</span>(<span class=\"number\">1</span>) <span class=\"keyword\">from</span> xxxx;</span><br><span class=\"line\"><span class=\"comment\">-- Hadoop jon information for Stage-1: number of mapper: 6; number of reducers: 1.</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Ⅳ：Reduce数\"><a href=\"#Ⅳ：Reduce数\" class=\"headerlink\" title=\"Ⅳ：Reduce数\"></a>Ⅳ：Reduce数</h3><p>方法一：</p>\n<p>(1)\t每个Reduce处理的数据量默认是256M</p>\n<p>hive.exec.reducers.bytes.per.reducer&#x3D;256000000;</p>\n<p>(2)\t每个任务最大的reduce数，默认为1009</p>\n<p>hive.exec.reducers.max&#x3D;1009</p>\n<p>(3)\t计算reducer的公式</p>\n<p>N &#x3D; min( 参数2， 文件总输入数据量 &#x2F; 参数1)\t\t参数1、2对应上面的(1)、(2)</p>\n<p>方法二：</p>\n<p>在hadoop的mapred-default.xml文件中修改</p>\n<p>设置每个Job的Reduce个数：set mapreduce.job.reduces&#x3D;15;</p>\n<p>注：reduce个数也不是越多越好，它的启动与初始化需要时间和资源。有多少个Reduce就会有多少个输出文件，也会导致小文件过多的问题。</p>\n<p><strong>处理大数据量利用合适的Reduce数，使单个Reduce任务处理数据量大小要合适。</strong></p>\n<p>后续待补充从资料第57页开始</p>"},{"title":"KBJ-ISSUE记录","abbrlink":"5f967442","date":"2022-07-28T06:46:47.000Z","password":"n8g98zwj","_content":"\n**记录工作期间，每日完成的issue，以便后续如有回顾需要**\n\n<!--more-->\n\n项目：\n\n宝鸡市中心医院\n\n安阳人民医院\n\n------\n\n5.31：\n\n| ISSUE序列号 | ISSUE描述                          |\n| ----------- | ---------------------------------- |\n| WEBS-6113   | 【宝鸡】----住院医生站特殊医嘱处理 |\n\n------\n\n6.6：\n\n| ISSUE序列号 | ISSUE描述                                                    |\n| ----------- | ------------------------------------------------------------ |\n| WEBS-6057   | 【宝鸡】新增挂号资源诊室对照页面                             |\n| WEBS-6587   | 【宝鸡】【排班生成】--排班生成修改，每次修改限额均弹出验证提醒 |\n| WEBS-6592   | 【宝鸡】【排班规则】--排班规则修改，每次修改限额均弹出验证提醒 |\n| WEBS-6649   | 【宝鸡】【排班规则】--排班规则设置列表，限额设置校验         |\n| WEBS-6650   | 【宝鸡】【排班生成】--排班生成列表，限额设置校验             |\n\n------\n\n6.7：\n\n| ISSUE序列号 | ISSUE描述                  |\n| ----------- | -------------------------- |\n| WEBS-6194   | 【宝鸡】----不计价医嘱处理 |\n\n------\n\n6.9：\n\n| ISSUE序列号 | ISSUE描述                                       |\n| ----------- | ----------------------------------------------- |\n| WEBS-6391   | 【宝鸡】【门诊输液打印】---查询已执行输液pe记录 |\n\n\n\n------\n\n6.12：\n\n| ISSUE序列号 | ISSUE描述                                                    |\n| ----------- | ------------------------------------------------------------ |\n| WEBS-6254   | 【宝鸡】新增排班生成页面                                     |\n| WEBS-6429   | 【宝鸡】【童创】---治疗医嘱执行新页面                        |\n| WEBS-6455   | 【宝鸡】【童创】--新增排程查询页面                           |\n| WEBS-6638   | 【童创】门诊预诊——添加预诊信息页面读取必填项配置             |\n| WEBS-6662   | 【挂号资源诊室对照】--诊室对照列表中显示的号别应该显示描述，不是code |\n| WEBS-6677   | 【宝鸡】【排班规则】--“是否有排班”查询无效                   |\n| WEBS-6678   | 【宝鸡】【排班规则】--批量生成的排班，删除某天排班时会全部删除 |\n| WEBS-6679   | 【宝鸡】【排班规则】--批量排班会覆盖原已有排班               |\n| WEBS-6680   | 【宝鸡】【排班规则】--分时设置开启不出诊时段抛出异常         |\n| WEBS-6683   | 【宝鸡】【排班规则】--批量生成规则表后，数据条数和标识异常   |\n\n------\n\n6.14：\n\n| ISSUE序列号 | ISSUE描述                                      |\n| ----------- | ---------------------------------------------- |\n| WEBS-6253   | 【宝鸡】新增排班规则设置页面                   |\n| WEBS-6455   | 【宝鸡】【童创】---新增排程查询页面            |\n| WEBS-6507   | 【宝鸡】-----病理申请条码打印                  |\n| WEBS-6722   | 【宝鸡】【童创】--“排程查询”治疗师查询范围有误 |\n\n------\n\n6.15：\n\n| ISSUE序列号 | ISSUE描述                                                    |\n| ----------- | ------------------------------------------------------------ |\n| WEBS-6581   | 门诊医生站（安阳）-医嘱模板改为DEV模式                       |\n| WEBS-6771   | 【宝鸡】【排班规则】--更新分时列表数据，后台会删除原有数据再重新生成新数据 |\n\n------\n\n6.19：\n\n| ISSUE序列号   | ISSUE描述                                             |\n| ------------- | ----------------------------------------------------- |\n| WEBHISAYH-360 | 【门诊医生站】慢病患者在门诊医生看诊时候提示 是否慢病 |\n\n------\n\n6.20：\n\n| ISSUE序列号 | ISSUE描述                                        |\n| ----------- | ------------------------------------------------ |\n| WEBS-6288   | 【宝鸡】计算挂号费存储过程增加减免方式的计算逻辑 |\n\n------\n\n6.25：\n\n| ISSUE序列号 | ISSUE描述                                                    |\n| ----------- | ------------------------------------------------------------ |\n| WEBS-6456   | 【医生站】---调用模板、历史医嘱引用、复制粘贴判断医嘱项目是否有效 |\n\n------\n\n6.26：\n\n| ISSUE序列号 | ISSUE描述                                    |\n| ----------- | -------------------------------------------- |\n| WEBS-6136   | 【宝鸡】转诊申请及查看页面开发               |\n| WEBS-6137   | 【宝鸡】转诊审批及申请明细页面开发           |\n| WEBS-6634   | 【宝鸡】门诊慢特病申请及查看页面开发         |\n| WEBS-6635   | 【宝鸡】门诊慢特病审批及明细页面开发         |\n| WEBS-6909   | 【宝鸡】转诊申请页面--险种类型下拉框字段修改 |\n\n------\n\n6.28:\n\n| ISSUE序列号   | ISSUE描述                                                    |\n| ------------- | ------------------------------------------------------------ |\n| WEBS-6138     | 特药申请及查看页面开发                                       |\n| WEBS-6139     | 特药审批及申请明细开发                                       |\n| WEBS-6939     | 【宝鸡】门诊慢特病申请--“申请疾病”字段取值修改               |\n| WEBHISAYH-370 | 【安阳】会诊申请-----增加会诊单打印功能                      |\n| WEBHISAYH-385 | 【安阳】门诊医生站---wpb带未看诊慢病患者时，提示是否进行慢病治疗 |\n| WEBHISAYH-386 | 【安阳】----检查/检验 报告查看页面增加360视图查看按钮        |\n\n------\n\n7.2（周日加班）：\n\n| ISSUE序列号   | ISSUE描述                                             |\n| ------------- | ----------------------------------------------------- |\n| WEBHISAYH-353 | 【安阳】住院医生站----增加医嘱开单科室的选择          |\n| WEBHISAYH-386 | 【安阳】----检查/检验 报告查看页面增加360视图查看按钮 |\n\n------\n\n7.3：\n\n| ISSUE序列号   | ISSUE描述                                                    |\n| ------------- | ------------------------------------------------------------ |\n| WEBHISAYH-418 | 【安阳】------医嘱模板弹窗医嘱模板检索优化                   |\n| WEBHISAYH-425 | [手术预约查看]---新增手术预约查看页面，嵌入麦迪的web页面     |\n| WEBHISAYH-432 | 【费用录入】----收费项目管理维护了条码划价时，添加项目时需要校验条码号必填 |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBHISAYH-476          | 【安阳】住院医生站----进入“模板管理”页面时自动选中节点，导致“新增模板”功能失效 |\n| WEBHISAYH-477          | 【安阳】住院医生站----模板维护，勾选某模板的医嘱切换到另一模板时，自动勾选之前医嘱所在列 |\n| WEBHISAYH-479          | 【安阳】住院医生站----模板维护，从医生站患者医嘱列表复制医嘱，粘贴至“模板维护”的任一模板中时报错 |\n| WEBHISAYH-480          | 【安阳】住院医生站----模板维护，医生站患者医嘱复制的医嘱，到模板维护页面粘贴未保存 点击编辑时报错 |\n| WEBHISAYH-481          | 【安阳】住院医生站----“模板”页面存在已作废医嘱，“模板管理”维护时可勾选并复制该已作废医嘱 |\n\n------\n\n7.4：\n\n| ISSUE序列号   | ISSUE描述                                                    |\n| ------------- | ------------------------------------------------------------ |\n| WEBHISAYH-476 | 【安阳】住院医生站----进入“模板管理”页面时自动选中节点，导致“新增模板”功能失效 |\n| WEBHISAYH-477 | 【安阳】住院医生站----模板维护，勾选某模板的医嘱切换到另一模板时，自动勾选之前医嘱所在列 |\n| WEBHISAYH-479 | 【安阳】住院医生站----模板维护，从医生站患者医嘱列表复制医嘱，粘贴至“模板维护”的任一模板中时报错 |\n| WEBHISAYH-480 | 【安阳】住院医生站----模板维护，医生站患者医嘱复制的医嘱，到模板维护页面粘贴未保存 点击编辑时报错 |\n| WEBHISAYH-481 | 【安阳】住院医生站----“模板”页面存在已作废医嘱，“模板管理”维护时可勾选并复制该已作废医嘱 |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                    |\n| ---------------------- | ---------------------------------------------------------- |\n| WEBS-6992              | 【宝鸡】医技医嘱执行----已执行医嘱录入附加收费时，报错空值 |\n| WEBS-6994              | 【宝鸡】医技医嘱执行----下拉框选择后切换到其他页面会失效   |\n\n------\n\n7.5：\n\n| ISSUE序列号   | ISSUE描述                                |\n| ------------- | ---------------------------------------- |\n| WEBHISAYH-456 | 【门诊急挂号】患者身份下拉框取值逻辑调整 |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                     |\n| ---------------------- | ----------------------------------------------------------- |\n| WEBS-7003              | 【宝鸡】门诊医技执行----页面显示未执行患者 不显示待执行医嘱 |\n\n------\n\n7.7：\n\n| ISSUE序列号 | ISSUE描述                                                   |\n| ----------- | ----------------------------------------------------------- |\n| WEBS-5835   | 【宝鸡】----医技医嘱执行页面开发                            |\n| WEBS-6976   | 【宝鸡】【不计价医嘱】取消勾选“计价”时，联动取消勾选“摆药”  |\n| WEBS-6992   | 【宝鸡】医技医嘱执行----已执行医嘱录入附加收费时，报错空值  |\n| WEBS-6994   | 【宝鸡】医技医嘱执行----下拉框选择后切换到其他页面会失效    |\n| WEBS-7003   | 【宝鸡】门诊医技执行----页面显示未执行患者 不显示待执行医嘱 |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-7032              | 【宝鸡】医技医嘱执行----带WPB住院患者进入“医技医嘱执行”页面时弹窗“没有有效挂号信息” |\n\n------\n\n7.10：\n\n| ISSUE序列号 | ISSUE描述                                                    |\n| ----------- | ------------------------------------------------------------ |\n| WEBS-6993   | 【宝鸡】----新增医技医嘱执行页面增加刷新按钮                 |\n| WEBS-7041   | 【宝鸡】医技医嘱执行----带WPB住院患者进入“医技医嘱执行”页面时弹窗“没有有效挂号信息” |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-7041              | 【宝鸡】医技医嘱执行----带WPB住院患者进入“医技医嘱执行”页面时弹窗“没有有效挂号信息” |\n| WEBS-7043              | 【宝鸡】【住院医技执行】----住院医技医嘱从WEB端“住院医技执行”页面执行，该记录在“医技医嘱执行”页面状态显示为“完成”而不是“报告发出” |\n\n------\n\n7.11：\n\n| ISSUE序列号 | ISSUE描述                                                    |\n| ----------- | ------------------------------------------------------------ |\n| WEBS-7043   | 【宝鸡】【住院医技执行】----住院医技医嘱从WEB端“住院医技执行”页面执行，该记录在“医技医嘱执行”页面状态显示为“完成”而不是“报告发出” |\n| WEBS-7063   | 【宝鸡】门诊保存医嘱时报错                                   |\n\n| 提交的bug/sub-bug/优化 | bug描述                    |\n| ---------------------- | -------------------------- |\n| WEBS-7063              | 【宝鸡】门诊保存医嘱时报错 |\n\n------\n\n7.13：\n\n| ISSUE序列号   | ISSUE描述                                                    |\n| ------------- | ------------------------------------------------------------ |\n| WEBHISAYH-434 | 【门诊划价】----收费项目管理维护了条码划价时，添加项目时需要校验条码号必填 |\n\n------\n\n7.14：\n\n| ISSUE序列号   | ISSUE描述                                             |\n| ------------- | ----------------------------------------------------- |\n| WEBS-7120     | 【宝鸡】门诊医生站----医嘱项目未过滤物品表为空的数据  |\n| WEBHISAYH-468 | 【安阳】门诊医生站---校验患者是否是异地医保患者       |\n| WEBHISAYH-471 | 【安阳】医生站----医嘱pickshell需要去掉条码划价的项目 |\n| WEBHISAYH-519 | 【安阳】医嘱列表去掉关联危急值操作                    |\n| WEBHISAYH-533 | 【安阳】----开立手术申请中诊断编码必填                |\n\n| 提交的bug/sub-bug/优化 | bug描述                                              |\n| ---------------------- | ---------------------------------------------------- |\n| WEBS-7120              | 【宝鸡】门诊医生站----医嘱项目未过滤物品表为空的数据 |\n\n------\n\n7.18：\n\n| ISSUE序列号   | ISSUE描述                                         |\n| ------------- | ------------------------------------------------- |\n| WEBS-6470     | 【宝鸡】----门诊医生站接口按钮区域调整            |\n| WEBS-6673     | 【宝鸡】医生站自助挂号弹窗优化                    |\n| WEBHISAYH-518 | 【五级过级】门诊/住院医生站——增加处方点评沟通功能 |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-7154              | 【宝鸡】门诊急挂号----WPB为空，输入挂号资源点击支付时报错    |\n| WEBS-7157              | 【宝鸡】自助挂号页面----患者挂复诊号成功后，医生站列表无患者挂号信息 |\n| WEBS-7161              | 【宝鸡】门诊退费申请----退费申请页面 查询不到 药品退费申请   |\n\n------\n\n7.19：\n\n| ISSUE序列号   | ISSUE描述                                  |\n| ------------- | ------------------------------------------ |\n| WEBHISAYH-518 | 【安阳】退费申请----项目名称显示问题修改   |\n| WEBHISAYH-520 | 【安阳】门诊医生站作废外配处方增加状态判断 |\n\n| 提交的bug/sub-bug/优化 | bug描述                                  |\n| ---------------------- | ---------------------------------------- |\n| WEBHISAYH-518          | 【安阳】退费申请----项目名称显示问题修改 |\n\n------\n\n7.20：\n\n| ISSUE序列号   | ISSUE描述                                      |\n| ------------- | ---------------------------------------------- |\n| WEBS-6974     | 【宝鸡】诊室维护页面拼音码逻辑调整             |\n| WEBHISAYH-538 | 【安阳】危急值自动预警，护士只查住院危急值信息 |\n| WEBHISAYH-584 | 【安阳】退费申请----项目名称显示问题修改       |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-7192              | 【宝鸡】自助挂号页面----收费号列表中 同一挂号资源 显示两条   |\n| WEBS-7201              | 【宝鸡】门诊医生站----批量不计价按钮点击时将所有未保存医嘱取消计价 |\n\n------\n\n7.25：\n\n| ISSUE序列号   | ISSUE描述                                                    |\n| ------------- | ------------------------------------------------------------ |\n| WEBS-6940     | 【宝鸡】预约日视图页面开发                                   |\n| WEBS-7192     | 【宝鸡】自助挂号页面----收费号列表中 同一挂号资源 显示两条   |\n| WEBS-7204     | 【宝鸡】医技医嘱执行----已执行节点下“撤销”按钮未受参数控制   |\n| WEBS-7251     | 【宝鸡】门诊预约----页面没有上下滚动，排班过多时无法显示查看 |\n| WEBHISAYH-608 | 【安阳】医生站----修改pickshell检索内容排序（jar）           |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-7192              | 【宝鸡】自助挂号页面----收费号列表中 同一挂号资源 显示两条   |\n| WEBS-7251              | 【宝鸡】门诊预约----页面没有上下滚动，排班过多时无法显示查看 |\n| WEBS-7256              | 【宝鸡】门诊预约----某一时间片有预约，无法停诊其他空闲时间片，弹窗已有预约 |\n\n------\n\n7.27：\n\n| ISSUE序列号 | ISSUE描述                                                    |\n| ----------- | ------------------------------------------------------------ |\n| WEBS-7256   | 【宝鸡】门诊预约----某一时间片有预约，无法停诊其他空闲时间片，弹窗已有预约 |\n| WEBS-7279   | 【宝鸡】门诊医生站----患者身份为空的患者，保存医嘱时报错NULL |\n| WEBS-7289   | 【安阳】门诊划价----“医嘱流向”设置自选，下拉框选择具体流向时会重复加载数据导致卡顿 |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-7279              | 【宝鸡】门诊医生站----患者身份为空的患者，保存医嘱时报错NULL |\n| WEBS-7285              | 【安阳】门诊划价----“开立医生”未回显登录医生角色             |\n| WEBS-7286              | 【安阳】门诊划价----“医嘱流向”自选，选择流向时对应回显“执行科室” |\n| WEBS-7289              | 【安阳】门诊划价----“医嘱流向”设置自选，下拉框选择具体流向时会重复加载数据导致卡顿 |\n\n------\n\n7.28：\n\n| ISSUE序列号   | ISSUE描述                                                    |\n| ------------- | ------------------------------------------------------------ |\n| WEBHISAYH-623 | 【安阳】门诊划价----“医嘱流向”设置自选，下拉框选择具体流向时会重复加载数据导致卡顿 |\n| WEBHISAYH-624 | 【安阳】门诊划价----“医嘱流向”自选，选择流向时对应回显“执行科室” |\n| WEBHISAYH-625 | 【安阳】门诊划价----“开立医生”未回显登录医生角色             |\n| WEBS-7274     | 挂号资源申请界面样式问题                                     |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBHISAYH-623          | 【安阳】门诊划价----“医嘱流向”设置自选，下拉框选择具体流向时会重复加载数据导致卡顿 |\n| WEBHISAYH-624          | 【安阳】门诊划价----“医嘱流向”自选，选择流向时对应回显“执行科室” |\n| WEBHISAYH-625          | 【安阳】门诊划价----“开立医生”未回显登录医生角色             |\n\n------\n\n7.31：\n\n| ISSUE序列号 | ISSUE描述                             |\n| ----------- | ------------------------------------- |\n| WEBS-7275   | 医嘱开立范围设置-会诊申请图标使用错误 |\n\n------\n\n8.1：\n\n| ISSUE序列号   | ISSUE描述                                                    |\n| ------------- | ------------------------------------------------------------ |\n| WEBS-7313     | webhis门诊就诊监控界面，各个图标中文显示异常和大小异常       |\n| WEBS-7341     | 【宝鸡】门诊预约----添加预约详情页资源挂号费未置灰可编辑，且未回显费用 |\n| WEBHISAYH-615 | 【安阳】医生站----检查申请校验检查目的做必填校验             |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-7341              | 【宝鸡】门诊预约----添加预约详情页资源挂号费未置灰可编辑，且未回显费用 |\n| WEBHISAYH-652          | 【安阳】会诊统计----会诊管理页面增加导出excel功能            |\n\n------\n\n8.2：\n\n| ISSUE序列号   | ISSUE描述                                         |\n| ------------- | ------------------------------------------------- |\n| WEBHISAYH-562 | 【安阳】医生站----医嘱模板维护功能优化            |\n| WEBHISAYH-652 | 【安阳】会诊统计----会诊管理页面增加导出excel功能 |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-7372              | 【宝鸡】医技医嘱执行----已执行不可撤销医嘱，仍可通过勾选框勾选点击撤销 |\n\n------\n\n8.3：\n\n| ISSUE序列号   | ISSUE描述                                        |\n| ------------- | ------------------------------------------------ |\n| WEBS-6940     | 【宝鸡】预约日视图页面开发                       |\n| WEBHISAYH-546 | 【安阳】会诊统计------去掉取消状态的会诊申请查询 |\n| WEBHISAYH-548 | 【安阳】会诊统计----支持导出excel表格            |\n\n| 提交的bug/sub-bug/优化 | bug描述                                           |\n| ---------------------- | ------------------------------------------------- |\n| WEBS-7392              | 【宝鸡】门诊医技医生站----复制已开立医嘱 粘贴无效 |\n| WEBS-7393              | 【宝鸡】手麻医生站----“批量不计价”点击无效        |\n| WEBS-7397              | 【宝鸡】辅诊医生站----批量不计价按钮功能性问题    |\n\n------\n\n8.4：\n\n| ISSUE序列号 | ISSUE描述                                                    |\n| ----------- | ------------------------------------------------------------ |\n| WEBS-7372   | 【宝鸡】医技医嘱执行----已执行不可撤销医嘱，仍可通过勾选框勾选点击撤销 |\n| WEBS-7392   | 【宝鸡】门诊医技医生站----复制已开立医嘱 粘贴无效            |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBHISAYH-684          | 【安阳】医生站----开立病理申请也会校验检查目的导致异常       |\n| WEBHISAYH-692          | 【安阳】医嘱模板----医生医嘱模板权限设置正常时，权限下医嘱模板保存置灰 |\n\n------\n\n8.7：\n\n| ISSUE序列号   | ISSUE描述                                                    |\n| ------------- | ------------------------------------------------------------ |\n| WEBHISAYH-615 | 【安阳】医生站----开立病理申请也会校验检查目的导致异常       |\n| WEBHISAYH-651 | 【辅诊医生站】辅诊医生可以开立检验检查申请及会诊申请查看     |\n| WEBHISAYH-692 | 【安阳】医嘱模板----医生医嘱模板权限设置正常时，权限下医嘱模板保存置灰 |\n| WEBHISAYH-707 | 【安阳】辅诊医生站----辅诊开立会诊申请时，无法审核医嘱进而无法完成后续会诊流程 |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBHISAYH-707          | 【安阳】辅诊医生站----辅诊开立会诊申请时，无法审核医嘱进而无法完成后续会诊流程 |\n| WEBHISAYH-709          | 【安阳】住院医生站----勾选条码划价医嘱仍可在pickshell中搜索到 |\n\n------\n\n8.8：\n\n| ISSUE序列号   | ISSUE描述                                                    |\n| ------------- | ------------------------------------------------------------ |\n| WEBS-7393     | 【宝鸡】住院、辅诊、手麻医生站----“批量不计价”按钮功能问题   |\n| WEBHISAYH-577 | 【门诊医生站】门诊医生登录系统时，所选科室只需要显示门诊科室 |\n| WEBHISAYH-615 | 【安阳】医生站----检查申请校验检查目的做必填校验             |\n| WEBHISAYH-646 | 【安阳】住院医生站----复制粘贴，历史医嘱和模板也要控制开不出勾选条码划价项目 |\n| WEBHISAYH-683 | 【安阳】----检查检验申请检查目的增加默认值                   |\n| WEBHISAYH-686 | 【会诊申请】回复医生和邀请医生增加评价功能                   |\n| WEBHISAYH-709 | 【安阳】住院医生站----勾选条码划价医嘱仍可在pickshell中搜索到 |\n| WEBHISAYH-720 | 【安阳】医生站----保存检查医嘱在检查目的弹窗时，不点确认点击关闭仍可保存医嘱 |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBHISAYH-702          | 【安阳】医嘱模板----模板内大输液医嘱，落入患者医嘱列表时排序有误 |\n| WEBHISAYH-716          | 【安阳】医嘱模板维护----模板维护页对有大输液或检验组合的模板保存后，原模板医嘱错误 |\n| WEBHISAYH-720          | 【安阳】医生站----保存检查医嘱在检查目的弹窗时，不点确认点击关闭仍可保存医嘱 |\n\n------\n\n8.9：\n\n| ISSUE序列号   | ISSUE描述                                                    |\n| ------------- | ------------------------------------------------------------ |\n| WEBHISAYH-576 | 【安阳】电子处方优化---医生开立外配处方先挂医保号            |\n| WEBHISAYH-620 | 【安阳】门诊医生站----pickshell移植住院药房过滤条件          |\n| WEBHISAYH-642 | 【安阳】医生站----医嘱模板增加排序功能                       |\n| WEBHISAYH-668 | 【安阳】门诊医生站作废外配处方增加状态判断                   |\n| WEBHISAYH-702 | 【安阳】医嘱模板----模板内大输液医嘱，落入患者医嘱列表时排序有误 |\n| WEBHISAYH-704 | 【门诊医生站】处方分方，流向不同药房的处方不能共用一个处方号 |\n| WEBHISAYH-716 | 【安阳】医嘱模板维护----模板维护页对有大输液或检验组合的模板保存后，原模板医嘱错误 |\n| WEBHISAYH-718 | 会诊申请医嘱无法作废                                         |\n| WEBHISAYH-719 | 医生发起会诊申请提示超时                                     |\n| WEBHISAYH-727 | 【安阳】医生站----会诊医嘱KT缴费后，仍显示未付款             |\n| WEBHISAYH-728 | 【安阳】会诊申请----住院待审核会诊，点击“取消会诊”无法正常取消 |\n| WEBHISAYH-732 | 【安阳】医嘱列表作废“申请”状态的会诊医嘱，会诊列表仍显示该会诊记录并可继续会诊流程 |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBHISAYH-727          | 【安阳】医生站----会诊医嘱KT缴费后，仍显示未付款             |\n| WEBHISAYH-728          | 【安阳】会诊申请----住院待审核会诊，点击“取消会诊”无法正常取消 |\n| WEBHISAYH-732          | 【安阳】医嘱列表作废“申请”状态的会诊医嘱，会诊列表仍显示该会诊记录并可继续会诊流程 |\n\n------\n\n8.10：\n\n| ISSUE序列号 | ISSUE描述                                      |\n| ----------- | ---------------------------------------------- |\n| WEBS-7342   | 【宝鸡】----门诊医保慢病审批相关取值表调整     |\n| WEBS-7395   | 医嘱单预览-WPB_ACCOUNT_SEARCH_MODE参数改造     |\n| WEBS-7453   | 【宝鸡】门诊医生站----选择患者准备录医嘱时报错 |\n| WEBS-7472   | 【宝鸡】门诊医生站----WPB带患者进“慢病”页报错  |\n|             |                                                |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                |\n| ---------------------- | ------------------------------------------------------ |\n| WEBS-7453              | 【宝鸡】门诊医生站----选择患者准备录医嘱时报错         |\n| WEBS-7472              | 【宝鸡】门诊医生站----WPB带患者进“慢病”页报错          |\n| WEBS-7495              | 【宝鸡】医嘱模板----门诊医嘱模板维护增加拼音码生成按钮 |\n| WEBS-7497              | 【宝鸡】住院医生站----医嘱模板数据同步问题             |\n\n------\n\n8.14：\n\n| ISSUE序列号 | ISSUE描述                                              |\n| ----------- | ------------------------------------------------------ |\n| WEBS-7126   | 【医生站】医嘱模板维护功能优化                         |\n| WEBS-7495   | 【宝鸡】医嘱模板----门诊医嘱模板维护增加拼音码生成按钮 |\n| WEBS-7497   | 【宝鸡】住院医生站----医嘱模板数据同步问题             |\n|             |                                                        |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-7530              | 【宝鸡】门诊医生站----开立输血 报错null                      |\n| WEBS-7542              | 【宝鸡】第三方送检----预交金支付报错，影响后续缴费及费用查询 |\n| WEBS-7547              | 【宝鸡】第三方送检----患者挂号及挂号查询页面的序号显示有误   |\n| WEBHISAYH-741          | 【安阳】门诊医生站----外配处方没有数据                       |\n| WEBHISAYH-749          | 【安阳】门诊医生站----选择库房后医嘱落入列表的流向问题       |\n\n------\n\n8.15：\n\n| ISSUE序列号   | ISSUE描述                                                    |\n| ------------- | ------------------------------------------------------------ |\n| WEBS-7542     | 【宝鸡】第三方送检----预交金支付报错，影响后续缴费及费用查询 |\n| WEBS-7547     | 【宝鸡】第三方送检----患者挂号及挂号查询页面的序号显示有误   |\n| WEBHISAYH-736 | 【安阳】病理申请---录入’内镜标本填写‘后自动带入‘送检标本/材料’。 |\n| WEBHISAYH-741 | 【安阳】门诊医生站----外配处方没有数据                       |\n|               |                                                              |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-7579              | 【宝鸡】孕检免费项目----检验项目同属一个亚分组开立时，不应同属一个检验申请医嘱 |\n| WEBS-7580              | 【宝鸡】门诊住院开立检查申请均报错null                       |\n| WEBS-7582              | 【宝鸡】第三方送检----费用查询侧滑，交易日期默认查询时间有误 |\n| WEBHISAYH-751          | 【安阳】病理申请----修改“内镜标本填写”描述为“内镜标本”       |\n| WEBHISAYH-753          | 【安阳】辅诊处方打印----打印页面可查询到已停止状态的辅诊医嘱 |\n\n------\n\n8.16：\n\n| ISSUE序列号   | ISSUE描述                                                    |\n| ------------- | ------------------------------------------------------------ |\n| WEBS-7580     | 【宝鸡】门诊住院开立检查申请均报错null                       |\n| WEBS-7579     | 【宝鸡】孕检免费项目----检验项目同属一个亚分组开立时，不应同属一个检验申请医嘱 |\n| WEBHISAYH-680 | 【安阳】----增加辅诊处方单打印功能                           |\n| WEBHISAYH-753 | 【安阳】辅诊处方打印----打印页面可查询到已停止状态的辅诊医嘱 |\n\n| 提交的bug/sub-bug/优化 | bug描述                                    |\n| ---------------------- | ------------------------------------------ |\n| WEBS-7608              | 【宝鸡】医生站----会诊医嘱数量单位显示错误 |\n\n------\n\n8.17：\n\n| ISSUE序列号 | ISSUE描述                                                    |\n| ----------- | ------------------------------------------------------------ |\n| WEBS-6688   | 住院医生站------下达医嘱，光标自动定位                       |\n| WEBS-7582   | 【宝鸡】第三方送检----费用查询侧滑，交易日期默认查询时间有误 |\n| WEBS-7608   | 【宝鸡】医生站----会诊医嘱数量单位显示错误                   |\n| WEBS-7614   | 【宝鸡】门诊、住院医生站----开立检查申请报错                 |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-7613              | 【宝鸡】住院、辅诊、手麻医生站----pickshell开医嘱后光标自动定位问题 |\n| WEBS-7614              | 【宝鸡】门诊、住院医生站----开立检查申请报错                 |\n| WEBHISAYH-770          | 【安阳】门诊医生站----选择库房后对应药品库存数量显示有误     |\n\n------\n\n8.18：\n\n| ISSUE序列号   | ISSUE描述                                                    |\n| ------------- | ------------------------------------------------------------ |\n| WEBS-6728     | 【宝鸡】---第三方医院检验送检功能开发                        |\n| WEBS-7613     | 【宝鸡】住院、辅诊、手麻医生站----pickshell开医嘱后光标自动定位问题 |\n| WEBS-7655     | 【宝鸡】住院辅诊、手麻、医技医生站 “模板”按钮置灰不可用      |\n| WEBHISAYH-749 | 【安阳】门诊医生站----选择库房后医嘱落入列表的流向问题       |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                 |\n| ---------------------- | ------------------------------------------------------- |\n| WEBS-7655              | 【宝鸡】住院辅诊、手麻、医技医生站 “模板”按钮置灰不可用 |\n\n------\n\n8.21：\n\n| ISSUE序列号   | ISSUE描述                                            |\n| ------------- | ---------------------------------------------------- |\n| WEBS-7206     | 【宝鸡】------住院患者列表增加“取消入院申请”         |\n| WEBS-7477     | 会诊申请自动生成医嘱-WPB_ACCOUNT_SEARCH_MODE参数改造 |\n| WEBS-7481     | 医嘱模板保存-WPB_ACCOUNT_SEARCH_MODE参数改造         |\n| WEBS-7483     | 会诊申请-WPB_ACCOUNT_SEARCH_MODE参数改造             |\n| WEBHISAYH-675 | 【安阳】新增血糖系统接口                             |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-7693              | 【宝鸡】会诊----会诊详情页取消会诊后，会诊医嘱仍存在         |\n| WEBS-7694              | 【宝鸡】会诊----会诊申请信息填写医生时，回显该医生主科室至会诊科室 |\n\n------\n\n8.22：\n\n| ISSUE序列号   | ISSUE描述                                                    |\n| ------------- | ------------------------------------------------------------ |\n| WEBS-7460     | 【宝鸡门诊挂号】挂号时支付方式默认为扫码【8月】              |\n| WEBS-7667     | 【宝鸡】----特定孕检项目计费时折扣成0元                      |\n| WEBS-7721     | 【宝鸡】门诊医生站----pickshell录入医嘱框与两边不平齐        |\n| WEBS-7722     | 【宝鸡】退费申请----未默认勾选复选框，未默认查询已结算数据   |\n| WEBS-7727     | 【宝鸡】转诊----转入医院搜索框增加拼音码搜索逻辑             |\n| WEBHISAYH-771 | 【安阳】女性患者开立病理申请时，病理申请开立界面妇科检查选项变为必填项 |\n| WEBHISAYH-775 | 【安阳】门诊输液----已发药执行输液医嘱，护士无法打印输液单   |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-7720              | 【宝鸡】门诊医生站----医嘱剂量、数量单位、频次、周期的计算逻辑混乱 |\n| WEBS-7721              | 【宝鸡】门诊医生站----pickshell录入医嘱框与两边不平齐        |\n| WEBS-7722              | 【宝鸡】退费申请----未默认勾选复选框，未默认查询已结算数据   |\n| WEBS-7727              | 【宝鸡】转诊----转入医院搜索框增加拼音码搜索逻辑             |\n\n------\n\n8.23：\n\n| ISSUE序列号 | ISSUE描述                                                    |\n| ----------- | ------------------------------------------------------------ |\n| WEBS-7654   | 【宝鸡】--门诊医生站的退费申请界面--希望只显示已收费项目（9.0） |\n| WEBS-7693   | 【宝鸡】会诊----会诊详情页取消会诊后，会诊医嘱仍存在         |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-7745              | 【宝鸡】门诊慢病----慢病进行通过、驳回、撤销操作后，会弹窗判断确认关闭 |\n| WEBS-7746              | 【宝鸡】门诊医生站----慢病和特药弹窗  检索框根据申请单号查询有误 |\n\n------\n\n8.24:\n\n| ISSUE序列号 | ISSUE描述                                                    |\n| ----------- | ------------------------------------------------------------ |\n| WEBS-7188   | 【宝鸡】检查检验申请增加产科孕检免费项目的开立【8.0】        |\n| WEBS-7538   | 【宝鸡】转诊慢病特药医保接口相关调整【8月】                  |\n| WEBS-7667   | 【宝鸡】----特定孕检项目计费时折扣成0元                      |\n| WEBS-7720   | 【宝鸡】门诊医生站----医嘱剂量、数量单位、频次、周期的计算逻辑混乱 |\n| WEBS-7745   | 【宝鸡】医生站----慢病和转诊进行通过、驳回、撤销操作后，会弹窗判断确认关闭 |\n| WEBS-7746   | 【宝鸡】门诊医生站----慢病和特药弹窗  检索框根据申请单号查询有误 |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-7776              | 【宝鸡】医生站----开立检查申请时，“临床诊断”和“诊断描述”是否必填逻辑有误 |\n| WEBHISAYH-785          | 【安阳】门诊医生站----开立医嘱时多个频次的周期计算错误       |\n\n------\n\n8.25：\n\n| ISSUE序列号 | ISSUE描述                                                    |\n| ----------- | ------------------------------------------------------------ |\n| WEBS-7486   | 超限用药申请查看页面不显示已审核信息                         |\n| WEBS-7628   | [门诊住院医生站]---开立治疗医嘱时治疗科室下拉框改造，和治疗项目搜索逻辑改造 |\n\n------\n\n8.28：\n\n| ISSUE序列号   | ISSUE描述                                              |\n| ------------- | ------------------------------------------------------ |\n| WEBHISAYH-785 | 【安阳】门诊医生站----开立医嘱时多个频次的周期计算错误 |\n\n------\n\n8.29：\n\n| ISSUE序列号   | ISSUE描述                                                    |\n| ------------- | ------------------------------------------------------------ |\n| WEBS-7808     | 【宝鸡】门诊医技医生站----维护草药至医嘱模板后，模板管理页草药医嘱不显示 |\n| WEBHISAYH-792 | 【安阳】门诊退费----退药未退费药品在“退费历史”页显示为已完成退费项目 |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-7808              | 【宝鸡】门诊医技医生站----维护草药至医嘱模板后，模板管理页草药医嘱不显示 |\n| WEBS-7814              | 【宝鸡】医嘱模板----\"检验申请执行时间\"页面显示位置错误       |\n| WEBHISAYH-792          | 【安阳】门诊退费----退药未退费药品在“退费历史”页显示为已完成退费项目 |\n\n------\n\n8.30：\n\n| ISSUE序列号   | ISSUE描述                                                    |\n| ------------- | ------------------------------------------------------------ |\n| WEBS-7752     | （宝鸡）【挂号资源管理】增加专病门诊标识【9月】              |\n| WEBS-7814     | 【宝鸡】医嘱模板----\"检验申请执行时间\"页面显示位置错误       |\n| WEBS-7825     | 【宝鸡】辅诊医生站----新建医嘱模板保存后不显示，刷新页面也无效 |\n| WEBS-7827     | 【宝鸡】住院医生站----新开医嘱的“首次开始时间”无法修改       |\n| WEBHISAYH-795 | 【安阳】WPB----WPB搜索框中 部分患者年龄与实际年龄不符        |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-7825              | 【宝鸡】辅诊医生站----新建医嘱模板保存后不显示，刷新页面也无效 |\n| WEBS-7827              | 【宝鸡】住院医生站----新开医嘱的“首次开始时间”无法修改       |\n| WEBS-7828              | 【宝鸡】手麻医生站----开立草药医嘱，点击确认时前端报错       |\n| WEBS-7836              | 【宝鸡】门诊挂号----科室年龄校验弹窗文字显示有误             |\n| WEBHISAYH-795          | 【安阳】WPB----WPB搜索框中 部分患者年龄与实际年龄不符        |\n\n------\n\n8.31：\n\n| ISSUE序列号 | ISSUE描述                                                    |\n| ----------- | ------------------------------------------------------------ |\n| WEBS-7828   | 【宝鸡】手麻医生站----开立草药医嘱，点击确认时前端报错       |\n| WEBS-7836   | 【宝鸡】门诊挂号----科室年龄校验弹窗文字显示有误             |\n| WEBS-7840   | 【宝鸡】门诊挂号----科室校验弹窗内容，应与当前所挂资源科室关联 |\n|             |                                                              |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-7840              | 【宝鸡】门诊挂号----科室校验弹窗内容，应与当前所挂资源科室关联 |\n| WEBS-7843              | 【宝鸡】医技医生站----备血医嘱保存后，查看输血医嘱详情时报错 |\n| WEBS-7844              | 【科室缴费】----WPB选住院患者或未开检查的门诊患者，点击科室缴费界面报错 |\n| WEBS-7845              | 【宝鸡】门诊挂号----患者挂号报错null                         |\n| WEBS-7847              | 【宝鸡】门诊预约----“门诊预约”页需要增加“科室年龄、性别校验”，效果同“门诊挂号” |\n| WEBS-7854              | 【宝鸡】门诊医生站----门诊医生进入住院证登记时报错           |\n| WEBHISAYH-798          | 【安阳】辅诊医嘱审核----审核及打印查询慢，报请求超时         |\n\n------\n\n9.1：\n\n| ISSUE序列号 | ISSUE描述                                                    |\n| ----------- | ------------------------------------------------------------ |\n| WEBS-7753   | （宝鸡）【门诊挂号/门诊预约】挂号/预约时增加科室-性别、科室-年龄限制校验【9月】 |\n| WEBS-7773   | （宝鸡）【门诊挂号】增加会诊挂号功能【9月】                  |\n| WEBS-7843   | 【宝鸡】医技医生站----备血医嘱保存后，查看输血医嘱详情时报错 |\n| WEBS-7844   | 【科室缴费】----WPB选住院患者或未开检查的门诊患者，点击科室缴费界面报错 |\n| WEBS-7847   | 【宝鸡】门诊预约----“门诊预约”页需要增加“科室年龄、性别校验”，效果同“门诊挂号” |\n| WEBS-7854   | 【宝鸡】门诊医生站----门诊医生进入住院证登记时报错           |\n\n------\n\n9.4：\n\n| ISSUE序列号   | ISSUE描述                                                    |\n| ------------- | ------------------------------------------------------------ |\n| WEBS-7831     | 【宝鸡】门诊挂号----医保患者挂号时报错                       |\n| WEBS-7845     | 【宝鸡】门诊挂号----患者挂号报错null                         |\n| WEBS-7859     | 手术护士在手术排版界面进行手术计费后，点击手术完成按钮，提示‘患者手术未计费’ |\n| WEBHISAYH-791 | 安阳--门诊退费申请退费--增加限制，谁开的费用谁能进行退费【2023.9.13版本】 |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-7896              | 【宝鸡】会诊----MDT会诊审批后，在“会诊管理”页无法查到该条会诊 |\n| WEBS-7897              | 【宝鸡】会诊----住院会诊申请单中“取消会诊”按钮失效           |\n| WEBHISAYH-811          | 【安阳】多科会诊----变更会诊状态后会诊医生存值有误           |\n\n------\n\n9.5：\n\n| ISSUE序列号   | ISSUE描述                                                    |\n| ------------- | ------------------------------------------------------------ |\n| WEBS-7673     | 【宝鸡】登录页面需要增加医院医保码【9月】                    |\n| WEBS-7859     | 手术护士在手术排版界面进行手术计费后，点击手术完成按钮，提示‘患者手术未计费’ |\n| WEBS-7896     | 【宝鸡】会诊----MDT会诊审批后，在“会诊管理”页无法查到该条会诊 |\n| WEBHISAYH-798 | 【安阳】辅诊医嘱审核----审核及打印查询慢，报请求超时         |\n\n------\n\n9.6：\n\n| ISSUE序列号 | ISSUE描述                                          |\n| ----------- | -------------------------------------------------- |\n| WEBS-7897   | 【宝鸡】会诊----住院会诊申请单中“取消会诊”按钮失效 |\n| WEBS-7924   | 【宝鸡】医生站----参保地医保区划参数设置不符需求   |\n\n| 提交的bug/sub-bug/优化 | bug描述                                          |\n| ---------------------- | ------------------------------------------------ |\n| WEBS-7924              | 【宝鸡】医生站----参保地医保区划参数设置不符需求 |\n\n------\n\n9.7：\n\n| ISSUE序列号   | ISSUE描述                                                    |\n| ------------- | ------------------------------------------------------------ |\n| WEBS-7662     | 【宝鸡】门诊、住院、手麻、辅诊、医技医生开立检查医嘱后，医嘱项目上的金额字段应该为开立检查项目所绑定的附加费总和 【9月】 |\n| WEBS-7867     | 【宝鸡】医生站转诊备案申请时，判断是否为本地医保【9月】      |\n| WEBHISAYH-804 | 【安阳】病理申请------绝经选项增加年龄判断是否必填           |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-7948              | 【宝鸡】门诊预约----本院职工身份患者从“门诊预约”页预约成功后，患者身份置空 |\n| WEBHISAYH-815          | 【门诊医生站】诊断弹窗中出现null                             |\n| WEBHISAYH-816          | 【住院预约】选择入院科室后加载慢                             |\n\n------\n\n9.8：\n\n| ISSUE序列号 | ISSUE描述                                                    |\n| ----------- | ------------------------------------------------------------ |\n| WEBS-7355   | 【宝鸡】增加参数控制申请是否可以作废和停止                   |\n| WEBS-7870   | 【宝鸡】慢病备案申请页面的病种支持下拉框搜索【9月】          |\n| WEBS-7948   | 【宝鸡】门诊预约----本院职工身份患者从“门诊预约”页预约成功后，患者身份置空 |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBHISAYH-822          | 【安阳】医嘱模板----住院、住院辅诊医生站的医嘱模板管理页“保存”和“另存”按钮置灰，影响模板维护 |\n\n------\n\n9.11：\n\n| ISSUE序列号   | ISSUE描述                                             |\n| ------------- | ----------------------------------------------------- |\n| WEBS-8011     | 【宝鸡】会诊----会诊申请完成后，需求自动刷新医嘱列表  |\n| WEBHISAYH-803 | 安阳--门诊划价、费用录入--条形码限制【2023.9.13版本】 |\n| WEBHISAYH-816 | 【住院预约】选择入院科室后加载慢                      |\n\n| 提交的bug/sub-bug/优化 | bug描述                                              |\n| ---------------------- | ---------------------------------------------------- |\n| WEBS-8011              | 【宝鸡】会诊----会诊申请完成后，需求自动刷新医嘱列表 |\n| WEBHISAYH-835          | 【安阳】医嘱模板----住院本科室模板图标，收藏后仍置灰 |\n\n------\n\n9.12：\n\n| ISSUE序列号   | ISSUE描述                                            |\n| ------------- | ---------------------------------------------------- |\n| WEBHISAYH-810 | 【安阳】医嘱模板增加自定义排序                       |\n| WEBHISAYH-815 | 【门诊医生站】诊断弹窗中出现null                     |\n| WEBHISAYH-835 | 【安阳】医嘱模板----住院本科室模板图标，收藏后仍置灰 |\n\n------\n\n9.13：\n\n| ISSUE序列号   | ISSUE描述                    |\n| ------------- | ---------------------------- |\n| WEBHISAYH-820 | 【安阳】会诊回复医生单独存值 |\n\n------\n\n9.14：\n\n| ISSUE序列号 | ISSUE描述                                                    |\n| ----------- | ------------------------------------------------------------ |\n| WEBS-7855   | 【宝鸡】门诊预约/医生站自助挂号-患者是否为本院职工判断逻辑修改 |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-8056              | 【宝鸡】WPB----复制患者的就诊卡号，粘贴内容为[object Object] |\n| WEBS-8066              | 【宝鸡】医技医嘱执行----已执行医嘱无法正常撤销               |\n| WEBS-8067              | WEBHIS药品单位删除后，医嘱开立界面仍展示了对应的删除的药品单位 |\n| WEBHISAYH-852          | WEBHIS药品单位删除后，医嘱开立界面仍展示了对应的删除的药品单位 |\n\n------\n\n9.18：\n\n| ISSUE序列号   | ISSUE描述                                                    |\n| ------------- | ------------------------------------------------------------ |\n| WEBS-7893     | 【宝鸡】医嘱模板增加自定义排序                               |\n| WEBS-7938     | 会诊申请-会诊医嘱控制                                        |\n| WEBS-8023     | 会诊申请-会诊医嘱控制（新增显示模式）                        |\n| WEBS-8066     | 【宝鸡】医技医嘱执行----已执行医嘱无法正常撤销               |\n| WEBHISAYH-852 | WEBHIS药品单位删除后，医嘱开立界面仍展示了对应的删除的药品单位 |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-8104              | 【宝鸡】DIP/DRG-门诊处方预警接口，修改参数后前端报错         |\n| WEBS-8112              | 【宝鸡】DIP/DRG接口开发----住院医嘱预警，前端未调接口，参数无效 |\n\n------\n\n9.19：\n\n| ISSUE序列号 | ISSUE描述                                                    |\n| ----------- | ------------------------------------------------------------ |\n| WEBS-7946   | 【宝鸡】门诊挂号--F5刷新后光标选中wpb搜索框【9月】           |\n| WEBS-8056   | 【宝鸡】WPB----复制患者的就诊卡号，粘贴内容为[object Object] |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-8124              | 【宝鸡】检验申请弹窗优化----孕检免费项目检验组/标本分类 检索不完整 |\n| WEBS-8125              | 【宝鸡】检验申请弹窗优化----项目全局检索后，检验组/分类选择后原项目检索框失效 |\n| WEBS-8135              | 【宝鸡】门诊慢特病----申请审批页 申请疾病字段值不显示        |\n\n------\n\n9.20：\n\n| ISSUE序列号 | ISSUE描述                                                    |\n| ----------- | ------------------------------------------------------------ |\n| WEBS-7907   | 【宝鸡】检验申请开立弹窗优化                                 |\n| WEBS-8104   | 【宝鸡】DIP/DRG-门诊处方预警接口，修改参数后前端报错         |\n| WEBS-8112   | 【宝鸡】DIP/DRG接口开发----住院医嘱预警，前端未调接口，参数无效 |\n| WEBS-8124   | 【宝鸡】检验申请弹窗优化----孕检免费项目检验组/标本分类 检索不完整 |\n| WEBS-8125   | 【宝鸡】检验申请弹窗优化----项目全局检索后，检验组/分类选择后原项目检索框失效 |\n| WEBS-8136   | 【宝鸡】门诊慢特病----申请审批页 申请疾病字段值不显示        |\n\n------\n\n9.21：\n\n| ISSUE序列号 | ISSUE描述                                                    |\n| ----------- | ------------------------------------------------------------ |\n| WEBS-8027   | 【宝鸡】住院证登记--申请入院日期、病区、诊断、诊断日期、患者病情增加默认效果【9月】 |\n| WEBS-8067   | WEBHIS药品单位删除后，医嘱开立界面仍展示了对应的删除的药品单位 |\n| WEBS-8151   | [门诊预约日视图]--日视图选择时间片添加预约，log有报错        |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-8157              | 【宝鸡】门诊慢特病----明细查看页 认证通过疾病显示[object Object] |\n| WEBS-8165              | 【宝鸡】门诊会诊----开立会诊时未刷新列表，控制会诊医嘱自动生成参数失效 |\n| WEBS-8174              | 【门诊医生站】---勾选处方流转后，没有库存的药pickshell搜不出来 |\n\n------\n\n9.22：\n\n| ISSUE序列号   | ISSUE描述                                                    |\n| ------------- | ------------------------------------------------------------ |\n| WEBS-7932     | 【宝鸡】住院医生站可以同时显示患者住院就诊所有医嘱【9月】    |\n| WEBS-8157     | 【宝鸡】门诊慢特病----明细查看页 认证通过疾病显示[object Object] |\n| WEBS-8178     | 【宝鸡】转诊----医生站转诊按钮，转院原因存值无法更新         |\n| WEBHISAYH-864 | 【门诊医生站】---勾选处方流转后，没有库存的药pickshell搜不出来 |\n\n| 提交的bug/sub-bug/优化 | bug描述                                              |\n| ---------------------- | ---------------------------------------------------- |\n| WEBS-8178              | 【宝鸡】转诊----医生站转诊按钮，转院原因存值无法更新 |\n| WEBS-8180              | 【宝鸡】转诊----“诊断描述”文本框显示有误             |\n\n------\n\n9.25：\n\n| ISSUE序列号 | ISSUE描述                                                    |\n| ----------- | ------------------------------------------------------------ |\n| WEBS-8106   | 【宝鸡】转院、慢病、特药备案优化                             |\n| WEBS-8165   | 【宝鸡】门诊会诊----开立会诊时未刷新列表，控制会诊医嘱自动生成参数失效 |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-8207              | 【宝鸡】医生站----治疗类自定义医嘱默认带执行人               |\n| WEBS-8208              | 【宝鸡】医生站----自定义医嘱从剪切板、模板调用时全部带入执行人 |\n| WEBS-8209              | 【宝鸡】医生站----组合医嘱从模板导入时，未显示执行人         |\n| WEBS-8212              | 【宝鸡】住院医生站----列表中有医嘱 同时存在“作废”和“停止”按钮 |\n\n------\n\n9.28：\n\n| ISSUE序列号 | ISSUE描述                                                    |\n| ----------- | ------------------------------------------------------------ |\n| WEBS-7928   | 【宝鸡】 检查申请开立弹窗优化                                |\n| WEBS-8189   | 慢特病申请-申请疾病增加数量控制                              |\n| WEBS-8207   | 【宝鸡】医生站----治疗类自定义医嘱默认带执行人               |\n| WEBS-8208   | 【宝鸡】医生站----自定义医嘱从剪切板、模板调用时全部带入执行人 |\n| WEBS-8209   | 【宝鸡】医生站----组合医嘱从模板导入时，未显示执行人         |\n| WEBS-8241   | 【宝鸡】医生站----不计价医嘱，取消计价勾选时应同时联动清空执行人 |\n| WEBS-8242   | 【宝鸡】住院医生站----开立会诊医嘱，执行人应默认开单医生     |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-8238              | 【宝鸡】住院医生站----批量不计价按钮点击前端报错             |\n| WEBS-8241              | 【宝鸡】医生站----不计价医嘱，取消计价勾选时应同时联动清空执行人 |\n| WEBS-8242              | 【宝鸡】住院医生站----开立会诊医嘱，执行人应默认开单医生     |\n| WEBS-8244              | 【宝鸡】挂号/预约查询----预约详情页点击预约到诊时报错null    |\n\n------\n\n10.7：\n\n| ISSUE序列号 | ISSUE描述                                                    |\n| ----------- | ------------------------------------------------------------ |\n| WEBS-8001   | 【宝鸡】医生看诊、医嘱核对页面WPB搜索效果调整【9月】         |\n| WEBS-8212   | 【宝鸡】住院医生站----列表中有医嘱 同时存在“作废”和“停止”按钮 |\n| WEBS-8238   | 【宝鸡】住院医生站----批量不计价按钮点击前端报错             |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-8252              | WEBHIS预诊信息填写后预诊记录记录表没有写入visitid            |\n| WEBS-8254              | 【宝鸡】挂号/预约查询----点击“预约到诊”弹窗“配置错误：接口null未配置” |\n| WEBHISAYH-881          | 【知识库】未弹到界面最前面                                   |\n\n------\n\n10.8：\n\n| ISSUE序列号   | ISSUE描述                                       |\n| ------------- | ----------------------------------------------- |\n| WEBS-7419     | 【宝鸡】医生站----开立医嘱增加执行人录入【9.0】 |\n| WEBHISAYH-881 | 【知识库】未弹到界面最前面                      |\n\n| 提交的bug/sub-bug/优化 | bug描述                                    |\n| ---------------------- | ------------------------------------------ |\n| WEBS-8264              | 【宝鸡】医嘱列表“执行人”文本显示位置不规范 |\n\n------\n\n10.9：\n\n| ISSUE序列号 | ISSUE描述                                                    |\n| ----------- | ------------------------------------------------------------ |\n| WEBS-7978   | 【宝鸡】挂号/预约查询页面【9月】                             |\n| WEBS-8190   | 慢特病、特药处方开立-增加是否需要备案的控制                  |\n| WEBS-8252   | WEBHIS预诊信息填写后预诊记录记录表没有写入visitid            |\n| WEBS-8254   | 【宝鸡】挂号/预约查询----点击“预约到诊”弹窗“配置错误：接口null未配置” |\n\n------\n\n10.10：\n\n| ISSUE序列号 | ISSUE描述                                                    |\n| ----------- | ------------------------------------------------------------ |\n| WEBS-7872   | 【宝鸡】门诊医生站开立精一处方时校验录入代办人信息【9月】    |\n| WEBS-8264   | 【宝鸡】医嘱列表“执行人”文本显示位置不规范                   |\n| WEBS-8316   | 【宝鸡】门诊医生站----精一药品保存校验弹窗  未显示列出所有“精神一类药品” |\n| WEBS-8318   | 【宝鸡】门诊医生站----代开人录入后 保存医嘱仍弹窗录入代开人，agent_Name未存值 |\n| WEBS-8325   | 【宝鸡】手麻、医技、辅诊医生站----初入页面前端报错           |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-8316              | 【宝鸡】门诊医生站----精一药品保存校验弹窗  未显示列出所有“精神一类药品” |\n| WEBS-8318              | 【宝鸡】门诊医生站----代开人录入后 保存医嘱仍弹窗录入代开人，agent_Name未存值 |\n| WEBS-8325              | 【宝鸡】手麻、医技、辅诊医生站----初入页面前端报错           |\n\n------\n\n10.11：\n\n| ISSUE序列号 | ISSUE描述                                      |\n| ----------- | ---------------------------------------------- |\n| WEBS-8342   | 【宝鸡】门诊医生站----给患者录入诊断时前端报错 |\n\n| 提交的bug/sub-bug/优化 | bug描述                                        |\n| ---------------------- | ---------------------------------------------- |\n| WEBS-8342              | 【宝鸡】门诊医生站----给患者录入诊断时前端报错 |\n\n------\n\n10.12：\n\n| ISSUE序列号   | ISSUE描述                                        |\n| ------------- | ------------------------------------------------ |\n| WEBHISAYH-889 | 【安阳】医生站  增加标记外伤自费、妊娠期、哺乳期 |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                    |\n| ---------------------- | ---------------------------------------------------------- |\n| WEBS-8353              | 【宝鸡】门诊医生站----代开人录入后，“联系方式”值不回显     |\n| WEBS-8364              | 【宝鸡】会诊医嘱名称显示修改                               |\n| WEBS-8368              | 【宝鸡】孕检项目----项目检索框搜索时“检验组”会刷新显示全部 |\n\n------\n\n10.16：\n\n| ISSUE序列号 | ISSUE描述                                                    |\n| ----------- | ------------------------------------------------------------ |\n| WEBS-8368   | 【宝鸡】孕检项目----项目检索框搜索时“检验组”会刷新显示全部   |\n| WEBS-8353   | 【宝鸡】门诊医生站----代开人录入后，“联系方式”值不回显       |\n| WEBS-8364   | 【宝鸡】会诊医嘱名称显示修改                                 |\n| WEBS-8389   | 【宝鸡】挂号预约查询--修改预约时“确认”按钮转圈置灰, 无法点击 |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-8388              | 【宝鸡】挂号预约查询----部分数据 修改/取消预约时会报错null   |\n| WEBS-8384              | 【宝鸡】医生站----检查申请开立后再编辑时报错NULL             |\n| WEBS-8381              | 【转诊备案】转诊页面默认带入门诊主诊断                       |\n| WEBS-8380              | 【特药备案】特药页面默认带入门诊主诊断                       |\n| WEBHISAYH-910          | 【安阳】手术要求校验文字排版样式修改                         |\n| WEBS-8389              | 【宝鸡】挂号预约查询--修改预约时“确认”按钮转圈置灰, 无法点击 |\n\n------\n\n10.17：\n\n| ISSUE序列号   | ISSUE描述                                            |\n| ------------- | ---------------------------------------------------- |\n| WEBHISAYH-854 | 【安阳】门诊诊断页签增加初复诊必填校验               |\n| WEBHISAYH-878 | 【医生站手术申请】手术申请弹窗，手术要求需要为必填项 |\n| WEBHISAYH-892 | 【安阳】操作类手术项目所有医生不限制权限             |\n| WEBHISAYH-910 | 【安阳】手术要求校验文字排版样式修改                 |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-8414              | 【宝鸡】排班生成----分时预约限额设置后，在门诊预约日视图中未生效 |\n\n------\n\n10.18：\n\n| ISSUE序列号   | ISSUE描述                                        |\n| ------------- | ------------------------------------------------ |\n| WEBS-8380     | 【特药备案】特药页面默认带入门诊主诊断           |\n| WEBS-8381     | 【转诊备案】转诊页面默认带入门诊主诊断           |\n| WEBS-8384     | 【宝鸡】医生站----检查申请开立后再编辑时报错NULL |\n| WEBS-8428     | 门急诊挂号员在WPB点击读取身份证后报错            |\n| WEBHISAYH-912 | 【安阳】患者诊断“初复诊”文字标红显示             |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-8427              | 【宝鸡】门诊医生站----用法、频次输入框录入时光标异常         |\n| WEBS-8429              | 【宝鸡】挂号资源管理----“治疗”资源类型下“治疗师”不填写可正常保存 |\n| WEBS-8430              | 【宝鸡】门诊医生站----“自助挂号”功能 电子健康卡输入框扩宽    |\n| WEBS-8437              | WEBHIS门诊预约之后进行挂号是，预约的挂号资源没有自动带入     |\n| WEBS-8438              | 【宝鸡】门诊医生站----点击新挂号未看诊患者时报错             |\n| WEBHISAYH-912          | 【安阳】患者诊断“初复诊”文字标红显示                         |\n\n------\n\n10.19：\n\n| ISSUE序列号 | ISSUE描述                                                    |\n| ----------- | ------------------------------------------------------------ |\n| WEBS-8253   | 【宝鸡】报表查询——增加在新标签页打开报表功能                 |\n| WEBS-8406   | 医保患者科室缴费时报错                                       |\n| WEBS-8429   | 【宝鸡】挂号资源管理----“治疗”资源类型下“治疗师”不填写可正常保存 |\n| WEBS-8430   | 【宝鸡】门诊医生站----“自助挂号”功能 电子健康卡输入框扩宽    |\n| WEBS-8438   | 【宝鸡】门诊医生站----点击新挂号未看诊患者时报错             |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-8470              | 【宝鸡】单据打印----未配置“病理申请单”报表时，可在“检查申请单”列表下打印“病理申请单” |\n\n------\n\n10.20：\n\n| ISSUE序列号 | ISSUE描述                                                |\n| ----------- | -------------------------------------------------------- |\n| WEBS-8286   | 【挂号资源管理】--增加治疗师维护入口                     |\n| WEBS-8437   | WEBHIS门诊预约之后进行挂号时，预约的挂号资源没有自动带入 |\n\n------\n\n10.24：\n\n| ISSUE序列号 | ISSUE描述                                                    |\n| ----------- | ------------------------------------------------------------ |\n| WEBS-8271   | 【宝鸡】病理申请弹窗中信息必填配置【10月】                   |\n| WEBS-8401   | 【宝鸡】wpb/门诊医生站--wpb查询患者及医生站患者列表增加科室看诊挂号有效期逻辑【10月】 |\n| WEBS-8436   | 【宝鸡】门诊挂号页面选择挂号弹窗去掉预检记录查询             |\n\n------\n\n10.25：\n\n| ISSUE序列号 | ISSUE描述                                    |\n| ----------- | -------------------------------------------- |\n| WEBS-8253   | 【宝鸡】报表查询——增加在新标签页打开报表功能 |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-8546              | 【医生站】医嘱暂存----多种类型医嘱 暂存提交时报错“违反约束”  |\n| WEBS-8548              | 【医生站】医嘱暂存----手术类医嘱暂存时前端报错               |\n| WEBS-8554              | 【医生站】医嘱暂存----医嘱列表多个信息项应当可编辑，效果应与KT同步 |\n| WEBS-8555              | 【医生站】医嘱暂存----暂存医嘱后，从WPB处退出患者时页面置灰  |\n\n------\n\n10.26：\n\n| ISSUE序列号 | ISSUE描述                                            |\n| ----------- | ---------------------------------------------------- |\n| WEBS-8400   | 【宝鸡】门诊医生站支持修改患者属性                   |\n| WEBS-8427   | 【宝鸡】门诊医生站----用法、频次输入框录入时光标异常 |\n| WEBS-8564   | 治疗医嘱执行界面已执行医嘱撤销键置灰                 |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-8562              | 【住院医生站】医嘱暂存----删除已暂存医嘱后 医嘱仍在列表中，需大刷新页面才消失 |\n| WEBS-8564              | 治疗医嘱执行界面已执行医嘱撤销键置灰                         |\n\n------\n\n","source":"_posts/KBJ-ISSUE记录.md","raw":"---\ntitle: KBJ-ISSUE记录\ntags: 6\nabbrlink: 5f967442\ndate: 2022-07-28 14:46:47\npassword: n8g98zwj\n---\n\n**记录工作期间，每日完成的issue，以便后续如有回顾需要**\n\n<!--more-->\n\n项目：\n\n宝鸡市中心医院\n\n安阳人民医院\n\n------\n\n5.31：\n\n| ISSUE序列号 | ISSUE描述                          |\n| ----------- | ---------------------------------- |\n| WEBS-6113   | 【宝鸡】----住院医生站特殊医嘱处理 |\n\n------\n\n6.6：\n\n| ISSUE序列号 | ISSUE描述                                                    |\n| ----------- | ------------------------------------------------------------ |\n| WEBS-6057   | 【宝鸡】新增挂号资源诊室对照页面                             |\n| WEBS-6587   | 【宝鸡】【排班生成】--排班生成修改，每次修改限额均弹出验证提醒 |\n| WEBS-6592   | 【宝鸡】【排班规则】--排班规则修改，每次修改限额均弹出验证提醒 |\n| WEBS-6649   | 【宝鸡】【排班规则】--排班规则设置列表，限额设置校验         |\n| WEBS-6650   | 【宝鸡】【排班生成】--排班生成列表，限额设置校验             |\n\n------\n\n6.7：\n\n| ISSUE序列号 | ISSUE描述                  |\n| ----------- | -------------------------- |\n| WEBS-6194   | 【宝鸡】----不计价医嘱处理 |\n\n------\n\n6.9：\n\n| ISSUE序列号 | ISSUE描述                                       |\n| ----------- | ----------------------------------------------- |\n| WEBS-6391   | 【宝鸡】【门诊输液打印】---查询已执行输液pe记录 |\n\n\n\n------\n\n6.12：\n\n| ISSUE序列号 | ISSUE描述                                                    |\n| ----------- | ------------------------------------------------------------ |\n| WEBS-6254   | 【宝鸡】新增排班生成页面                                     |\n| WEBS-6429   | 【宝鸡】【童创】---治疗医嘱执行新页面                        |\n| WEBS-6455   | 【宝鸡】【童创】--新增排程查询页面                           |\n| WEBS-6638   | 【童创】门诊预诊——添加预诊信息页面读取必填项配置             |\n| WEBS-6662   | 【挂号资源诊室对照】--诊室对照列表中显示的号别应该显示描述，不是code |\n| WEBS-6677   | 【宝鸡】【排班规则】--“是否有排班”查询无效                   |\n| WEBS-6678   | 【宝鸡】【排班规则】--批量生成的排班，删除某天排班时会全部删除 |\n| WEBS-6679   | 【宝鸡】【排班规则】--批量排班会覆盖原已有排班               |\n| WEBS-6680   | 【宝鸡】【排班规则】--分时设置开启不出诊时段抛出异常         |\n| WEBS-6683   | 【宝鸡】【排班规则】--批量生成规则表后，数据条数和标识异常   |\n\n------\n\n6.14：\n\n| ISSUE序列号 | ISSUE描述                                      |\n| ----------- | ---------------------------------------------- |\n| WEBS-6253   | 【宝鸡】新增排班规则设置页面                   |\n| WEBS-6455   | 【宝鸡】【童创】---新增排程查询页面            |\n| WEBS-6507   | 【宝鸡】-----病理申请条码打印                  |\n| WEBS-6722   | 【宝鸡】【童创】--“排程查询”治疗师查询范围有误 |\n\n------\n\n6.15：\n\n| ISSUE序列号 | ISSUE描述                                                    |\n| ----------- | ------------------------------------------------------------ |\n| WEBS-6581   | 门诊医生站（安阳）-医嘱模板改为DEV模式                       |\n| WEBS-6771   | 【宝鸡】【排班规则】--更新分时列表数据，后台会删除原有数据再重新生成新数据 |\n\n------\n\n6.19：\n\n| ISSUE序列号   | ISSUE描述                                             |\n| ------------- | ----------------------------------------------------- |\n| WEBHISAYH-360 | 【门诊医生站】慢病患者在门诊医生看诊时候提示 是否慢病 |\n\n------\n\n6.20：\n\n| ISSUE序列号 | ISSUE描述                                        |\n| ----------- | ------------------------------------------------ |\n| WEBS-6288   | 【宝鸡】计算挂号费存储过程增加减免方式的计算逻辑 |\n\n------\n\n6.25：\n\n| ISSUE序列号 | ISSUE描述                                                    |\n| ----------- | ------------------------------------------------------------ |\n| WEBS-6456   | 【医生站】---调用模板、历史医嘱引用、复制粘贴判断医嘱项目是否有效 |\n\n------\n\n6.26：\n\n| ISSUE序列号 | ISSUE描述                                    |\n| ----------- | -------------------------------------------- |\n| WEBS-6136   | 【宝鸡】转诊申请及查看页面开发               |\n| WEBS-6137   | 【宝鸡】转诊审批及申请明细页面开发           |\n| WEBS-6634   | 【宝鸡】门诊慢特病申请及查看页面开发         |\n| WEBS-6635   | 【宝鸡】门诊慢特病审批及明细页面开发         |\n| WEBS-6909   | 【宝鸡】转诊申请页面--险种类型下拉框字段修改 |\n\n------\n\n6.28:\n\n| ISSUE序列号   | ISSUE描述                                                    |\n| ------------- | ------------------------------------------------------------ |\n| WEBS-6138     | 特药申请及查看页面开发                                       |\n| WEBS-6139     | 特药审批及申请明细开发                                       |\n| WEBS-6939     | 【宝鸡】门诊慢特病申请--“申请疾病”字段取值修改               |\n| WEBHISAYH-370 | 【安阳】会诊申请-----增加会诊单打印功能                      |\n| WEBHISAYH-385 | 【安阳】门诊医生站---wpb带未看诊慢病患者时，提示是否进行慢病治疗 |\n| WEBHISAYH-386 | 【安阳】----检查/检验 报告查看页面增加360视图查看按钮        |\n\n------\n\n7.2（周日加班）：\n\n| ISSUE序列号   | ISSUE描述                                             |\n| ------------- | ----------------------------------------------------- |\n| WEBHISAYH-353 | 【安阳】住院医生站----增加医嘱开单科室的选择          |\n| WEBHISAYH-386 | 【安阳】----检查/检验 报告查看页面增加360视图查看按钮 |\n\n------\n\n7.3：\n\n| ISSUE序列号   | ISSUE描述                                                    |\n| ------------- | ------------------------------------------------------------ |\n| WEBHISAYH-418 | 【安阳】------医嘱模板弹窗医嘱模板检索优化                   |\n| WEBHISAYH-425 | [手术预约查看]---新增手术预约查看页面，嵌入麦迪的web页面     |\n| WEBHISAYH-432 | 【费用录入】----收费项目管理维护了条码划价时，添加项目时需要校验条码号必填 |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBHISAYH-476          | 【安阳】住院医生站----进入“模板管理”页面时自动选中节点，导致“新增模板”功能失效 |\n| WEBHISAYH-477          | 【安阳】住院医生站----模板维护，勾选某模板的医嘱切换到另一模板时，自动勾选之前医嘱所在列 |\n| WEBHISAYH-479          | 【安阳】住院医生站----模板维护，从医生站患者医嘱列表复制医嘱，粘贴至“模板维护”的任一模板中时报错 |\n| WEBHISAYH-480          | 【安阳】住院医生站----模板维护，医生站患者医嘱复制的医嘱，到模板维护页面粘贴未保存 点击编辑时报错 |\n| WEBHISAYH-481          | 【安阳】住院医生站----“模板”页面存在已作废医嘱，“模板管理”维护时可勾选并复制该已作废医嘱 |\n\n------\n\n7.4：\n\n| ISSUE序列号   | ISSUE描述                                                    |\n| ------------- | ------------------------------------------------------------ |\n| WEBHISAYH-476 | 【安阳】住院医生站----进入“模板管理”页面时自动选中节点，导致“新增模板”功能失效 |\n| WEBHISAYH-477 | 【安阳】住院医生站----模板维护，勾选某模板的医嘱切换到另一模板时，自动勾选之前医嘱所在列 |\n| WEBHISAYH-479 | 【安阳】住院医生站----模板维护，从医生站患者医嘱列表复制医嘱，粘贴至“模板维护”的任一模板中时报错 |\n| WEBHISAYH-480 | 【安阳】住院医生站----模板维护，医生站患者医嘱复制的医嘱，到模板维护页面粘贴未保存 点击编辑时报错 |\n| WEBHISAYH-481 | 【安阳】住院医生站----“模板”页面存在已作废医嘱，“模板管理”维护时可勾选并复制该已作废医嘱 |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                    |\n| ---------------------- | ---------------------------------------------------------- |\n| WEBS-6992              | 【宝鸡】医技医嘱执行----已执行医嘱录入附加收费时，报错空值 |\n| WEBS-6994              | 【宝鸡】医技医嘱执行----下拉框选择后切换到其他页面会失效   |\n\n------\n\n7.5：\n\n| ISSUE序列号   | ISSUE描述                                |\n| ------------- | ---------------------------------------- |\n| WEBHISAYH-456 | 【门诊急挂号】患者身份下拉框取值逻辑调整 |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                     |\n| ---------------------- | ----------------------------------------------------------- |\n| WEBS-7003              | 【宝鸡】门诊医技执行----页面显示未执行患者 不显示待执行医嘱 |\n\n------\n\n7.7：\n\n| ISSUE序列号 | ISSUE描述                                                   |\n| ----------- | ----------------------------------------------------------- |\n| WEBS-5835   | 【宝鸡】----医技医嘱执行页面开发                            |\n| WEBS-6976   | 【宝鸡】【不计价医嘱】取消勾选“计价”时，联动取消勾选“摆药”  |\n| WEBS-6992   | 【宝鸡】医技医嘱执行----已执行医嘱录入附加收费时，报错空值  |\n| WEBS-6994   | 【宝鸡】医技医嘱执行----下拉框选择后切换到其他页面会失效    |\n| WEBS-7003   | 【宝鸡】门诊医技执行----页面显示未执行患者 不显示待执行医嘱 |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-7032              | 【宝鸡】医技医嘱执行----带WPB住院患者进入“医技医嘱执行”页面时弹窗“没有有效挂号信息” |\n\n------\n\n7.10：\n\n| ISSUE序列号 | ISSUE描述                                                    |\n| ----------- | ------------------------------------------------------------ |\n| WEBS-6993   | 【宝鸡】----新增医技医嘱执行页面增加刷新按钮                 |\n| WEBS-7041   | 【宝鸡】医技医嘱执行----带WPB住院患者进入“医技医嘱执行”页面时弹窗“没有有效挂号信息” |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-7041              | 【宝鸡】医技医嘱执行----带WPB住院患者进入“医技医嘱执行”页面时弹窗“没有有效挂号信息” |\n| WEBS-7043              | 【宝鸡】【住院医技执行】----住院医技医嘱从WEB端“住院医技执行”页面执行，该记录在“医技医嘱执行”页面状态显示为“完成”而不是“报告发出” |\n\n------\n\n7.11：\n\n| ISSUE序列号 | ISSUE描述                                                    |\n| ----------- | ------------------------------------------------------------ |\n| WEBS-7043   | 【宝鸡】【住院医技执行】----住院医技医嘱从WEB端“住院医技执行”页面执行，该记录在“医技医嘱执行”页面状态显示为“完成”而不是“报告发出” |\n| WEBS-7063   | 【宝鸡】门诊保存医嘱时报错                                   |\n\n| 提交的bug/sub-bug/优化 | bug描述                    |\n| ---------------------- | -------------------------- |\n| WEBS-7063              | 【宝鸡】门诊保存医嘱时报错 |\n\n------\n\n7.13：\n\n| ISSUE序列号   | ISSUE描述                                                    |\n| ------------- | ------------------------------------------------------------ |\n| WEBHISAYH-434 | 【门诊划价】----收费项目管理维护了条码划价时，添加项目时需要校验条码号必填 |\n\n------\n\n7.14：\n\n| ISSUE序列号   | ISSUE描述                                             |\n| ------------- | ----------------------------------------------------- |\n| WEBS-7120     | 【宝鸡】门诊医生站----医嘱项目未过滤物品表为空的数据  |\n| WEBHISAYH-468 | 【安阳】门诊医生站---校验患者是否是异地医保患者       |\n| WEBHISAYH-471 | 【安阳】医生站----医嘱pickshell需要去掉条码划价的项目 |\n| WEBHISAYH-519 | 【安阳】医嘱列表去掉关联危急值操作                    |\n| WEBHISAYH-533 | 【安阳】----开立手术申请中诊断编码必填                |\n\n| 提交的bug/sub-bug/优化 | bug描述                                              |\n| ---------------------- | ---------------------------------------------------- |\n| WEBS-7120              | 【宝鸡】门诊医生站----医嘱项目未过滤物品表为空的数据 |\n\n------\n\n7.18：\n\n| ISSUE序列号   | ISSUE描述                                         |\n| ------------- | ------------------------------------------------- |\n| WEBS-6470     | 【宝鸡】----门诊医生站接口按钮区域调整            |\n| WEBS-6673     | 【宝鸡】医生站自助挂号弹窗优化                    |\n| WEBHISAYH-518 | 【五级过级】门诊/住院医生站——增加处方点评沟通功能 |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-7154              | 【宝鸡】门诊急挂号----WPB为空，输入挂号资源点击支付时报错    |\n| WEBS-7157              | 【宝鸡】自助挂号页面----患者挂复诊号成功后，医生站列表无患者挂号信息 |\n| WEBS-7161              | 【宝鸡】门诊退费申请----退费申请页面 查询不到 药品退费申请   |\n\n------\n\n7.19：\n\n| ISSUE序列号   | ISSUE描述                                  |\n| ------------- | ------------------------------------------ |\n| WEBHISAYH-518 | 【安阳】退费申请----项目名称显示问题修改   |\n| WEBHISAYH-520 | 【安阳】门诊医生站作废外配处方增加状态判断 |\n\n| 提交的bug/sub-bug/优化 | bug描述                                  |\n| ---------------------- | ---------------------------------------- |\n| WEBHISAYH-518          | 【安阳】退费申请----项目名称显示问题修改 |\n\n------\n\n7.20：\n\n| ISSUE序列号   | ISSUE描述                                      |\n| ------------- | ---------------------------------------------- |\n| WEBS-6974     | 【宝鸡】诊室维护页面拼音码逻辑调整             |\n| WEBHISAYH-538 | 【安阳】危急值自动预警，护士只查住院危急值信息 |\n| WEBHISAYH-584 | 【安阳】退费申请----项目名称显示问题修改       |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-7192              | 【宝鸡】自助挂号页面----收费号列表中 同一挂号资源 显示两条   |\n| WEBS-7201              | 【宝鸡】门诊医生站----批量不计价按钮点击时将所有未保存医嘱取消计价 |\n\n------\n\n7.25：\n\n| ISSUE序列号   | ISSUE描述                                                    |\n| ------------- | ------------------------------------------------------------ |\n| WEBS-6940     | 【宝鸡】预约日视图页面开发                                   |\n| WEBS-7192     | 【宝鸡】自助挂号页面----收费号列表中 同一挂号资源 显示两条   |\n| WEBS-7204     | 【宝鸡】医技医嘱执行----已执行节点下“撤销”按钮未受参数控制   |\n| WEBS-7251     | 【宝鸡】门诊预约----页面没有上下滚动，排班过多时无法显示查看 |\n| WEBHISAYH-608 | 【安阳】医生站----修改pickshell检索内容排序（jar）           |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-7192              | 【宝鸡】自助挂号页面----收费号列表中 同一挂号资源 显示两条   |\n| WEBS-7251              | 【宝鸡】门诊预约----页面没有上下滚动，排班过多时无法显示查看 |\n| WEBS-7256              | 【宝鸡】门诊预约----某一时间片有预约，无法停诊其他空闲时间片，弹窗已有预约 |\n\n------\n\n7.27：\n\n| ISSUE序列号 | ISSUE描述                                                    |\n| ----------- | ------------------------------------------------------------ |\n| WEBS-7256   | 【宝鸡】门诊预约----某一时间片有预约，无法停诊其他空闲时间片，弹窗已有预约 |\n| WEBS-7279   | 【宝鸡】门诊医生站----患者身份为空的患者，保存医嘱时报错NULL |\n| WEBS-7289   | 【安阳】门诊划价----“医嘱流向”设置自选，下拉框选择具体流向时会重复加载数据导致卡顿 |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-7279              | 【宝鸡】门诊医生站----患者身份为空的患者，保存医嘱时报错NULL |\n| WEBS-7285              | 【安阳】门诊划价----“开立医生”未回显登录医生角色             |\n| WEBS-7286              | 【安阳】门诊划价----“医嘱流向”自选，选择流向时对应回显“执行科室” |\n| WEBS-7289              | 【安阳】门诊划价----“医嘱流向”设置自选，下拉框选择具体流向时会重复加载数据导致卡顿 |\n\n------\n\n7.28：\n\n| ISSUE序列号   | ISSUE描述                                                    |\n| ------------- | ------------------------------------------------------------ |\n| WEBHISAYH-623 | 【安阳】门诊划价----“医嘱流向”设置自选，下拉框选择具体流向时会重复加载数据导致卡顿 |\n| WEBHISAYH-624 | 【安阳】门诊划价----“医嘱流向”自选，选择流向时对应回显“执行科室” |\n| WEBHISAYH-625 | 【安阳】门诊划价----“开立医生”未回显登录医生角色             |\n| WEBS-7274     | 挂号资源申请界面样式问题                                     |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBHISAYH-623          | 【安阳】门诊划价----“医嘱流向”设置自选，下拉框选择具体流向时会重复加载数据导致卡顿 |\n| WEBHISAYH-624          | 【安阳】门诊划价----“医嘱流向”自选，选择流向时对应回显“执行科室” |\n| WEBHISAYH-625          | 【安阳】门诊划价----“开立医生”未回显登录医生角色             |\n\n------\n\n7.31：\n\n| ISSUE序列号 | ISSUE描述                             |\n| ----------- | ------------------------------------- |\n| WEBS-7275   | 医嘱开立范围设置-会诊申请图标使用错误 |\n\n------\n\n8.1：\n\n| ISSUE序列号   | ISSUE描述                                                    |\n| ------------- | ------------------------------------------------------------ |\n| WEBS-7313     | webhis门诊就诊监控界面，各个图标中文显示异常和大小异常       |\n| WEBS-7341     | 【宝鸡】门诊预约----添加预约详情页资源挂号费未置灰可编辑，且未回显费用 |\n| WEBHISAYH-615 | 【安阳】医生站----检查申请校验检查目的做必填校验             |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-7341              | 【宝鸡】门诊预约----添加预约详情页资源挂号费未置灰可编辑，且未回显费用 |\n| WEBHISAYH-652          | 【安阳】会诊统计----会诊管理页面增加导出excel功能            |\n\n------\n\n8.2：\n\n| ISSUE序列号   | ISSUE描述                                         |\n| ------------- | ------------------------------------------------- |\n| WEBHISAYH-562 | 【安阳】医生站----医嘱模板维护功能优化            |\n| WEBHISAYH-652 | 【安阳】会诊统计----会诊管理页面增加导出excel功能 |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-7372              | 【宝鸡】医技医嘱执行----已执行不可撤销医嘱，仍可通过勾选框勾选点击撤销 |\n\n------\n\n8.3：\n\n| ISSUE序列号   | ISSUE描述                                        |\n| ------------- | ------------------------------------------------ |\n| WEBS-6940     | 【宝鸡】预约日视图页面开发                       |\n| WEBHISAYH-546 | 【安阳】会诊统计------去掉取消状态的会诊申请查询 |\n| WEBHISAYH-548 | 【安阳】会诊统计----支持导出excel表格            |\n\n| 提交的bug/sub-bug/优化 | bug描述                                           |\n| ---------------------- | ------------------------------------------------- |\n| WEBS-7392              | 【宝鸡】门诊医技医生站----复制已开立医嘱 粘贴无效 |\n| WEBS-7393              | 【宝鸡】手麻医生站----“批量不计价”点击无效        |\n| WEBS-7397              | 【宝鸡】辅诊医生站----批量不计价按钮功能性问题    |\n\n------\n\n8.4：\n\n| ISSUE序列号 | ISSUE描述                                                    |\n| ----------- | ------------------------------------------------------------ |\n| WEBS-7372   | 【宝鸡】医技医嘱执行----已执行不可撤销医嘱，仍可通过勾选框勾选点击撤销 |\n| WEBS-7392   | 【宝鸡】门诊医技医生站----复制已开立医嘱 粘贴无效            |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBHISAYH-684          | 【安阳】医生站----开立病理申请也会校验检查目的导致异常       |\n| WEBHISAYH-692          | 【安阳】医嘱模板----医生医嘱模板权限设置正常时，权限下医嘱模板保存置灰 |\n\n------\n\n8.7：\n\n| ISSUE序列号   | ISSUE描述                                                    |\n| ------------- | ------------------------------------------------------------ |\n| WEBHISAYH-615 | 【安阳】医生站----开立病理申请也会校验检查目的导致异常       |\n| WEBHISAYH-651 | 【辅诊医生站】辅诊医生可以开立检验检查申请及会诊申请查看     |\n| WEBHISAYH-692 | 【安阳】医嘱模板----医生医嘱模板权限设置正常时，权限下医嘱模板保存置灰 |\n| WEBHISAYH-707 | 【安阳】辅诊医生站----辅诊开立会诊申请时，无法审核医嘱进而无法完成后续会诊流程 |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBHISAYH-707          | 【安阳】辅诊医生站----辅诊开立会诊申请时，无法审核医嘱进而无法完成后续会诊流程 |\n| WEBHISAYH-709          | 【安阳】住院医生站----勾选条码划价医嘱仍可在pickshell中搜索到 |\n\n------\n\n8.8：\n\n| ISSUE序列号   | ISSUE描述                                                    |\n| ------------- | ------------------------------------------------------------ |\n| WEBS-7393     | 【宝鸡】住院、辅诊、手麻医生站----“批量不计价”按钮功能问题   |\n| WEBHISAYH-577 | 【门诊医生站】门诊医生登录系统时，所选科室只需要显示门诊科室 |\n| WEBHISAYH-615 | 【安阳】医生站----检查申请校验检查目的做必填校验             |\n| WEBHISAYH-646 | 【安阳】住院医生站----复制粘贴，历史医嘱和模板也要控制开不出勾选条码划价项目 |\n| WEBHISAYH-683 | 【安阳】----检查检验申请检查目的增加默认值                   |\n| WEBHISAYH-686 | 【会诊申请】回复医生和邀请医生增加评价功能                   |\n| WEBHISAYH-709 | 【安阳】住院医生站----勾选条码划价医嘱仍可在pickshell中搜索到 |\n| WEBHISAYH-720 | 【安阳】医生站----保存检查医嘱在检查目的弹窗时，不点确认点击关闭仍可保存医嘱 |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBHISAYH-702          | 【安阳】医嘱模板----模板内大输液医嘱，落入患者医嘱列表时排序有误 |\n| WEBHISAYH-716          | 【安阳】医嘱模板维护----模板维护页对有大输液或检验组合的模板保存后，原模板医嘱错误 |\n| WEBHISAYH-720          | 【安阳】医生站----保存检查医嘱在检查目的弹窗时，不点确认点击关闭仍可保存医嘱 |\n\n------\n\n8.9：\n\n| ISSUE序列号   | ISSUE描述                                                    |\n| ------------- | ------------------------------------------------------------ |\n| WEBHISAYH-576 | 【安阳】电子处方优化---医生开立外配处方先挂医保号            |\n| WEBHISAYH-620 | 【安阳】门诊医生站----pickshell移植住院药房过滤条件          |\n| WEBHISAYH-642 | 【安阳】医生站----医嘱模板增加排序功能                       |\n| WEBHISAYH-668 | 【安阳】门诊医生站作废外配处方增加状态判断                   |\n| WEBHISAYH-702 | 【安阳】医嘱模板----模板内大输液医嘱，落入患者医嘱列表时排序有误 |\n| WEBHISAYH-704 | 【门诊医生站】处方分方，流向不同药房的处方不能共用一个处方号 |\n| WEBHISAYH-716 | 【安阳】医嘱模板维护----模板维护页对有大输液或检验组合的模板保存后，原模板医嘱错误 |\n| WEBHISAYH-718 | 会诊申请医嘱无法作废                                         |\n| WEBHISAYH-719 | 医生发起会诊申请提示超时                                     |\n| WEBHISAYH-727 | 【安阳】医生站----会诊医嘱KT缴费后，仍显示未付款             |\n| WEBHISAYH-728 | 【安阳】会诊申请----住院待审核会诊，点击“取消会诊”无法正常取消 |\n| WEBHISAYH-732 | 【安阳】医嘱列表作废“申请”状态的会诊医嘱，会诊列表仍显示该会诊记录并可继续会诊流程 |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBHISAYH-727          | 【安阳】医生站----会诊医嘱KT缴费后，仍显示未付款             |\n| WEBHISAYH-728          | 【安阳】会诊申请----住院待审核会诊，点击“取消会诊”无法正常取消 |\n| WEBHISAYH-732          | 【安阳】医嘱列表作废“申请”状态的会诊医嘱，会诊列表仍显示该会诊记录并可继续会诊流程 |\n\n------\n\n8.10：\n\n| ISSUE序列号 | ISSUE描述                                      |\n| ----------- | ---------------------------------------------- |\n| WEBS-7342   | 【宝鸡】----门诊医保慢病审批相关取值表调整     |\n| WEBS-7395   | 医嘱单预览-WPB_ACCOUNT_SEARCH_MODE参数改造     |\n| WEBS-7453   | 【宝鸡】门诊医生站----选择患者准备录医嘱时报错 |\n| WEBS-7472   | 【宝鸡】门诊医生站----WPB带患者进“慢病”页报错  |\n|             |                                                |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                |\n| ---------------------- | ------------------------------------------------------ |\n| WEBS-7453              | 【宝鸡】门诊医生站----选择患者准备录医嘱时报错         |\n| WEBS-7472              | 【宝鸡】门诊医生站----WPB带患者进“慢病”页报错          |\n| WEBS-7495              | 【宝鸡】医嘱模板----门诊医嘱模板维护增加拼音码生成按钮 |\n| WEBS-7497              | 【宝鸡】住院医生站----医嘱模板数据同步问题             |\n\n------\n\n8.14：\n\n| ISSUE序列号 | ISSUE描述                                              |\n| ----------- | ------------------------------------------------------ |\n| WEBS-7126   | 【医生站】医嘱模板维护功能优化                         |\n| WEBS-7495   | 【宝鸡】医嘱模板----门诊医嘱模板维护增加拼音码生成按钮 |\n| WEBS-7497   | 【宝鸡】住院医生站----医嘱模板数据同步问题             |\n|             |                                                        |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-7530              | 【宝鸡】门诊医生站----开立输血 报错null                      |\n| WEBS-7542              | 【宝鸡】第三方送检----预交金支付报错，影响后续缴费及费用查询 |\n| WEBS-7547              | 【宝鸡】第三方送检----患者挂号及挂号查询页面的序号显示有误   |\n| WEBHISAYH-741          | 【安阳】门诊医生站----外配处方没有数据                       |\n| WEBHISAYH-749          | 【安阳】门诊医生站----选择库房后医嘱落入列表的流向问题       |\n\n------\n\n8.15：\n\n| ISSUE序列号   | ISSUE描述                                                    |\n| ------------- | ------------------------------------------------------------ |\n| WEBS-7542     | 【宝鸡】第三方送检----预交金支付报错，影响后续缴费及费用查询 |\n| WEBS-7547     | 【宝鸡】第三方送检----患者挂号及挂号查询页面的序号显示有误   |\n| WEBHISAYH-736 | 【安阳】病理申请---录入’内镜标本填写‘后自动带入‘送检标本/材料’。 |\n| WEBHISAYH-741 | 【安阳】门诊医生站----外配处方没有数据                       |\n|               |                                                              |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-7579              | 【宝鸡】孕检免费项目----检验项目同属一个亚分组开立时，不应同属一个检验申请医嘱 |\n| WEBS-7580              | 【宝鸡】门诊住院开立检查申请均报错null                       |\n| WEBS-7582              | 【宝鸡】第三方送检----费用查询侧滑，交易日期默认查询时间有误 |\n| WEBHISAYH-751          | 【安阳】病理申请----修改“内镜标本填写”描述为“内镜标本”       |\n| WEBHISAYH-753          | 【安阳】辅诊处方打印----打印页面可查询到已停止状态的辅诊医嘱 |\n\n------\n\n8.16：\n\n| ISSUE序列号   | ISSUE描述                                                    |\n| ------------- | ------------------------------------------------------------ |\n| WEBS-7580     | 【宝鸡】门诊住院开立检查申请均报错null                       |\n| WEBS-7579     | 【宝鸡】孕检免费项目----检验项目同属一个亚分组开立时，不应同属一个检验申请医嘱 |\n| WEBHISAYH-680 | 【安阳】----增加辅诊处方单打印功能                           |\n| WEBHISAYH-753 | 【安阳】辅诊处方打印----打印页面可查询到已停止状态的辅诊医嘱 |\n\n| 提交的bug/sub-bug/优化 | bug描述                                    |\n| ---------------------- | ------------------------------------------ |\n| WEBS-7608              | 【宝鸡】医生站----会诊医嘱数量单位显示错误 |\n\n------\n\n8.17：\n\n| ISSUE序列号 | ISSUE描述                                                    |\n| ----------- | ------------------------------------------------------------ |\n| WEBS-6688   | 住院医生站------下达医嘱，光标自动定位                       |\n| WEBS-7582   | 【宝鸡】第三方送检----费用查询侧滑，交易日期默认查询时间有误 |\n| WEBS-7608   | 【宝鸡】医生站----会诊医嘱数量单位显示错误                   |\n| WEBS-7614   | 【宝鸡】门诊、住院医生站----开立检查申请报错                 |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-7613              | 【宝鸡】住院、辅诊、手麻医生站----pickshell开医嘱后光标自动定位问题 |\n| WEBS-7614              | 【宝鸡】门诊、住院医生站----开立检查申请报错                 |\n| WEBHISAYH-770          | 【安阳】门诊医生站----选择库房后对应药品库存数量显示有误     |\n\n------\n\n8.18：\n\n| ISSUE序列号   | ISSUE描述                                                    |\n| ------------- | ------------------------------------------------------------ |\n| WEBS-6728     | 【宝鸡】---第三方医院检验送检功能开发                        |\n| WEBS-7613     | 【宝鸡】住院、辅诊、手麻医生站----pickshell开医嘱后光标自动定位问题 |\n| WEBS-7655     | 【宝鸡】住院辅诊、手麻、医技医生站 “模板”按钮置灰不可用      |\n| WEBHISAYH-749 | 【安阳】门诊医生站----选择库房后医嘱落入列表的流向问题       |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                 |\n| ---------------------- | ------------------------------------------------------- |\n| WEBS-7655              | 【宝鸡】住院辅诊、手麻、医技医生站 “模板”按钮置灰不可用 |\n\n------\n\n8.21：\n\n| ISSUE序列号   | ISSUE描述                                            |\n| ------------- | ---------------------------------------------------- |\n| WEBS-7206     | 【宝鸡】------住院患者列表增加“取消入院申请”         |\n| WEBS-7477     | 会诊申请自动生成医嘱-WPB_ACCOUNT_SEARCH_MODE参数改造 |\n| WEBS-7481     | 医嘱模板保存-WPB_ACCOUNT_SEARCH_MODE参数改造         |\n| WEBS-7483     | 会诊申请-WPB_ACCOUNT_SEARCH_MODE参数改造             |\n| WEBHISAYH-675 | 【安阳】新增血糖系统接口                             |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-7693              | 【宝鸡】会诊----会诊详情页取消会诊后，会诊医嘱仍存在         |\n| WEBS-7694              | 【宝鸡】会诊----会诊申请信息填写医生时，回显该医生主科室至会诊科室 |\n\n------\n\n8.22：\n\n| ISSUE序列号   | ISSUE描述                                                    |\n| ------------- | ------------------------------------------------------------ |\n| WEBS-7460     | 【宝鸡门诊挂号】挂号时支付方式默认为扫码【8月】              |\n| WEBS-7667     | 【宝鸡】----特定孕检项目计费时折扣成0元                      |\n| WEBS-7721     | 【宝鸡】门诊医生站----pickshell录入医嘱框与两边不平齐        |\n| WEBS-7722     | 【宝鸡】退费申请----未默认勾选复选框，未默认查询已结算数据   |\n| WEBS-7727     | 【宝鸡】转诊----转入医院搜索框增加拼音码搜索逻辑             |\n| WEBHISAYH-771 | 【安阳】女性患者开立病理申请时，病理申请开立界面妇科检查选项变为必填项 |\n| WEBHISAYH-775 | 【安阳】门诊输液----已发药执行输液医嘱，护士无法打印输液单   |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-7720              | 【宝鸡】门诊医生站----医嘱剂量、数量单位、频次、周期的计算逻辑混乱 |\n| WEBS-7721              | 【宝鸡】门诊医生站----pickshell录入医嘱框与两边不平齐        |\n| WEBS-7722              | 【宝鸡】退费申请----未默认勾选复选框，未默认查询已结算数据   |\n| WEBS-7727              | 【宝鸡】转诊----转入医院搜索框增加拼音码搜索逻辑             |\n\n------\n\n8.23：\n\n| ISSUE序列号 | ISSUE描述                                                    |\n| ----------- | ------------------------------------------------------------ |\n| WEBS-7654   | 【宝鸡】--门诊医生站的退费申请界面--希望只显示已收费项目（9.0） |\n| WEBS-7693   | 【宝鸡】会诊----会诊详情页取消会诊后，会诊医嘱仍存在         |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-7745              | 【宝鸡】门诊慢病----慢病进行通过、驳回、撤销操作后，会弹窗判断确认关闭 |\n| WEBS-7746              | 【宝鸡】门诊医生站----慢病和特药弹窗  检索框根据申请单号查询有误 |\n\n------\n\n8.24:\n\n| ISSUE序列号 | ISSUE描述                                                    |\n| ----------- | ------------------------------------------------------------ |\n| WEBS-7188   | 【宝鸡】检查检验申请增加产科孕检免费项目的开立【8.0】        |\n| WEBS-7538   | 【宝鸡】转诊慢病特药医保接口相关调整【8月】                  |\n| WEBS-7667   | 【宝鸡】----特定孕检项目计费时折扣成0元                      |\n| WEBS-7720   | 【宝鸡】门诊医生站----医嘱剂量、数量单位、频次、周期的计算逻辑混乱 |\n| WEBS-7745   | 【宝鸡】医生站----慢病和转诊进行通过、驳回、撤销操作后，会弹窗判断确认关闭 |\n| WEBS-7746   | 【宝鸡】门诊医生站----慢病和特药弹窗  检索框根据申请单号查询有误 |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-7776              | 【宝鸡】医生站----开立检查申请时，“临床诊断”和“诊断描述”是否必填逻辑有误 |\n| WEBHISAYH-785          | 【安阳】门诊医生站----开立医嘱时多个频次的周期计算错误       |\n\n------\n\n8.25：\n\n| ISSUE序列号 | ISSUE描述                                                    |\n| ----------- | ------------------------------------------------------------ |\n| WEBS-7486   | 超限用药申请查看页面不显示已审核信息                         |\n| WEBS-7628   | [门诊住院医生站]---开立治疗医嘱时治疗科室下拉框改造，和治疗项目搜索逻辑改造 |\n\n------\n\n8.28：\n\n| ISSUE序列号   | ISSUE描述                                              |\n| ------------- | ------------------------------------------------------ |\n| WEBHISAYH-785 | 【安阳】门诊医生站----开立医嘱时多个频次的周期计算错误 |\n\n------\n\n8.29：\n\n| ISSUE序列号   | ISSUE描述                                                    |\n| ------------- | ------------------------------------------------------------ |\n| WEBS-7808     | 【宝鸡】门诊医技医生站----维护草药至医嘱模板后，模板管理页草药医嘱不显示 |\n| WEBHISAYH-792 | 【安阳】门诊退费----退药未退费药品在“退费历史”页显示为已完成退费项目 |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-7808              | 【宝鸡】门诊医技医生站----维护草药至医嘱模板后，模板管理页草药医嘱不显示 |\n| WEBS-7814              | 【宝鸡】医嘱模板----\"检验申请执行时间\"页面显示位置错误       |\n| WEBHISAYH-792          | 【安阳】门诊退费----退药未退费药品在“退费历史”页显示为已完成退费项目 |\n\n------\n\n8.30：\n\n| ISSUE序列号   | ISSUE描述                                                    |\n| ------------- | ------------------------------------------------------------ |\n| WEBS-7752     | （宝鸡）【挂号资源管理】增加专病门诊标识【9月】              |\n| WEBS-7814     | 【宝鸡】医嘱模板----\"检验申请执行时间\"页面显示位置错误       |\n| WEBS-7825     | 【宝鸡】辅诊医生站----新建医嘱模板保存后不显示，刷新页面也无效 |\n| WEBS-7827     | 【宝鸡】住院医生站----新开医嘱的“首次开始时间”无法修改       |\n| WEBHISAYH-795 | 【安阳】WPB----WPB搜索框中 部分患者年龄与实际年龄不符        |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-7825              | 【宝鸡】辅诊医生站----新建医嘱模板保存后不显示，刷新页面也无效 |\n| WEBS-7827              | 【宝鸡】住院医生站----新开医嘱的“首次开始时间”无法修改       |\n| WEBS-7828              | 【宝鸡】手麻医生站----开立草药医嘱，点击确认时前端报错       |\n| WEBS-7836              | 【宝鸡】门诊挂号----科室年龄校验弹窗文字显示有误             |\n| WEBHISAYH-795          | 【安阳】WPB----WPB搜索框中 部分患者年龄与实际年龄不符        |\n\n------\n\n8.31：\n\n| ISSUE序列号 | ISSUE描述                                                    |\n| ----------- | ------------------------------------------------------------ |\n| WEBS-7828   | 【宝鸡】手麻医生站----开立草药医嘱，点击确认时前端报错       |\n| WEBS-7836   | 【宝鸡】门诊挂号----科室年龄校验弹窗文字显示有误             |\n| WEBS-7840   | 【宝鸡】门诊挂号----科室校验弹窗内容，应与当前所挂资源科室关联 |\n|             |                                                              |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-7840              | 【宝鸡】门诊挂号----科室校验弹窗内容，应与当前所挂资源科室关联 |\n| WEBS-7843              | 【宝鸡】医技医生站----备血医嘱保存后，查看输血医嘱详情时报错 |\n| WEBS-7844              | 【科室缴费】----WPB选住院患者或未开检查的门诊患者，点击科室缴费界面报错 |\n| WEBS-7845              | 【宝鸡】门诊挂号----患者挂号报错null                         |\n| WEBS-7847              | 【宝鸡】门诊预约----“门诊预约”页需要增加“科室年龄、性别校验”，效果同“门诊挂号” |\n| WEBS-7854              | 【宝鸡】门诊医生站----门诊医生进入住院证登记时报错           |\n| WEBHISAYH-798          | 【安阳】辅诊医嘱审核----审核及打印查询慢，报请求超时         |\n\n------\n\n9.1：\n\n| ISSUE序列号 | ISSUE描述                                                    |\n| ----------- | ------------------------------------------------------------ |\n| WEBS-7753   | （宝鸡）【门诊挂号/门诊预约】挂号/预约时增加科室-性别、科室-年龄限制校验【9月】 |\n| WEBS-7773   | （宝鸡）【门诊挂号】增加会诊挂号功能【9月】                  |\n| WEBS-7843   | 【宝鸡】医技医生站----备血医嘱保存后，查看输血医嘱详情时报错 |\n| WEBS-7844   | 【科室缴费】----WPB选住院患者或未开检查的门诊患者，点击科室缴费界面报错 |\n| WEBS-7847   | 【宝鸡】门诊预约----“门诊预约”页需要增加“科室年龄、性别校验”，效果同“门诊挂号” |\n| WEBS-7854   | 【宝鸡】门诊医生站----门诊医生进入住院证登记时报错           |\n\n------\n\n9.4：\n\n| ISSUE序列号   | ISSUE描述                                                    |\n| ------------- | ------------------------------------------------------------ |\n| WEBS-7831     | 【宝鸡】门诊挂号----医保患者挂号时报错                       |\n| WEBS-7845     | 【宝鸡】门诊挂号----患者挂号报错null                         |\n| WEBS-7859     | 手术护士在手术排版界面进行手术计费后，点击手术完成按钮，提示‘患者手术未计费’ |\n| WEBHISAYH-791 | 安阳--门诊退费申请退费--增加限制，谁开的费用谁能进行退费【2023.9.13版本】 |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-7896              | 【宝鸡】会诊----MDT会诊审批后，在“会诊管理”页无法查到该条会诊 |\n| WEBS-7897              | 【宝鸡】会诊----住院会诊申请单中“取消会诊”按钮失效           |\n| WEBHISAYH-811          | 【安阳】多科会诊----变更会诊状态后会诊医生存值有误           |\n\n------\n\n9.5：\n\n| ISSUE序列号   | ISSUE描述                                                    |\n| ------------- | ------------------------------------------------------------ |\n| WEBS-7673     | 【宝鸡】登录页面需要增加医院医保码【9月】                    |\n| WEBS-7859     | 手术护士在手术排版界面进行手术计费后，点击手术完成按钮，提示‘患者手术未计费’ |\n| WEBS-7896     | 【宝鸡】会诊----MDT会诊审批后，在“会诊管理”页无法查到该条会诊 |\n| WEBHISAYH-798 | 【安阳】辅诊医嘱审核----审核及打印查询慢，报请求超时         |\n\n------\n\n9.6：\n\n| ISSUE序列号 | ISSUE描述                                          |\n| ----------- | -------------------------------------------------- |\n| WEBS-7897   | 【宝鸡】会诊----住院会诊申请单中“取消会诊”按钮失效 |\n| WEBS-7924   | 【宝鸡】医生站----参保地医保区划参数设置不符需求   |\n\n| 提交的bug/sub-bug/优化 | bug描述                                          |\n| ---------------------- | ------------------------------------------------ |\n| WEBS-7924              | 【宝鸡】医生站----参保地医保区划参数设置不符需求 |\n\n------\n\n9.7：\n\n| ISSUE序列号   | ISSUE描述                                                    |\n| ------------- | ------------------------------------------------------------ |\n| WEBS-7662     | 【宝鸡】门诊、住院、手麻、辅诊、医技医生开立检查医嘱后，医嘱项目上的金额字段应该为开立检查项目所绑定的附加费总和 【9月】 |\n| WEBS-7867     | 【宝鸡】医生站转诊备案申请时，判断是否为本地医保【9月】      |\n| WEBHISAYH-804 | 【安阳】病理申请------绝经选项增加年龄判断是否必填           |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-7948              | 【宝鸡】门诊预约----本院职工身份患者从“门诊预约”页预约成功后，患者身份置空 |\n| WEBHISAYH-815          | 【门诊医生站】诊断弹窗中出现null                             |\n| WEBHISAYH-816          | 【住院预约】选择入院科室后加载慢                             |\n\n------\n\n9.8：\n\n| ISSUE序列号 | ISSUE描述                                                    |\n| ----------- | ------------------------------------------------------------ |\n| WEBS-7355   | 【宝鸡】增加参数控制申请是否可以作废和停止                   |\n| WEBS-7870   | 【宝鸡】慢病备案申请页面的病种支持下拉框搜索【9月】          |\n| WEBS-7948   | 【宝鸡】门诊预约----本院职工身份患者从“门诊预约”页预约成功后，患者身份置空 |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBHISAYH-822          | 【安阳】医嘱模板----住院、住院辅诊医生站的医嘱模板管理页“保存”和“另存”按钮置灰，影响模板维护 |\n\n------\n\n9.11：\n\n| ISSUE序列号   | ISSUE描述                                             |\n| ------------- | ----------------------------------------------------- |\n| WEBS-8011     | 【宝鸡】会诊----会诊申请完成后，需求自动刷新医嘱列表  |\n| WEBHISAYH-803 | 安阳--门诊划价、费用录入--条形码限制【2023.9.13版本】 |\n| WEBHISAYH-816 | 【住院预约】选择入院科室后加载慢                      |\n\n| 提交的bug/sub-bug/优化 | bug描述                                              |\n| ---------------------- | ---------------------------------------------------- |\n| WEBS-8011              | 【宝鸡】会诊----会诊申请完成后，需求自动刷新医嘱列表 |\n| WEBHISAYH-835          | 【安阳】医嘱模板----住院本科室模板图标，收藏后仍置灰 |\n\n------\n\n9.12：\n\n| ISSUE序列号   | ISSUE描述                                            |\n| ------------- | ---------------------------------------------------- |\n| WEBHISAYH-810 | 【安阳】医嘱模板增加自定义排序                       |\n| WEBHISAYH-815 | 【门诊医生站】诊断弹窗中出现null                     |\n| WEBHISAYH-835 | 【安阳】医嘱模板----住院本科室模板图标，收藏后仍置灰 |\n\n------\n\n9.13：\n\n| ISSUE序列号   | ISSUE描述                    |\n| ------------- | ---------------------------- |\n| WEBHISAYH-820 | 【安阳】会诊回复医生单独存值 |\n\n------\n\n9.14：\n\n| ISSUE序列号 | ISSUE描述                                                    |\n| ----------- | ------------------------------------------------------------ |\n| WEBS-7855   | 【宝鸡】门诊预约/医生站自助挂号-患者是否为本院职工判断逻辑修改 |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-8056              | 【宝鸡】WPB----复制患者的就诊卡号，粘贴内容为[object Object] |\n| WEBS-8066              | 【宝鸡】医技医嘱执行----已执行医嘱无法正常撤销               |\n| WEBS-8067              | WEBHIS药品单位删除后，医嘱开立界面仍展示了对应的删除的药品单位 |\n| WEBHISAYH-852          | WEBHIS药品单位删除后，医嘱开立界面仍展示了对应的删除的药品单位 |\n\n------\n\n9.18：\n\n| ISSUE序列号   | ISSUE描述                                                    |\n| ------------- | ------------------------------------------------------------ |\n| WEBS-7893     | 【宝鸡】医嘱模板增加自定义排序                               |\n| WEBS-7938     | 会诊申请-会诊医嘱控制                                        |\n| WEBS-8023     | 会诊申请-会诊医嘱控制（新增显示模式）                        |\n| WEBS-8066     | 【宝鸡】医技医嘱执行----已执行医嘱无法正常撤销               |\n| WEBHISAYH-852 | WEBHIS药品单位删除后，医嘱开立界面仍展示了对应的删除的药品单位 |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-8104              | 【宝鸡】DIP/DRG-门诊处方预警接口，修改参数后前端报错         |\n| WEBS-8112              | 【宝鸡】DIP/DRG接口开发----住院医嘱预警，前端未调接口，参数无效 |\n\n------\n\n9.19：\n\n| ISSUE序列号 | ISSUE描述                                                    |\n| ----------- | ------------------------------------------------------------ |\n| WEBS-7946   | 【宝鸡】门诊挂号--F5刷新后光标选中wpb搜索框【9月】           |\n| WEBS-8056   | 【宝鸡】WPB----复制患者的就诊卡号，粘贴内容为[object Object] |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-8124              | 【宝鸡】检验申请弹窗优化----孕检免费项目检验组/标本分类 检索不完整 |\n| WEBS-8125              | 【宝鸡】检验申请弹窗优化----项目全局检索后，检验组/分类选择后原项目检索框失效 |\n| WEBS-8135              | 【宝鸡】门诊慢特病----申请审批页 申请疾病字段值不显示        |\n\n------\n\n9.20：\n\n| ISSUE序列号 | ISSUE描述                                                    |\n| ----------- | ------------------------------------------------------------ |\n| WEBS-7907   | 【宝鸡】检验申请开立弹窗优化                                 |\n| WEBS-8104   | 【宝鸡】DIP/DRG-门诊处方预警接口，修改参数后前端报错         |\n| WEBS-8112   | 【宝鸡】DIP/DRG接口开发----住院医嘱预警，前端未调接口，参数无效 |\n| WEBS-8124   | 【宝鸡】检验申请弹窗优化----孕检免费项目检验组/标本分类 检索不完整 |\n| WEBS-8125   | 【宝鸡】检验申请弹窗优化----项目全局检索后，检验组/分类选择后原项目检索框失效 |\n| WEBS-8136   | 【宝鸡】门诊慢特病----申请审批页 申请疾病字段值不显示        |\n\n------\n\n9.21：\n\n| ISSUE序列号 | ISSUE描述                                                    |\n| ----------- | ------------------------------------------------------------ |\n| WEBS-8027   | 【宝鸡】住院证登记--申请入院日期、病区、诊断、诊断日期、患者病情增加默认效果【9月】 |\n| WEBS-8067   | WEBHIS药品单位删除后，医嘱开立界面仍展示了对应的删除的药品单位 |\n| WEBS-8151   | [门诊预约日视图]--日视图选择时间片添加预约，log有报错        |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-8157              | 【宝鸡】门诊慢特病----明细查看页 认证通过疾病显示[object Object] |\n| WEBS-8165              | 【宝鸡】门诊会诊----开立会诊时未刷新列表，控制会诊医嘱自动生成参数失效 |\n| WEBS-8174              | 【门诊医生站】---勾选处方流转后，没有库存的药pickshell搜不出来 |\n\n------\n\n9.22：\n\n| ISSUE序列号   | ISSUE描述                                                    |\n| ------------- | ------------------------------------------------------------ |\n| WEBS-7932     | 【宝鸡】住院医生站可以同时显示患者住院就诊所有医嘱【9月】    |\n| WEBS-8157     | 【宝鸡】门诊慢特病----明细查看页 认证通过疾病显示[object Object] |\n| WEBS-8178     | 【宝鸡】转诊----医生站转诊按钮，转院原因存值无法更新         |\n| WEBHISAYH-864 | 【门诊医生站】---勾选处方流转后，没有库存的药pickshell搜不出来 |\n\n| 提交的bug/sub-bug/优化 | bug描述                                              |\n| ---------------------- | ---------------------------------------------------- |\n| WEBS-8178              | 【宝鸡】转诊----医生站转诊按钮，转院原因存值无法更新 |\n| WEBS-8180              | 【宝鸡】转诊----“诊断描述”文本框显示有误             |\n\n------\n\n9.25：\n\n| ISSUE序列号 | ISSUE描述                                                    |\n| ----------- | ------------------------------------------------------------ |\n| WEBS-8106   | 【宝鸡】转院、慢病、特药备案优化                             |\n| WEBS-8165   | 【宝鸡】门诊会诊----开立会诊时未刷新列表，控制会诊医嘱自动生成参数失效 |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-8207              | 【宝鸡】医生站----治疗类自定义医嘱默认带执行人               |\n| WEBS-8208              | 【宝鸡】医生站----自定义医嘱从剪切板、模板调用时全部带入执行人 |\n| WEBS-8209              | 【宝鸡】医生站----组合医嘱从模板导入时，未显示执行人         |\n| WEBS-8212              | 【宝鸡】住院医生站----列表中有医嘱 同时存在“作废”和“停止”按钮 |\n\n------\n\n9.28：\n\n| ISSUE序列号 | ISSUE描述                                                    |\n| ----------- | ------------------------------------------------------------ |\n| WEBS-7928   | 【宝鸡】 检查申请开立弹窗优化                                |\n| WEBS-8189   | 慢特病申请-申请疾病增加数量控制                              |\n| WEBS-8207   | 【宝鸡】医生站----治疗类自定义医嘱默认带执行人               |\n| WEBS-8208   | 【宝鸡】医生站----自定义医嘱从剪切板、模板调用时全部带入执行人 |\n| WEBS-8209   | 【宝鸡】医生站----组合医嘱从模板导入时，未显示执行人         |\n| WEBS-8241   | 【宝鸡】医生站----不计价医嘱，取消计价勾选时应同时联动清空执行人 |\n| WEBS-8242   | 【宝鸡】住院医生站----开立会诊医嘱，执行人应默认开单医生     |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-8238              | 【宝鸡】住院医生站----批量不计价按钮点击前端报错             |\n| WEBS-8241              | 【宝鸡】医生站----不计价医嘱，取消计价勾选时应同时联动清空执行人 |\n| WEBS-8242              | 【宝鸡】住院医生站----开立会诊医嘱，执行人应默认开单医生     |\n| WEBS-8244              | 【宝鸡】挂号/预约查询----预约详情页点击预约到诊时报错null    |\n\n------\n\n10.7：\n\n| ISSUE序列号 | ISSUE描述                                                    |\n| ----------- | ------------------------------------------------------------ |\n| WEBS-8001   | 【宝鸡】医生看诊、医嘱核对页面WPB搜索效果调整【9月】         |\n| WEBS-8212   | 【宝鸡】住院医生站----列表中有医嘱 同时存在“作废”和“停止”按钮 |\n| WEBS-8238   | 【宝鸡】住院医生站----批量不计价按钮点击前端报错             |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-8252              | WEBHIS预诊信息填写后预诊记录记录表没有写入visitid            |\n| WEBS-8254              | 【宝鸡】挂号/预约查询----点击“预约到诊”弹窗“配置错误：接口null未配置” |\n| WEBHISAYH-881          | 【知识库】未弹到界面最前面                                   |\n\n------\n\n10.8：\n\n| ISSUE序列号   | ISSUE描述                                       |\n| ------------- | ----------------------------------------------- |\n| WEBS-7419     | 【宝鸡】医生站----开立医嘱增加执行人录入【9.0】 |\n| WEBHISAYH-881 | 【知识库】未弹到界面最前面                      |\n\n| 提交的bug/sub-bug/优化 | bug描述                                    |\n| ---------------------- | ------------------------------------------ |\n| WEBS-8264              | 【宝鸡】医嘱列表“执行人”文本显示位置不规范 |\n\n------\n\n10.9：\n\n| ISSUE序列号 | ISSUE描述                                                    |\n| ----------- | ------------------------------------------------------------ |\n| WEBS-7978   | 【宝鸡】挂号/预约查询页面【9月】                             |\n| WEBS-8190   | 慢特病、特药处方开立-增加是否需要备案的控制                  |\n| WEBS-8252   | WEBHIS预诊信息填写后预诊记录记录表没有写入visitid            |\n| WEBS-8254   | 【宝鸡】挂号/预约查询----点击“预约到诊”弹窗“配置错误：接口null未配置” |\n\n------\n\n10.10：\n\n| ISSUE序列号 | ISSUE描述                                                    |\n| ----------- | ------------------------------------------------------------ |\n| WEBS-7872   | 【宝鸡】门诊医生站开立精一处方时校验录入代办人信息【9月】    |\n| WEBS-8264   | 【宝鸡】医嘱列表“执行人”文本显示位置不规范                   |\n| WEBS-8316   | 【宝鸡】门诊医生站----精一药品保存校验弹窗  未显示列出所有“精神一类药品” |\n| WEBS-8318   | 【宝鸡】门诊医生站----代开人录入后 保存医嘱仍弹窗录入代开人，agent_Name未存值 |\n| WEBS-8325   | 【宝鸡】手麻、医技、辅诊医生站----初入页面前端报错           |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-8316              | 【宝鸡】门诊医生站----精一药品保存校验弹窗  未显示列出所有“精神一类药品” |\n| WEBS-8318              | 【宝鸡】门诊医生站----代开人录入后 保存医嘱仍弹窗录入代开人，agent_Name未存值 |\n| WEBS-8325              | 【宝鸡】手麻、医技、辅诊医生站----初入页面前端报错           |\n\n------\n\n10.11：\n\n| ISSUE序列号 | ISSUE描述                                      |\n| ----------- | ---------------------------------------------- |\n| WEBS-8342   | 【宝鸡】门诊医生站----给患者录入诊断时前端报错 |\n\n| 提交的bug/sub-bug/优化 | bug描述                                        |\n| ---------------------- | ---------------------------------------------- |\n| WEBS-8342              | 【宝鸡】门诊医生站----给患者录入诊断时前端报错 |\n\n------\n\n10.12：\n\n| ISSUE序列号   | ISSUE描述                                        |\n| ------------- | ------------------------------------------------ |\n| WEBHISAYH-889 | 【安阳】医生站  增加标记外伤自费、妊娠期、哺乳期 |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                    |\n| ---------------------- | ---------------------------------------------------------- |\n| WEBS-8353              | 【宝鸡】门诊医生站----代开人录入后，“联系方式”值不回显     |\n| WEBS-8364              | 【宝鸡】会诊医嘱名称显示修改                               |\n| WEBS-8368              | 【宝鸡】孕检项目----项目检索框搜索时“检验组”会刷新显示全部 |\n\n------\n\n10.16：\n\n| ISSUE序列号 | ISSUE描述                                                    |\n| ----------- | ------------------------------------------------------------ |\n| WEBS-8368   | 【宝鸡】孕检项目----项目检索框搜索时“检验组”会刷新显示全部   |\n| WEBS-8353   | 【宝鸡】门诊医生站----代开人录入后，“联系方式”值不回显       |\n| WEBS-8364   | 【宝鸡】会诊医嘱名称显示修改                                 |\n| WEBS-8389   | 【宝鸡】挂号预约查询--修改预约时“确认”按钮转圈置灰, 无法点击 |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-8388              | 【宝鸡】挂号预约查询----部分数据 修改/取消预约时会报错null   |\n| WEBS-8384              | 【宝鸡】医生站----检查申请开立后再编辑时报错NULL             |\n| WEBS-8381              | 【转诊备案】转诊页面默认带入门诊主诊断                       |\n| WEBS-8380              | 【特药备案】特药页面默认带入门诊主诊断                       |\n| WEBHISAYH-910          | 【安阳】手术要求校验文字排版样式修改                         |\n| WEBS-8389              | 【宝鸡】挂号预约查询--修改预约时“确认”按钮转圈置灰, 无法点击 |\n\n------\n\n10.17：\n\n| ISSUE序列号   | ISSUE描述                                            |\n| ------------- | ---------------------------------------------------- |\n| WEBHISAYH-854 | 【安阳】门诊诊断页签增加初复诊必填校验               |\n| WEBHISAYH-878 | 【医生站手术申请】手术申请弹窗，手术要求需要为必填项 |\n| WEBHISAYH-892 | 【安阳】操作类手术项目所有医生不限制权限             |\n| WEBHISAYH-910 | 【安阳】手术要求校验文字排版样式修改                 |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-8414              | 【宝鸡】排班生成----分时预约限额设置后，在门诊预约日视图中未生效 |\n\n------\n\n10.18：\n\n| ISSUE序列号   | ISSUE描述                                        |\n| ------------- | ------------------------------------------------ |\n| WEBS-8380     | 【特药备案】特药页面默认带入门诊主诊断           |\n| WEBS-8381     | 【转诊备案】转诊页面默认带入门诊主诊断           |\n| WEBS-8384     | 【宝鸡】医生站----检查申请开立后再编辑时报错NULL |\n| WEBS-8428     | 门急诊挂号员在WPB点击读取身份证后报错            |\n| WEBHISAYH-912 | 【安阳】患者诊断“初复诊”文字标红显示             |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-8427              | 【宝鸡】门诊医生站----用法、频次输入框录入时光标异常         |\n| WEBS-8429              | 【宝鸡】挂号资源管理----“治疗”资源类型下“治疗师”不填写可正常保存 |\n| WEBS-8430              | 【宝鸡】门诊医生站----“自助挂号”功能 电子健康卡输入框扩宽    |\n| WEBS-8437              | WEBHIS门诊预约之后进行挂号是，预约的挂号资源没有自动带入     |\n| WEBS-8438              | 【宝鸡】门诊医生站----点击新挂号未看诊患者时报错             |\n| WEBHISAYH-912          | 【安阳】患者诊断“初复诊”文字标红显示                         |\n\n------\n\n10.19：\n\n| ISSUE序列号 | ISSUE描述                                                    |\n| ----------- | ------------------------------------------------------------ |\n| WEBS-8253   | 【宝鸡】报表查询——增加在新标签页打开报表功能                 |\n| WEBS-8406   | 医保患者科室缴费时报错                                       |\n| WEBS-8429   | 【宝鸡】挂号资源管理----“治疗”资源类型下“治疗师”不填写可正常保存 |\n| WEBS-8430   | 【宝鸡】门诊医生站----“自助挂号”功能 电子健康卡输入框扩宽    |\n| WEBS-8438   | 【宝鸡】门诊医生站----点击新挂号未看诊患者时报错             |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-8470              | 【宝鸡】单据打印----未配置“病理申请单”报表时，可在“检查申请单”列表下打印“病理申请单” |\n\n------\n\n10.20：\n\n| ISSUE序列号 | ISSUE描述                                                |\n| ----------- | -------------------------------------------------------- |\n| WEBS-8286   | 【挂号资源管理】--增加治疗师维护入口                     |\n| WEBS-8437   | WEBHIS门诊预约之后进行挂号时，预约的挂号资源没有自动带入 |\n\n------\n\n10.24：\n\n| ISSUE序列号 | ISSUE描述                                                    |\n| ----------- | ------------------------------------------------------------ |\n| WEBS-8271   | 【宝鸡】病理申请弹窗中信息必填配置【10月】                   |\n| WEBS-8401   | 【宝鸡】wpb/门诊医生站--wpb查询患者及医生站患者列表增加科室看诊挂号有效期逻辑【10月】 |\n| WEBS-8436   | 【宝鸡】门诊挂号页面选择挂号弹窗去掉预检记录查询             |\n\n------\n\n10.25：\n\n| ISSUE序列号 | ISSUE描述                                    |\n| ----------- | -------------------------------------------- |\n| WEBS-8253   | 【宝鸡】报表查询——增加在新标签页打开报表功能 |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-8546              | 【医生站】医嘱暂存----多种类型医嘱 暂存提交时报错“违反约束”  |\n| WEBS-8548              | 【医生站】医嘱暂存----手术类医嘱暂存时前端报错               |\n| WEBS-8554              | 【医生站】医嘱暂存----医嘱列表多个信息项应当可编辑，效果应与KT同步 |\n| WEBS-8555              | 【医生站】医嘱暂存----暂存医嘱后，从WPB处退出患者时页面置灰  |\n\n------\n\n10.26：\n\n| ISSUE序列号 | ISSUE描述                                            |\n| ----------- | ---------------------------------------------------- |\n| WEBS-8400   | 【宝鸡】门诊医生站支持修改患者属性                   |\n| WEBS-8427   | 【宝鸡】门诊医生站----用法、频次输入框录入时光标异常 |\n| WEBS-8564   | 治疗医嘱执行界面已执行医嘱撤销键置灰                 |\n\n| 提交的bug/sub-bug/优化 | bug描述                                                      |\n| ---------------------- | ------------------------------------------------------------ |\n| WEBS-8562              | 【住院医生站】医嘱暂存----删除已暂存医嘱后 医嘱仍在列表中，需大刷新页面才消失 |\n| WEBS-8564              | 治疗医嘱执行界面已执行医嘱撤销键置灰                         |\n\n------\n\n","slug":"KBJ-ISSUE记录","published":1,"updated":"2024-09-26T11:27:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm1rz0oet000418qle9ilb2n6","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"密码错误，请重新输入！\" data-whm=\"抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容！\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"85da2089c6aff9359985f9644f0567816dce1d541d601df43d792a45a2916f01\"></script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">当前文章暂不对外可见，请输入密码后查看！</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","site":{"data":{}},"length":19909,"excerpt":"本文加密，请输入密码以查看！","more":"本文加密，请输入密码以查看！","origin":"<p><strong>记录工作期间，每日完成的issue，以便后续如有回顾需要</strong></p>\n<span id=\"more\"></span>\n\n<p>项目：</p>\n<p>宝鸡市中心医院</p>\n<p>安阳人民医院</p>\n<hr>\n<p>5.31：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-6113</td>\n<td>【宝鸡】—-住院医生站特殊医嘱处理</td>\n</tr>\n</tbody></table>\n<hr>\n<p>6.6：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-6057</td>\n<td>【宝鸡】新增挂号资源诊室对照页面</td>\n</tr>\n<tr>\n<td>WEBS-6587</td>\n<td>【宝鸡】【排班生成】–排班生成修改，每次修改限额均弹出验证提醒</td>\n</tr>\n<tr>\n<td>WEBS-6592</td>\n<td>【宝鸡】【排班规则】–排班规则修改，每次修改限额均弹出验证提醒</td>\n</tr>\n<tr>\n<td>WEBS-6649</td>\n<td>【宝鸡】【排班规则】–排班规则设置列表，限额设置校验</td>\n</tr>\n<tr>\n<td>WEBS-6650</td>\n<td>【宝鸡】【排班生成】–排班生成列表，限额设置校验</td>\n</tr>\n</tbody></table>\n<hr>\n<p>6.7：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-6194</td>\n<td>【宝鸡】—-不计价医嘱处理</td>\n</tr>\n</tbody></table>\n<hr>\n<p>6.9：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-6391</td>\n<td>【宝鸡】【门诊输液打印】—查询已执行输液pe记录</td>\n</tr>\n</tbody></table>\n<hr>\n<p>6.12：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-6254</td>\n<td>【宝鸡】新增排班生成页面</td>\n</tr>\n<tr>\n<td>WEBS-6429</td>\n<td>【宝鸡】【童创】—治疗医嘱执行新页面</td>\n</tr>\n<tr>\n<td>WEBS-6455</td>\n<td>【宝鸡】【童创】–新增排程查询页面</td>\n</tr>\n<tr>\n<td>WEBS-6638</td>\n<td>【童创】门诊预诊——添加预诊信息页面读取必填项配置</td>\n</tr>\n<tr>\n<td>WEBS-6662</td>\n<td>【挂号资源诊室对照】–诊室对照列表中显示的号别应该显示描述，不是code</td>\n</tr>\n<tr>\n<td>WEBS-6677</td>\n<td>【宝鸡】【排班规则】–“是否有排班”查询无效</td>\n</tr>\n<tr>\n<td>WEBS-6678</td>\n<td>【宝鸡】【排班规则】–批量生成的排班，删除某天排班时会全部删除</td>\n</tr>\n<tr>\n<td>WEBS-6679</td>\n<td>【宝鸡】【排班规则】–批量排班会覆盖原已有排班</td>\n</tr>\n<tr>\n<td>WEBS-6680</td>\n<td>【宝鸡】【排班规则】–分时设置开启不出诊时段抛出异常</td>\n</tr>\n<tr>\n<td>WEBS-6683</td>\n<td>【宝鸡】【排班规则】–批量生成规则表后，数据条数和标识异常</td>\n</tr>\n</tbody></table>\n<hr>\n<p>6.14：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-6253</td>\n<td>【宝鸡】新增排班规则设置页面</td>\n</tr>\n<tr>\n<td>WEBS-6455</td>\n<td>【宝鸡】【童创】—新增排程查询页面</td>\n</tr>\n<tr>\n<td>WEBS-6507</td>\n<td>【宝鸡】—–病理申请条码打印</td>\n</tr>\n<tr>\n<td>WEBS-6722</td>\n<td>【宝鸡】【童创】–“排程查询”治疗师查询范围有误</td>\n</tr>\n</tbody></table>\n<hr>\n<p>6.15：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-6581</td>\n<td>门诊医生站（安阳）-医嘱模板改为DEV模式</td>\n</tr>\n<tr>\n<td>WEBS-6771</td>\n<td>【宝鸡】【排班规则】–更新分时列表数据，后台会删除原有数据再重新生成新数据</td>\n</tr>\n</tbody></table>\n<hr>\n<p>6.19：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBHISAYH-360</td>\n<td>【门诊医生站】慢病患者在门诊医生看诊时候提示 是否慢病</td>\n</tr>\n</tbody></table>\n<hr>\n<p>6.20：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-6288</td>\n<td>【宝鸡】计算挂号费存储过程增加减免方式的计算逻辑</td>\n</tr>\n</tbody></table>\n<hr>\n<p>6.25：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-6456</td>\n<td>【医生站】—调用模板、历史医嘱引用、复制粘贴判断医嘱项目是否有效</td>\n</tr>\n</tbody></table>\n<hr>\n<p>6.26：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-6136</td>\n<td>【宝鸡】转诊申请及查看页面开发</td>\n</tr>\n<tr>\n<td>WEBS-6137</td>\n<td>【宝鸡】转诊审批及申请明细页面开发</td>\n</tr>\n<tr>\n<td>WEBS-6634</td>\n<td>【宝鸡】门诊慢特病申请及查看页面开发</td>\n</tr>\n<tr>\n<td>WEBS-6635</td>\n<td>【宝鸡】门诊慢特病审批及明细页面开发</td>\n</tr>\n<tr>\n<td>WEBS-6909</td>\n<td>【宝鸡】转诊申请页面–险种类型下拉框字段修改</td>\n</tr>\n</tbody></table>\n<hr>\n<p>6.28:</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-6138</td>\n<td>特药申请及查看页面开发</td>\n</tr>\n<tr>\n<td>WEBS-6139</td>\n<td>特药审批及申请明细开发</td>\n</tr>\n<tr>\n<td>WEBS-6939</td>\n<td>【宝鸡】门诊慢特病申请–“申请疾病”字段取值修改</td>\n</tr>\n<tr>\n<td>WEBHISAYH-370</td>\n<td>【安阳】会诊申请—–增加会诊单打印功能</td>\n</tr>\n<tr>\n<td>WEBHISAYH-385</td>\n<td>【安阳】门诊医生站—wpb带未看诊慢病患者时，提示是否进行慢病治疗</td>\n</tr>\n<tr>\n<td>WEBHISAYH-386</td>\n<td>【安阳】—-检查&#x2F;检验 报告查看页面增加360视图查看按钮</td>\n</tr>\n</tbody></table>\n<hr>\n<p>7.2（周日加班）：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBHISAYH-353</td>\n<td>【安阳】住院医生站—-增加医嘱开单科室的选择</td>\n</tr>\n<tr>\n<td>WEBHISAYH-386</td>\n<td>【安阳】—-检查&#x2F;检验 报告查看页面增加360视图查看按钮</td>\n</tr>\n</tbody></table>\n<hr>\n<p>7.3：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBHISAYH-418</td>\n<td>【安阳】——医嘱模板弹窗医嘱模板检索优化</td>\n</tr>\n<tr>\n<td>WEBHISAYH-425</td>\n<td>[手术预约查看]—新增手术预约查看页面，嵌入麦迪的web页面</td>\n</tr>\n<tr>\n<td>WEBHISAYH-432</td>\n<td>【费用录入】—-收费项目管理维护了条码划价时，添加项目时需要校验条码号必填</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBHISAYH-476</td>\n<td>【安阳】住院医生站—-进入“模板管理”页面时自动选中节点，导致“新增模板”功能失效</td>\n</tr>\n<tr>\n<td>WEBHISAYH-477</td>\n<td>【安阳】住院医生站—-模板维护，勾选某模板的医嘱切换到另一模板时，自动勾选之前医嘱所在列</td>\n</tr>\n<tr>\n<td>WEBHISAYH-479</td>\n<td>【安阳】住院医生站—-模板维护，从医生站患者医嘱列表复制医嘱，粘贴至“模板维护”的任一模板中时报错</td>\n</tr>\n<tr>\n<td>WEBHISAYH-480</td>\n<td>【安阳】住院医生站—-模板维护，医生站患者医嘱复制的医嘱，到模板维护页面粘贴未保存 点击编辑时报错</td>\n</tr>\n<tr>\n<td>WEBHISAYH-481</td>\n<td>【安阳】住院医生站—-“模板”页面存在已作废医嘱，“模板管理”维护时可勾选并复制该已作废医嘱</td>\n</tr>\n</tbody></table>\n<hr>\n<p>7.4：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBHISAYH-476</td>\n<td>【安阳】住院医生站—-进入“模板管理”页面时自动选中节点，导致“新增模板”功能失效</td>\n</tr>\n<tr>\n<td>WEBHISAYH-477</td>\n<td>【安阳】住院医生站—-模板维护，勾选某模板的医嘱切换到另一模板时，自动勾选之前医嘱所在列</td>\n</tr>\n<tr>\n<td>WEBHISAYH-479</td>\n<td>【安阳】住院医生站—-模板维护，从医生站患者医嘱列表复制医嘱，粘贴至“模板维护”的任一模板中时报错</td>\n</tr>\n<tr>\n<td>WEBHISAYH-480</td>\n<td>【安阳】住院医生站—-模板维护，医生站患者医嘱复制的医嘱，到模板维护页面粘贴未保存 点击编辑时报错</td>\n</tr>\n<tr>\n<td>WEBHISAYH-481</td>\n<td>【安阳】住院医生站—-“模板”页面存在已作废医嘱，“模板管理”维护时可勾选并复制该已作废医嘱</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-6992</td>\n<td>【宝鸡】医技医嘱执行—-已执行医嘱录入附加收费时，报错空值</td>\n</tr>\n<tr>\n<td>WEBS-6994</td>\n<td>【宝鸡】医技医嘱执行—-下拉框选择后切换到其他页面会失效</td>\n</tr>\n</tbody></table>\n<hr>\n<p>7.5：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBHISAYH-456</td>\n<td>【门诊急挂号】患者身份下拉框取值逻辑调整</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7003</td>\n<td>【宝鸡】门诊医技执行—-页面显示未执行患者 不显示待执行医嘱</td>\n</tr>\n</tbody></table>\n<hr>\n<p>7.7：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-5835</td>\n<td>【宝鸡】—-医技医嘱执行页面开发</td>\n</tr>\n<tr>\n<td>WEBS-6976</td>\n<td>【宝鸡】【不计价医嘱】取消勾选“计价”时，联动取消勾选“摆药”</td>\n</tr>\n<tr>\n<td>WEBS-6992</td>\n<td>【宝鸡】医技医嘱执行—-已执行医嘱录入附加收费时，报错空值</td>\n</tr>\n<tr>\n<td>WEBS-6994</td>\n<td>【宝鸡】医技医嘱执行—-下拉框选择后切换到其他页面会失效</td>\n</tr>\n<tr>\n<td>WEBS-7003</td>\n<td>【宝鸡】门诊医技执行—-页面显示未执行患者 不显示待执行医嘱</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7032</td>\n<td>【宝鸡】医技医嘱执行—-带WPB住院患者进入“医技医嘱执行”页面时弹窗“没有有效挂号信息”</td>\n</tr>\n</tbody></table>\n<hr>\n<p>7.10：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-6993</td>\n<td>【宝鸡】—-新增医技医嘱执行页面增加刷新按钮</td>\n</tr>\n<tr>\n<td>WEBS-7041</td>\n<td>【宝鸡】医技医嘱执行—-带WPB住院患者进入“医技医嘱执行”页面时弹窗“没有有效挂号信息”</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7041</td>\n<td>【宝鸡】医技医嘱执行—-带WPB住院患者进入“医技医嘱执行”页面时弹窗“没有有效挂号信息”</td>\n</tr>\n<tr>\n<td>WEBS-7043</td>\n<td>【宝鸡】【住院医技执行】—-住院医技医嘱从WEB端“住院医技执行”页面执行，该记录在“医技医嘱执行”页面状态显示为“完成”而不是“报告发出”</td>\n</tr>\n</tbody></table>\n<hr>\n<p>7.11：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7043</td>\n<td>【宝鸡】【住院医技执行】—-住院医技医嘱从WEB端“住院医技执行”页面执行，该记录在“医技医嘱执行”页面状态显示为“完成”而不是“报告发出”</td>\n</tr>\n<tr>\n<td>WEBS-7063</td>\n<td>【宝鸡】门诊保存医嘱时报错</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7063</td>\n<td>【宝鸡】门诊保存医嘱时报错</td>\n</tr>\n</tbody></table>\n<hr>\n<p>7.13：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBHISAYH-434</td>\n<td>【门诊划价】—-收费项目管理维护了条码划价时，添加项目时需要校验条码号必填</td>\n</tr>\n</tbody></table>\n<hr>\n<p>7.14：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7120</td>\n<td>【宝鸡】门诊医生站—-医嘱项目未过滤物品表为空的数据</td>\n</tr>\n<tr>\n<td>WEBHISAYH-468</td>\n<td>【安阳】门诊医生站—校验患者是否是异地医保患者</td>\n</tr>\n<tr>\n<td>WEBHISAYH-471</td>\n<td>【安阳】医生站—-医嘱pickshell需要去掉条码划价的项目</td>\n</tr>\n<tr>\n<td>WEBHISAYH-519</td>\n<td>【安阳】医嘱列表去掉关联危急值操作</td>\n</tr>\n<tr>\n<td>WEBHISAYH-533</td>\n<td>【安阳】—-开立手术申请中诊断编码必填</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7120</td>\n<td>【宝鸡】门诊医生站—-医嘱项目未过滤物品表为空的数据</td>\n</tr>\n</tbody></table>\n<hr>\n<p>7.18：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-6470</td>\n<td>【宝鸡】—-门诊医生站接口按钮区域调整</td>\n</tr>\n<tr>\n<td>WEBS-6673</td>\n<td>【宝鸡】医生站自助挂号弹窗优化</td>\n</tr>\n<tr>\n<td>WEBHISAYH-518</td>\n<td>【五级过级】门诊&#x2F;住院医生站——增加处方点评沟通功能</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7154</td>\n<td>【宝鸡】门诊急挂号—-WPB为空，输入挂号资源点击支付时报错</td>\n</tr>\n<tr>\n<td>WEBS-7157</td>\n<td>【宝鸡】自助挂号页面—-患者挂复诊号成功后，医生站列表无患者挂号信息</td>\n</tr>\n<tr>\n<td>WEBS-7161</td>\n<td>【宝鸡】门诊退费申请—-退费申请页面 查询不到 药品退费申请</td>\n</tr>\n</tbody></table>\n<hr>\n<p>7.19：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBHISAYH-518</td>\n<td>【安阳】退费申请—-项目名称显示问题修改</td>\n</tr>\n<tr>\n<td>WEBHISAYH-520</td>\n<td>【安阳】门诊医生站作废外配处方增加状态判断</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBHISAYH-518</td>\n<td>【安阳】退费申请—-项目名称显示问题修改</td>\n</tr>\n</tbody></table>\n<hr>\n<p>7.20：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-6974</td>\n<td>【宝鸡】诊室维护页面拼音码逻辑调整</td>\n</tr>\n<tr>\n<td>WEBHISAYH-538</td>\n<td>【安阳】危急值自动预警，护士只查住院危急值信息</td>\n</tr>\n<tr>\n<td>WEBHISAYH-584</td>\n<td>【安阳】退费申请—-项目名称显示问题修改</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7192</td>\n<td>【宝鸡】自助挂号页面—-收费号列表中 同一挂号资源 显示两条</td>\n</tr>\n<tr>\n<td>WEBS-7201</td>\n<td>【宝鸡】门诊医生站—-批量不计价按钮点击时将所有未保存医嘱取消计价</td>\n</tr>\n</tbody></table>\n<hr>\n<p>7.25：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-6940</td>\n<td>【宝鸡】预约日视图页面开发</td>\n</tr>\n<tr>\n<td>WEBS-7192</td>\n<td>【宝鸡】自助挂号页面—-收费号列表中 同一挂号资源 显示两条</td>\n</tr>\n<tr>\n<td>WEBS-7204</td>\n<td>【宝鸡】医技医嘱执行—-已执行节点下“撤销”按钮未受参数控制</td>\n</tr>\n<tr>\n<td>WEBS-7251</td>\n<td>【宝鸡】门诊预约—-页面没有上下滚动，排班过多时无法显示查看</td>\n</tr>\n<tr>\n<td>WEBHISAYH-608</td>\n<td>【安阳】医生站—-修改pickshell检索内容排序（jar）</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7192</td>\n<td>【宝鸡】自助挂号页面—-收费号列表中 同一挂号资源 显示两条</td>\n</tr>\n<tr>\n<td>WEBS-7251</td>\n<td>【宝鸡】门诊预约—-页面没有上下滚动，排班过多时无法显示查看</td>\n</tr>\n<tr>\n<td>WEBS-7256</td>\n<td>【宝鸡】门诊预约—-某一时间片有预约，无法停诊其他空闲时间片，弹窗已有预约</td>\n</tr>\n</tbody></table>\n<hr>\n<p>7.27：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7256</td>\n<td>【宝鸡】门诊预约—-某一时间片有预约，无法停诊其他空闲时间片，弹窗已有预约</td>\n</tr>\n<tr>\n<td>WEBS-7279</td>\n<td>【宝鸡】门诊医生站—-患者身份为空的患者，保存医嘱时报错NULL</td>\n</tr>\n<tr>\n<td>WEBS-7289</td>\n<td>【安阳】门诊划价—-“医嘱流向”设置自选，下拉框选择具体流向时会重复加载数据导致卡顿</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7279</td>\n<td>【宝鸡】门诊医生站—-患者身份为空的患者，保存医嘱时报错NULL</td>\n</tr>\n<tr>\n<td>WEBS-7285</td>\n<td>【安阳】门诊划价—-“开立医生”未回显登录医生角色</td>\n</tr>\n<tr>\n<td>WEBS-7286</td>\n<td>【安阳】门诊划价—-“医嘱流向”自选，选择流向时对应回显“执行科室”</td>\n</tr>\n<tr>\n<td>WEBS-7289</td>\n<td>【安阳】门诊划价—-“医嘱流向”设置自选，下拉框选择具体流向时会重复加载数据导致卡顿</td>\n</tr>\n</tbody></table>\n<hr>\n<p>7.28：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBHISAYH-623</td>\n<td>【安阳】门诊划价—-“医嘱流向”设置自选，下拉框选择具体流向时会重复加载数据导致卡顿</td>\n</tr>\n<tr>\n<td>WEBHISAYH-624</td>\n<td>【安阳】门诊划价—-“医嘱流向”自选，选择流向时对应回显“执行科室”</td>\n</tr>\n<tr>\n<td>WEBHISAYH-625</td>\n<td>【安阳】门诊划价—-“开立医生”未回显登录医生角色</td>\n</tr>\n<tr>\n<td>WEBS-7274</td>\n<td>挂号资源申请界面样式问题</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBHISAYH-623</td>\n<td>【安阳】门诊划价—-“医嘱流向”设置自选，下拉框选择具体流向时会重复加载数据导致卡顿</td>\n</tr>\n<tr>\n<td>WEBHISAYH-624</td>\n<td>【安阳】门诊划价—-“医嘱流向”自选，选择流向时对应回显“执行科室”</td>\n</tr>\n<tr>\n<td>WEBHISAYH-625</td>\n<td>【安阳】门诊划价—-“开立医生”未回显登录医生角色</td>\n</tr>\n</tbody></table>\n<hr>\n<p>7.31：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7275</td>\n<td>医嘱开立范围设置-会诊申请图标使用错误</td>\n</tr>\n</tbody></table>\n<hr>\n<p>8.1：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7313</td>\n<td>webhis门诊就诊监控界面，各个图标中文显示异常和大小异常</td>\n</tr>\n<tr>\n<td>WEBS-7341</td>\n<td>【宝鸡】门诊预约—-添加预约详情页资源挂号费未置灰可编辑，且未回显费用</td>\n</tr>\n<tr>\n<td>WEBHISAYH-615</td>\n<td>【安阳】医生站—-检查申请校验检查目的做必填校验</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7341</td>\n<td>【宝鸡】门诊预约—-添加预约详情页资源挂号费未置灰可编辑，且未回显费用</td>\n</tr>\n<tr>\n<td>WEBHISAYH-652</td>\n<td>【安阳】会诊统计—-会诊管理页面增加导出excel功能</td>\n</tr>\n</tbody></table>\n<hr>\n<p>8.2：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBHISAYH-562</td>\n<td>【安阳】医生站—-医嘱模板维护功能优化</td>\n</tr>\n<tr>\n<td>WEBHISAYH-652</td>\n<td>【安阳】会诊统计—-会诊管理页面增加导出excel功能</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7372</td>\n<td>【宝鸡】医技医嘱执行—-已执行不可撤销医嘱，仍可通过勾选框勾选点击撤销</td>\n</tr>\n</tbody></table>\n<hr>\n<p>8.3：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-6940</td>\n<td>【宝鸡】预约日视图页面开发</td>\n</tr>\n<tr>\n<td>WEBHISAYH-546</td>\n<td>【安阳】会诊统计——去掉取消状态的会诊申请查询</td>\n</tr>\n<tr>\n<td>WEBHISAYH-548</td>\n<td>【安阳】会诊统计—-支持导出excel表格</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7392</td>\n<td>【宝鸡】门诊医技医生站—-复制已开立医嘱 粘贴无效</td>\n</tr>\n<tr>\n<td>WEBS-7393</td>\n<td>【宝鸡】手麻医生站—-“批量不计价”点击无效</td>\n</tr>\n<tr>\n<td>WEBS-7397</td>\n<td>【宝鸡】辅诊医生站—-批量不计价按钮功能性问题</td>\n</tr>\n</tbody></table>\n<hr>\n<p>8.4：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7372</td>\n<td>【宝鸡】医技医嘱执行—-已执行不可撤销医嘱，仍可通过勾选框勾选点击撤销</td>\n</tr>\n<tr>\n<td>WEBS-7392</td>\n<td>【宝鸡】门诊医技医生站—-复制已开立医嘱 粘贴无效</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBHISAYH-684</td>\n<td>【安阳】医生站—-开立病理申请也会校验检查目的导致异常</td>\n</tr>\n<tr>\n<td>WEBHISAYH-692</td>\n<td>【安阳】医嘱模板—-医生医嘱模板权限设置正常时，权限下医嘱模板保存置灰</td>\n</tr>\n</tbody></table>\n<hr>\n<p>8.7：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBHISAYH-615</td>\n<td>【安阳】医生站—-开立病理申请也会校验检查目的导致异常</td>\n</tr>\n<tr>\n<td>WEBHISAYH-651</td>\n<td>【辅诊医生站】辅诊医生可以开立检验检查申请及会诊申请查看</td>\n</tr>\n<tr>\n<td>WEBHISAYH-692</td>\n<td>【安阳】医嘱模板—-医生医嘱模板权限设置正常时，权限下医嘱模板保存置灰</td>\n</tr>\n<tr>\n<td>WEBHISAYH-707</td>\n<td>【安阳】辅诊医生站—-辅诊开立会诊申请时，无法审核医嘱进而无法完成后续会诊流程</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBHISAYH-707</td>\n<td>【安阳】辅诊医生站—-辅诊开立会诊申请时，无法审核医嘱进而无法完成后续会诊流程</td>\n</tr>\n<tr>\n<td>WEBHISAYH-709</td>\n<td>【安阳】住院医生站—-勾选条码划价医嘱仍可在pickshell中搜索到</td>\n</tr>\n</tbody></table>\n<hr>\n<p>8.8：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7393</td>\n<td>【宝鸡】住院、辅诊、手麻医生站—-“批量不计价”按钮功能问题</td>\n</tr>\n<tr>\n<td>WEBHISAYH-577</td>\n<td>【门诊医生站】门诊医生登录系统时，所选科室只需要显示门诊科室</td>\n</tr>\n<tr>\n<td>WEBHISAYH-615</td>\n<td>【安阳】医生站—-检查申请校验检查目的做必填校验</td>\n</tr>\n<tr>\n<td>WEBHISAYH-646</td>\n<td>【安阳】住院医生站—-复制粘贴，历史医嘱和模板也要控制开不出勾选条码划价项目</td>\n</tr>\n<tr>\n<td>WEBHISAYH-683</td>\n<td>【安阳】—-检查检验申请检查目的增加默认值</td>\n</tr>\n<tr>\n<td>WEBHISAYH-686</td>\n<td>【会诊申请】回复医生和邀请医生增加评价功能</td>\n</tr>\n<tr>\n<td>WEBHISAYH-709</td>\n<td>【安阳】住院医生站—-勾选条码划价医嘱仍可在pickshell中搜索到</td>\n</tr>\n<tr>\n<td>WEBHISAYH-720</td>\n<td>【安阳】医生站—-保存检查医嘱在检查目的弹窗时，不点确认点击关闭仍可保存医嘱</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBHISAYH-702</td>\n<td>【安阳】医嘱模板—-模板内大输液医嘱，落入患者医嘱列表时排序有误</td>\n</tr>\n<tr>\n<td>WEBHISAYH-716</td>\n<td>【安阳】医嘱模板维护—-模板维护页对有大输液或检验组合的模板保存后，原模板医嘱错误</td>\n</tr>\n<tr>\n<td>WEBHISAYH-720</td>\n<td>【安阳】医生站—-保存检查医嘱在检查目的弹窗时，不点确认点击关闭仍可保存医嘱</td>\n</tr>\n</tbody></table>\n<hr>\n<p>8.9：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBHISAYH-576</td>\n<td>【安阳】电子处方优化—医生开立外配处方先挂医保号</td>\n</tr>\n<tr>\n<td>WEBHISAYH-620</td>\n<td>【安阳】门诊医生站—-pickshell移植住院药房过滤条件</td>\n</tr>\n<tr>\n<td>WEBHISAYH-642</td>\n<td>【安阳】医生站—-医嘱模板增加排序功能</td>\n</tr>\n<tr>\n<td>WEBHISAYH-668</td>\n<td>【安阳】门诊医生站作废外配处方增加状态判断</td>\n</tr>\n<tr>\n<td>WEBHISAYH-702</td>\n<td>【安阳】医嘱模板—-模板内大输液医嘱，落入患者医嘱列表时排序有误</td>\n</tr>\n<tr>\n<td>WEBHISAYH-704</td>\n<td>【门诊医生站】处方分方，流向不同药房的处方不能共用一个处方号</td>\n</tr>\n<tr>\n<td>WEBHISAYH-716</td>\n<td>【安阳】医嘱模板维护—-模板维护页对有大输液或检验组合的模板保存后，原模板医嘱错误</td>\n</tr>\n<tr>\n<td>WEBHISAYH-718</td>\n<td>会诊申请医嘱无法作废</td>\n</tr>\n<tr>\n<td>WEBHISAYH-719</td>\n<td>医生发起会诊申请提示超时</td>\n</tr>\n<tr>\n<td>WEBHISAYH-727</td>\n<td>【安阳】医生站—-会诊医嘱KT缴费后，仍显示未付款</td>\n</tr>\n<tr>\n<td>WEBHISAYH-728</td>\n<td>【安阳】会诊申请—-住院待审核会诊，点击“取消会诊”无法正常取消</td>\n</tr>\n<tr>\n<td>WEBHISAYH-732</td>\n<td>【安阳】医嘱列表作废“申请”状态的会诊医嘱，会诊列表仍显示该会诊记录并可继续会诊流程</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBHISAYH-727</td>\n<td>【安阳】医生站—-会诊医嘱KT缴费后，仍显示未付款</td>\n</tr>\n<tr>\n<td>WEBHISAYH-728</td>\n<td>【安阳】会诊申请—-住院待审核会诊，点击“取消会诊”无法正常取消</td>\n</tr>\n<tr>\n<td>WEBHISAYH-732</td>\n<td>【安阳】医嘱列表作废“申请”状态的会诊医嘱，会诊列表仍显示该会诊记录并可继续会诊流程</td>\n</tr>\n</tbody></table>\n<hr>\n<p>8.10：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7342</td>\n<td>【宝鸡】—-门诊医保慢病审批相关取值表调整</td>\n</tr>\n<tr>\n<td>WEBS-7395</td>\n<td>医嘱单预览-WPB_ACCOUNT_SEARCH_MODE参数改造</td>\n</tr>\n<tr>\n<td>WEBS-7453</td>\n<td>【宝鸡】门诊医生站—-选择患者准备录医嘱时报错</td>\n</tr>\n<tr>\n<td>WEBS-7472</td>\n<td>【宝鸡】门诊医生站—-WPB带患者进“慢病”页报错</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7453</td>\n<td>【宝鸡】门诊医生站—-选择患者准备录医嘱时报错</td>\n</tr>\n<tr>\n<td>WEBS-7472</td>\n<td>【宝鸡】门诊医生站—-WPB带患者进“慢病”页报错</td>\n</tr>\n<tr>\n<td>WEBS-7495</td>\n<td>【宝鸡】医嘱模板—-门诊医嘱模板维护增加拼音码生成按钮</td>\n</tr>\n<tr>\n<td>WEBS-7497</td>\n<td>【宝鸡】住院医生站—-医嘱模板数据同步问题</td>\n</tr>\n</tbody></table>\n<hr>\n<p>8.14：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7126</td>\n<td>【医生站】医嘱模板维护功能优化</td>\n</tr>\n<tr>\n<td>WEBS-7495</td>\n<td>【宝鸡】医嘱模板—-门诊医嘱模板维护增加拼音码生成按钮</td>\n</tr>\n<tr>\n<td>WEBS-7497</td>\n<td>【宝鸡】住院医生站—-医嘱模板数据同步问题</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7530</td>\n<td>【宝鸡】门诊医生站—-开立输血 报错null</td>\n</tr>\n<tr>\n<td>WEBS-7542</td>\n<td>【宝鸡】第三方送检—-预交金支付报错，影响后续缴费及费用查询</td>\n</tr>\n<tr>\n<td>WEBS-7547</td>\n<td>【宝鸡】第三方送检—-患者挂号及挂号查询页面的序号显示有误</td>\n</tr>\n<tr>\n<td>WEBHISAYH-741</td>\n<td>【安阳】门诊医生站—-外配处方没有数据</td>\n</tr>\n<tr>\n<td>WEBHISAYH-749</td>\n<td>【安阳】门诊医生站—-选择库房后医嘱落入列表的流向问题</td>\n</tr>\n</tbody></table>\n<hr>\n<p>8.15：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7542</td>\n<td>【宝鸡】第三方送检—-预交金支付报错，影响后续缴费及费用查询</td>\n</tr>\n<tr>\n<td>WEBS-7547</td>\n<td>【宝鸡】第三方送检—-患者挂号及挂号查询页面的序号显示有误</td>\n</tr>\n<tr>\n<td>WEBHISAYH-736</td>\n<td>【安阳】病理申请—录入’内镜标本填写‘后自动带入‘送检标本&#x2F;材料’。</td>\n</tr>\n<tr>\n<td>WEBHISAYH-741</td>\n<td>【安阳】门诊医生站—-外配处方没有数据</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7579</td>\n<td>【宝鸡】孕检免费项目—-检验项目同属一个亚分组开立时，不应同属一个检验申请医嘱</td>\n</tr>\n<tr>\n<td>WEBS-7580</td>\n<td>【宝鸡】门诊住院开立检查申请均报错null</td>\n</tr>\n<tr>\n<td>WEBS-7582</td>\n<td>【宝鸡】第三方送检—-费用查询侧滑，交易日期默认查询时间有误</td>\n</tr>\n<tr>\n<td>WEBHISAYH-751</td>\n<td>【安阳】病理申请—-修改“内镜标本填写”描述为“内镜标本”</td>\n</tr>\n<tr>\n<td>WEBHISAYH-753</td>\n<td>【安阳】辅诊处方打印—-打印页面可查询到已停止状态的辅诊医嘱</td>\n</tr>\n</tbody></table>\n<hr>\n<p>8.16：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7580</td>\n<td>【宝鸡】门诊住院开立检查申请均报错null</td>\n</tr>\n<tr>\n<td>WEBS-7579</td>\n<td>【宝鸡】孕检免费项目—-检验项目同属一个亚分组开立时，不应同属一个检验申请医嘱</td>\n</tr>\n<tr>\n<td>WEBHISAYH-680</td>\n<td>【安阳】—-增加辅诊处方单打印功能</td>\n</tr>\n<tr>\n<td>WEBHISAYH-753</td>\n<td>【安阳】辅诊处方打印—-打印页面可查询到已停止状态的辅诊医嘱</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7608</td>\n<td>【宝鸡】医生站—-会诊医嘱数量单位显示错误</td>\n</tr>\n</tbody></table>\n<hr>\n<p>8.17：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-6688</td>\n<td>住院医生站——下达医嘱，光标自动定位</td>\n</tr>\n<tr>\n<td>WEBS-7582</td>\n<td>【宝鸡】第三方送检—-费用查询侧滑，交易日期默认查询时间有误</td>\n</tr>\n<tr>\n<td>WEBS-7608</td>\n<td>【宝鸡】医生站—-会诊医嘱数量单位显示错误</td>\n</tr>\n<tr>\n<td>WEBS-7614</td>\n<td>【宝鸡】门诊、住院医生站—-开立检查申请报错</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7613</td>\n<td>【宝鸡】住院、辅诊、手麻医生站—-pickshell开医嘱后光标自动定位问题</td>\n</tr>\n<tr>\n<td>WEBS-7614</td>\n<td>【宝鸡】门诊、住院医生站—-开立检查申请报错</td>\n</tr>\n<tr>\n<td>WEBHISAYH-770</td>\n<td>【安阳】门诊医生站—-选择库房后对应药品库存数量显示有误</td>\n</tr>\n</tbody></table>\n<hr>\n<p>8.18：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-6728</td>\n<td>【宝鸡】—第三方医院检验送检功能开发</td>\n</tr>\n<tr>\n<td>WEBS-7613</td>\n<td>【宝鸡】住院、辅诊、手麻医生站—-pickshell开医嘱后光标自动定位问题</td>\n</tr>\n<tr>\n<td>WEBS-7655</td>\n<td>【宝鸡】住院辅诊、手麻、医技医生站 “模板”按钮置灰不可用</td>\n</tr>\n<tr>\n<td>WEBHISAYH-749</td>\n<td>【安阳】门诊医生站—-选择库房后医嘱落入列表的流向问题</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7655</td>\n<td>【宝鸡】住院辅诊、手麻、医技医生站 “模板”按钮置灰不可用</td>\n</tr>\n</tbody></table>\n<hr>\n<p>8.21：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7206</td>\n<td>【宝鸡】——住院患者列表增加“取消入院申请”</td>\n</tr>\n<tr>\n<td>WEBS-7477</td>\n<td>会诊申请自动生成医嘱-WPB_ACCOUNT_SEARCH_MODE参数改造</td>\n</tr>\n<tr>\n<td>WEBS-7481</td>\n<td>医嘱模板保存-WPB_ACCOUNT_SEARCH_MODE参数改造</td>\n</tr>\n<tr>\n<td>WEBS-7483</td>\n<td>会诊申请-WPB_ACCOUNT_SEARCH_MODE参数改造</td>\n</tr>\n<tr>\n<td>WEBHISAYH-675</td>\n<td>【安阳】新增血糖系统接口</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7693</td>\n<td>【宝鸡】会诊—-会诊详情页取消会诊后，会诊医嘱仍存在</td>\n</tr>\n<tr>\n<td>WEBS-7694</td>\n<td>【宝鸡】会诊—-会诊申请信息填写医生时，回显该医生主科室至会诊科室</td>\n</tr>\n</tbody></table>\n<hr>\n<p>8.22：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7460</td>\n<td>【宝鸡门诊挂号】挂号时支付方式默认为扫码【8月】</td>\n</tr>\n<tr>\n<td>WEBS-7667</td>\n<td>【宝鸡】—-特定孕检项目计费时折扣成0元</td>\n</tr>\n<tr>\n<td>WEBS-7721</td>\n<td>【宝鸡】门诊医生站—-pickshell录入医嘱框与两边不平齐</td>\n</tr>\n<tr>\n<td>WEBS-7722</td>\n<td>【宝鸡】退费申请—-未默认勾选复选框，未默认查询已结算数据</td>\n</tr>\n<tr>\n<td>WEBS-7727</td>\n<td>【宝鸡】转诊—-转入医院搜索框增加拼音码搜索逻辑</td>\n</tr>\n<tr>\n<td>WEBHISAYH-771</td>\n<td>【安阳】女性患者开立病理申请时，病理申请开立界面妇科检查选项变为必填项</td>\n</tr>\n<tr>\n<td>WEBHISAYH-775</td>\n<td>【安阳】门诊输液—-已发药执行输液医嘱，护士无法打印输液单</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7720</td>\n<td>【宝鸡】门诊医生站—-医嘱剂量、数量单位、频次、周期的计算逻辑混乱</td>\n</tr>\n<tr>\n<td>WEBS-7721</td>\n<td>【宝鸡】门诊医生站—-pickshell录入医嘱框与两边不平齐</td>\n</tr>\n<tr>\n<td>WEBS-7722</td>\n<td>【宝鸡】退费申请—-未默认勾选复选框，未默认查询已结算数据</td>\n</tr>\n<tr>\n<td>WEBS-7727</td>\n<td>【宝鸡】转诊—-转入医院搜索框增加拼音码搜索逻辑</td>\n</tr>\n</tbody></table>\n<hr>\n<p>8.23：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7654</td>\n<td>【宝鸡】–门诊医生站的退费申请界面–希望只显示已收费项目（9.0）</td>\n</tr>\n<tr>\n<td>WEBS-7693</td>\n<td>【宝鸡】会诊—-会诊详情页取消会诊后，会诊医嘱仍存在</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7745</td>\n<td>【宝鸡】门诊慢病—-慢病进行通过、驳回、撤销操作后，会弹窗判断确认关闭</td>\n</tr>\n<tr>\n<td>WEBS-7746</td>\n<td>【宝鸡】门诊医生站—-慢病和特药弹窗  检索框根据申请单号查询有误</td>\n</tr>\n</tbody></table>\n<hr>\n<p>8.24:</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7188</td>\n<td>【宝鸡】检查检验申请增加产科孕检免费项目的开立【8.0】</td>\n</tr>\n<tr>\n<td>WEBS-7538</td>\n<td>【宝鸡】转诊慢病特药医保接口相关调整【8月】</td>\n</tr>\n<tr>\n<td>WEBS-7667</td>\n<td>【宝鸡】—-特定孕检项目计费时折扣成0元</td>\n</tr>\n<tr>\n<td>WEBS-7720</td>\n<td>【宝鸡】门诊医生站—-医嘱剂量、数量单位、频次、周期的计算逻辑混乱</td>\n</tr>\n<tr>\n<td>WEBS-7745</td>\n<td>【宝鸡】医生站—-慢病和转诊进行通过、驳回、撤销操作后，会弹窗判断确认关闭</td>\n</tr>\n<tr>\n<td>WEBS-7746</td>\n<td>【宝鸡】门诊医生站—-慢病和特药弹窗  检索框根据申请单号查询有误</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7776</td>\n<td>【宝鸡】医生站—-开立检查申请时，“临床诊断”和“诊断描述”是否必填逻辑有误</td>\n</tr>\n<tr>\n<td>WEBHISAYH-785</td>\n<td>【安阳】门诊医生站—-开立医嘱时多个频次的周期计算错误</td>\n</tr>\n</tbody></table>\n<hr>\n<p>8.25：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7486</td>\n<td>超限用药申请查看页面不显示已审核信息</td>\n</tr>\n<tr>\n<td>WEBS-7628</td>\n<td>[门诊住院医生站]—开立治疗医嘱时治疗科室下拉框改造，和治疗项目搜索逻辑改造</td>\n</tr>\n</tbody></table>\n<hr>\n<p>8.28：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBHISAYH-785</td>\n<td>【安阳】门诊医生站—-开立医嘱时多个频次的周期计算错误</td>\n</tr>\n</tbody></table>\n<hr>\n<p>8.29：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7808</td>\n<td>【宝鸡】门诊医技医生站—-维护草药至医嘱模板后，模板管理页草药医嘱不显示</td>\n</tr>\n<tr>\n<td>WEBHISAYH-792</td>\n<td>【安阳】门诊退费—-退药未退费药品在“退费历史”页显示为已完成退费项目</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7808</td>\n<td>【宝鸡】门诊医技医生站—-维护草药至医嘱模板后，模板管理页草药医嘱不显示</td>\n</tr>\n<tr>\n<td>WEBS-7814</td>\n<td>【宝鸡】医嘱模板—-“检验申请执行时间”页面显示位置错误</td>\n</tr>\n<tr>\n<td>WEBHISAYH-792</td>\n<td>【安阳】门诊退费—-退药未退费药品在“退费历史”页显示为已完成退费项目</td>\n</tr>\n</tbody></table>\n<hr>\n<p>8.30：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7752</td>\n<td>（宝鸡）【挂号资源管理】增加专病门诊标识【9月】</td>\n</tr>\n<tr>\n<td>WEBS-7814</td>\n<td>【宝鸡】医嘱模板—-“检验申请执行时间”页面显示位置错误</td>\n</tr>\n<tr>\n<td>WEBS-7825</td>\n<td>【宝鸡】辅诊医生站—-新建医嘱模板保存后不显示，刷新页面也无效</td>\n</tr>\n<tr>\n<td>WEBS-7827</td>\n<td>【宝鸡】住院医生站—-新开医嘱的“首次开始时间”无法修改</td>\n</tr>\n<tr>\n<td>WEBHISAYH-795</td>\n<td>【安阳】WPB—-WPB搜索框中 部分患者年龄与实际年龄不符</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7825</td>\n<td>【宝鸡】辅诊医生站—-新建医嘱模板保存后不显示，刷新页面也无效</td>\n</tr>\n<tr>\n<td>WEBS-7827</td>\n<td>【宝鸡】住院医生站—-新开医嘱的“首次开始时间”无法修改</td>\n</tr>\n<tr>\n<td>WEBS-7828</td>\n<td>【宝鸡】手麻医生站—-开立草药医嘱，点击确认时前端报错</td>\n</tr>\n<tr>\n<td>WEBS-7836</td>\n<td>【宝鸡】门诊挂号—-科室年龄校验弹窗文字显示有误</td>\n</tr>\n<tr>\n<td>WEBHISAYH-795</td>\n<td>【安阳】WPB—-WPB搜索框中 部分患者年龄与实际年龄不符</td>\n</tr>\n</tbody></table>\n<hr>\n<p>8.31：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7828</td>\n<td>【宝鸡】手麻医生站—-开立草药医嘱，点击确认时前端报错</td>\n</tr>\n<tr>\n<td>WEBS-7836</td>\n<td>【宝鸡】门诊挂号—-科室年龄校验弹窗文字显示有误</td>\n</tr>\n<tr>\n<td>WEBS-7840</td>\n<td>【宝鸡】门诊挂号—-科室校验弹窗内容，应与当前所挂资源科室关联</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7840</td>\n<td>【宝鸡】门诊挂号—-科室校验弹窗内容，应与当前所挂资源科室关联</td>\n</tr>\n<tr>\n<td>WEBS-7843</td>\n<td>【宝鸡】医技医生站—-备血医嘱保存后，查看输血医嘱详情时报错</td>\n</tr>\n<tr>\n<td>WEBS-7844</td>\n<td>【科室缴费】—-WPB选住院患者或未开检查的门诊患者，点击科室缴费界面报错</td>\n</tr>\n<tr>\n<td>WEBS-7845</td>\n<td>【宝鸡】门诊挂号—-患者挂号报错null</td>\n</tr>\n<tr>\n<td>WEBS-7847</td>\n<td>【宝鸡】门诊预约—-“门诊预约”页需要增加“科室年龄、性别校验”，效果同“门诊挂号”</td>\n</tr>\n<tr>\n<td>WEBS-7854</td>\n<td>【宝鸡】门诊医生站—-门诊医生进入住院证登记时报错</td>\n</tr>\n<tr>\n<td>WEBHISAYH-798</td>\n<td>【安阳】辅诊医嘱审核—-审核及打印查询慢，报请求超时</td>\n</tr>\n</tbody></table>\n<hr>\n<p>9.1：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7753</td>\n<td>（宝鸡）【门诊挂号&#x2F;门诊预约】挂号&#x2F;预约时增加科室-性别、科室-年龄限制校验【9月】</td>\n</tr>\n<tr>\n<td>WEBS-7773</td>\n<td>（宝鸡）【门诊挂号】增加会诊挂号功能【9月】</td>\n</tr>\n<tr>\n<td>WEBS-7843</td>\n<td>【宝鸡】医技医生站—-备血医嘱保存后，查看输血医嘱详情时报错</td>\n</tr>\n<tr>\n<td>WEBS-7844</td>\n<td>【科室缴费】—-WPB选住院患者或未开检查的门诊患者，点击科室缴费界面报错</td>\n</tr>\n<tr>\n<td>WEBS-7847</td>\n<td>【宝鸡】门诊预约—-“门诊预约”页需要增加“科室年龄、性别校验”，效果同“门诊挂号”</td>\n</tr>\n<tr>\n<td>WEBS-7854</td>\n<td>【宝鸡】门诊医生站—-门诊医生进入住院证登记时报错</td>\n</tr>\n</tbody></table>\n<hr>\n<p>9.4：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7831</td>\n<td>【宝鸡】门诊挂号—-医保患者挂号时报错</td>\n</tr>\n<tr>\n<td>WEBS-7845</td>\n<td>【宝鸡】门诊挂号—-患者挂号报错null</td>\n</tr>\n<tr>\n<td>WEBS-7859</td>\n<td>手术护士在手术排版界面进行手术计费后，点击手术完成按钮，提示‘患者手术未计费’</td>\n</tr>\n<tr>\n<td>WEBHISAYH-791</td>\n<td>安阳–门诊退费申请退费–增加限制，谁开的费用谁能进行退费【2023.9.13版本】</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7896</td>\n<td>【宝鸡】会诊—-MDT会诊审批后，在“会诊管理”页无法查到该条会诊</td>\n</tr>\n<tr>\n<td>WEBS-7897</td>\n<td>【宝鸡】会诊—-住院会诊申请单中“取消会诊”按钮失效</td>\n</tr>\n<tr>\n<td>WEBHISAYH-811</td>\n<td>【安阳】多科会诊—-变更会诊状态后会诊医生存值有误</td>\n</tr>\n</tbody></table>\n<hr>\n<p>9.5：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7673</td>\n<td>【宝鸡】登录页面需要增加医院医保码【9月】</td>\n</tr>\n<tr>\n<td>WEBS-7859</td>\n<td>手术护士在手术排版界面进行手术计费后，点击手术完成按钮，提示‘患者手术未计费’</td>\n</tr>\n<tr>\n<td>WEBS-7896</td>\n<td>【宝鸡】会诊—-MDT会诊审批后，在“会诊管理”页无法查到该条会诊</td>\n</tr>\n<tr>\n<td>WEBHISAYH-798</td>\n<td>【安阳】辅诊医嘱审核—-审核及打印查询慢，报请求超时</td>\n</tr>\n</tbody></table>\n<hr>\n<p>9.6：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7897</td>\n<td>【宝鸡】会诊—-住院会诊申请单中“取消会诊”按钮失效</td>\n</tr>\n<tr>\n<td>WEBS-7924</td>\n<td>【宝鸡】医生站—-参保地医保区划参数设置不符需求</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7924</td>\n<td>【宝鸡】医生站—-参保地医保区划参数设置不符需求</td>\n</tr>\n</tbody></table>\n<hr>\n<p>9.7：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7662</td>\n<td>【宝鸡】门诊、住院、手麻、辅诊、医技医生开立检查医嘱后，医嘱项目上的金额字段应该为开立检查项目所绑定的附加费总和 【9月】</td>\n</tr>\n<tr>\n<td>WEBS-7867</td>\n<td>【宝鸡】医生站转诊备案申请时，判断是否为本地医保【9月】</td>\n</tr>\n<tr>\n<td>WEBHISAYH-804</td>\n<td>【安阳】病理申请——绝经选项增加年龄判断是否必填</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7948</td>\n<td>【宝鸡】门诊预约—-本院职工身份患者从“门诊预约”页预约成功后，患者身份置空</td>\n</tr>\n<tr>\n<td>WEBHISAYH-815</td>\n<td>【门诊医生站】诊断弹窗中出现null</td>\n</tr>\n<tr>\n<td>WEBHISAYH-816</td>\n<td>【住院预约】选择入院科室后加载慢</td>\n</tr>\n</tbody></table>\n<hr>\n<p>9.8：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7355</td>\n<td>【宝鸡】增加参数控制申请是否可以作废和停止</td>\n</tr>\n<tr>\n<td>WEBS-7870</td>\n<td>【宝鸡】慢病备案申请页面的病种支持下拉框搜索【9月】</td>\n</tr>\n<tr>\n<td>WEBS-7948</td>\n<td>【宝鸡】门诊预约—-本院职工身份患者从“门诊预约”页预约成功后，患者身份置空</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBHISAYH-822</td>\n<td>【安阳】医嘱模板—-住院、住院辅诊医生站的医嘱模板管理页“保存”和“另存”按钮置灰，影响模板维护</td>\n</tr>\n</tbody></table>\n<hr>\n<p>9.11：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-8011</td>\n<td>【宝鸡】会诊—-会诊申请完成后，需求自动刷新医嘱列表</td>\n</tr>\n<tr>\n<td>WEBHISAYH-803</td>\n<td>安阳–门诊划价、费用录入–条形码限制【2023.9.13版本】</td>\n</tr>\n<tr>\n<td>WEBHISAYH-816</td>\n<td>【住院预约】选择入院科室后加载慢</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-8011</td>\n<td>【宝鸡】会诊—-会诊申请完成后，需求自动刷新医嘱列表</td>\n</tr>\n<tr>\n<td>WEBHISAYH-835</td>\n<td>【安阳】医嘱模板—-住院本科室模板图标，收藏后仍置灰</td>\n</tr>\n</tbody></table>\n<hr>\n<p>9.12：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBHISAYH-810</td>\n<td>【安阳】医嘱模板增加自定义排序</td>\n</tr>\n<tr>\n<td>WEBHISAYH-815</td>\n<td>【门诊医生站】诊断弹窗中出现null</td>\n</tr>\n<tr>\n<td>WEBHISAYH-835</td>\n<td>【安阳】医嘱模板—-住院本科室模板图标，收藏后仍置灰</td>\n</tr>\n</tbody></table>\n<hr>\n<p>9.13：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBHISAYH-820</td>\n<td>【安阳】会诊回复医生单独存值</td>\n</tr>\n</tbody></table>\n<hr>\n<p>9.14：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7855</td>\n<td>【宝鸡】门诊预约&#x2F;医生站自助挂号-患者是否为本院职工判断逻辑修改</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-8056</td>\n<td>【宝鸡】WPB—-复制患者的就诊卡号，粘贴内容为[object Object]</td>\n</tr>\n<tr>\n<td>WEBS-8066</td>\n<td>【宝鸡】医技医嘱执行—-已执行医嘱无法正常撤销</td>\n</tr>\n<tr>\n<td>WEBS-8067</td>\n<td>WEBHIS药品单位删除后，医嘱开立界面仍展示了对应的删除的药品单位</td>\n</tr>\n<tr>\n<td>WEBHISAYH-852</td>\n<td>WEBHIS药品单位删除后，医嘱开立界面仍展示了对应的删除的药品单位</td>\n</tr>\n</tbody></table>\n<hr>\n<p>9.18：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7893</td>\n<td>【宝鸡】医嘱模板增加自定义排序</td>\n</tr>\n<tr>\n<td>WEBS-7938</td>\n<td>会诊申请-会诊医嘱控制</td>\n</tr>\n<tr>\n<td>WEBS-8023</td>\n<td>会诊申请-会诊医嘱控制（新增显示模式）</td>\n</tr>\n<tr>\n<td>WEBS-8066</td>\n<td>【宝鸡】医技医嘱执行—-已执行医嘱无法正常撤销</td>\n</tr>\n<tr>\n<td>WEBHISAYH-852</td>\n<td>WEBHIS药品单位删除后，医嘱开立界面仍展示了对应的删除的药品单位</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-8104</td>\n<td>【宝鸡】DIP&#x2F;DRG-门诊处方预警接口，修改参数后前端报错</td>\n</tr>\n<tr>\n<td>WEBS-8112</td>\n<td>【宝鸡】DIP&#x2F;DRG接口开发—-住院医嘱预警，前端未调接口，参数无效</td>\n</tr>\n</tbody></table>\n<hr>\n<p>9.19：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7946</td>\n<td>【宝鸡】门诊挂号–F5刷新后光标选中wpb搜索框【9月】</td>\n</tr>\n<tr>\n<td>WEBS-8056</td>\n<td>【宝鸡】WPB—-复制患者的就诊卡号，粘贴内容为[object Object]</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-8124</td>\n<td>【宝鸡】检验申请弹窗优化—-孕检免费项目检验组&#x2F;标本分类 检索不完整</td>\n</tr>\n<tr>\n<td>WEBS-8125</td>\n<td>【宝鸡】检验申请弹窗优化—-项目全局检索后，检验组&#x2F;分类选择后原项目检索框失效</td>\n</tr>\n<tr>\n<td>WEBS-8135</td>\n<td>【宝鸡】门诊慢特病—-申请审批页 申请疾病字段值不显示</td>\n</tr>\n</tbody></table>\n<hr>\n<p>9.20：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7907</td>\n<td>【宝鸡】检验申请开立弹窗优化</td>\n</tr>\n<tr>\n<td>WEBS-8104</td>\n<td>【宝鸡】DIP&#x2F;DRG-门诊处方预警接口，修改参数后前端报错</td>\n</tr>\n<tr>\n<td>WEBS-8112</td>\n<td>【宝鸡】DIP&#x2F;DRG接口开发—-住院医嘱预警，前端未调接口，参数无效</td>\n</tr>\n<tr>\n<td>WEBS-8124</td>\n<td>【宝鸡】检验申请弹窗优化—-孕检免费项目检验组&#x2F;标本分类 检索不完整</td>\n</tr>\n<tr>\n<td>WEBS-8125</td>\n<td>【宝鸡】检验申请弹窗优化—-项目全局检索后，检验组&#x2F;分类选择后原项目检索框失效</td>\n</tr>\n<tr>\n<td>WEBS-8136</td>\n<td>【宝鸡】门诊慢特病—-申请审批页 申请疾病字段值不显示</td>\n</tr>\n</tbody></table>\n<hr>\n<p>9.21：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-8027</td>\n<td>【宝鸡】住院证登记–申请入院日期、病区、诊断、诊断日期、患者病情增加默认效果【9月】</td>\n</tr>\n<tr>\n<td>WEBS-8067</td>\n<td>WEBHIS药品单位删除后，医嘱开立界面仍展示了对应的删除的药品单位</td>\n</tr>\n<tr>\n<td>WEBS-8151</td>\n<td>[门诊预约日视图]–日视图选择时间片添加预约，log有报错</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-8157</td>\n<td>【宝鸡】门诊慢特病—-明细查看页 认证通过疾病显示[object Object]</td>\n</tr>\n<tr>\n<td>WEBS-8165</td>\n<td>【宝鸡】门诊会诊—-开立会诊时未刷新列表，控制会诊医嘱自动生成参数失效</td>\n</tr>\n<tr>\n<td>WEBS-8174</td>\n<td>【门诊医生站】—勾选处方流转后，没有库存的药pickshell搜不出来</td>\n</tr>\n</tbody></table>\n<hr>\n<p>9.22：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7932</td>\n<td>【宝鸡】住院医生站可以同时显示患者住院就诊所有医嘱【9月】</td>\n</tr>\n<tr>\n<td>WEBS-8157</td>\n<td>【宝鸡】门诊慢特病—-明细查看页 认证通过疾病显示[object Object]</td>\n</tr>\n<tr>\n<td>WEBS-8178</td>\n<td>【宝鸡】转诊—-医生站转诊按钮，转院原因存值无法更新</td>\n</tr>\n<tr>\n<td>WEBHISAYH-864</td>\n<td>【门诊医生站】—勾选处方流转后，没有库存的药pickshell搜不出来</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-8178</td>\n<td>【宝鸡】转诊—-医生站转诊按钮，转院原因存值无法更新</td>\n</tr>\n<tr>\n<td>WEBS-8180</td>\n<td>【宝鸡】转诊—-“诊断描述”文本框显示有误</td>\n</tr>\n</tbody></table>\n<hr>\n<p>9.25：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-8106</td>\n<td>【宝鸡】转院、慢病、特药备案优化</td>\n</tr>\n<tr>\n<td>WEBS-8165</td>\n<td>【宝鸡】门诊会诊—-开立会诊时未刷新列表，控制会诊医嘱自动生成参数失效</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-8207</td>\n<td>【宝鸡】医生站—-治疗类自定义医嘱默认带执行人</td>\n</tr>\n<tr>\n<td>WEBS-8208</td>\n<td>【宝鸡】医生站—-自定义医嘱从剪切板、模板调用时全部带入执行人</td>\n</tr>\n<tr>\n<td>WEBS-8209</td>\n<td>【宝鸡】医生站—-组合医嘱从模板导入时，未显示执行人</td>\n</tr>\n<tr>\n<td>WEBS-8212</td>\n<td>【宝鸡】住院医生站—-列表中有医嘱 同时存在“作废”和“停止”按钮</td>\n</tr>\n</tbody></table>\n<hr>\n<p>9.28：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7928</td>\n<td>【宝鸡】 检查申请开立弹窗优化</td>\n</tr>\n<tr>\n<td>WEBS-8189</td>\n<td>慢特病申请-申请疾病增加数量控制</td>\n</tr>\n<tr>\n<td>WEBS-8207</td>\n<td>【宝鸡】医生站—-治疗类自定义医嘱默认带执行人</td>\n</tr>\n<tr>\n<td>WEBS-8208</td>\n<td>【宝鸡】医生站—-自定义医嘱从剪切板、模板调用时全部带入执行人</td>\n</tr>\n<tr>\n<td>WEBS-8209</td>\n<td>【宝鸡】医生站—-组合医嘱从模板导入时，未显示执行人</td>\n</tr>\n<tr>\n<td>WEBS-8241</td>\n<td>【宝鸡】医生站—-不计价医嘱，取消计价勾选时应同时联动清空执行人</td>\n</tr>\n<tr>\n<td>WEBS-8242</td>\n<td>【宝鸡】住院医生站—-开立会诊医嘱，执行人应默认开单医生</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-8238</td>\n<td>【宝鸡】住院医生站—-批量不计价按钮点击前端报错</td>\n</tr>\n<tr>\n<td>WEBS-8241</td>\n<td>【宝鸡】医生站—-不计价医嘱，取消计价勾选时应同时联动清空执行人</td>\n</tr>\n<tr>\n<td>WEBS-8242</td>\n<td>【宝鸡】住院医生站—-开立会诊医嘱，执行人应默认开单医生</td>\n</tr>\n<tr>\n<td>WEBS-8244</td>\n<td>【宝鸡】挂号&#x2F;预约查询—-预约详情页点击预约到诊时报错null</td>\n</tr>\n</tbody></table>\n<hr>\n<p>10.7：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-8001</td>\n<td>【宝鸡】医生看诊、医嘱核对页面WPB搜索效果调整【9月】</td>\n</tr>\n<tr>\n<td>WEBS-8212</td>\n<td>【宝鸡】住院医生站—-列表中有医嘱 同时存在“作废”和“停止”按钮</td>\n</tr>\n<tr>\n<td>WEBS-8238</td>\n<td>【宝鸡】住院医生站—-批量不计价按钮点击前端报错</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-8252</td>\n<td>WEBHIS预诊信息填写后预诊记录记录表没有写入visitid</td>\n</tr>\n<tr>\n<td>WEBS-8254</td>\n<td>【宝鸡】挂号&#x2F;预约查询—-点击“预约到诊”弹窗“配置错误：接口null未配置”</td>\n</tr>\n<tr>\n<td>WEBHISAYH-881</td>\n<td>【知识库】未弹到界面最前面</td>\n</tr>\n</tbody></table>\n<hr>\n<p>10.8：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7419</td>\n<td>【宝鸡】医生站—-开立医嘱增加执行人录入【9.0】</td>\n</tr>\n<tr>\n<td>WEBHISAYH-881</td>\n<td>【知识库】未弹到界面最前面</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-8264</td>\n<td>【宝鸡】医嘱列表“执行人”文本显示位置不规范</td>\n</tr>\n</tbody></table>\n<hr>\n<p>10.9：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7978</td>\n<td>【宝鸡】挂号&#x2F;预约查询页面【9月】</td>\n</tr>\n<tr>\n<td>WEBS-8190</td>\n<td>慢特病、特药处方开立-增加是否需要备案的控制</td>\n</tr>\n<tr>\n<td>WEBS-8252</td>\n<td>WEBHIS预诊信息填写后预诊记录记录表没有写入visitid</td>\n</tr>\n<tr>\n<td>WEBS-8254</td>\n<td>【宝鸡】挂号&#x2F;预约查询—-点击“预约到诊”弹窗“配置错误：接口null未配置”</td>\n</tr>\n</tbody></table>\n<hr>\n<p>10.10：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-7872</td>\n<td>【宝鸡】门诊医生站开立精一处方时校验录入代办人信息【9月】</td>\n</tr>\n<tr>\n<td>WEBS-8264</td>\n<td>【宝鸡】医嘱列表“执行人”文本显示位置不规范</td>\n</tr>\n<tr>\n<td>WEBS-8316</td>\n<td>【宝鸡】门诊医生站—-精一药品保存校验弹窗  未显示列出所有“精神一类药品”</td>\n</tr>\n<tr>\n<td>WEBS-8318</td>\n<td>【宝鸡】门诊医生站—-代开人录入后 保存医嘱仍弹窗录入代开人，agent_Name未存值</td>\n</tr>\n<tr>\n<td>WEBS-8325</td>\n<td>【宝鸡】手麻、医技、辅诊医生站—-初入页面前端报错</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-8316</td>\n<td>【宝鸡】门诊医生站—-精一药品保存校验弹窗  未显示列出所有“精神一类药品”</td>\n</tr>\n<tr>\n<td>WEBS-8318</td>\n<td>【宝鸡】门诊医生站—-代开人录入后 保存医嘱仍弹窗录入代开人，agent_Name未存值</td>\n</tr>\n<tr>\n<td>WEBS-8325</td>\n<td>【宝鸡】手麻、医技、辅诊医生站—-初入页面前端报错</td>\n</tr>\n</tbody></table>\n<hr>\n<p>10.11：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-8342</td>\n<td>【宝鸡】门诊医生站—-给患者录入诊断时前端报错</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-8342</td>\n<td>【宝鸡】门诊医生站—-给患者录入诊断时前端报错</td>\n</tr>\n</tbody></table>\n<hr>\n<p>10.12：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBHISAYH-889</td>\n<td>【安阳】医生站  增加标记外伤自费、妊娠期、哺乳期</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-8353</td>\n<td>【宝鸡】门诊医生站—-代开人录入后，“联系方式”值不回显</td>\n</tr>\n<tr>\n<td>WEBS-8364</td>\n<td>【宝鸡】会诊医嘱名称显示修改</td>\n</tr>\n<tr>\n<td>WEBS-8368</td>\n<td>【宝鸡】孕检项目—-项目检索框搜索时“检验组”会刷新显示全部</td>\n</tr>\n</tbody></table>\n<hr>\n<p>10.16：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-8368</td>\n<td>【宝鸡】孕检项目—-项目检索框搜索时“检验组”会刷新显示全部</td>\n</tr>\n<tr>\n<td>WEBS-8353</td>\n<td>【宝鸡】门诊医生站—-代开人录入后，“联系方式”值不回显</td>\n</tr>\n<tr>\n<td>WEBS-8364</td>\n<td>【宝鸡】会诊医嘱名称显示修改</td>\n</tr>\n<tr>\n<td>WEBS-8389</td>\n<td>【宝鸡】挂号预约查询–修改预约时“确认”按钮转圈置灰, 无法点击</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-8388</td>\n<td>【宝鸡】挂号预约查询—-部分数据 修改&#x2F;取消预约时会报错null</td>\n</tr>\n<tr>\n<td>WEBS-8384</td>\n<td>【宝鸡】医生站—-检查申请开立后再编辑时报错NULL</td>\n</tr>\n<tr>\n<td>WEBS-8381</td>\n<td>【转诊备案】转诊页面默认带入门诊主诊断</td>\n</tr>\n<tr>\n<td>WEBS-8380</td>\n<td>【特药备案】特药页面默认带入门诊主诊断</td>\n</tr>\n<tr>\n<td>WEBHISAYH-910</td>\n<td>【安阳】手术要求校验文字排版样式修改</td>\n</tr>\n<tr>\n<td>WEBS-8389</td>\n<td>【宝鸡】挂号预约查询–修改预约时“确认”按钮转圈置灰, 无法点击</td>\n</tr>\n</tbody></table>\n<hr>\n<p>10.17：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBHISAYH-854</td>\n<td>【安阳】门诊诊断页签增加初复诊必填校验</td>\n</tr>\n<tr>\n<td>WEBHISAYH-878</td>\n<td>【医生站手术申请】手术申请弹窗，手术要求需要为必填项</td>\n</tr>\n<tr>\n<td>WEBHISAYH-892</td>\n<td>【安阳】操作类手术项目所有医生不限制权限</td>\n</tr>\n<tr>\n<td>WEBHISAYH-910</td>\n<td>【安阳】手术要求校验文字排版样式修改</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-8414</td>\n<td>【宝鸡】排班生成—-分时预约限额设置后，在门诊预约日视图中未生效</td>\n</tr>\n</tbody></table>\n<hr>\n<p>10.18：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-8380</td>\n<td>【特药备案】特药页面默认带入门诊主诊断</td>\n</tr>\n<tr>\n<td>WEBS-8381</td>\n<td>【转诊备案】转诊页面默认带入门诊主诊断</td>\n</tr>\n<tr>\n<td>WEBS-8384</td>\n<td>【宝鸡】医生站—-检查申请开立后再编辑时报错NULL</td>\n</tr>\n<tr>\n<td>WEBS-8428</td>\n<td>门急诊挂号员在WPB点击读取身份证后报错</td>\n</tr>\n<tr>\n<td>WEBHISAYH-912</td>\n<td>【安阳】患者诊断“初复诊”文字标红显示</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-8427</td>\n<td>【宝鸡】门诊医生站—-用法、频次输入框录入时光标异常</td>\n</tr>\n<tr>\n<td>WEBS-8429</td>\n<td>【宝鸡】挂号资源管理—-“治疗”资源类型下“治疗师”不填写可正常保存</td>\n</tr>\n<tr>\n<td>WEBS-8430</td>\n<td>【宝鸡】门诊医生站—-“自助挂号”功能 电子健康卡输入框扩宽</td>\n</tr>\n<tr>\n<td>WEBS-8437</td>\n<td>WEBHIS门诊预约之后进行挂号是，预约的挂号资源没有自动带入</td>\n</tr>\n<tr>\n<td>WEBS-8438</td>\n<td>【宝鸡】门诊医生站—-点击新挂号未看诊患者时报错</td>\n</tr>\n<tr>\n<td>WEBHISAYH-912</td>\n<td>【安阳】患者诊断“初复诊”文字标红显示</td>\n</tr>\n</tbody></table>\n<hr>\n<p>10.19：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-8253</td>\n<td>【宝鸡】报表查询——增加在新标签页打开报表功能</td>\n</tr>\n<tr>\n<td>WEBS-8406</td>\n<td>医保患者科室缴费时报错</td>\n</tr>\n<tr>\n<td>WEBS-8429</td>\n<td>【宝鸡】挂号资源管理—-“治疗”资源类型下“治疗师”不填写可正常保存</td>\n</tr>\n<tr>\n<td>WEBS-8430</td>\n<td>【宝鸡】门诊医生站—-“自助挂号”功能 电子健康卡输入框扩宽</td>\n</tr>\n<tr>\n<td>WEBS-8438</td>\n<td>【宝鸡】门诊医生站—-点击新挂号未看诊患者时报错</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-8470</td>\n<td>【宝鸡】单据打印—-未配置“病理申请单”报表时，可在“检查申请单”列表下打印“病理申请单”</td>\n</tr>\n</tbody></table>\n<hr>\n<p>10.20：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-8286</td>\n<td>【挂号资源管理】–增加治疗师维护入口</td>\n</tr>\n<tr>\n<td>WEBS-8437</td>\n<td>WEBHIS门诊预约之后进行挂号时，预约的挂号资源没有自动带入</td>\n</tr>\n</tbody></table>\n<hr>\n<p>10.24：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-8271</td>\n<td>【宝鸡】病理申请弹窗中信息必填配置【10月】</td>\n</tr>\n<tr>\n<td>WEBS-8401</td>\n<td>【宝鸡】wpb&#x2F;门诊医生站–wpb查询患者及医生站患者列表增加科室看诊挂号有效期逻辑【10月】</td>\n</tr>\n<tr>\n<td>WEBS-8436</td>\n<td>【宝鸡】门诊挂号页面选择挂号弹窗去掉预检记录查询</td>\n</tr>\n</tbody></table>\n<hr>\n<p>10.25：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-8253</td>\n<td>【宝鸡】报表查询——增加在新标签页打开报表功能</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-8546</td>\n<td>【医生站】医嘱暂存—-多种类型医嘱 暂存提交时报错“违反约束”</td>\n</tr>\n<tr>\n<td>WEBS-8548</td>\n<td>【医生站】医嘱暂存—-手术类医嘱暂存时前端报错</td>\n</tr>\n<tr>\n<td>WEBS-8554</td>\n<td>【医生站】医嘱暂存—-医嘱列表多个信息项应当可编辑，效果应与KT同步</td>\n</tr>\n<tr>\n<td>WEBS-8555</td>\n<td>【医生站】医嘱暂存—-暂存医嘱后，从WPB处退出患者时页面置灰</td>\n</tr>\n</tbody></table>\n<hr>\n<p>10.26：</p>\n<table>\n<thead>\n<tr>\n<th>ISSUE序列号</th>\n<th>ISSUE描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-8400</td>\n<td>【宝鸡】门诊医生站支持修改患者属性</td>\n</tr>\n<tr>\n<td>WEBS-8427</td>\n<td>【宝鸡】门诊医生站—-用法、频次输入框录入时光标异常</td>\n</tr>\n<tr>\n<td>WEBS-8564</td>\n<td>治疗医嘱执行界面已执行医嘱撤销键置灰</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>提交的bug&#x2F;sub-bug&#x2F;优化</th>\n<th>bug描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WEBS-8562</td>\n<td>【住院医生站】医嘱暂存—-删除已暂存医嘱后 医嘱仍在列表中，需大刷新页面才消失</td>\n</tr>\n<tr>\n<td>WEBS-8564</td>\n<td>治疗医嘱执行界面已执行医嘱撤销键置灰</td>\n</tr>\n</tbody></table>\n<hr>\n","encrypt":true},{"title":"MySQL学习","abbrlink":"c6fb831a","date":"2022-06-15T08:07:19.000Z","_content":"\n**基本的SQL语言学习（MySQL）**\n\n<!--more-->\n\n# SQL的基本定义及概念\n\n**数据库（DataBase）**：存储数据的仓库，数据有组织的进行存储。\n\n**数据库管理系统（DBMS）**：操纵和管理数据库的大型软件。\n\n**SQL**：操作关系型数据库的编程语言。\n\n**关系型数据库（RDBMS）**：建立在关系模型基础上，由多张相互连接的二维表组成的数据库\n\n基础使用方法：通过cmd输入mysql -r root -p进入mysql页面进行操作 或 运行MySQL command line Client - Unicode\n\n**SQL分类**：\n\n| **DDL** | **数据定义语言** | **定义数据库对象（数据库、表、字段）**   |\n| ------- | ---------------- | ---------------------------------------- |\n| **DML** | **数据操作语言** | **对数据库表中数据增删改**               |\n| **DQL** | **数据查询语言** | **查询数据库表中的记录**                 |\n| **DCL** | **数据控制语言** | **创建数据库用户，控制数据库的访问权限** |\n\n------\n\n# DDL语句\n\n语句后面注意 “ ; ”\t，\t[...]部分表示选写内容\t，\tcomment '...' 为注释内容\n\n## 数据库操作\n\n- 查询所有数据库：**show database;**\n- 查询当前数据库：**select database();**\n- 创建数据库：**create database [if not exists] 数据库名;**\n- 删除数据库：**drop database [if not exists] 数据库名;**\n- 使用数据库：**use 数据库名;**\n\n## 表操作\n\n- 修改表名：**alter table 表名 rename to 新表名;**\n- 删除表：**drop table [if exists] 表名**\n- 删除指定表，并重新创建该表（初始化该表）：**truncate table 表名;**\n\n### 查询\n\n- 查询当前数据库所有表：**show tables;**\n- 查询表结构：**desc 表名;**\n- 查询指定表的建表语句：**show create table 表名;**\n\n### 修改\n\n- 添加字段：**alter table 表名 add 字段名 数据类型;**\n- 修改数据类型：**alter table 表名 modify 字段名 新的数据类型;**\n- 修改字段名和字段类型：**alter table 表名 change 旧字段名 新字段名 数据类型;** \n\n### 删除\n\n- 删除字段：**alter table 表名 drop 字段名;**\n\n------\n\n# DML语句\n\n## 添加数据\n\n- 给指定字段添加数据：**insert into 表名(字段名1,字段名2,...) values (值1,值2,...);**\n- 给全部字段添加数据：**insert into 表名 values (值1,值2,...);**\n- 批量添加数据：**insert into 表名(字段名1,字段名2,...) values (值1,值2,...);**  /*一行*/\n- ​\t\t\t\t\t\t **insert into 表名 values (值1,值2,...),(值1,值2,...),(值1,值2,...);**  /*多行*/\n\n插入数据时，指定的字段顺序需要与值的顺序是一一对应的。\n\n字符串和日期型数据应该包含在引号中。\n\n插入的数据大小，应该在字段的规定范围内（满足对应的数据类型和数据范围）。\n\n## 修改数据\n\n- **update 表名 set 字段名1=值1,字段名2=值2,... [where 条件];**\n\n修改语句的条件可有可无，若没有where条件，则会修改整张表的所有数据。\n\n## 删除数据\n\n- **delete from 表名 [where 条件];**\n\n删除语句的条件可有可无，若没有where条件，则会删除整张表的所有数据。\n\ndelete语句不能删除某个字段的值（可以用update）。\n\n------\n\n# DQL语句\n\n## 基本查询\n\n- 查询多个字段：**select 字段1,字段2,... from 表名;**\n- 查询全部字段：**select * from 表名;**\n- 设置别名：**select 字段1[as 别名1],字段2[as 别名2],... from 表名;**\n- 去除重复记录：**select distinct 字段列表 from 表名;**\n\n## 条件查询\n\n- **select 字段列表 from 表名 where 条件列表;**\n\n例：查询姓名为两个字的员工信息select * from employee where name like '__';\n\n​\t\t查询身份证号最后一位是X的员工信息select * from employee where idcard like '%X';\n\n​\t\t或 select * from employee where idcard like '_________________X' (17个'_')\n\n| 比较运算符       | 功能                                       |\n| ---------------- | :----------------------------------------- |\n| >                | 大于                                       |\n| >=               | 大于等于                                   |\n| <                | 小于                                       |\n| <=               | 小于等于                                   |\n| =                | 等于                                       |\n| <> 或 !=         | 不等于                                     |\n| between...and... | 介于范围之内（between 小 and 大）          |\n| in(...)          | 在in之内的列表中的值，满足一个即可         |\n| like 占位符      | 模糊匹配（_匹配单个字符，%匹配任意个字符） |\n| is null          | 判断是否为空                               |\n\n\n\n| 逻辑运算符 | 功能                         |\n| ---------- | ---------------------------- |\n| and 或 &&  | 并且（多个条件同时成立）     |\n| or 或 \\|\\| | 或者（多个条件任意一个成立） |\n| not 或 ！  | 非，不是                     |\n\n## 聚合函数\n\n- **select 聚合函数(字段列表) from 表名;**\n\n定义：将一列数据作为一个整体，进行纵向计算\n\nnull值不参与所有聚合函数的运算\n\n| 函数  | 功能     |\n| ----- | -------- |\n| count | 统计数量 |\n| max   | 最大值   |\n| min   | 最小值   |\n| avg   | 平均值   |\n| sum   | 求和     |\n\n## 分组查询\n\n- **select 字段列表 from 表名 [where 条件] group by 分组字段名 [having 分组后过滤条件];**\n\n## 排序查询\n\n- **select 字段列表 from 表名 order by 字段1,排序方式1,字段2,排序方式2,...;**\n\n排序方式有：ASC升序(默认)、DESC降序\n\n## 分页查询\n\n- **select 字段列表 from 表名 limit 起始索引,查询记录数;**\n\n起始索引从0开始，起始索引=(查询页码 - 1) * 每页显示记录数\n\n如果查询的是第一页数据，起始索引可以省略\n\n## DQL语句执行顺序\n\n1. from 表名列表\n2. where 条件列表\n3. group by 分组字段列表\n4. having 分组后条件列表\n5. select 字段列表\n6. order by 排序字段列表\n7. limit 分页参数\n\n------\n\n# DCL语句\n\n数据控制语言，用来管理数据库用户、控制数据库的访问权限。\n\n| 权限（常用）        | 说明               |\n| ------------------- | ------------------ |\n| all(all privileges) | 所有权限           |\n| select              | 查询数据           |\n| insert              | 插入数据           |\n| update              | 修改数据           |\n| delete              | 删除数据           |\n| alter               | 修改表             |\n| drop                | 删除数据库/表/视图 |\n| create              | 创建数据库/表      |\n\n\n\n## 管理用户\n\n- 查询用户：use mysql;  =>  **select * from user;**\n- 创建用户：**create user 'user name'@'host name' identified by 'password';**\n- 修改用户密码：**alter user 'user name'@'host name' identified with mysql_native_password by 'new password';**\n- 删除用户：**drop user 'user name'@'host name';**\n\n## 权限控制\n\n- 查询权限：**show grants for 'user name'@'host name';**\n- 授予权限：**grant 权限列表 on 数据库名.表名 to 'user name'@'host name';**\n- 撤销权限：**revoke 权限列表 on 数据库名.表名 from 'user name'@'host name';**\n\n------\n\n# 函数\n\n## 字符串函数\n\n| 函数（常用）                | 功能                                                      |\n| --------------------------- | --------------------------------------------------------- |\n| concat(S1, S2, S3, ... ,Sn) | 字符串拼接，将S1...Sn拼接成一个字符串                     |\n| lower(str)                  | 将字符串str全部转为小写                                   |\n| upper(str)                  | 将字符串str全部转为大写                                   |\n| lpad(str, n, pad)           | 左填充，用字符串pad对str的左边进行填充，达到n个字符串长度 |\n| rpad(str, n, pad)           | 右填充，用字符串pad对str的右边进行填充，达到n个字符串长度 |\n| trim(str)                   | 去掉字符串头部和尾部的空格                                |\n| substring(str, start, len)  | 返回从字符串str从start位置起的len个长度的字符串           |\n\n例：study数据库的employee表中将员工编号workno更改，将编号前补齐'0'以达到五位数编号\n\n答：update employee set wordno = lpad(workno, 5, '0');\n\n------\n\n## 数值函数\n\n| 函数（常用） | 功能                               |\n| ------------ | ---------------------------------- |\n| ceil(x)      | 向上取整                           |\n| floor(x)     | 向下取整                           |\n| mod(x, y)    | 返回x/y的模（整除后的余数）        |\n| rand()       | 返回0~1内的随机数                  |\n| round(x, y)  | 求参数x的四舍五入的值，保留y位小数 |\n\n例：使用数据库的函数，实现随机生成6位验证码\n\n答：lpad(round(select rand() * 1000000, 0), 6, '0');\n\n此方法运用了round()函数，替换成向上或向下取整函数依然可以完成，lpad或rpad同理。\n\n------\n\n## 日期函数\n\n| 函数                               | 功能                                                         |\n| ---------------------------------- | ------------------------------------------------------------ |\n| curdate()                          | 返回当前日期                                                 |\n| curtime()                          | 返回当前时间                                                 |\n| now()                              | 返回当前日期和时间                                           |\n| year(date)                         | 获取指定date的年份                                           |\n| month(date)                        | 获取指定date的月份                                           |\n| day(date)                          | 获取指定date的日期                                           |\n| date_add(date, interval expr type) | 计算date加expr type后对应的时间,expr表示数值，type表示类型如年月日 |\n| datediff(date1, date2)             | 计算date1 和 date2之间相隔的天数                             |\n\n函数举例：date_add(now(), interval 90 day) ==>> 2022-07-08 18:54:37\n\n函数举例：datediff('2022-4-9', '2022-7-1') ==>> -83\n\n例：根据study数据库的employee表，计算所有员工入职时间，用天数表示，并按天数降序排序\n\n答：select name, datediff(curdate(), entrydate) from employee order by datediff(curdate(), entrydate) desc;\n\n------\n\n## 流程控制函数\n\n| 函数                                                       | 功能                                                     |\n| ---------------------------------------------------------- | -------------------------------------------------------- |\n| if(value, t, f)                                            | 如果value为true，则返回t，否则返回f                      |\n| ifnull(value1, value2)                                     | 如果value1不为空，返回value1，否则返回value2             |\n| case when [val1] then [res1] ... else [default] end        | 如果val1为true，返回res1，...否则返回default默认值       |\n| case [expr] when [val1] then [res1] ... else [default] end | 如果expr的值等于val1，返回res1，...否则返回default默认值 |\n\n例：根据study数据库的score表，将学生成绩置换成'优秀'>=85,60=<'及格'=<85,'不及格'<60\n\n答：\n\n```mysql\nselect\n    id,\n    name,\n    (case when math >= 85 then '优秀' when math < 60 then '不及格' else '及格' end),\n    (case when english >= 85 then '优秀' when english < 60 then '不及格' else '及格' end),\n    (case when chinese >= 85 then '优秀' when chinese < 60 then '不及格' else '及格' end)\nfrom score;\n```\n\n------\n\n# 约束\n\n## 基本定义\n\n概念：约束是作用于表中字段上的规则，用于限制存储在表中的数据。\n\n目的：保证数据库中数据的正确、有效性和完整性。\n\n分类：\n\n| 约束     | 描述                                                     | 关键字      |\n| -------- | -------------------------------------------------------- | ----------- |\n| 非空约束 | 限制该字段的数据不能为null                               | not null    |\n| 唯一约束 | 保证该字段的所有数据都是唯一、不重复的                   | unique      |\n| 主键约束 | 主键是一行数据的唯一标识，要求非空且唯一                 | primary key |\n| 默认约束 | 保存数据时，如果未指定该字段的值，则采用默认值           | default     |\n| 检查约束 | 保证字段值满足某一个条件                                 | check       |\n| 外键约束 | 用来让两张表的数据之间建立连接，保证数据的一致性和完整性 | foreign key |\n\n注意：约束是作用于表中字段上的，可以在创建表/修改表的时候添加约束。\n\n例：\n\n{% asset_img 1.png  举例完成需求 %}\n\n```mysql\ncreate table user\n(\n id int primary key auto_increment comment '主键',\n name varchar(10) not null unique comment '姓名',\n age int check (age>0 && age<=120) comment '年龄',\n status char(1) default '1' comment '状态',\n gender char(1) comment '性别'\n)comment '用户表';\n```\n\n------\n\n## 外键约束\n\n### 基本定义\n\n概念：外键用来让两张表的数据之间建立连接，从而保证数据的一致性和完整性。\n\n注意：在数据库层面，未建立外键关联的两张表之间通过外键约束，是无法保证数据的一致性和完整性的。\n\n------\n\n### 语法\n\n添加外键：\n\n- **create table 表名(**\n- ​\t\t**字段名\t\t数据类型,**\n- ​\t\t**......\t\t\t ......**\n- ​\t\t**[constraint] [外键名称] foreign key (外键字段名) references 主表(主表列名)**\n- **);**\n\n或：\n\n- **alter table 表名 add constraint 外键名称 foreign key(外键字段名) references 主表(主表字段名);**\n\n删除外键：\n\n- **alter table 表名 drop foreign key 外键名称;**\n\n------\n\n### 删除/更新行为\n\n- **alter table 表名 add constraint 外键名称 foreign key(外键字段名) references 主表(主表字段名) on update cascade on delete cascade;**\n\n| 行为        | 说明                                                         |\n| ----------- | ------------------------------------------------------------ |\n| no action   | 当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新(与restrict一致) |\n| restrict    | 当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新(与no action一致) |\n| cascade     | 当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有，则也删除/更新外键在子表中的记录 |\n| set null    | 当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为null(这就要求该外键允许取null) |\n| set default | 父表有变更时，子表将外键列设置成一个默认的值(innodb不支持)   |\n\n------\n\n# 多表查询\n\n## 多表关系\n\n项目开发中，在进行数据库表结构设计时，会根据业务需求及业务模块之间的关系，分析并设计表结构，由于业务之间相互关联，所以各个表结构之间也存在着各种联系，基本上分为三种：一对多、多对多、一对一。\n\n### 多对多关系\n\n实现：建立第三张中间表，中间至少包含两个外键，分别关联两方主键\n\n常见多对多关系如：学生与课程\n\n{% asset_img student_course.png 学生与课程多对多关系表%}\n\n### 一对一关系\n\n关系：一对一关系，多用于单标拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中。\n\n实现：在任意一方加入外键，关联另外一方的主键，并且**设置外键为唯一的(UNIQUE)**\n\n## 多表查询分类\n\n定义：指从多张表中查询数据\n\n**连接查询：**\n\n内连接：相当于查询A、B交集部分数据\n\n外连接：\t\n\n- 左外连接：查询左表所有数据，以及两张表交集部分数据\n- 右外连接：查询右表所有数据，以及两张表交集部分数据\n\n自连接：当前表与自身的连接查询，自连接必须使用表别名\n\n子查询\n\n## 多表查询语句\n\n### 内连接\n\n隐式内连接：**select 字段列表 from 表1, 表2 where 条件...;**\n\n显式内连接：**select 字段列表 from 表1 [inner] join 表2 on 连接条件...;**\n\n\n\n### 外连接\n\n查询表1的所有数据 包含表1和表2交集部分的数据)：\n\n**select 字段列表 from 表1 left [outer] join 表2 on 条件...;**\n\n右外连接(相当于查询表2的所有数据 包含表1和表2交集部分的数据)：\n\n**select 字段列表 from 表1 right [outer] join 表2 on 条件...;**\n\n\n\n### 自连接\n\n**select 字段列表 from 表A 别名A join 表A 别名B on 条件...;**\n\n\n\n### 子查询\n\nSQL语句中嵌套select语句，称为嵌套查询，又称子查询\n\n**select * from t1 where column1= (select column1 from t2);**\n\n子查询外部的语句可以是insert/update/delete/select的任何一个\n\n根据子查询结果不同，分为：\n\n- 标量子查询(子查询结果为单个值，常用的操作符：==、<>、>、>=、<、<=)\n- 列子查询(子查询结果为一列，常用的操作符：in、not in、any、some、all)\n- 行子查询(子查询结果为一行，常用的操作符：=、<>、in、not in)\n- 表子查询(子查询结果为多行多列，常用的操作符：in)\n\n根据子查询位置，分为：where之后、from之后、select之后\n\n------\n\n# 联合查询-union\n\n对于union查询，就是把多次查询的结果合并起来，形成一个新的查询结果集。\n\n对于联合查询的多张表的列数必须保持一致，字段类型也需要保持一致\n\nunion all会将全部的数据直接合并在一起输出，union会对合并之后的数据去重再输出\n\n**select 字段列表 from 表A ...**\n\n**union [all]**\n\n**select 字段列表 from 表B ...;**\n\n------\n\n# 事务\n\n事务是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。\n\n## 事务操作\n\n查看/设置事务提交方式：\n\n**select @@autocommit;**\n\n**set @@autocommit = 0;**  ## 切换为手动提交\n\n提交事务：**commit;**\n\n回滚事务：**rollback;**\n\n## 事务四大特性ACID\n\n- 原子性：事务是不可分割的最小操作单元，要么全部成功，要么全部失败。\n- 一致性：事务完成时，必须使所有的数据都保持一致状态。\n- 隔离性：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。\n- 持久性：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。\n\n## 并发事务问题\n\n| 问题       | 描述                                                         |\n| ---------- | ------------------------------------------------------------ |\n| 脏读       | 一个事务读到另外一个事务还没有提交的数据                     |\n| 不可重复读 | 一个事务先后读取同一条记录，但两次读取的数据不同             |\n| 幻读       | 一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据时又发现这行数据 |\n\n## 事务隔离级别\n\n|     隔离级别     | 脏读 | 不可重复读 | 幻读 |\n| :--------------: | :--: | :--------: | :--: |\n| read uncommitted |  √   |     √      |  ×   |\n|  read committed  |  ×   |     √      |  √   |\n| repeatable read  |  ×   |     ×      |  √   |\n|   serializable   |  ×   |     ×      |  ×   |\n\n","source":"_posts/MySQL学习.md","raw":"---\ntitle: MySQL学习\ntags: 2\nabbrlink: c6fb831a\ndate: 2022-06-15 16:07:19\n---\n\n**基本的SQL语言学习（MySQL）**\n\n<!--more-->\n\n# SQL的基本定义及概念\n\n**数据库（DataBase）**：存储数据的仓库，数据有组织的进行存储。\n\n**数据库管理系统（DBMS）**：操纵和管理数据库的大型软件。\n\n**SQL**：操作关系型数据库的编程语言。\n\n**关系型数据库（RDBMS）**：建立在关系模型基础上，由多张相互连接的二维表组成的数据库\n\n基础使用方法：通过cmd输入mysql -r root -p进入mysql页面进行操作 或 运行MySQL command line Client - Unicode\n\n**SQL分类**：\n\n| **DDL** | **数据定义语言** | **定义数据库对象（数据库、表、字段）**   |\n| ------- | ---------------- | ---------------------------------------- |\n| **DML** | **数据操作语言** | **对数据库表中数据增删改**               |\n| **DQL** | **数据查询语言** | **查询数据库表中的记录**                 |\n| **DCL** | **数据控制语言** | **创建数据库用户，控制数据库的访问权限** |\n\n------\n\n# DDL语句\n\n语句后面注意 “ ; ”\t，\t[...]部分表示选写内容\t，\tcomment '...' 为注释内容\n\n## 数据库操作\n\n- 查询所有数据库：**show database;**\n- 查询当前数据库：**select database();**\n- 创建数据库：**create database [if not exists] 数据库名;**\n- 删除数据库：**drop database [if not exists] 数据库名;**\n- 使用数据库：**use 数据库名;**\n\n## 表操作\n\n- 修改表名：**alter table 表名 rename to 新表名;**\n- 删除表：**drop table [if exists] 表名**\n- 删除指定表，并重新创建该表（初始化该表）：**truncate table 表名;**\n\n### 查询\n\n- 查询当前数据库所有表：**show tables;**\n- 查询表结构：**desc 表名;**\n- 查询指定表的建表语句：**show create table 表名;**\n\n### 修改\n\n- 添加字段：**alter table 表名 add 字段名 数据类型;**\n- 修改数据类型：**alter table 表名 modify 字段名 新的数据类型;**\n- 修改字段名和字段类型：**alter table 表名 change 旧字段名 新字段名 数据类型;** \n\n### 删除\n\n- 删除字段：**alter table 表名 drop 字段名;**\n\n------\n\n# DML语句\n\n## 添加数据\n\n- 给指定字段添加数据：**insert into 表名(字段名1,字段名2,...) values (值1,值2,...);**\n- 给全部字段添加数据：**insert into 表名 values (值1,值2,...);**\n- 批量添加数据：**insert into 表名(字段名1,字段名2,...) values (值1,值2,...);**  /*一行*/\n- ​\t\t\t\t\t\t **insert into 表名 values (值1,值2,...),(值1,值2,...),(值1,值2,...);**  /*多行*/\n\n插入数据时，指定的字段顺序需要与值的顺序是一一对应的。\n\n字符串和日期型数据应该包含在引号中。\n\n插入的数据大小，应该在字段的规定范围内（满足对应的数据类型和数据范围）。\n\n## 修改数据\n\n- **update 表名 set 字段名1=值1,字段名2=值2,... [where 条件];**\n\n修改语句的条件可有可无，若没有where条件，则会修改整张表的所有数据。\n\n## 删除数据\n\n- **delete from 表名 [where 条件];**\n\n删除语句的条件可有可无，若没有where条件，则会删除整张表的所有数据。\n\ndelete语句不能删除某个字段的值（可以用update）。\n\n------\n\n# DQL语句\n\n## 基本查询\n\n- 查询多个字段：**select 字段1,字段2,... from 表名;**\n- 查询全部字段：**select * from 表名;**\n- 设置别名：**select 字段1[as 别名1],字段2[as 别名2],... from 表名;**\n- 去除重复记录：**select distinct 字段列表 from 表名;**\n\n## 条件查询\n\n- **select 字段列表 from 表名 where 条件列表;**\n\n例：查询姓名为两个字的员工信息select * from employee where name like '__';\n\n​\t\t查询身份证号最后一位是X的员工信息select * from employee where idcard like '%X';\n\n​\t\t或 select * from employee where idcard like '_________________X' (17个'_')\n\n| 比较运算符       | 功能                                       |\n| ---------------- | :----------------------------------------- |\n| >                | 大于                                       |\n| >=               | 大于等于                                   |\n| <                | 小于                                       |\n| <=               | 小于等于                                   |\n| =                | 等于                                       |\n| <> 或 !=         | 不等于                                     |\n| between...and... | 介于范围之内（between 小 and 大）          |\n| in(...)          | 在in之内的列表中的值，满足一个即可         |\n| like 占位符      | 模糊匹配（_匹配单个字符，%匹配任意个字符） |\n| is null          | 判断是否为空                               |\n\n\n\n| 逻辑运算符 | 功能                         |\n| ---------- | ---------------------------- |\n| and 或 &&  | 并且（多个条件同时成立）     |\n| or 或 \\|\\| | 或者（多个条件任意一个成立） |\n| not 或 ！  | 非，不是                     |\n\n## 聚合函数\n\n- **select 聚合函数(字段列表) from 表名;**\n\n定义：将一列数据作为一个整体，进行纵向计算\n\nnull值不参与所有聚合函数的运算\n\n| 函数  | 功能     |\n| ----- | -------- |\n| count | 统计数量 |\n| max   | 最大值   |\n| min   | 最小值   |\n| avg   | 平均值   |\n| sum   | 求和     |\n\n## 分组查询\n\n- **select 字段列表 from 表名 [where 条件] group by 分组字段名 [having 分组后过滤条件];**\n\n## 排序查询\n\n- **select 字段列表 from 表名 order by 字段1,排序方式1,字段2,排序方式2,...;**\n\n排序方式有：ASC升序(默认)、DESC降序\n\n## 分页查询\n\n- **select 字段列表 from 表名 limit 起始索引,查询记录数;**\n\n起始索引从0开始，起始索引=(查询页码 - 1) * 每页显示记录数\n\n如果查询的是第一页数据，起始索引可以省略\n\n## DQL语句执行顺序\n\n1. from 表名列表\n2. where 条件列表\n3. group by 分组字段列表\n4. having 分组后条件列表\n5. select 字段列表\n6. order by 排序字段列表\n7. limit 分页参数\n\n------\n\n# DCL语句\n\n数据控制语言，用来管理数据库用户、控制数据库的访问权限。\n\n| 权限（常用）        | 说明               |\n| ------------------- | ------------------ |\n| all(all privileges) | 所有权限           |\n| select              | 查询数据           |\n| insert              | 插入数据           |\n| update              | 修改数据           |\n| delete              | 删除数据           |\n| alter               | 修改表             |\n| drop                | 删除数据库/表/视图 |\n| create              | 创建数据库/表      |\n\n\n\n## 管理用户\n\n- 查询用户：use mysql;  =>  **select * from user;**\n- 创建用户：**create user 'user name'@'host name' identified by 'password';**\n- 修改用户密码：**alter user 'user name'@'host name' identified with mysql_native_password by 'new password';**\n- 删除用户：**drop user 'user name'@'host name';**\n\n## 权限控制\n\n- 查询权限：**show grants for 'user name'@'host name';**\n- 授予权限：**grant 权限列表 on 数据库名.表名 to 'user name'@'host name';**\n- 撤销权限：**revoke 权限列表 on 数据库名.表名 from 'user name'@'host name';**\n\n------\n\n# 函数\n\n## 字符串函数\n\n| 函数（常用）                | 功能                                                      |\n| --------------------------- | --------------------------------------------------------- |\n| concat(S1, S2, S3, ... ,Sn) | 字符串拼接，将S1...Sn拼接成一个字符串                     |\n| lower(str)                  | 将字符串str全部转为小写                                   |\n| upper(str)                  | 将字符串str全部转为大写                                   |\n| lpad(str, n, pad)           | 左填充，用字符串pad对str的左边进行填充，达到n个字符串长度 |\n| rpad(str, n, pad)           | 右填充，用字符串pad对str的右边进行填充，达到n个字符串长度 |\n| trim(str)                   | 去掉字符串头部和尾部的空格                                |\n| substring(str, start, len)  | 返回从字符串str从start位置起的len个长度的字符串           |\n\n例：study数据库的employee表中将员工编号workno更改，将编号前补齐'0'以达到五位数编号\n\n答：update employee set wordno = lpad(workno, 5, '0');\n\n------\n\n## 数值函数\n\n| 函数（常用） | 功能                               |\n| ------------ | ---------------------------------- |\n| ceil(x)      | 向上取整                           |\n| floor(x)     | 向下取整                           |\n| mod(x, y)    | 返回x/y的模（整除后的余数）        |\n| rand()       | 返回0~1内的随机数                  |\n| round(x, y)  | 求参数x的四舍五入的值，保留y位小数 |\n\n例：使用数据库的函数，实现随机生成6位验证码\n\n答：lpad(round(select rand() * 1000000, 0), 6, '0');\n\n此方法运用了round()函数，替换成向上或向下取整函数依然可以完成，lpad或rpad同理。\n\n------\n\n## 日期函数\n\n| 函数                               | 功能                                                         |\n| ---------------------------------- | ------------------------------------------------------------ |\n| curdate()                          | 返回当前日期                                                 |\n| curtime()                          | 返回当前时间                                                 |\n| now()                              | 返回当前日期和时间                                           |\n| year(date)                         | 获取指定date的年份                                           |\n| month(date)                        | 获取指定date的月份                                           |\n| day(date)                          | 获取指定date的日期                                           |\n| date_add(date, interval expr type) | 计算date加expr type后对应的时间,expr表示数值，type表示类型如年月日 |\n| datediff(date1, date2)             | 计算date1 和 date2之间相隔的天数                             |\n\n函数举例：date_add(now(), interval 90 day) ==>> 2022-07-08 18:54:37\n\n函数举例：datediff('2022-4-9', '2022-7-1') ==>> -83\n\n例：根据study数据库的employee表，计算所有员工入职时间，用天数表示，并按天数降序排序\n\n答：select name, datediff(curdate(), entrydate) from employee order by datediff(curdate(), entrydate) desc;\n\n------\n\n## 流程控制函数\n\n| 函数                                                       | 功能                                                     |\n| ---------------------------------------------------------- | -------------------------------------------------------- |\n| if(value, t, f)                                            | 如果value为true，则返回t，否则返回f                      |\n| ifnull(value1, value2)                                     | 如果value1不为空，返回value1，否则返回value2             |\n| case when [val1] then [res1] ... else [default] end        | 如果val1为true，返回res1，...否则返回default默认值       |\n| case [expr] when [val1] then [res1] ... else [default] end | 如果expr的值等于val1，返回res1，...否则返回default默认值 |\n\n例：根据study数据库的score表，将学生成绩置换成'优秀'>=85,60=<'及格'=<85,'不及格'<60\n\n答：\n\n```mysql\nselect\n    id,\n    name,\n    (case when math >= 85 then '优秀' when math < 60 then '不及格' else '及格' end),\n    (case when english >= 85 then '优秀' when english < 60 then '不及格' else '及格' end),\n    (case when chinese >= 85 then '优秀' when chinese < 60 then '不及格' else '及格' end)\nfrom score;\n```\n\n------\n\n# 约束\n\n## 基本定义\n\n概念：约束是作用于表中字段上的规则，用于限制存储在表中的数据。\n\n目的：保证数据库中数据的正确、有效性和完整性。\n\n分类：\n\n| 约束     | 描述                                                     | 关键字      |\n| -------- | -------------------------------------------------------- | ----------- |\n| 非空约束 | 限制该字段的数据不能为null                               | not null    |\n| 唯一约束 | 保证该字段的所有数据都是唯一、不重复的                   | unique      |\n| 主键约束 | 主键是一行数据的唯一标识，要求非空且唯一                 | primary key |\n| 默认约束 | 保存数据时，如果未指定该字段的值，则采用默认值           | default     |\n| 检查约束 | 保证字段值满足某一个条件                                 | check       |\n| 外键约束 | 用来让两张表的数据之间建立连接，保证数据的一致性和完整性 | foreign key |\n\n注意：约束是作用于表中字段上的，可以在创建表/修改表的时候添加约束。\n\n例：\n\n{% asset_img 1.png  举例完成需求 %}\n\n```mysql\ncreate table user\n(\n id int primary key auto_increment comment '主键',\n name varchar(10) not null unique comment '姓名',\n age int check (age>0 && age<=120) comment '年龄',\n status char(1) default '1' comment '状态',\n gender char(1) comment '性别'\n)comment '用户表';\n```\n\n------\n\n## 外键约束\n\n### 基本定义\n\n概念：外键用来让两张表的数据之间建立连接，从而保证数据的一致性和完整性。\n\n注意：在数据库层面，未建立外键关联的两张表之间通过外键约束，是无法保证数据的一致性和完整性的。\n\n------\n\n### 语法\n\n添加外键：\n\n- **create table 表名(**\n- ​\t\t**字段名\t\t数据类型,**\n- ​\t\t**......\t\t\t ......**\n- ​\t\t**[constraint] [外键名称] foreign key (外键字段名) references 主表(主表列名)**\n- **);**\n\n或：\n\n- **alter table 表名 add constraint 外键名称 foreign key(外键字段名) references 主表(主表字段名);**\n\n删除外键：\n\n- **alter table 表名 drop foreign key 外键名称;**\n\n------\n\n### 删除/更新行为\n\n- **alter table 表名 add constraint 外键名称 foreign key(外键字段名) references 主表(主表字段名) on update cascade on delete cascade;**\n\n| 行为        | 说明                                                         |\n| ----------- | ------------------------------------------------------------ |\n| no action   | 当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新(与restrict一致) |\n| restrict    | 当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新(与no action一致) |\n| cascade     | 当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有，则也删除/更新外键在子表中的记录 |\n| set null    | 当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为null(这就要求该外键允许取null) |\n| set default | 父表有变更时，子表将外键列设置成一个默认的值(innodb不支持)   |\n\n------\n\n# 多表查询\n\n## 多表关系\n\n项目开发中，在进行数据库表结构设计时，会根据业务需求及业务模块之间的关系，分析并设计表结构，由于业务之间相互关联，所以各个表结构之间也存在着各种联系，基本上分为三种：一对多、多对多、一对一。\n\n### 多对多关系\n\n实现：建立第三张中间表，中间至少包含两个外键，分别关联两方主键\n\n常见多对多关系如：学生与课程\n\n{% asset_img student_course.png 学生与课程多对多关系表%}\n\n### 一对一关系\n\n关系：一对一关系，多用于单标拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中。\n\n实现：在任意一方加入外键，关联另外一方的主键，并且**设置外键为唯一的(UNIQUE)**\n\n## 多表查询分类\n\n定义：指从多张表中查询数据\n\n**连接查询：**\n\n内连接：相当于查询A、B交集部分数据\n\n外连接：\t\n\n- 左外连接：查询左表所有数据，以及两张表交集部分数据\n- 右外连接：查询右表所有数据，以及两张表交集部分数据\n\n自连接：当前表与自身的连接查询，自连接必须使用表别名\n\n子查询\n\n## 多表查询语句\n\n### 内连接\n\n隐式内连接：**select 字段列表 from 表1, 表2 where 条件...;**\n\n显式内连接：**select 字段列表 from 表1 [inner] join 表2 on 连接条件...;**\n\n\n\n### 外连接\n\n查询表1的所有数据 包含表1和表2交集部分的数据)：\n\n**select 字段列表 from 表1 left [outer] join 表2 on 条件...;**\n\n右外连接(相当于查询表2的所有数据 包含表1和表2交集部分的数据)：\n\n**select 字段列表 from 表1 right [outer] join 表2 on 条件...;**\n\n\n\n### 自连接\n\n**select 字段列表 from 表A 别名A join 表A 别名B on 条件...;**\n\n\n\n### 子查询\n\nSQL语句中嵌套select语句，称为嵌套查询，又称子查询\n\n**select * from t1 where column1= (select column1 from t2);**\n\n子查询外部的语句可以是insert/update/delete/select的任何一个\n\n根据子查询结果不同，分为：\n\n- 标量子查询(子查询结果为单个值，常用的操作符：==、<>、>、>=、<、<=)\n- 列子查询(子查询结果为一列，常用的操作符：in、not in、any、some、all)\n- 行子查询(子查询结果为一行，常用的操作符：=、<>、in、not in)\n- 表子查询(子查询结果为多行多列，常用的操作符：in)\n\n根据子查询位置，分为：where之后、from之后、select之后\n\n------\n\n# 联合查询-union\n\n对于union查询，就是把多次查询的结果合并起来，形成一个新的查询结果集。\n\n对于联合查询的多张表的列数必须保持一致，字段类型也需要保持一致\n\nunion all会将全部的数据直接合并在一起输出，union会对合并之后的数据去重再输出\n\n**select 字段列表 from 表A ...**\n\n**union [all]**\n\n**select 字段列表 from 表B ...;**\n\n------\n\n# 事务\n\n事务是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。\n\n## 事务操作\n\n查看/设置事务提交方式：\n\n**select @@autocommit;**\n\n**set @@autocommit = 0;**  ## 切换为手动提交\n\n提交事务：**commit;**\n\n回滚事务：**rollback;**\n\n## 事务四大特性ACID\n\n- 原子性：事务是不可分割的最小操作单元，要么全部成功，要么全部失败。\n- 一致性：事务完成时，必须使所有的数据都保持一致状态。\n- 隔离性：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。\n- 持久性：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。\n\n## 并发事务问题\n\n| 问题       | 描述                                                         |\n| ---------- | ------------------------------------------------------------ |\n| 脏读       | 一个事务读到另外一个事务还没有提交的数据                     |\n| 不可重复读 | 一个事务先后读取同一条记录，但两次读取的数据不同             |\n| 幻读       | 一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据时又发现这行数据 |\n\n## 事务隔离级别\n\n|     隔离级别     | 脏读 | 不可重复读 | 幻读 |\n| :--------------: | :--: | :--------: | :--: |\n| read uncommitted |  √   |     √      |  ×   |\n|  read committed  |  ×   |     √      |  √   |\n| repeatable read  |  ×   |     ×      |  √   |\n|   serializable   |  ×   |     ×      |  ×   |\n\n","slug":"MySQL学习","published":1,"updated":"2024-09-26T11:25:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm1rz0oeu000518qlex2gcs8t","content":"<p><strong>基本的SQL语言学习（MySQL）</strong></p>\n<span id=\"more\"></span>\n\n<h1 id=\"SQL的基本定义及概念\"><a href=\"#SQL的基本定义及概念\" class=\"headerlink\" title=\"SQL的基本定义及概念\"></a>SQL的基本定义及概念</h1><p><strong>数据库（DataBase）</strong>：存储数据的仓库，数据有组织的进行存储。</p>\n<p><strong>数据库管理系统（DBMS）</strong>：操纵和管理数据库的大型软件。</p>\n<p><strong>SQL</strong>：操作关系型数据库的编程语言。</p>\n<p><strong>关系型数据库（RDBMS）</strong>：建立在关系模型基础上，由多张相互连接的二维表组成的数据库</p>\n<p>基础使用方法：通过cmd输入mysql -r root -p进入mysql页面进行操作 或 运行MySQL command line Client - Unicode</p>\n<p><strong>SQL分类</strong>：</p>\n<table>\n<thead>\n<tr>\n<th><strong>DDL</strong></th>\n<th><strong>数据定义语言</strong></th>\n<th><strong>定义数据库对象（数据库、表、字段）</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>DML</strong></td>\n<td><strong>数据操作语言</strong></td>\n<td><strong>对数据库表中数据增删改</strong></td>\n</tr>\n<tr>\n<td><strong>DQL</strong></td>\n<td><strong>数据查询语言</strong></td>\n<td><strong>查询数据库表中的记录</strong></td>\n</tr>\n<tr>\n<td><strong>DCL</strong></td>\n<td><strong>数据控制语言</strong></td>\n<td><strong>创建数据库用户，控制数据库的访问权限</strong></td>\n</tr>\n</tbody></table>\n<hr>\n<h1 id=\"DDL语句\"><a href=\"#DDL语句\" class=\"headerlink\" title=\"DDL语句\"></a>DDL语句</h1><p>语句后面注意 “ ; ”\t，\t[…]部分表示选写内容\t，\tcomment ‘…’ 为注释内容</p>\n<h2 id=\"数据库操作\"><a href=\"#数据库操作\" class=\"headerlink\" title=\"数据库操作\"></a>数据库操作</h2><ul>\n<li>查询所有数据库：<strong>show database;</strong></li>\n<li>查询当前数据库：<strong>select database();</strong></li>\n<li>创建数据库：<strong>create database [if not exists] 数据库名;</strong></li>\n<li>删除数据库：<strong>drop database [if not exists] 数据库名;</strong></li>\n<li>使用数据库：<strong>use 数据库名;</strong></li>\n</ul>\n<h2 id=\"表操作\"><a href=\"#表操作\" class=\"headerlink\" title=\"表操作\"></a>表操作</h2><ul>\n<li>修改表名：<strong>alter table 表名 rename to 新表名;</strong></li>\n<li>删除表：<strong>drop table [if exists] 表名</strong></li>\n<li>删除指定表，并重新创建该表（初始化该表）：<strong>truncate table 表名;</strong></li>\n</ul>\n<h3 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h3><ul>\n<li>查询当前数据库所有表：<strong>show tables;</strong></li>\n<li>查询表结构：<strong>desc 表名;</strong></li>\n<li>查询指定表的建表语句：<strong>show create table 表名;</strong></li>\n</ul>\n<h3 id=\"修改\"><a href=\"#修改\" class=\"headerlink\" title=\"修改\"></a>修改</h3><ul>\n<li>添加字段：<strong>alter table 表名 add 字段名 数据类型;</strong></li>\n<li>修改数据类型：<strong>alter table 表名 modify 字段名 新的数据类型;</strong></li>\n<li>修改字段名和字段类型：<strong>alter table 表名 change 旧字段名 新字段名 数据类型;</strong></li>\n</ul>\n<h3 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h3><ul>\n<li>删除字段：<strong>alter table 表名 drop 字段名;</strong></li>\n</ul>\n<hr>\n<h1 id=\"DML语句\"><a href=\"#DML语句\" class=\"headerlink\" title=\"DML语句\"></a>DML语句</h1><h2 id=\"添加数据\"><a href=\"#添加数据\" class=\"headerlink\" title=\"添加数据\"></a>添加数据</h2><ul>\n<li>给指定字段添加数据：<strong>insert into 表名(字段名1,字段名2,…) values (值1,值2,…);</strong></li>\n<li>给全部字段添加数据：<strong>insert into 表名 values (值1,值2,…);</strong></li>\n<li>批量添加数据：<strong>insert into 表名(字段名1,字段名2,…) values (值1,值2,…);</strong>  &#x2F;<em>一行</em>&#x2F;</li>\n<li>​\t\t\t\t\t\t <strong>insert into 表名 values (值1,值2,…),(值1,值2,…),(值1,值2,…);</strong>  &#x2F;<em>多行</em>&#x2F;</li>\n</ul>\n<p>插入数据时，指定的字段顺序需要与值的顺序是一一对应的。</p>\n<p>字符串和日期型数据应该包含在引号中。</p>\n<p>插入的数据大小，应该在字段的规定范围内（满足对应的数据类型和数据范围）。</p>\n<h2 id=\"修改数据\"><a href=\"#修改数据\" class=\"headerlink\" title=\"修改数据\"></a>修改数据</h2><ul>\n<li><strong>update 表名 set 字段名1&#x3D;值1,字段名2&#x3D;值2,… [where 条件];</strong></li>\n</ul>\n<p>修改语句的条件可有可无，若没有where条件，则会修改整张表的所有数据。</p>\n<h2 id=\"删除数据\"><a href=\"#删除数据\" class=\"headerlink\" title=\"删除数据\"></a>删除数据</h2><ul>\n<li><strong>delete from 表名 [where 条件];</strong></li>\n</ul>\n<p>删除语句的条件可有可无，若没有where条件，则会删除整张表的所有数据。</p>\n<p>delete语句不能删除某个字段的值（可以用update）。</p>\n<hr>\n<h1 id=\"DQL语句\"><a href=\"#DQL语句\" class=\"headerlink\" title=\"DQL语句\"></a>DQL语句</h1><h2 id=\"基本查询\"><a href=\"#基本查询\" class=\"headerlink\" title=\"基本查询\"></a>基本查询</h2><ul>\n<li>查询多个字段：<strong>select 字段1,字段2,… from 表名;</strong></li>\n<li>查询全部字段：<strong>select * from 表名;</strong></li>\n<li>设置别名：<strong>select 字段1[as 别名1],字段2[as 别名2],… from 表名;</strong></li>\n<li>去除重复记录：<strong>select distinct 字段列表 from 表名;</strong></li>\n</ul>\n<h2 id=\"条件查询\"><a href=\"#条件查询\" class=\"headerlink\" title=\"条件查询\"></a>条件查询</h2><ul>\n<li><strong>select 字段列表 from 表名 where 条件列表;</strong></li>\n</ul>\n<p>例：查询姓名为两个字的员工信息select * from employee where name like ‘__’;</p>\n<p>​\t\t查询身份证号最后一位是X的员工信息select * from employee where idcard like ‘%X’;</p>\n<p>​\t\t或 select * from employee where idcard like ‘________________<em>X’ (17个’</em>‘)</p>\n<table>\n<thead>\n<tr>\n<th>比较运算符</th>\n<th align=\"left\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&gt;</td>\n<td align=\"left\">大于</td>\n</tr>\n<tr>\n<td>&gt;&#x3D;</td>\n<td align=\"left\">大于等于</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td align=\"left\">小于</td>\n</tr>\n<tr>\n<td>&lt;&#x3D;</td>\n<td align=\"left\">小于等于</td>\n</tr>\n<tr>\n<td>&#x3D;</td>\n<td align=\"left\">等于</td>\n</tr>\n<tr>\n<td>&lt;&gt; 或 !&#x3D;</td>\n<td align=\"left\">不等于</td>\n</tr>\n<tr>\n<td>between…and…</td>\n<td align=\"left\">介于范围之内（between 小 and 大）</td>\n</tr>\n<tr>\n<td>in(…)</td>\n<td align=\"left\">在in之内的列表中的值，满足一个即可</td>\n</tr>\n<tr>\n<td>like 占位符</td>\n<td align=\"left\">模糊匹配（_匹配单个字符，%匹配任意个字符）</td>\n</tr>\n<tr>\n<td>is null</td>\n<td align=\"left\">判断是否为空</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>逻辑运算符</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>and 或 &amp;&amp;</td>\n<td>并且（多个条件同时成立）</td>\n</tr>\n<tr>\n<td>or 或 ||</td>\n<td>或者（多个条件任意一个成立）</td>\n</tr>\n<tr>\n<td>not 或 ！</td>\n<td>非，不是</td>\n</tr>\n</tbody></table>\n<h2 id=\"聚合函数\"><a href=\"#聚合函数\" class=\"headerlink\" title=\"聚合函数\"></a>聚合函数</h2><ul>\n<li><strong>select 聚合函数(字段列表) from 表名;</strong></li>\n</ul>\n<p>定义：将一列数据作为一个整体，进行纵向计算</p>\n<p>null值不参与所有聚合函数的运算</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>count</td>\n<td>统计数量</td>\n</tr>\n<tr>\n<td>max</td>\n<td>最大值</td>\n</tr>\n<tr>\n<td>min</td>\n<td>最小值</td>\n</tr>\n<tr>\n<td>avg</td>\n<td>平均值</td>\n</tr>\n<tr>\n<td>sum</td>\n<td>求和</td>\n</tr>\n</tbody></table>\n<h2 id=\"分组查询\"><a href=\"#分组查询\" class=\"headerlink\" title=\"分组查询\"></a>分组查询</h2><ul>\n<li><strong>select 字段列表 from 表名 [where 条件] group by 分组字段名 [having 分组后过滤条件];</strong></li>\n</ul>\n<h2 id=\"排序查询\"><a href=\"#排序查询\" class=\"headerlink\" title=\"排序查询\"></a>排序查询</h2><ul>\n<li><strong>select 字段列表 from 表名 order by 字段1,排序方式1,字段2,排序方式2,…;</strong></li>\n</ul>\n<p>排序方式有：ASC升序(默认)、DESC降序</p>\n<h2 id=\"分页查询\"><a href=\"#分页查询\" class=\"headerlink\" title=\"分页查询\"></a>分页查询</h2><ul>\n<li><strong>select 字段列表 from 表名 limit 起始索引,查询记录数;</strong></li>\n</ul>\n<p>起始索引从0开始，起始索引&#x3D;(查询页码 - 1) * 每页显示记录数</p>\n<p>如果查询的是第一页数据，起始索引可以省略</p>\n<h2 id=\"DQL语句执行顺序\"><a href=\"#DQL语句执行顺序\" class=\"headerlink\" title=\"DQL语句执行顺序\"></a>DQL语句执行顺序</h2><ol>\n<li>from 表名列表</li>\n<li>where 条件列表</li>\n<li>group by 分组字段列表</li>\n<li>having 分组后条件列表</li>\n<li>select 字段列表</li>\n<li>order by 排序字段列表</li>\n<li>limit 分页参数</li>\n</ol>\n<hr>\n<h1 id=\"DCL语句\"><a href=\"#DCL语句\" class=\"headerlink\" title=\"DCL语句\"></a>DCL语句</h1><p>数据控制语言，用来管理数据库用户、控制数据库的访问权限。</p>\n<table>\n<thead>\n<tr>\n<th>权限（常用）</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>all(all privileges)</td>\n<td>所有权限</td>\n</tr>\n<tr>\n<td>select</td>\n<td>查询数据</td>\n</tr>\n<tr>\n<td>insert</td>\n<td>插入数据</td>\n</tr>\n<tr>\n<td>update</td>\n<td>修改数据</td>\n</tr>\n<tr>\n<td>delete</td>\n<td>删除数据</td>\n</tr>\n<tr>\n<td>alter</td>\n<td>修改表</td>\n</tr>\n<tr>\n<td>drop</td>\n<td>删除数据库&#x2F;表&#x2F;视图</td>\n</tr>\n<tr>\n<td>create</td>\n<td>创建数据库&#x2F;表</td>\n</tr>\n</tbody></table>\n<h2 id=\"管理用户\"><a href=\"#管理用户\" class=\"headerlink\" title=\"管理用户\"></a>管理用户</h2><ul>\n<li>查询用户：use mysql;  &#x3D;&gt;  <strong>select * from user;</strong></li>\n<li>创建用户：<strong>create user ‘user name‘@’host name’ identified by ‘password’;</strong></li>\n<li>修改用户密码：<strong>alter user ‘user name‘@’host name’ identified with mysql_native_password by ‘new password’;</strong></li>\n<li>删除用户：<strong>drop user ‘user name‘@’host name’;</strong></li>\n</ul>\n<h2 id=\"权限控制\"><a href=\"#权限控制\" class=\"headerlink\" title=\"权限控制\"></a>权限控制</h2><ul>\n<li>查询权限：<strong>show grants for ‘user name‘@’host name’;</strong></li>\n<li>授予权限：<strong>grant 权限列表 on 数据库名.表名 to ‘user name‘@’host name’;</strong></li>\n<li>撤销权限：<strong>revoke 权限列表 on 数据库名.表名 from ‘user name‘@’host name’;</strong></li>\n</ul>\n<hr>\n<h1 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h1><h2 id=\"字符串函数\"><a href=\"#字符串函数\" class=\"headerlink\" title=\"字符串函数\"></a>字符串函数</h2><table>\n<thead>\n<tr>\n<th>函数（常用）</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>concat(S1, S2, S3, … ,Sn)</td>\n<td>字符串拼接，将S1…Sn拼接成一个字符串</td>\n</tr>\n<tr>\n<td>lower(str)</td>\n<td>将字符串str全部转为小写</td>\n</tr>\n<tr>\n<td>upper(str)</td>\n<td>将字符串str全部转为大写</td>\n</tr>\n<tr>\n<td>lpad(str, n, pad)</td>\n<td>左填充，用字符串pad对str的左边进行填充，达到n个字符串长度</td>\n</tr>\n<tr>\n<td>rpad(str, n, pad)</td>\n<td>右填充，用字符串pad对str的右边进行填充，达到n个字符串长度</td>\n</tr>\n<tr>\n<td>trim(str)</td>\n<td>去掉字符串头部和尾部的空格</td>\n</tr>\n<tr>\n<td>substring(str, start, len)</td>\n<td>返回从字符串str从start位置起的len个长度的字符串</td>\n</tr>\n</tbody></table>\n<p>例：study数据库的employee表中将员工编号workno更改，将编号前补齐’0’以达到五位数编号</p>\n<p>答：update employee set wordno &#x3D; lpad(workno, 5, ‘0’);</p>\n<hr>\n<h2 id=\"数值函数\"><a href=\"#数值函数\" class=\"headerlink\" title=\"数值函数\"></a>数值函数</h2><table>\n<thead>\n<tr>\n<th>函数（常用）</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ceil(x)</td>\n<td>向上取整</td>\n</tr>\n<tr>\n<td>floor(x)</td>\n<td>向下取整</td>\n</tr>\n<tr>\n<td>mod(x, y)</td>\n<td>返回x&#x2F;y的模（整除后的余数）</td>\n</tr>\n<tr>\n<td>rand()</td>\n<td>返回0~1内的随机数</td>\n</tr>\n<tr>\n<td>round(x, y)</td>\n<td>求参数x的四舍五入的值，保留y位小数</td>\n</tr>\n</tbody></table>\n<p>例：使用数据库的函数，实现随机生成6位验证码</p>\n<p>答：lpad(round(select rand() * 1000000, 0), 6, ‘0’);</p>\n<p>此方法运用了round()函数，替换成向上或向下取整函数依然可以完成，lpad或rpad同理。</p>\n<hr>\n<h2 id=\"日期函数\"><a href=\"#日期函数\" class=\"headerlink\" title=\"日期函数\"></a>日期函数</h2><table>\n<thead>\n<tr>\n<th>函数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>curdate()</td>\n<td>返回当前日期</td>\n</tr>\n<tr>\n<td>curtime()</td>\n<td>返回当前时间</td>\n</tr>\n<tr>\n<td>now()</td>\n<td>返回当前日期和时间</td>\n</tr>\n<tr>\n<td>year(date)</td>\n<td>获取指定date的年份</td>\n</tr>\n<tr>\n<td>month(date)</td>\n<td>获取指定date的月份</td>\n</tr>\n<tr>\n<td>day(date)</td>\n<td>获取指定date的日期</td>\n</tr>\n<tr>\n<td>date_add(date, interval expr type)</td>\n<td>计算date加expr type后对应的时间,expr表示数值，type表示类型如年月日</td>\n</tr>\n<tr>\n<td>datediff(date1, date2)</td>\n<td>计算date1 和 date2之间相隔的天数</td>\n</tr>\n</tbody></table>\n<p>函数举例：date_add(now(), interval 90 day) &#x3D;&#x3D;&gt;&gt; 2022-07-08 18:54:37</p>\n<p>函数举例：datediff(‘2022-4-9’, ‘2022-7-1’) &#x3D;&#x3D;&gt;&gt; -83</p>\n<p>例：根据study数据库的employee表，计算所有员工入职时间，用天数表示，并按天数降序排序</p>\n<p>答：select name, datediff(curdate(), entrydate) from employee order by datediff(curdate(), entrydate) desc;</p>\n<hr>\n<h2 id=\"流程控制函数\"><a href=\"#流程控制函数\" class=\"headerlink\" title=\"流程控制函数\"></a>流程控制函数</h2><table>\n<thead>\n<tr>\n<th>函数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>if(value, t, f)</td>\n<td>如果value为true，则返回t，否则返回f</td>\n</tr>\n<tr>\n<td>ifnull(value1, value2)</td>\n<td>如果value1不为空，返回value1，否则返回value2</td>\n</tr>\n<tr>\n<td>case when [val1] then [res1] … else [default] end</td>\n<td>如果val1为true，返回res1，…否则返回default默认值</td>\n</tr>\n<tr>\n<td>case [expr] when [val1] then [res1] … else [default] end</td>\n<td>如果expr的值等于val1，返回res1，…否则返回default默认值</td>\n</tr>\n</tbody></table>\n<p>例：根据study数据库的score表，将学生成绩置换成’优秀’&gt;&#x3D;85,60&#x3D;&lt;’及格’&#x3D;&lt;85,’不及格’&lt;60</p>\n<p>答：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select</span><br><span class=\"line\">    id,</span><br><span class=\"line\">    name,</span><br><span class=\"line\">    (case when math &gt;= 85 then &#x27;优秀&#x27; when math &lt; 60 then &#x27;不及格&#x27; else &#x27;及格&#x27; end),</span><br><span class=\"line\">    (case when english &gt;= 85 then &#x27;优秀&#x27; when english &lt; 60 then &#x27;不及格&#x27; else &#x27;及格&#x27; end),</span><br><span class=\"line\">    (case when chinese &gt;= 85 then &#x27;优秀&#x27; when chinese &lt; 60 then &#x27;不及格&#x27; else &#x27;及格&#x27; end)</span><br><span class=\"line\">from score;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"约束\"><a href=\"#约束\" class=\"headerlink\" title=\"约束\"></a>约束</h1><h2 id=\"基本定义\"><a href=\"#基本定义\" class=\"headerlink\" title=\"基本定义\"></a>基本定义</h2><p>概念：约束是作用于表中字段上的规则，用于限制存储在表中的数据。</p>\n<p>目的：保证数据库中数据的正确、有效性和完整性。</p>\n<p>分类：</p>\n<table>\n<thead>\n<tr>\n<th>约束</th>\n<th>描述</th>\n<th>关键字</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>非空约束</td>\n<td>限制该字段的数据不能为null</td>\n<td>not null</td>\n</tr>\n<tr>\n<td>唯一约束</td>\n<td>保证该字段的所有数据都是唯一、不重复的</td>\n<td>unique</td>\n</tr>\n<tr>\n<td>主键约束</td>\n<td>主键是一行数据的唯一标识，要求非空且唯一</td>\n<td>primary key</td>\n</tr>\n<tr>\n<td>默认约束</td>\n<td>保存数据时，如果未指定该字段的值，则采用默认值</td>\n<td>default</td>\n</tr>\n<tr>\n<td>检查约束</td>\n<td>保证字段值满足某一个条件</td>\n<td>check</td>\n</tr>\n<tr>\n<td>外键约束</td>\n<td>用来让两张表的数据之间建立连接，保证数据的一致性和完整性</td>\n<td>foreign key</td>\n</tr>\n</tbody></table>\n<p>注意：约束是作用于表中字段上的，可以在创建表&#x2F;修改表的时候添加约束。</p>\n<p>例：</p>\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table user</span><br><span class=\"line\">(</span><br><span class=\"line\"> id int primary key auto_increment comment &#x27;主键&#x27;,</span><br><span class=\"line\"> name varchar(10) not null unique comment &#x27;姓名&#x27;,</span><br><span class=\"line\"> age int check (age&gt;0 &amp;&amp; age&lt;=120) comment &#x27;年龄&#x27;,</span><br><span class=\"line\"> status char(1) default &#x27;1&#x27; comment &#x27;状态&#x27;,</span><br><span class=\"line\"> gender char(1) comment &#x27;性别&#x27;</span><br><span class=\"line\">)comment &#x27;用户表&#x27;;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"外键约束\"><a href=\"#外键约束\" class=\"headerlink\" title=\"外键约束\"></a>外键约束</h2><h3 id=\"基本定义-1\"><a href=\"#基本定义-1\" class=\"headerlink\" title=\"基本定义\"></a>基本定义</h3><p>概念：外键用来让两张表的数据之间建立连接，从而保证数据的一致性和完整性。</p>\n<p>注意：在数据库层面，未建立外键关联的两张表之间通过外键约束，是无法保证数据的一致性和完整性的。</p>\n<hr>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p>添加外键：</p>\n<ul>\n<li><strong>create table 表名(</strong></li>\n<li>​\t\t<strong>字段名\t\t数据类型,</strong></li>\n<li>​\t\t<strong>……\t\t\t ……</strong></li>\n<li>​\t\t<strong>[constraint] [外键名称] foreign key (外键字段名) references 主表(主表列名)</strong></li>\n<li><strong>);</strong></li>\n</ul>\n<p>或：</p>\n<ul>\n<li><strong>alter table 表名 add constraint 外键名称 foreign key(外键字段名) references 主表(主表字段名);</strong></li>\n</ul>\n<p>删除外键：</p>\n<ul>\n<li><strong>alter table 表名 drop foreign key 外键名称;</strong></li>\n</ul>\n<hr>\n<h3 id=\"删除-x2F-更新行为\"><a href=\"#删除-x2F-更新行为\" class=\"headerlink\" title=\"删除&#x2F;更新行为\"></a>删除&#x2F;更新行为</h3><ul>\n<li><strong>alter table 表名 add constraint 外键名称 foreign key(外键字段名) references 主表(主表字段名) on update cascade on delete cascade;</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>行为</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>no action</td>\n<td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除&#x2F;更新(与restrict一致)</td>\n</tr>\n<tr>\n<td>restrict</td>\n<td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除&#x2F;更新(与no action一致)</td>\n</tr>\n<tr>\n<td>cascade</td>\n<td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有，则也删除&#x2F;更新外键在子表中的记录</td>\n</tr>\n<tr>\n<td>set null</td>\n<td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为null(这就要求该外键允许取null)</td>\n</tr>\n<tr>\n<td>set default</td>\n<td>父表有变更时，子表将外键列设置成一个默认的值(innodb不支持)</td>\n</tr>\n</tbody></table>\n<hr>\n<h1 id=\"多表查询\"><a href=\"#多表查询\" class=\"headerlink\" title=\"多表查询\"></a>多表查询</h1><h2 id=\"多表关系\"><a href=\"#多表关系\" class=\"headerlink\" title=\"多表关系\"></a>多表关系</h2><p>项目开发中，在进行数据库表结构设计时，会根据业务需求及业务模块之间的关系，分析并设计表结构，由于业务之间相互关联，所以各个表结构之间也存在着各种联系，基本上分为三种：一对多、多对多、一对一。</p>\n<h3 id=\"多对多关系\"><a href=\"#多对多关系\" class=\"headerlink\" title=\"多对多关系\"></a>多对多关系</h3><p>实现：建立第三张中间表，中间至少包含两个外键，分别关联两方主键</p>\n<p>常见多对多关系如：学生与课程</p>\n\n\n<h3 id=\"一对一关系\"><a href=\"#一对一关系\" class=\"headerlink\" title=\"一对一关系\"></a>一对一关系</h3><p>关系：一对一关系，多用于单标拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中。</p>\n<p>实现：在任意一方加入外键，关联另外一方的主键，并且<strong>设置外键为唯一的(UNIQUE)</strong></p>\n<h2 id=\"多表查询分类\"><a href=\"#多表查询分类\" class=\"headerlink\" title=\"多表查询分类\"></a>多表查询分类</h2><p>定义：指从多张表中查询数据</p>\n<p><strong>连接查询：</strong></p>\n<p>内连接：相当于查询A、B交集部分数据</p>\n<p>外连接：\t</p>\n<ul>\n<li>左外连接：查询左表所有数据，以及两张表交集部分数据</li>\n<li>右外连接：查询右表所有数据，以及两张表交集部分数据</li>\n</ul>\n<p>自连接：当前表与自身的连接查询，自连接必须使用表别名</p>\n<p>子查询</p>\n<h2 id=\"多表查询语句\"><a href=\"#多表查询语句\" class=\"headerlink\" title=\"多表查询语句\"></a>多表查询语句</h2><h3 id=\"内连接\"><a href=\"#内连接\" class=\"headerlink\" title=\"内连接\"></a>内连接</h3><p>隐式内连接：<strong>select 字段列表 from 表1, 表2 where 条件…;</strong></p>\n<p>显式内连接：<strong>select 字段列表 from 表1 [inner] join 表2 on 连接条件…;</strong></p>\n<h3 id=\"外连接\"><a href=\"#外连接\" class=\"headerlink\" title=\"外连接\"></a>外连接</h3><p>查询表1的所有数据 包含表1和表2交集部分的数据)：</p>\n<p><strong>select 字段列表 from 表1 left [outer] join 表2 on 条件…;</strong></p>\n<p>右外连接(相当于查询表2的所有数据 包含表1和表2交集部分的数据)：</p>\n<p><strong>select 字段列表 from 表1 right [outer] join 表2 on 条件…;</strong></p>\n<h3 id=\"自连接\"><a href=\"#自连接\" class=\"headerlink\" title=\"自连接\"></a>自连接</h3><p><strong>select 字段列表 from 表A 别名A join 表A 别名B on 条件…;</strong></p>\n<h3 id=\"子查询\"><a href=\"#子查询\" class=\"headerlink\" title=\"子查询\"></a>子查询</h3><p>SQL语句中嵌套select语句，称为嵌套查询，又称子查询</p>\n<p><strong>select * from t1 where column1&#x3D; (select column1 from t2);</strong></p>\n<p>子查询外部的语句可以是insert&#x2F;update&#x2F;delete&#x2F;select的任何一个</p>\n<p>根据子查询结果不同，分为：</p>\n<ul>\n<li>标量子查询(子查询结果为单个值，常用的操作符：&#x3D;&#x3D;、&lt;&gt;、&gt;、&gt;&#x3D;、&lt;、&lt;&#x3D;)</li>\n<li>列子查询(子查询结果为一列，常用的操作符：in、not in、any、some、all)</li>\n<li>行子查询(子查询结果为一行，常用的操作符：&#x3D;、&lt;&gt;、in、not in)</li>\n<li>表子查询(子查询结果为多行多列，常用的操作符：in)</li>\n</ul>\n<p>根据子查询位置，分为：where之后、from之后、select之后</p>\n<hr>\n<h1 id=\"联合查询-union\"><a href=\"#联合查询-union\" class=\"headerlink\" title=\"联合查询-union\"></a>联合查询-union</h1><p>对于union查询，就是把多次查询的结果合并起来，形成一个新的查询结果集。</p>\n<p>对于联合查询的多张表的列数必须保持一致，字段类型也需要保持一致</p>\n<p>union all会将全部的数据直接合并在一起输出，union会对合并之后的数据去重再输出</p>\n<p><strong>select 字段列表 from 表A …</strong></p>\n<p><strong>union [all]</strong></p>\n<p><strong>select 字段列表 from 表B …;</strong></p>\n<hr>\n<h1 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h1><p>事务是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</p>\n<h2 id=\"事务操作\"><a href=\"#事务操作\" class=\"headerlink\" title=\"事务操作\"></a>事务操作</h2><p>查看&#x2F;设置事务提交方式：</p>\n<p><strong>select @@autocommit;</strong></p>\n<p><strong>set @@autocommit &#x3D; 0;</strong>  ## 切换为手动提交</p>\n<p>提交事务：<strong>commit;</strong></p>\n<p>回滚事务：<strong>rollback;</strong></p>\n<h2 id=\"事务四大特性ACID\"><a href=\"#事务四大特性ACID\" class=\"headerlink\" title=\"事务四大特性ACID\"></a>事务四大特性ACID</h2><ul>\n<li>原子性：事务是不可分割的最小操作单元，要么全部成功，要么全部失败。</li>\n<li>一致性：事务完成时，必须使所有的数据都保持一致状态。</li>\n<li>隔离性：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。</li>\n<li>持久性：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。</li>\n</ul>\n<h2 id=\"并发事务问题\"><a href=\"#并发事务问题\" class=\"headerlink\" title=\"并发事务问题\"></a>并发事务问题</h2><table>\n<thead>\n<tr>\n<th>问题</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>脏读</td>\n<td>一个事务读到另外一个事务还没有提交的数据</td>\n</tr>\n<tr>\n<td>不可重复读</td>\n<td>一个事务先后读取同一条记录，但两次读取的数据不同</td>\n</tr>\n<tr>\n<td>幻读</td>\n<td>一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据时又发现这行数据</td>\n</tr>\n</tbody></table>\n<h2 id=\"事务隔离级别\"><a href=\"#事务隔离级别\" class=\"headerlink\" title=\"事务隔离级别\"></a>事务隔离级别</h2><table>\n<thead>\n<tr>\n<th align=\"center\">隔离级别</th>\n<th align=\"center\">脏读</th>\n<th align=\"center\">不可重复读</th>\n<th align=\"center\">幻读</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">read uncommitted</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n<td align=\"center\">×</td>\n</tr>\n<tr>\n<td align=\"center\">read committed</td>\n<td align=\"center\">×</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"center\">repeatable read</td>\n<td align=\"center\">×</td>\n<td align=\"center\">×</td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"center\">serializable</td>\n<td align=\"center\">×</td>\n<td align=\"center\">×</td>\n<td align=\"center\">×</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"length":7550,"excerpt":"<p><strong>基本的SQL语言学习（MySQL）</strong></p>","more":"<h1 id=\"SQL的基本定义及概念\"><a href=\"#SQL的基本定义及概念\" class=\"headerlink\" title=\"SQL的基本定义及概念\"></a>SQL的基本定义及概念</h1><p><strong>数据库（DataBase）</strong>：存储数据的仓库，数据有组织的进行存储。</p>\n<p><strong>数据库管理系统（DBMS）</strong>：操纵和管理数据库的大型软件。</p>\n<p><strong>SQL</strong>：操作关系型数据库的编程语言。</p>\n<p><strong>关系型数据库（RDBMS）</strong>：建立在关系模型基础上，由多张相互连接的二维表组成的数据库</p>\n<p>基础使用方法：通过cmd输入mysql -r root -p进入mysql页面进行操作 或 运行MySQL command line Client - Unicode</p>\n<p><strong>SQL分类</strong>：</p>\n<table>\n<thead>\n<tr>\n<th><strong>DDL</strong></th>\n<th><strong>数据定义语言</strong></th>\n<th><strong>定义数据库对象（数据库、表、字段）</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>DML</strong></td>\n<td><strong>数据操作语言</strong></td>\n<td><strong>对数据库表中数据增删改</strong></td>\n</tr>\n<tr>\n<td><strong>DQL</strong></td>\n<td><strong>数据查询语言</strong></td>\n<td><strong>查询数据库表中的记录</strong></td>\n</tr>\n<tr>\n<td><strong>DCL</strong></td>\n<td><strong>数据控制语言</strong></td>\n<td><strong>创建数据库用户，控制数据库的访问权限</strong></td>\n</tr>\n</tbody></table>\n<hr>\n<h1 id=\"DDL语句\"><a href=\"#DDL语句\" class=\"headerlink\" title=\"DDL语句\"></a>DDL语句</h1><p>语句后面注意 “ ; ”\t，\t[…]部分表示选写内容\t，\tcomment ‘…’ 为注释内容</p>\n<h2 id=\"数据库操作\"><a href=\"#数据库操作\" class=\"headerlink\" title=\"数据库操作\"></a>数据库操作</h2><ul>\n<li>查询所有数据库：<strong>show database;</strong></li>\n<li>查询当前数据库：<strong>select database();</strong></li>\n<li>创建数据库：<strong>create database [if not exists] 数据库名;</strong></li>\n<li>删除数据库：<strong>drop database [if not exists] 数据库名;</strong></li>\n<li>使用数据库：<strong>use 数据库名;</strong></li>\n</ul>\n<h2 id=\"表操作\"><a href=\"#表操作\" class=\"headerlink\" title=\"表操作\"></a>表操作</h2><ul>\n<li>修改表名：<strong>alter table 表名 rename to 新表名;</strong></li>\n<li>删除表：<strong>drop table [if exists] 表名</strong></li>\n<li>删除指定表，并重新创建该表（初始化该表）：<strong>truncate table 表名;</strong></li>\n</ul>\n<h3 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h3><ul>\n<li>查询当前数据库所有表：<strong>show tables;</strong></li>\n<li>查询表结构：<strong>desc 表名;</strong></li>\n<li>查询指定表的建表语句：<strong>show create table 表名;</strong></li>\n</ul>\n<h3 id=\"修改\"><a href=\"#修改\" class=\"headerlink\" title=\"修改\"></a>修改</h3><ul>\n<li>添加字段：<strong>alter table 表名 add 字段名 数据类型;</strong></li>\n<li>修改数据类型：<strong>alter table 表名 modify 字段名 新的数据类型;</strong></li>\n<li>修改字段名和字段类型：<strong>alter table 表名 change 旧字段名 新字段名 数据类型;</strong></li>\n</ul>\n<h3 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h3><ul>\n<li>删除字段：<strong>alter table 表名 drop 字段名;</strong></li>\n</ul>\n<hr>\n<h1 id=\"DML语句\"><a href=\"#DML语句\" class=\"headerlink\" title=\"DML语句\"></a>DML语句</h1><h2 id=\"添加数据\"><a href=\"#添加数据\" class=\"headerlink\" title=\"添加数据\"></a>添加数据</h2><ul>\n<li>给指定字段添加数据：<strong>insert into 表名(字段名1,字段名2,…) values (值1,值2,…);</strong></li>\n<li>给全部字段添加数据：<strong>insert into 表名 values (值1,值2,…);</strong></li>\n<li>批量添加数据：<strong>insert into 表名(字段名1,字段名2,…) values (值1,值2,…);</strong>  &#x2F;<em>一行</em>&#x2F;</li>\n<li>​\t\t\t\t\t\t <strong>insert into 表名 values (值1,值2,…),(值1,值2,…),(值1,值2,…);</strong>  &#x2F;<em>多行</em>&#x2F;</li>\n</ul>\n<p>插入数据时，指定的字段顺序需要与值的顺序是一一对应的。</p>\n<p>字符串和日期型数据应该包含在引号中。</p>\n<p>插入的数据大小，应该在字段的规定范围内（满足对应的数据类型和数据范围）。</p>\n<h2 id=\"修改数据\"><a href=\"#修改数据\" class=\"headerlink\" title=\"修改数据\"></a>修改数据</h2><ul>\n<li><strong>update 表名 set 字段名1&#x3D;值1,字段名2&#x3D;值2,… [where 条件];</strong></li>\n</ul>\n<p>修改语句的条件可有可无，若没有where条件，则会修改整张表的所有数据。</p>\n<h2 id=\"删除数据\"><a href=\"#删除数据\" class=\"headerlink\" title=\"删除数据\"></a>删除数据</h2><ul>\n<li><strong>delete from 表名 [where 条件];</strong></li>\n</ul>\n<p>删除语句的条件可有可无，若没有where条件，则会删除整张表的所有数据。</p>\n<p>delete语句不能删除某个字段的值（可以用update）。</p>\n<hr>\n<h1 id=\"DQL语句\"><a href=\"#DQL语句\" class=\"headerlink\" title=\"DQL语句\"></a>DQL语句</h1><h2 id=\"基本查询\"><a href=\"#基本查询\" class=\"headerlink\" title=\"基本查询\"></a>基本查询</h2><ul>\n<li>查询多个字段：<strong>select 字段1,字段2,… from 表名;</strong></li>\n<li>查询全部字段：<strong>select * from 表名;</strong></li>\n<li>设置别名：<strong>select 字段1[as 别名1],字段2[as 别名2],… from 表名;</strong></li>\n<li>去除重复记录：<strong>select distinct 字段列表 from 表名;</strong></li>\n</ul>\n<h2 id=\"条件查询\"><a href=\"#条件查询\" class=\"headerlink\" title=\"条件查询\"></a>条件查询</h2><ul>\n<li><strong>select 字段列表 from 表名 where 条件列表;</strong></li>\n</ul>\n<p>例：查询姓名为两个字的员工信息select * from employee where name like ‘__’;</p>\n<p>​\t\t查询身份证号最后一位是X的员工信息select * from employee where idcard like ‘%X’;</p>\n<p>​\t\t或 select * from employee where idcard like ‘________________<em>X’ (17个’</em>‘)</p>\n<table>\n<thead>\n<tr>\n<th>比较运算符</th>\n<th align=\"left\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&gt;</td>\n<td align=\"left\">大于</td>\n</tr>\n<tr>\n<td>&gt;&#x3D;</td>\n<td align=\"left\">大于等于</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td align=\"left\">小于</td>\n</tr>\n<tr>\n<td>&lt;&#x3D;</td>\n<td align=\"left\">小于等于</td>\n</tr>\n<tr>\n<td>&#x3D;</td>\n<td align=\"left\">等于</td>\n</tr>\n<tr>\n<td>&lt;&gt; 或 !&#x3D;</td>\n<td align=\"left\">不等于</td>\n</tr>\n<tr>\n<td>between…and…</td>\n<td align=\"left\">介于范围之内（between 小 and 大）</td>\n</tr>\n<tr>\n<td>in(…)</td>\n<td align=\"left\">在in之内的列表中的值，满足一个即可</td>\n</tr>\n<tr>\n<td>like 占位符</td>\n<td align=\"left\">模糊匹配（_匹配单个字符，%匹配任意个字符）</td>\n</tr>\n<tr>\n<td>is null</td>\n<td align=\"left\">判断是否为空</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>逻辑运算符</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>and 或 &amp;&amp;</td>\n<td>并且（多个条件同时成立）</td>\n</tr>\n<tr>\n<td>or 或 ||</td>\n<td>或者（多个条件任意一个成立）</td>\n</tr>\n<tr>\n<td>not 或 ！</td>\n<td>非，不是</td>\n</tr>\n</tbody></table>\n<h2 id=\"聚合函数\"><a href=\"#聚合函数\" class=\"headerlink\" title=\"聚合函数\"></a>聚合函数</h2><ul>\n<li><strong>select 聚合函数(字段列表) from 表名;</strong></li>\n</ul>\n<p>定义：将一列数据作为一个整体，进行纵向计算</p>\n<p>null值不参与所有聚合函数的运算</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>count</td>\n<td>统计数量</td>\n</tr>\n<tr>\n<td>max</td>\n<td>最大值</td>\n</tr>\n<tr>\n<td>min</td>\n<td>最小值</td>\n</tr>\n<tr>\n<td>avg</td>\n<td>平均值</td>\n</tr>\n<tr>\n<td>sum</td>\n<td>求和</td>\n</tr>\n</tbody></table>\n<h2 id=\"分组查询\"><a href=\"#分组查询\" class=\"headerlink\" title=\"分组查询\"></a>分组查询</h2><ul>\n<li><strong>select 字段列表 from 表名 [where 条件] group by 分组字段名 [having 分组后过滤条件];</strong></li>\n</ul>\n<h2 id=\"排序查询\"><a href=\"#排序查询\" class=\"headerlink\" title=\"排序查询\"></a>排序查询</h2><ul>\n<li><strong>select 字段列表 from 表名 order by 字段1,排序方式1,字段2,排序方式2,…;</strong></li>\n</ul>\n<p>排序方式有：ASC升序(默认)、DESC降序</p>\n<h2 id=\"分页查询\"><a href=\"#分页查询\" class=\"headerlink\" title=\"分页查询\"></a>分页查询</h2><ul>\n<li><strong>select 字段列表 from 表名 limit 起始索引,查询记录数;</strong></li>\n</ul>\n<p>起始索引从0开始，起始索引&#x3D;(查询页码 - 1) * 每页显示记录数</p>\n<p>如果查询的是第一页数据，起始索引可以省略</p>\n<h2 id=\"DQL语句执行顺序\"><a href=\"#DQL语句执行顺序\" class=\"headerlink\" title=\"DQL语句执行顺序\"></a>DQL语句执行顺序</h2><ol>\n<li>from 表名列表</li>\n<li>where 条件列表</li>\n<li>group by 分组字段列表</li>\n<li>having 分组后条件列表</li>\n<li>select 字段列表</li>\n<li>order by 排序字段列表</li>\n<li>limit 分页参数</li>\n</ol>\n<hr>\n<h1 id=\"DCL语句\"><a href=\"#DCL语句\" class=\"headerlink\" title=\"DCL语句\"></a>DCL语句</h1><p>数据控制语言，用来管理数据库用户、控制数据库的访问权限。</p>\n<table>\n<thead>\n<tr>\n<th>权限（常用）</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>all(all privileges)</td>\n<td>所有权限</td>\n</tr>\n<tr>\n<td>select</td>\n<td>查询数据</td>\n</tr>\n<tr>\n<td>insert</td>\n<td>插入数据</td>\n</tr>\n<tr>\n<td>update</td>\n<td>修改数据</td>\n</tr>\n<tr>\n<td>delete</td>\n<td>删除数据</td>\n</tr>\n<tr>\n<td>alter</td>\n<td>修改表</td>\n</tr>\n<tr>\n<td>drop</td>\n<td>删除数据库&#x2F;表&#x2F;视图</td>\n</tr>\n<tr>\n<td>create</td>\n<td>创建数据库&#x2F;表</td>\n</tr>\n</tbody></table>\n<h2 id=\"管理用户\"><a href=\"#管理用户\" class=\"headerlink\" title=\"管理用户\"></a>管理用户</h2><ul>\n<li>查询用户：use mysql;  &#x3D;&gt;  <strong>select * from user;</strong></li>\n<li>创建用户：<strong>create user ‘user name‘@’host name’ identified by ‘password’;</strong></li>\n<li>修改用户密码：<strong>alter user ‘user name‘@’host name’ identified with mysql_native_password by ‘new password’;</strong></li>\n<li>删除用户：<strong>drop user ‘user name‘@’host name’;</strong></li>\n</ul>\n<h2 id=\"权限控制\"><a href=\"#权限控制\" class=\"headerlink\" title=\"权限控制\"></a>权限控制</h2><ul>\n<li>查询权限：<strong>show grants for ‘user name‘@’host name’;</strong></li>\n<li>授予权限：<strong>grant 权限列表 on 数据库名.表名 to ‘user name‘@’host name’;</strong></li>\n<li>撤销权限：<strong>revoke 权限列表 on 数据库名.表名 from ‘user name‘@’host name’;</strong></li>\n</ul>\n<hr>\n<h1 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h1><h2 id=\"字符串函数\"><a href=\"#字符串函数\" class=\"headerlink\" title=\"字符串函数\"></a>字符串函数</h2><table>\n<thead>\n<tr>\n<th>函数（常用）</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>concat(S1, S2, S3, … ,Sn)</td>\n<td>字符串拼接，将S1…Sn拼接成一个字符串</td>\n</tr>\n<tr>\n<td>lower(str)</td>\n<td>将字符串str全部转为小写</td>\n</tr>\n<tr>\n<td>upper(str)</td>\n<td>将字符串str全部转为大写</td>\n</tr>\n<tr>\n<td>lpad(str, n, pad)</td>\n<td>左填充，用字符串pad对str的左边进行填充，达到n个字符串长度</td>\n</tr>\n<tr>\n<td>rpad(str, n, pad)</td>\n<td>右填充，用字符串pad对str的右边进行填充，达到n个字符串长度</td>\n</tr>\n<tr>\n<td>trim(str)</td>\n<td>去掉字符串头部和尾部的空格</td>\n</tr>\n<tr>\n<td>substring(str, start, len)</td>\n<td>返回从字符串str从start位置起的len个长度的字符串</td>\n</tr>\n</tbody></table>\n<p>例：study数据库的employee表中将员工编号workno更改，将编号前补齐’0’以达到五位数编号</p>\n<p>答：update employee set wordno &#x3D; lpad(workno, 5, ‘0’);</p>\n<hr>\n<h2 id=\"数值函数\"><a href=\"#数值函数\" class=\"headerlink\" title=\"数值函数\"></a>数值函数</h2><table>\n<thead>\n<tr>\n<th>函数（常用）</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ceil(x)</td>\n<td>向上取整</td>\n</tr>\n<tr>\n<td>floor(x)</td>\n<td>向下取整</td>\n</tr>\n<tr>\n<td>mod(x, y)</td>\n<td>返回x&#x2F;y的模（整除后的余数）</td>\n</tr>\n<tr>\n<td>rand()</td>\n<td>返回0~1内的随机数</td>\n</tr>\n<tr>\n<td>round(x, y)</td>\n<td>求参数x的四舍五入的值，保留y位小数</td>\n</tr>\n</tbody></table>\n<p>例：使用数据库的函数，实现随机生成6位验证码</p>\n<p>答：lpad(round(select rand() * 1000000, 0), 6, ‘0’);</p>\n<p>此方法运用了round()函数，替换成向上或向下取整函数依然可以完成，lpad或rpad同理。</p>\n<hr>\n<h2 id=\"日期函数\"><a href=\"#日期函数\" class=\"headerlink\" title=\"日期函数\"></a>日期函数</h2><table>\n<thead>\n<tr>\n<th>函数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>curdate()</td>\n<td>返回当前日期</td>\n</tr>\n<tr>\n<td>curtime()</td>\n<td>返回当前时间</td>\n</tr>\n<tr>\n<td>now()</td>\n<td>返回当前日期和时间</td>\n</tr>\n<tr>\n<td>year(date)</td>\n<td>获取指定date的年份</td>\n</tr>\n<tr>\n<td>month(date)</td>\n<td>获取指定date的月份</td>\n</tr>\n<tr>\n<td>day(date)</td>\n<td>获取指定date的日期</td>\n</tr>\n<tr>\n<td>date_add(date, interval expr type)</td>\n<td>计算date加expr type后对应的时间,expr表示数值，type表示类型如年月日</td>\n</tr>\n<tr>\n<td>datediff(date1, date2)</td>\n<td>计算date1 和 date2之间相隔的天数</td>\n</tr>\n</tbody></table>\n<p>函数举例：date_add(now(), interval 90 day) &#x3D;&#x3D;&gt;&gt; 2022-07-08 18:54:37</p>\n<p>函数举例：datediff(‘2022-4-9’, ‘2022-7-1’) &#x3D;&#x3D;&gt;&gt; -83</p>\n<p>例：根据study数据库的employee表，计算所有员工入职时间，用天数表示，并按天数降序排序</p>\n<p>答：select name, datediff(curdate(), entrydate) from employee order by datediff(curdate(), entrydate) desc;</p>\n<hr>\n<h2 id=\"流程控制函数\"><a href=\"#流程控制函数\" class=\"headerlink\" title=\"流程控制函数\"></a>流程控制函数</h2><table>\n<thead>\n<tr>\n<th>函数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>if(value, t, f)</td>\n<td>如果value为true，则返回t，否则返回f</td>\n</tr>\n<tr>\n<td>ifnull(value1, value2)</td>\n<td>如果value1不为空，返回value1，否则返回value2</td>\n</tr>\n<tr>\n<td>case when [val1] then [res1] … else [default] end</td>\n<td>如果val1为true，返回res1，…否则返回default默认值</td>\n</tr>\n<tr>\n<td>case [expr] when [val1] then [res1] … else [default] end</td>\n<td>如果expr的值等于val1，返回res1，…否则返回default默认值</td>\n</tr>\n</tbody></table>\n<p>例：根据study数据库的score表，将学生成绩置换成’优秀’&gt;&#x3D;85,60&#x3D;&lt;’及格’&#x3D;&lt;85,’不及格’&lt;60</p>\n<p>答：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select</span><br><span class=\"line\">    id,</span><br><span class=\"line\">    name,</span><br><span class=\"line\">    (case when math &gt;= 85 then &#x27;优秀&#x27; when math &lt; 60 then &#x27;不及格&#x27; else &#x27;及格&#x27; end),</span><br><span class=\"line\">    (case when english &gt;= 85 then &#x27;优秀&#x27; when english &lt; 60 then &#x27;不及格&#x27; else &#x27;及格&#x27; end),</span><br><span class=\"line\">    (case when chinese &gt;= 85 then &#x27;优秀&#x27; when chinese &lt; 60 then &#x27;不及格&#x27; else &#x27;及格&#x27; end)</span><br><span class=\"line\">from score;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"约束\"><a href=\"#约束\" class=\"headerlink\" title=\"约束\"></a>约束</h1><h2 id=\"基本定义\"><a href=\"#基本定义\" class=\"headerlink\" title=\"基本定义\"></a>基本定义</h2><p>概念：约束是作用于表中字段上的规则，用于限制存储在表中的数据。</p>\n<p>目的：保证数据库中数据的正确、有效性和完整性。</p>\n<p>分类：</p>\n<table>\n<thead>\n<tr>\n<th>约束</th>\n<th>描述</th>\n<th>关键字</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>非空约束</td>\n<td>限制该字段的数据不能为null</td>\n<td>not null</td>\n</tr>\n<tr>\n<td>唯一约束</td>\n<td>保证该字段的所有数据都是唯一、不重复的</td>\n<td>unique</td>\n</tr>\n<tr>\n<td>主键约束</td>\n<td>主键是一行数据的唯一标识，要求非空且唯一</td>\n<td>primary key</td>\n</tr>\n<tr>\n<td>默认约束</td>\n<td>保存数据时，如果未指定该字段的值，则采用默认值</td>\n<td>default</td>\n</tr>\n<tr>\n<td>检查约束</td>\n<td>保证字段值满足某一个条件</td>\n<td>check</td>\n</tr>\n<tr>\n<td>外键约束</td>\n<td>用来让两张表的数据之间建立连接，保证数据的一致性和完整性</td>\n<td>foreign key</td>\n</tr>\n</tbody></table>\n<p>注意：约束是作用于表中字段上的，可以在创建表&#x2F;修改表的时候添加约束。</p>\n<p>例：</p>\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table user</span><br><span class=\"line\">(</span><br><span class=\"line\"> id int primary key auto_increment comment &#x27;主键&#x27;,</span><br><span class=\"line\"> name varchar(10) not null unique comment &#x27;姓名&#x27;,</span><br><span class=\"line\"> age int check (age&gt;0 &amp;&amp; age&lt;=120) comment &#x27;年龄&#x27;,</span><br><span class=\"line\"> status char(1) default &#x27;1&#x27; comment &#x27;状态&#x27;,</span><br><span class=\"line\"> gender char(1) comment &#x27;性别&#x27;</span><br><span class=\"line\">)comment &#x27;用户表&#x27;;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"外键约束\"><a href=\"#外键约束\" class=\"headerlink\" title=\"外键约束\"></a>外键约束</h2><h3 id=\"基本定义-1\"><a href=\"#基本定义-1\" class=\"headerlink\" title=\"基本定义\"></a>基本定义</h3><p>概念：外键用来让两张表的数据之间建立连接，从而保证数据的一致性和完整性。</p>\n<p>注意：在数据库层面，未建立外键关联的两张表之间通过外键约束，是无法保证数据的一致性和完整性的。</p>\n<hr>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p>添加外键：</p>\n<ul>\n<li><strong>create table 表名(</strong></li>\n<li>​\t\t<strong>字段名\t\t数据类型,</strong></li>\n<li>​\t\t<strong>……\t\t\t ……</strong></li>\n<li>​\t\t<strong>[constraint] [外键名称] foreign key (外键字段名) references 主表(主表列名)</strong></li>\n<li><strong>);</strong></li>\n</ul>\n<p>或：</p>\n<ul>\n<li><strong>alter table 表名 add constraint 外键名称 foreign key(外键字段名) references 主表(主表字段名);</strong></li>\n</ul>\n<p>删除外键：</p>\n<ul>\n<li><strong>alter table 表名 drop foreign key 外键名称;</strong></li>\n</ul>\n<hr>\n<h3 id=\"删除-x2F-更新行为\"><a href=\"#删除-x2F-更新行为\" class=\"headerlink\" title=\"删除&#x2F;更新行为\"></a>删除&#x2F;更新行为</h3><ul>\n<li><strong>alter table 表名 add constraint 外键名称 foreign key(外键字段名) references 主表(主表字段名) on update cascade on delete cascade;</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>行为</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>no action</td>\n<td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除&#x2F;更新(与restrict一致)</td>\n</tr>\n<tr>\n<td>restrict</td>\n<td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除&#x2F;更新(与no action一致)</td>\n</tr>\n<tr>\n<td>cascade</td>\n<td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有，则也删除&#x2F;更新外键在子表中的记录</td>\n</tr>\n<tr>\n<td>set null</td>\n<td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为null(这就要求该外键允许取null)</td>\n</tr>\n<tr>\n<td>set default</td>\n<td>父表有变更时，子表将外键列设置成一个默认的值(innodb不支持)</td>\n</tr>\n</tbody></table>\n<hr>\n<h1 id=\"多表查询\"><a href=\"#多表查询\" class=\"headerlink\" title=\"多表查询\"></a>多表查询</h1><h2 id=\"多表关系\"><a href=\"#多表关系\" class=\"headerlink\" title=\"多表关系\"></a>多表关系</h2><p>项目开发中，在进行数据库表结构设计时，会根据业务需求及业务模块之间的关系，分析并设计表结构，由于业务之间相互关联，所以各个表结构之间也存在着各种联系，基本上分为三种：一对多、多对多、一对一。</p>\n<h3 id=\"多对多关系\"><a href=\"#多对多关系\" class=\"headerlink\" title=\"多对多关系\"></a>多对多关系</h3><p>实现：建立第三张中间表，中间至少包含两个外键，分别关联两方主键</p>\n<p>常见多对多关系如：学生与课程</p>\n\n\n<h3 id=\"一对一关系\"><a href=\"#一对一关系\" class=\"headerlink\" title=\"一对一关系\"></a>一对一关系</h3><p>关系：一对一关系，多用于单标拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中。</p>\n<p>实现：在任意一方加入外键，关联另外一方的主键，并且<strong>设置外键为唯一的(UNIQUE)</strong></p>\n<h2 id=\"多表查询分类\"><a href=\"#多表查询分类\" class=\"headerlink\" title=\"多表查询分类\"></a>多表查询分类</h2><p>定义：指从多张表中查询数据</p>\n<p><strong>连接查询：</strong></p>\n<p>内连接：相当于查询A、B交集部分数据</p>\n<p>外连接：\t</p>\n<ul>\n<li>左外连接：查询左表所有数据，以及两张表交集部分数据</li>\n<li>右外连接：查询右表所有数据，以及两张表交集部分数据</li>\n</ul>\n<p>自连接：当前表与自身的连接查询，自连接必须使用表别名</p>\n<p>子查询</p>\n<h2 id=\"多表查询语句\"><a href=\"#多表查询语句\" class=\"headerlink\" title=\"多表查询语句\"></a>多表查询语句</h2><h3 id=\"内连接\"><a href=\"#内连接\" class=\"headerlink\" title=\"内连接\"></a>内连接</h3><p>隐式内连接：<strong>select 字段列表 from 表1, 表2 where 条件…;</strong></p>\n<p>显式内连接：<strong>select 字段列表 from 表1 [inner] join 表2 on 连接条件…;</strong></p>\n<h3 id=\"外连接\"><a href=\"#外连接\" class=\"headerlink\" title=\"外连接\"></a>外连接</h3><p>查询表1的所有数据 包含表1和表2交集部分的数据)：</p>\n<p><strong>select 字段列表 from 表1 left [outer] join 表2 on 条件…;</strong></p>\n<p>右外连接(相当于查询表2的所有数据 包含表1和表2交集部分的数据)：</p>\n<p><strong>select 字段列表 from 表1 right [outer] join 表2 on 条件…;</strong></p>\n<h3 id=\"自连接\"><a href=\"#自连接\" class=\"headerlink\" title=\"自连接\"></a>自连接</h3><p><strong>select 字段列表 from 表A 别名A join 表A 别名B on 条件…;</strong></p>\n<h3 id=\"子查询\"><a href=\"#子查询\" class=\"headerlink\" title=\"子查询\"></a>子查询</h3><p>SQL语句中嵌套select语句，称为嵌套查询，又称子查询</p>\n<p><strong>select * from t1 where column1&#x3D; (select column1 from t2);</strong></p>\n<p>子查询外部的语句可以是insert&#x2F;update&#x2F;delete&#x2F;select的任何一个</p>\n<p>根据子查询结果不同，分为：</p>\n<ul>\n<li>标量子查询(子查询结果为单个值，常用的操作符：&#x3D;&#x3D;、&lt;&gt;、&gt;、&gt;&#x3D;、&lt;、&lt;&#x3D;)</li>\n<li>列子查询(子查询结果为一列，常用的操作符：in、not in、any、some、all)</li>\n<li>行子查询(子查询结果为一行，常用的操作符：&#x3D;、&lt;&gt;、in、not in)</li>\n<li>表子查询(子查询结果为多行多列，常用的操作符：in)</li>\n</ul>\n<p>根据子查询位置，分为：where之后、from之后、select之后</p>\n<hr>\n<h1 id=\"联合查询-union\"><a href=\"#联合查询-union\" class=\"headerlink\" title=\"联合查询-union\"></a>联合查询-union</h1><p>对于union查询，就是把多次查询的结果合并起来，形成一个新的查询结果集。</p>\n<p>对于联合查询的多张表的列数必须保持一致，字段类型也需要保持一致</p>\n<p>union all会将全部的数据直接合并在一起输出，union会对合并之后的数据去重再输出</p>\n<p><strong>select 字段列表 from 表A …</strong></p>\n<p><strong>union [all]</strong></p>\n<p><strong>select 字段列表 from 表B …;</strong></p>\n<hr>\n<h1 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h1><p>事务是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</p>\n<h2 id=\"事务操作\"><a href=\"#事务操作\" class=\"headerlink\" title=\"事务操作\"></a>事务操作</h2><p>查看&#x2F;设置事务提交方式：</p>\n<p><strong>select @@autocommit;</strong></p>\n<p><strong>set @@autocommit &#x3D; 0;</strong>  ## 切换为手动提交</p>\n<p>提交事务：<strong>commit;</strong></p>\n<p>回滚事务：<strong>rollback;</strong></p>\n<h2 id=\"事务四大特性ACID\"><a href=\"#事务四大特性ACID\" class=\"headerlink\" title=\"事务四大特性ACID\"></a>事务四大特性ACID</h2><ul>\n<li>原子性：事务是不可分割的最小操作单元，要么全部成功，要么全部失败。</li>\n<li>一致性：事务完成时，必须使所有的数据都保持一致状态。</li>\n<li>隔离性：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。</li>\n<li>持久性：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。</li>\n</ul>\n<h2 id=\"并发事务问题\"><a href=\"#并发事务问题\" class=\"headerlink\" title=\"并发事务问题\"></a>并发事务问题</h2><table>\n<thead>\n<tr>\n<th>问题</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>脏读</td>\n<td>一个事务读到另外一个事务还没有提交的数据</td>\n</tr>\n<tr>\n<td>不可重复读</td>\n<td>一个事务先后读取同一条记录，但两次读取的数据不同</td>\n</tr>\n<tr>\n<td>幻读</td>\n<td>一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据时又发现这行数据</td>\n</tr>\n</tbody></table>\n<h2 id=\"事务隔离级别\"><a href=\"#事务隔离级别\" class=\"headerlink\" title=\"事务隔离级别\"></a>事务隔离级别</h2><table>\n<thead>\n<tr>\n<th align=\"center\">隔离级别</th>\n<th align=\"center\">脏读</th>\n<th align=\"center\">不可重复读</th>\n<th align=\"center\">幻读</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">read uncommitted</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n<td align=\"center\">×</td>\n</tr>\n<tr>\n<td align=\"center\">read committed</td>\n<td align=\"center\">×</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"center\">repeatable read</td>\n<td align=\"center\">×</td>\n<td align=\"center\">×</td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"center\">serializable</td>\n<td align=\"center\">×</td>\n<td align=\"center\">×</td>\n<td align=\"center\">×</td>\n</tr>\n</tbody></table>"},{"title":"Next主题博客美化","abbrlink":"e23f9c5e","date":"2022-06-25T06:26:36.000Z","_content":"\n**优化美化博客插件推荐（自用）**\n\n<!--more-->\n\n# 唯一ID链接博文\n\n插件名及链接地址：[hexo-abbrlink](https://github.com/rozbo/hexo-abbrlink)\n\nGit Bash 输入：\n\n```\nnpm install hexo-abbrlink --save\n```\n\n站点config.yml添加：\n\n```\n# URL\n## Set your site url here. For example, if you use GitHub Page, set url as 'https://username.github.io/project'\nurl: http://example.com\npermalink: posts/:abbrlink.html\npermalink_defaults:\npretty_urls:\n  trailing_index: true # Set to false to remove trailing 'index.html' from permalinks\n  trailing_html: true # Set to false to remove trailing '.html' from permalinks\n\n## abbrlink config\nabbrlink:\n  alg: crc32      #support crc16(default) and crc32 进制\n  rep: hex        #support dec(default) and hex  算法\n  drafts: false   #(true)Process draft,(false)Do not process draft. false(default) \n  ## Generate categories from directory-tree\n  ## depth: the max_depth of directory-tree you want to generate, should > 0\n  auto_category:\n     enable: true  #true(default)\n     depth:        #3(default)\n     over_write: false \n  auto_title: false #enable auto title, it can auto fill the title by path\n  auto_date: false #enable auto date, it can auto fill the date by time today\n  force: false #enable force mode,in this mode, the plugin will ignore the cache, and calc the abbrlink for every post even it already had abbrlink.\n```\n\n------\n\n# 本地搜索功能\n\n插件名及链接地址：[hexo-generator-searchdb](https://github.com/theme-next/hexo-generator-searchdb)\n\nGit Bash 输入：\n\n```\nnpm install hexo-generator-searchdb --save\n```\n\n站点config.yml添加：\n\n```\nsearch:\n  path: search.xml\n  field: post\n  format: html\n  limit: 10000\n```\n\n------\n\n# 加密浏览博文\n\n插件名及链接地址：[hexo-blog-encrypt](https://github.com/D0n9X1n/hexo-blog-encrypt)\n\nGit Bash 输入：\n\n```\nnpm install hexo-blog-encrypt --save\n```\n\n站点config.yml添加：\n\n```\n# Security\nencrypt: # hexo-blog-encrypt\n  silent: true\n  abstract: 本文加密，请输入密码以查看！\n  message: 当前文章暂不对外可见，请输入密码后查看！\n  tags:\n  - {name: private, password: hello}\n  wrong_pass_message: 密码错误，请重新输入！\n  wrong_hash_message: 抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容！\n```\n\n------\n\n# 静态看板娘\n\n插件名及链接地址：[hexo-helper-live2d](https://github.com/EYHN/hexo-helper-live2d)\n\n看板娘模板：\n\n- `live2d-widget-model-chitose`\n- `live2d-widget-model-epsilon2_1`\n- `live2d-widget-model-gf`\n- `live2d-widget-model-haru/01` (use `npm install --save live2d-widget-model-haru`)\n- `live2d-widget-model-haru/02` (use `npm install --save live2d-widget-model-haru`)\n- `live2d-widget-model-haruto`\n- `live2d-widget-model-hibiki`\n- `live2d-widget-model-hijiki`\n- `live2d-widget-model-izumi`\n- `live2d-widget-model-koharu`\n- `live2d-widget-model-miku`\n- `live2d-widget-model-ni-j`\n- `live2d-widget-model-nico`\n- `live2d-widget-model-nietzsche`\n- `live2d-widget-model-nipsilon`\n- `live2d-widget-model-nito`\n- `live2d-widget-model-shizuku`\n- `live2d-widget-model-tororo`\n- `live2d-widget-model-tsumiki`\n- `live2d-widget-model-unitychan`\n- `live2d-widget-model-wanko`\n- `live2d-widget-model-z16`\n\n根据以上模板挑选并Git Bash 输入：\n\n```\nnpm install live2d-widget-model-您选择的模板名 --save\n```\n\nGit Bash 输入：\n\n```\nnpm install hexo-helper-live2d --save\n```\n\n站点config.yml添加：\n\n```\nlive2d:\n  enable: true    # 是否启用看板娘\n  scriptFrom: local    # 默认\n  pluginRootPath: live2dw/    # 插件在站点上的根目录(相对路径)\n  pluginJsPath: lib/    # 脚本文件相对与插件根目录路径\n  pluginModelPath: assets/    # 模型文件相对与插件根目录路径\n  # scriptFrom: jsdelivr    # jsdelivr CDN\n  # scriptFrom: unpkg    # unpkg CDN\n  # scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js    # 你的自定义 url\n  tagMode: false # 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中\n  debug: false # 调试, 是否在控制台输出日志\n  model:\n    use: live2d-widget-model-z16 # 根据自己选择并下载的模板改名！！！\n    scale: 1\n    hHeadPos: 0.5\n    vHeadPos: 0.618\n  display:\n    superSample: 2\n    width: 200\t# 宽\n    height: 400\t# 高\n    position: left    # 左侧还是右侧\n    hOffset: 0\n    vOffset: -10    # 距底部距离\n  mobile:\n    show: false    # 手机端是否可见，建议不可见否则可能影响阅读\n    scale: 0.5\n  react:\n    opacityDefault: 0.7\n    opacityOnHover: 0.2\n```\n\n------\n\n# 一键部署博客\n\n插件名及链接地址：[hexo-deployer-git](https://github.com/hexojs/hexo-deployer-git)\n\nGit Bash 输入：\n\n```\nnpm install hexo-deployer-git --save\n```\n\n站点config.yml配置：\n\n```\ndeploy:\n  type: git\n  repo: <仓库链接> # 可以是 https 链接也可以是 git 链接\n  branch: [分支] # GitHub 的网站分支为 gh-pages，其他网站可能有所不同\n  message: [message] # 默认是 Site updated: {{ now('YYYY-MM-DD HH:mm:ss') }}\n\n```\n\n------\n\n# 统计博文字数和阅读时长\n\n插件名及链接地址：[hexo-symbols-count-time](https://github.com/theme-next/hexo-symbols-count-time)\n\nGit Bash 输入：\n\n```\nnpm install hexo-symbols-count-time --save\n```\n\n站点config.yml添加：\n\n```\nsymbols_count_time:\n  symbols: true\n  time: true\n  total_symbols: true\n  total_time: true\n  exclude_codeblock: false\n  awl: 4\n  wpm: 275\n  suffix: \"mins.\"\n\n```\n\n------\n\n# sitemap浏览器爬取博客\n\n插件名及链接地址：[hexo-generator-sitemap](https://github.com/hexojs/hexo-generator-sitemap)\n\nGit Bash 输入：\n\n```\nnpm install hexo-generator-sitemap --save\n```\n\n站点config.yml添加：\n\n```\n# hexo-generator-sitemap\n## https://github.com/hexojs/hexo-generator-sitemap\nsitemap:\n  path: sitemap.xml\n  # template: ./sitemap_template.xml\n  rel: true\n  tags: false\n  categories: false\n```\n\n具体参考：https://ywang-wnlo.github.io/posts/abac0c46\n\n------\n\n# 鼠标左键点击爱心特效\n\nBlog文件夹 -> themes -> next（你的主题名文件夹） -> source -> js\n\n在js文件夹下新建一个“love.js”，并存入以下内容保存。\n\n```js\n(function (window, document, undefined) {\n    var hearts = [];\n    window.requestAnimationFrame = (function () {\n        return window.requestAnimationFrame ||\n            window.webkitRequestAnimationFrame ||\n            window.mozRequestAnimationFrame ||\n            window.oRequestAnimationFrame ||\n            window.msRequestAnimationFrame ||\n            function (callback) {\n                setTimeout(callback, 1000 / 60);\n            }\n    })();\n    init();\n\n    function init() {\n        css(\n            \".heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: absolute;}.heart:after{top: -5px;}.heart:before{left: -5px;}\"\n        );\n        attachEvent();\n        gameloop();\n    }\n\n    function gameloop() {\n        for (var i = 0; i < hearts.length; i++) {\n            if (hearts[i].alpha <= 0) {\n                document.body.removeChild(hearts[i].el);\n                hearts.splice(i, 1);\n                continue;\n            }\n            hearts[i].y--;\n            hearts[i].scale += 0.004;\n            hearts[i].alpha -= 0.013;\n            hearts[i].el.style.cssText = \"left:\" + hearts[i].x + \"px;top:\" + hearts[i].y + \"px;opacity:\" + hearts[i]\n                .alpha + \";transform:scale(\" + hearts[i].scale + \",\" + hearts[i].scale +\n                \") rotate(45deg);background:\" + hearts[i].color;\n        }\n        requestAnimationFrame(gameloop);\n    }\n\n    function attachEvent() {\n        var old = typeof window.onclick === \"function\" && window.onclick;\n        window.onclick = function (event) {\n            old && old();\n            createHeart(event);\n        }\n    }\n\n    function createHeart(event) {\n        var d = document.createElement(\"div\");\n        d.className = \"heart\";\n        hearts.push({\n            el: d,\n            x: event.clientX - 5,\n            y: event.clientY - 5,\n            scale: 1,\n            alpha: 1,\n            color: randomColor()\n        });\n        document.body.appendChild(d);\n    }\n\n    function css(css) {\n        var style = document.createElement(\"style\");\n        style.type = \"text/css\";\n        try {\n            style.appendChild(document.createTextNode(css));\n        } catch (ex) {\n            style.styleSheet.cssText = css;\n        }\n        document.getElementsByTagName('head')[0].appendChild(style);\n    }\n\n    function randomColor() {\n        return \"rgb(\" + (~~(Math.random() * 255)) + \",\" + (~~(Math.random() * 255)) + \",\" + (~~(Math.random() * 255)) +\n            \")\";\n    }\n})(window, document);\n```\n\n\n\n再到\tthemes -> next（你的主题名文件夹） -> layout\n\n打开“_layout.swig”文件夹，在最后的 body 之前添加：\n\n```js\n<!-- 页面点击小红心 -->\n<script type=\"text/javascript\" src=\"/js/love.js\"></script>\n```\n\n","source":"_posts/Next主题博客美化.md","raw":"---\ntitle: Next主题博客美化\nabbrlink: e23f9c5e\ndate: 2022-06-25 14:26:36\ntags: 7\n---\n\n**优化美化博客插件推荐（自用）**\n\n<!--more-->\n\n# 唯一ID链接博文\n\n插件名及链接地址：[hexo-abbrlink](https://github.com/rozbo/hexo-abbrlink)\n\nGit Bash 输入：\n\n```\nnpm install hexo-abbrlink --save\n```\n\n站点config.yml添加：\n\n```\n# URL\n## Set your site url here. For example, if you use GitHub Page, set url as 'https://username.github.io/project'\nurl: http://example.com\npermalink: posts/:abbrlink.html\npermalink_defaults:\npretty_urls:\n  trailing_index: true # Set to false to remove trailing 'index.html' from permalinks\n  trailing_html: true # Set to false to remove trailing '.html' from permalinks\n\n## abbrlink config\nabbrlink:\n  alg: crc32      #support crc16(default) and crc32 进制\n  rep: hex        #support dec(default) and hex  算法\n  drafts: false   #(true)Process draft,(false)Do not process draft. false(default) \n  ## Generate categories from directory-tree\n  ## depth: the max_depth of directory-tree you want to generate, should > 0\n  auto_category:\n     enable: true  #true(default)\n     depth:        #3(default)\n     over_write: false \n  auto_title: false #enable auto title, it can auto fill the title by path\n  auto_date: false #enable auto date, it can auto fill the date by time today\n  force: false #enable force mode,in this mode, the plugin will ignore the cache, and calc the abbrlink for every post even it already had abbrlink.\n```\n\n------\n\n# 本地搜索功能\n\n插件名及链接地址：[hexo-generator-searchdb](https://github.com/theme-next/hexo-generator-searchdb)\n\nGit Bash 输入：\n\n```\nnpm install hexo-generator-searchdb --save\n```\n\n站点config.yml添加：\n\n```\nsearch:\n  path: search.xml\n  field: post\n  format: html\n  limit: 10000\n```\n\n------\n\n# 加密浏览博文\n\n插件名及链接地址：[hexo-blog-encrypt](https://github.com/D0n9X1n/hexo-blog-encrypt)\n\nGit Bash 输入：\n\n```\nnpm install hexo-blog-encrypt --save\n```\n\n站点config.yml添加：\n\n```\n# Security\nencrypt: # hexo-blog-encrypt\n  silent: true\n  abstract: 本文加密，请输入密码以查看！\n  message: 当前文章暂不对外可见，请输入密码后查看！\n  tags:\n  - {name: private, password: hello}\n  wrong_pass_message: 密码错误，请重新输入！\n  wrong_hash_message: 抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容！\n```\n\n------\n\n# 静态看板娘\n\n插件名及链接地址：[hexo-helper-live2d](https://github.com/EYHN/hexo-helper-live2d)\n\n看板娘模板：\n\n- `live2d-widget-model-chitose`\n- `live2d-widget-model-epsilon2_1`\n- `live2d-widget-model-gf`\n- `live2d-widget-model-haru/01` (use `npm install --save live2d-widget-model-haru`)\n- `live2d-widget-model-haru/02` (use `npm install --save live2d-widget-model-haru`)\n- `live2d-widget-model-haruto`\n- `live2d-widget-model-hibiki`\n- `live2d-widget-model-hijiki`\n- `live2d-widget-model-izumi`\n- `live2d-widget-model-koharu`\n- `live2d-widget-model-miku`\n- `live2d-widget-model-ni-j`\n- `live2d-widget-model-nico`\n- `live2d-widget-model-nietzsche`\n- `live2d-widget-model-nipsilon`\n- `live2d-widget-model-nito`\n- `live2d-widget-model-shizuku`\n- `live2d-widget-model-tororo`\n- `live2d-widget-model-tsumiki`\n- `live2d-widget-model-unitychan`\n- `live2d-widget-model-wanko`\n- `live2d-widget-model-z16`\n\n根据以上模板挑选并Git Bash 输入：\n\n```\nnpm install live2d-widget-model-您选择的模板名 --save\n```\n\nGit Bash 输入：\n\n```\nnpm install hexo-helper-live2d --save\n```\n\n站点config.yml添加：\n\n```\nlive2d:\n  enable: true    # 是否启用看板娘\n  scriptFrom: local    # 默认\n  pluginRootPath: live2dw/    # 插件在站点上的根目录(相对路径)\n  pluginJsPath: lib/    # 脚本文件相对与插件根目录路径\n  pluginModelPath: assets/    # 模型文件相对与插件根目录路径\n  # scriptFrom: jsdelivr    # jsdelivr CDN\n  # scriptFrom: unpkg    # unpkg CDN\n  # scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js    # 你的自定义 url\n  tagMode: false # 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中\n  debug: false # 调试, 是否在控制台输出日志\n  model:\n    use: live2d-widget-model-z16 # 根据自己选择并下载的模板改名！！！\n    scale: 1\n    hHeadPos: 0.5\n    vHeadPos: 0.618\n  display:\n    superSample: 2\n    width: 200\t# 宽\n    height: 400\t# 高\n    position: left    # 左侧还是右侧\n    hOffset: 0\n    vOffset: -10    # 距底部距离\n  mobile:\n    show: false    # 手机端是否可见，建议不可见否则可能影响阅读\n    scale: 0.5\n  react:\n    opacityDefault: 0.7\n    opacityOnHover: 0.2\n```\n\n------\n\n# 一键部署博客\n\n插件名及链接地址：[hexo-deployer-git](https://github.com/hexojs/hexo-deployer-git)\n\nGit Bash 输入：\n\n```\nnpm install hexo-deployer-git --save\n```\n\n站点config.yml配置：\n\n```\ndeploy:\n  type: git\n  repo: <仓库链接> # 可以是 https 链接也可以是 git 链接\n  branch: [分支] # GitHub 的网站分支为 gh-pages，其他网站可能有所不同\n  message: [message] # 默认是 Site updated: {{ now('YYYY-MM-DD HH:mm:ss') }}\n\n```\n\n------\n\n# 统计博文字数和阅读时长\n\n插件名及链接地址：[hexo-symbols-count-time](https://github.com/theme-next/hexo-symbols-count-time)\n\nGit Bash 输入：\n\n```\nnpm install hexo-symbols-count-time --save\n```\n\n站点config.yml添加：\n\n```\nsymbols_count_time:\n  symbols: true\n  time: true\n  total_symbols: true\n  total_time: true\n  exclude_codeblock: false\n  awl: 4\n  wpm: 275\n  suffix: \"mins.\"\n\n```\n\n------\n\n# sitemap浏览器爬取博客\n\n插件名及链接地址：[hexo-generator-sitemap](https://github.com/hexojs/hexo-generator-sitemap)\n\nGit Bash 输入：\n\n```\nnpm install hexo-generator-sitemap --save\n```\n\n站点config.yml添加：\n\n```\n# hexo-generator-sitemap\n## https://github.com/hexojs/hexo-generator-sitemap\nsitemap:\n  path: sitemap.xml\n  # template: ./sitemap_template.xml\n  rel: true\n  tags: false\n  categories: false\n```\n\n具体参考：https://ywang-wnlo.github.io/posts/abac0c46\n\n------\n\n# 鼠标左键点击爱心特效\n\nBlog文件夹 -> themes -> next（你的主题名文件夹） -> source -> js\n\n在js文件夹下新建一个“love.js”，并存入以下内容保存。\n\n```js\n(function (window, document, undefined) {\n    var hearts = [];\n    window.requestAnimationFrame = (function () {\n        return window.requestAnimationFrame ||\n            window.webkitRequestAnimationFrame ||\n            window.mozRequestAnimationFrame ||\n            window.oRequestAnimationFrame ||\n            window.msRequestAnimationFrame ||\n            function (callback) {\n                setTimeout(callback, 1000 / 60);\n            }\n    })();\n    init();\n\n    function init() {\n        css(\n            \".heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: absolute;}.heart:after{top: -5px;}.heart:before{left: -5px;}\"\n        );\n        attachEvent();\n        gameloop();\n    }\n\n    function gameloop() {\n        for (var i = 0; i < hearts.length; i++) {\n            if (hearts[i].alpha <= 0) {\n                document.body.removeChild(hearts[i].el);\n                hearts.splice(i, 1);\n                continue;\n            }\n            hearts[i].y--;\n            hearts[i].scale += 0.004;\n            hearts[i].alpha -= 0.013;\n            hearts[i].el.style.cssText = \"left:\" + hearts[i].x + \"px;top:\" + hearts[i].y + \"px;opacity:\" + hearts[i]\n                .alpha + \";transform:scale(\" + hearts[i].scale + \",\" + hearts[i].scale +\n                \") rotate(45deg);background:\" + hearts[i].color;\n        }\n        requestAnimationFrame(gameloop);\n    }\n\n    function attachEvent() {\n        var old = typeof window.onclick === \"function\" && window.onclick;\n        window.onclick = function (event) {\n            old && old();\n            createHeart(event);\n        }\n    }\n\n    function createHeart(event) {\n        var d = document.createElement(\"div\");\n        d.className = \"heart\";\n        hearts.push({\n            el: d,\n            x: event.clientX - 5,\n            y: event.clientY - 5,\n            scale: 1,\n            alpha: 1,\n            color: randomColor()\n        });\n        document.body.appendChild(d);\n    }\n\n    function css(css) {\n        var style = document.createElement(\"style\");\n        style.type = \"text/css\";\n        try {\n            style.appendChild(document.createTextNode(css));\n        } catch (ex) {\n            style.styleSheet.cssText = css;\n        }\n        document.getElementsByTagName('head')[0].appendChild(style);\n    }\n\n    function randomColor() {\n        return \"rgb(\" + (~~(Math.random() * 255)) + \",\" + (~~(Math.random() * 255)) + \",\" + (~~(Math.random() * 255)) +\n            \")\";\n    }\n})(window, document);\n```\n\n\n\n再到\tthemes -> next（你的主题名文件夹） -> layout\n\n打开“_layout.swig”文件夹，在最后的 body 之前添加：\n\n```js\n<!-- 页面点击小红心 -->\n<script type=\"text/javascript\" src=\"/js/love.js\"></script>\n```\n\n","slug":"Next主题博客美化","published":1,"updated":"2024-09-26T11:27:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm1rz0oew000718ql0b1hddgb","content":"<p><strong>优化美化博客插件推荐（自用）</strong></p>\n<span id=\"more\"></span>\n\n<h1 id=\"唯一ID链接博文\"><a href=\"#唯一ID链接博文\" class=\"headerlink\" title=\"唯一ID链接博文\"></a>唯一ID链接博文</h1><p>插件名及链接地址：<a href=\"https://github.com/rozbo/hexo-abbrlink\">hexo-abbrlink</a></p>\n<p>Git Bash 输入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>\n\n<p>站点config.yml添加：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># URL</span><br><span class=\"line\">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span><br><span class=\"line\">url: http://example.com</span><br><span class=\"line\">permalink: posts/:abbrlink.html</span><br><span class=\"line\">permalink_defaults:</span><br><span class=\"line\">pretty_urls:</span><br><span class=\"line\">  trailing_index: true # Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span><br><span class=\"line\">  trailing_html: true # Set to false to remove trailing &#x27;.html&#x27; from permalinks</span><br><span class=\"line\"></span><br><span class=\"line\">## abbrlink config</span><br><span class=\"line\">abbrlink:</span><br><span class=\"line\">  alg: crc32      #support crc16(default) and crc32 进制</span><br><span class=\"line\">  rep: hex        #support dec(default) and hex  算法</span><br><span class=\"line\">  drafts: false   #(true)Process draft,(false)Do not process draft. false(default) </span><br><span class=\"line\">  ## Generate categories from directory-tree</span><br><span class=\"line\">  ## depth: the max_depth of directory-tree you want to generate, should &gt; 0</span><br><span class=\"line\">  auto_category:</span><br><span class=\"line\">     enable: true  #true(default)</span><br><span class=\"line\">     depth:        #3(default)</span><br><span class=\"line\">     over_write: false </span><br><span class=\"line\">  auto_title: false #enable auto title, it can auto fill the title by path</span><br><span class=\"line\">  auto_date: false #enable auto date, it can auto fill the date by time today</span><br><span class=\"line\">  force: false #enable force mode,in this mode, the plugin will ignore the cache, and calc the abbrlink for every post even it already had abbrlink.</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"本地搜索功能\"><a href=\"#本地搜索功能\" class=\"headerlink\" title=\"本地搜索功能\"></a>本地搜索功能</h1><p>插件名及链接地址：<a href=\"https://github.com/theme-next/hexo-generator-searchdb\">hexo-generator-searchdb</a></p>\n<p>Git Bash 输入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>\n\n<p>站点config.yml添加：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">search:</span><br><span class=\"line\">  path: search.xml</span><br><span class=\"line\">  field: post</span><br><span class=\"line\">  format: html</span><br><span class=\"line\">  limit: 10000</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"加密浏览博文\"><a href=\"#加密浏览博文\" class=\"headerlink\" title=\"加密浏览博文\"></a>加密浏览博文</h1><p>插件名及链接地址：<a href=\"https://github.com/D0n9X1n/hexo-blog-encrypt\">hexo-blog-encrypt</a></p>\n<p>Git Bash 输入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-blog-encrypt --save</span><br></pre></td></tr></table></figure>\n\n<p>站点config.yml添加：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Security</span><br><span class=\"line\">encrypt: # hexo-blog-encrypt</span><br><span class=\"line\">  silent: true</span><br><span class=\"line\">  abstract: 本文加密，请输入密码以查看！</span><br><span class=\"line\">  message: 当前文章暂不对外可见，请输入密码后查看！</span><br><span class=\"line\">  tags:</span><br><span class=\"line\">  - &#123;name: private, password: hello&#125;</span><br><span class=\"line\">  wrong_pass_message: 密码错误，请重新输入！</span><br><span class=\"line\">  wrong_hash_message: 抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容！</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"静态看板娘\"><a href=\"#静态看板娘\" class=\"headerlink\" title=\"静态看板娘\"></a>静态看板娘</h1><p>插件名及链接地址：<a href=\"https://github.com/EYHN/hexo-helper-live2d\">hexo-helper-live2d</a></p>\n<p>看板娘模板：</p>\n<ul>\n<li><code>live2d-widget-model-chitose</code></li>\n<li><code>live2d-widget-model-epsilon2_1</code></li>\n<li><code>live2d-widget-model-gf</code></li>\n<li><code>live2d-widget-model-haru/01</code> (use <code>npm install --save live2d-widget-model-haru</code>)</li>\n<li><code>live2d-widget-model-haru/02</code> (use <code>npm install --save live2d-widget-model-haru</code>)</li>\n<li><code>live2d-widget-model-haruto</code></li>\n<li><code>live2d-widget-model-hibiki</code></li>\n<li><code>live2d-widget-model-hijiki</code></li>\n<li><code>live2d-widget-model-izumi</code></li>\n<li><code>live2d-widget-model-koharu</code></li>\n<li><code>live2d-widget-model-miku</code></li>\n<li><code>live2d-widget-model-ni-j</code></li>\n<li><code>live2d-widget-model-nico</code></li>\n<li><code>live2d-widget-model-nietzsche</code></li>\n<li><code>live2d-widget-model-nipsilon</code></li>\n<li><code>live2d-widget-model-nito</code></li>\n<li><code>live2d-widget-model-shizuku</code></li>\n<li><code>live2d-widget-model-tororo</code></li>\n<li><code>live2d-widget-model-tsumiki</code></li>\n<li><code>live2d-widget-model-unitychan</code></li>\n<li><code>live2d-widget-model-wanko</code></li>\n<li><code>live2d-widget-model-z16</code></li>\n</ul>\n<p>根据以上模板挑选并Git Bash 输入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install live2d-widget-model-您选择的模板名 --save</span><br></pre></td></tr></table></figure>\n\n<p>Git Bash 输入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-helper-live2d --save</span><br></pre></td></tr></table></figure>\n\n<p>站点config.yml添加：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">live2d:</span><br><span class=\"line\">  enable: true    # 是否启用看板娘</span><br><span class=\"line\">  scriptFrom: local    # 默认</span><br><span class=\"line\">  pluginRootPath: live2dw/    # 插件在站点上的根目录(相对路径)</span><br><span class=\"line\">  pluginJsPath: lib/    # 脚本文件相对与插件根目录路径</span><br><span class=\"line\">  pluginModelPath: assets/    # 模型文件相对与插件根目录路径</span><br><span class=\"line\">  # scriptFrom: jsdelivr    # jsdelivr CDN</span><br><span class=\"line\">  # scriptFrom: unpkg    # unpkg CDN</span><br><span class=\"line\">  # scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js    # 你的自定义 url</span><br><span class=\"line\">  tagMode: false # 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中</span><br><span class=\"line\">  debug: false # 调试, 是否在控制台输出日志</span><br><span class=\"line\">  model:</span><br><span class=\"line\">    use: live2d-widget-model-z16 # 根据自己选择并下载的模板改名！！！</span><br><span class=\"line\">    scale: 1</span><br><span class=\"line\">    hHeadPos: 0.5</span><br><span class=\"line\">    vHeadPos: 0.618</span><br><span class=\"line\">  display:</span><br><span class=\"line\">    superSample: 2</span><br><span class=\"line\">    width: 200\t# 宽</span><br><span class=\"line\">    height: 400\t# 高</span><br><span class=\"line\">    position: left    # 左侧还是右侧</span><br><span class=\"line\">    hOffset: 0</span><br><span class=\"line\">    vOffset: -10    # 距底部距离</span><br><span class=\"line\">  mobile:</span><br><span class=\"line\">    show: false    # 手机端是否可见，建议不可见否则可能影响阅读</span><br><span class=\"line\">    scale: 0.5</span><br><span class=\"line\">  react:</span><br><span class=\"line\">    opacityDefault: 0.7</span><br><span class=\"line\">    opacityOnHover: 0.2</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"一键部署博客\"><a href=\"#一键部署博客\" class=\"headerlink\" title=\"一键部署博客\"></a>一键部署博客</h1><p>插件名及链接地址：<a href=\"https://github.com/hexojs/hexo-deployer-git\">hexo-deployer-git</a></p>\n<p>Git Bash 输入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<p>站点config.yml配置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: &lt;仓库链接&gt; # 可以是 https 链接也可以是 git 链接</span><br><span class=\"line\">  branch: [分支] # GitHub 的网站分支为 gh-pages，其他网站可能有所不同</span><br><span class=\"line\">  message: [message] # 默认是 Site updated: &#123;&#123; now(&#x27;YYYY-MM-DD HH:mm:ss&#x27;) &#125;&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"统计博文字数和阅读时长\"><a href=\"#统计博文字数和阅读时长\" class=\"headerlink\" title=\"统计博文字数和阅读时长\"></a>统计博文字数和阅读时长</h1><p>插件名及链接地址：<a href=\"https://github.com/theme-next/hexo-symbols-count-time\">hexo-symbols-count-time</a></p>\n<p>Git Bash 输入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure>\n\n<p>站点config.yml添加：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">symbols_count_time:</span><br><span class=\"line\">  symbols: true</span><br><span class=\"line\">  time: true</span><br><span class=\"line\">  total_symbols: true</span><br><span class=\"line\">  total_time: true</span><br><span class=\"line\">  exclude_codeblock: false</span><br><span class=\"line\">  awl: 4</span><br><span class=\"line\">  wpm: 275</span><br><span class=\"line\">  suffix: &quot;mins.&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"sitemap浏览器爬取博客\"><a href=\"#sitemap浏览器爬取博客\" class=\"headerlink\" title=\"sitemap浏览器爬取博客\"></a>sitemap浏览器爬取博客</h1><p>插件名及链接地址：<a href=\"https://github.com/hexojs/hexo-generator-sitemap\">hexo-generator-sitemap</a></p>\n<p>Git Bash 输入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure>\n\n<p>站点config.yml添加：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># hexo-generator-sitemap</span><br><span class=\"line\">## https://github.com/hexojs/hexo-generator-sitemap</span><br><span class=\"line\">sitemap:</span><br><span class=\"line\">  path: sitemap.xml</span><br><span class=\"line\">  # template: ./sitemap_template.xml</span><br><span class=\"line\">  rel: true</span><br><span class=\"line\">  tags: false</span><br><span class=\"line\">  categories: false</span><br></pre></td></tr></table></figure>\n\n<p>具体参考：<a href=\"https://ywang-wnlo.github.io/posts/abac0c46\">https://ywang-wnlo.github.io/posts/abac0c46</a></p>\n<hr>\n<h1 id=\"鼠标左键点击爱心特效\"><a href=\"#鼠标左键点击爱心特效\" class=\"headerlink\" title=\"鼠标左键点击爱心特效\"></a>鼠标左键点击爱心特效</h1><p>Blog文件夹 -&gt; themes -&gt; next（你的主题名文件夹） -&gt; source -&gt; js</p>\n<p>在js文件夹下新建一个“love.js”，并存入以下内容保存。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">function</span> (<span class=\"params\"><span class=\"variable language_\">window</span>, <span class=\"variable language_\">document</span>, <span class=\"literal\">undefined</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> hearts = [];</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"property\">requestAnimationFrame</span> = (<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">window</span>.<span class=\"property\">requestAnimationFrame</span> ||</span><br><span class=\"line\">            <span class=\"variable language_\">window</span>.<span class=\"property\">webkitRequestAnimationFrame</span> ||</span><br><span class=\"line\">            <span class=\"variable language_\">window</span>.<span class=\"property\">mozRequestAnimationFrame</span> ||</span><br><span class=\"line\">            <span class=\"variable language_\">window</span>.<span class=\"property\">oRequestAnimationFrame</span> ||</span><br><span class=\"line\">            <span class=\"variable language_\">window</span>.<span class=\"property\">msRequestAnimationFrame</span> ||</span><br><span class=\"line\">            <span class=\"keyword\">function</span> (<span class=\"params\">callback</span>) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">setTimeout</span>(callback, <span class=\"number\">1000</span> / <span class=\"number\">60</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;)();</span><br><span class=\"line\">    <span class=\"title function_\">init</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">init</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">css</span>(</span><br><span class=\"line\">            <span class=\"string\">&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: absolute;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;</span></span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"title function_\">attachEvent</span>();</span><br><span class=\"line\">        <span class=\"title function_\">gameloop</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">gameloop</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; hearts.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (hearts[i].<span class=\"property\">alpha</span> &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">removeChild</span>(hearts[i].<span class=\"property\">el</span>);</span><br><span class=\"line\">                hearts.<span class=\"title function_\">splice</span>(i, <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            hearts[i].<span class=\"property\">y</span>--;</span><br><span class=\"line\">            hearts[i].<span class=\"property\">scale</span> += <span class=\"number\">0.004</span>;</span><br><span class=\"line\">            hearts[i].<span class=\"property\">alpha</span> -= <span class=\"number\">0.013</span>;</span><br><span class=\"line\">            hearts[i].<span class=\"property\">el</span>.<span class=\"property\">style</span>.<span class=\"property\">cssText</span> = <span class=\"string\">&quot;left:&quot;</span> + hearts[i].<span class=\"property\">x</span> + <span class=\"string\">&quot;px;top:&quot;</span> + hearts[i].<span class=\"property\">y</span> + <span class=\"string\">&quot;px;opacity:&quot;</span> + hearts[i]</span><br><span class=\"line\">                .<span class=\"property\">alpha</span> + <span class=\"string\">&quot;;transform:scale(&quot;</span> + hearts[i].<span class=\"property\">scale</span> + <span class=\"string\">&quot;,&quot;</span> + hearts[i].<span class=\"property\">scale</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;) rotate(45deg);background:&quot;</span> + hearts[i].<span class=\"property\">color</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">requestAnimationFrame</span>(gameloop);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">attachEvent</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> old = <span class=\"keyword\">typeof</span> <span class=\"variable language_\">window</span>.<span class=\"property\">onclick</span> === <span class=\"string\">&quot;function&quot;</span> &amp;&amp; <span class=\"variable language_\">window</span>.<span class=\"property\">onclick</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">window</span>.<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span> (<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">            old &amp;&amp; <span class=\"title function_\">old</span>();</span><br><span class=\"line\">            <span class=\"title function_\">createHeart</span>(event);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">createHeart</span>(<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> d = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;div&quot;</span>);</span><br><span class=\"line\">        d.<span class=\"property\">className</span> = <span class=\"string\">&quot;heart&quot;</span>;</span><br><span class=\"line\">        hearts.<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">el</span>: d,</span><br><span class=\"line\">            <span class=\"attr\">x</span>: event.<span class=\"property\">clientX</span> - <span class=\"number\">5</span>,</span><br><span class=\"line\">            <span class=\"attr\">y</span>: event.<span class=\"property\">clientY</span> - <span class=\"number\">5</span>,</span><br><span class=\"line\">            <span class=\"attr\">scale</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"attr\">alpha</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"attr\">color</span>: <span class=\"title function_\">randomColor</span>()</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(d);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">css</span>(<span class=\"params\">css</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> style = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;style&quot;</span>);</span><br><span class=\"line\">        style.<span class=\"property\">type</span> = <span class=\"string\">&quot;text/css&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            style.<span class=\"title function_\">appendChild</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">createTextNode</span>(css));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ex) &#123;</span><br><span class=\"line\">            style.<span class=\"property\">styleSheet</span>.<span class=\"property\">cssText</span> = css;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&#x27;head&#x27;</span>)[<span class=\"number\">0</span>].<span class=\"title function_\">appendChild</span>(style);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">randomColor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;rgb(&quot;</span> + (~~(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"number\">255</span>)) + <span class=\"string\">&quot;,&quot;</span> + (~~(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"number\">255</span>)) + <span class=\"string\">&quot;,&quot;</span> + (~~(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"number\">255</span>)) +</span><br><span class=\"line\">            <span class=\"string\">&quot;)&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)(<span class=\"variable language_\">window</span>, <span class=\"variable language_\">document</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<p>再到\tthemes -&gt; next（你的主题名文件夹） -&gt; layout</p>\n<p>打开“_layout.swig”文件夹，在最后的 body 之前添加：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 页面点击小红心 --&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/js/love.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"length":6636,"excerpt":"<p><strong>优化美化博客插件推荐（自用）</strong></p>","more":"<h1 id=\"唯一ID链接博文\"><a href=\"#唯一ID链接博文\" class=\"headerlink\" title=\"唯一ID链接博文\"></a>唯一ID链接博文</h1><p>插件名及链接地址：<a href=\"https://github.com/rozbo/hexo-abbrlink\">hexo-abbrlink</a></p>\n<p>Git Bash 输入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>\n\n<p>站点config.yml添加：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># URL</span><br><span class=\"line\">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span><br><span class=\"line\">url: http://example.com</span><br><span class=\"line\">permalink: posts/:abbrlink.html</span><br><span class=\"line\">permalink_defaults:</span><br><span class=\"line\">pretty_urls:</span><br><span class=\"line\">  trailing_index: true # Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span><br><span class=\"line\">  trailing_html: true # Set to false to remove trailing &#x27;.html&#x27; from permalinks</span><br><span class=\"line\"></span><br><span class=\"line\">## abbrlink config</span><br><span class=\"line\">abbrlink:</span><br><span class=\"line\">  alg: crc32      #support crc16(default) and crc32 进制</span><br><span class=\"line\">  rep: hex        #support dec(default) and hex  算法</span><br><span class=\"line\">  drafts: false   #(true)Process draft,(false)Do not process draft. false(default) </span><br><span class=\"line\">  ## Generate categories from directory-tree</span><br><span class=\"line\">  ## depth: the max_depth of directory-tree you want to generate, should &gt; 0</span><br><span class=\"line\">  auto_category:</span><br><span class=\"line\">     enable: true  #true(default)</span><br><span class=\"line\">     depth:        #3(default)</span><br><span class=\"line\">     over_write: false </span><br><span class=\"line\">  auto_title: false #enable auto title, it can auto fill the title by path</span><br><span class=\"line\">  auto_date: false #enable auto date, it can auto fill the date by time today</span><br><span class=\"line\">  force: false #enable force mode,in this mode, the plugin will ignore the cache, and calc the abbrlink for every post even it already had abbrlink.</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"本地搜索功能\"><a href=\"#本地搜索功能\" class=\"headerlink\" title=\"本地搜索功能\"></a>本地搜索功能</h1><p>插件名及链接地址：<a href=\"https://github.com/theme-next/hexo-generator-searchdb\">hexo-generator-searchdb</a></p>\n<p>Git Bash 输入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>\n\n<p>站点config.yml添加：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">search:</span><br><span class=\"line\">  path: search.xml</span><br><span class=\"line\">  field: post</span><br><span class=\"line\">  format: html</span><br><span class=\"line\">  limit: 10000</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"加密浏览博文\"><a href=\"#加密浏览博文\" class=\"headerlink\" title=\"加密浏览博文\"></a>加密浏览博文</h1><p>插件名及链接地址：<a href=\"https://github.com/D0n9X1n/hexo-blog-encrypt\">hexo-blog-encrypt</a></p>\n<p>Git Bash 输入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-blog-encrypt --save</span><br></pre></td></tr></table></figure>\n\n<p>站点config.yml添加：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Security</span><br><span class=\"line\">encrypt: # hexo-blog-encrypt</span><br><span class=\"line\">  silent: true</span><br><span class=\"line\">  abstract: 本文加密，请输入密码以查看！</span><br><span class=\"line\">  message: 当前文章暂不对外可见，请输入密码后查看！</span><br><span class=\"line\">  tags:</span><br><span class=\"line\">  - &#123;name: private, password: hello&#125;</span><br><span class=\"line\">  wrong_pass_message: 密码错误，请重新输入！</span><br><span class=\"line\">  wrong_hash_message: 抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容！</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"静态看板娘\"><a href=\"#静态看板娘\" class=\"headerlink\" title=\"静态看板娘\"></a>静态看板娘</h1><p>插件名及链接地址：<a href=\"https://github.com/EYHN/hexo-helper-live2d\">hexo-helper-live2d</a></p>\n<p>看板娘模板：</p>\n<ul>\n<li><code>live2d-widget-model-chitose</code></li>\n<li><code>live2d-widget-model-epsilon2_1</code></li>\n<li><code>live2d-widget-model-gf</code></li>\n<li><code>live2d-widget-model-haru/01</code> (use <code>npm install --save live2d-widget-model-haru</code>)</li>\n<li><code>live2d-widget-model-haru/02</code> (use <code>npm install --save live2d-widget-model-haru</code>)</li>\n<li><code>live2d-widget-model-haruto</code></li>\n<li><code>live2d-widget-model-hibiki</code></li>\n<li><code>live2d-widget-model-hijiki</code></li>\n<li><code>live2d-widget-model-izumi</code></li>\n<li><code>live2d-widget-model-koharu</code></li>\n<li><code>live2d-widget-model-miku</code></li>\n<li><code>live2d-widget-model-ni-j</code></li>\n<li><code>live2d-widget-model-nico</code></li>\n<li><code>live2d-widget-model-nietzsche</code></li>\n<li><code>live2d-widget-model-nipsilon</code></li>\n<li><code>live2d-widget-model-nito</code></li>\n<li><code>live2d-widget-model-shizuku</code></li>\n<li><code>live2d-widget-model-tororo</code></li>\n<li><code>live2d-widget-model-tsumiki</code></li>\n<li><code>live2d-widget-model-unitychan</code></li>\n<li><code>live2d-widget-model-wanko</code></li>\n<li><code>live2d-widget-model-z16</code></li>\n</ul>\n<p>根据以上模板挑选并Git Bash 输入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install live2d-widget-model-您选择的模板名 --save</span><br></pre></td></tr></table></figure>\n\n<p>Git Bash 输入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-helper-live2d --save</span><br></pre></td></tr></table></figure>\n\n<p>站点config.yml添加：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">live2d:</span><br><span class=\"line\">  enable: true    # 是否启用看板娘</span><br><span class=\"line\">  scriptFrom: local    # 默认</span><br><span class=\"line\">  pluginRootPath: live2dw/    # 插件在站点上的根目录(相对路径)</span><br><span class=\"line\">  pluginJsPath: lib/    # 脚本文件相对与插件根目录路径</span><br><span class=\"line\">  pluginModelPath: assets/    # 模型文件相对与插件根目录路径</span><br><span class=\"line\">  # scriptFrom: jsdelivr    # jsdelivr CDN</span><br><span class=\"line\">  # scriptFrom: unpkg    # unpkg CDN</span><br><span class=\"line\">  # scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js    # 你的自定义 url</span><br><span class=\"line\">  tagMode: false # 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中</span><br><span class=\"line\">  debug: false # 调试, 是否在控制台输出日志</span><br><span class=\"line\">  model:</span><br><span class=\"line\">    use: live2d-widget-model-z16 # 根据自己选择并下载的模板改名！！！</span><br><span class=\"line\">    scale: 1</span><br><span class=\"line\">    hHeadPos: 0.5</span><br><span class=\"line\">    vHeadPos: 0.618</span><br><span class=\"line\">  display:</span><br><span class=\"line\">    superSample: 2</span><br><span class=\"line\">    width: 200\t# 宽</span><br><span class=\"line\">    height: 400\t# 高</span><br><span class=\"line\">    position: left    # 左侧还是右侧</span><br><span class=\"line\">    hOffset: 0</span><br><span class=\"line\">    vOffset: -10    # 距底部距离</span><br><span class=\"line\">  mobile:</span><br><span class=\"line\">    show: false    # 手机端是否可见，建议不可见否则可能影响阅读</span><br><span class=\"line\">    scale: 0.5</span><br><span class=\"line\">  react:</span><br><span class=\"line\">    opacityDefault: 0.7</span><br><span class=\"line\">    opacityOnHover: 0.2</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"一键部署博客\"><a href=\"#一键部署博客\" class=\"headerlink\" title=\"一键部署博客\"></a>一键部署博客</h1><p>插件名及链接地址：<a href=\"https://github.com/hexojs/hexo-deployer-git\">hexo-deployer-git</a></p>\n<p>Git Bash 输入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<p>站点config.yml配置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: &lt;仓库链接&gt; # 可以是 https 链接也可以是 git 链接</span><br><span class=\"line\">  branch: [分支] # GitHub 的网站分支为 gh-pages，其他网站可能有所不同</span><br><span class=\"line\">  message: [message] # 默认是 Site updated: &#123;&#123; now(&#x27;YYYY-MM-DD HH:mm:ss&#x27;) &#125;&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"统计博文字数和阅读时长\"><a href=\"#统计博文字数和阅读时长\" class=\"headerlink\" title=\"统计博文字数和阅读时长\"></a>统计博文字数和阅读时长</h1><p>插件名及链接地址：<a href=\"https://github.com/theme-next/hexo-symbols-count-time\">hexo-symbols-count-time</a></p>\n<p>Git Bash 输入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure>\n\n<p>站点config.yml添加：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">symbols_count_time:</span><br><span class=\"line\">  symbols: true</span><br><span class=\"line\">  time: true</span><br><span class=\"line\">  total_symbols: true</span><br><span class=\"line\">  total_time: true</span><br><span class=\"line\">  exclude_codeblock: false</span><br><span class=\"line\">  awl: 4</span><br><span class=\"line\">  wpm: 275</span><br><span class=\"line\">  suffix: &quot;mins.&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"sitemap浏览器爬取博客\"><a href=\"#sitemap浏览器爬取博客\" class=\"headerlink\" title=\"sitemap浏览器爬取博客\"></a>sitemap浏览器爬取博客</h1><p>插件名及链接地址：<a href=\"https://github.com/hexojs/hexo-generator-sitemap\">hexo-generator-sitemap</a></p>\n<p>Git Bash 输入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure>\n\n<p>站点config.yml添加：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># hexo-generator-sitemap</span><br><span class=\"line\">## https://github.com/hexojs/hexo-generator-sitemap</span><br><span class=\"line\">sitemap:</span><br><span class=\"line\">  path: sitemap.xml</span><br><span class=\"line\">  # template: ./sitemap_template.xml</span><br><span class=\"line\">  rel: true</span><br><span class=\"line\">  tags: false</span><br><span class=\"line\">  categories: false</span><br></pre></td></tr></table></figure>\n\n<p>具体参考：<a href=\"https://ywang-wnlo.github.io/posts/abac0c46\">https://ywang-wnlo.github.io/posts/abac0c46</a></p>\n<hr>\n<h1 id=\"鼠标左键点击爱心特效\"><a href=\"#鼠标左键点击爱心特效\" class=\"headerlink\" title=\"鼠标左键点击爱心特效\"></a>鼠标左键点击爱心特效</h1><p>Blog文件夹 -&gt; themes -&gt; next（你的主题名文件夹） -&gt; source -&gt; js</p>\n<p>在js文件夹下新建一个“love.js”，并存入以下内容保存。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">function</span> (<span class=\"params\"><span class=\"variable language_\">window</span>, <span class=\"variable language_\">document</span>, <span class=\"literal\">undefined</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> hearts = [];</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"property\">requestAnimationFrame</span> = (<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">window</span>.<span class=\"property\">requestAnimationFrame</span> ||</span><br><span class=\"line\">            <span class=\"variable language_\">window</span>.<span class=\"property\">webkitRequestAnimationFrame</span> ||</span><br><span class=\"line\">            <span class=\"variable language_\">window</span>.<span class=\"property\">mozRequestAnimationFrame</span> ||</span><br><span class=\"line\">            <span class=\"variable language_\">window</span>.<span class=\"property\">oRequestAnimationFrame</span> ||</span><br><span class=\"line\">            <span class=\"variable language_\">window</span>.<span class=\"property\">msRequestAnimationFrame</span> ||</span><br><span class=\"line\">            <span class=\"keyword\">function</span> (<span class=\"params\">callback</span>) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">setTimeout</span>(callback, <span class=\"number\">1000</span> / <span class=\"number\">60</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;)();</span><br><span class=\"line\">    <span class=\"title function_\">init</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">init</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">css</span>(</span><br><span class=\"line\">            <span class=\"string\">&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: absolute;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;</span></span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"title function_\">attachEvent</span>();</span><br><span class=\"line\">        <span class=\"title function_\">gameloop</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">gameloop</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; hearts.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (hearts[i].<span class=\"property\">alpha</span> &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">removeChild</span>(hearts[i].<span class=\"property\">el</span>);</span><br><span class=\"line\">                hearts.<span class=\"title function_\">splice</span>(i, <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            hearts[i].<span class=\"property\">y</span>--;</span><br><span class=\"line\">            hearts[i].<span class=\"property\">scale</span> += <span class=\"number\">0.004</span>;</span><br><span class=\"line\">            hearts[i].<span class=\"property\">alpha</span> -= <span class=\"number\">0.013</span>;</span><br><span class=\"line\">            hearts[i].<span class=\"property\">el</span>.<span class=\"property\">style</span>.<span class=\"property\">cssText</span> = <span class=\"string\">&quot;left:&quot;</span> + hearts[i].<span class=\"property\">x</span> + <span class=\"string\">&quot;px;top:&quot;</span> + hearts[i].<span class=\"property\">y</span> + <span class=\"string\">&quot;px;opacity:&quot;</span> + hearts[i]</span><br><span class=\"line\">                .<span class=\"property\">alpha</span> + <span class=\"string\">&quot;;transform:scale(&quot;</span> + hearts[i].<span class=\"property\">scale</span> + <span class=\"string\">&quot;,&quot;</span> + hearts[i].<span class=\"property\">scale</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;) rotate(45deg);background:&quot;</span> + hearts[i].<span class=\"property\">color</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">requestAnimationFrame</span>(gameloop);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">attachEvent</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> old = <span class=\"keyword\">typeof</span> <span class=\"variable language_\">window</span>.<span class=\"property\">onclick</span> === <span class=\"string\">&quot;function&quot;</span> &amp;&amp; <span class=\"variable language_\">window</span>.<span class=\"property\">onclick</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">window</span>.<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span> (<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">            old &amp;&amp; <span class=\"title function_\">old</span>();</span><br><span class=\"line\">            <span class=\"title function_\">createHeart</span>(event);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">createHeart</span>(<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> d = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;div&quot;</span>);</span><br><span class=\"line\">        d.<span class=\"property\">className</span> = <span class=\"string\">&quot;heart&quot;</span>;</span><br><span class=\"line\">        hearts.<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">el</span>: d,</span><br><span class=\"line\">            <span class=\"attr\">x</span>: event.<span class=\"property\">clientX</span> - <span class=\"number\">5</span>,</span><br><span class=\"line\">            <span class=\"attr\">y</span>: event.<span class=\"property\">clientY</span> - <span class=\"number\">5</span>,</span><br><span class=\"line\">            <span class=\"attr\">scale</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"attr\">alpha</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"attr\">color</span>: <span class=\"title function_\">randomColor</span>()</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(d);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">css</span>(<span class=\"params\">css</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> style = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;style&quot;</span>);</span><br><span class=\"line\">        style.<span class=\"property\">type</span> = <span class=\"string\">&quot;text/css&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            style.<span class=\"title function_\">appendChild</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">createTextNode</span>(css));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ex) &#123;</span><br><span class=\"line\">            style.<span class=\"property\">styleSheet</span>.<span class=\"property\">cssText</span> = css;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&#x27;head&#x27;</span>)[<span class=\"number\">0</span>].<span class=\"title function_\">appendChild</span>(style);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">randomColor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;rgb(&quot;</span> + (~~(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"number\">255</span>)) + <span class=\"string\">&quot;,&quot;</span> + (~~(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"number\">255</span>)) + <span class=\"string\">&quot;,&quot;</span> + (~~(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"number\">255</span>)) +</span><br><span class=\"line\">            <span class=\"string\">&quot;)&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)(<span class=\"variable language_\">window</span>, <span class=\"variable language_\">document</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<p>再到\tthemes -&gt; next（你的主题名文件夹） -&gt; layout</p>\n<p>打开“_layout.swig”文件夹，在最后的 body 之前添加：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 页面点击小红心 --&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/js/love.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>"},{"title":"Python学习","abbrlink":"e39e2a4e","date":"2022-06-15T08:08:28.000Z","_content":"\n**Python的学习记录**\n\n<!--more-->\n\n# Python数据结构\n\n## 时间复杂度\n\n```markdown\n时间复杂度：是用来估计算法运行时间的一个式子\n\n一般来说，时间复杂度高的算法比复杂度低的算法慢\n\n常见时间复杂度效率排序（由高到低）：\nO(1) < O(log2^n) < O(n) < O(n * log2^n) < O(n^2) < O(n^2 * log2^n) < O(n^3)\n\n\n快速判断算法时间复杂度：\n确定问题规模n\n循环减半---->>log n\nk层关于n的循环---->>n^k\n\n\n空间复杂度：用来评估算法内存占用大小的式子\n\n算法使用了几个变量：O(1)\n算法使用了长度为n的一维列表：O(n)\n算法使用了m行n列的二维列表：O(mn)\n```\n\n------\n\n## 递归\n\n函数的嵌套调用，在函数中调用它自身\n\n```python\ndef func1(x):\n    if x > 0:\n        func1(x-1)\n        print(x)\n\ndef func2(y):\n    if y > 0:\n        print(y)\n        func2(y-1)\n```\n\n递归：计算1+2+...+100的值\n\n```python\ndef sum_int(n):\n    if n > 0:\n        return n + sum_int(n-1)\n    else:\n        return 0\n```\n\n递归：汉诺塔问题实例\n\n```python\n\"\"\"\n汉诺塔问题\n有n个大小不同的碗，三个盘子，需要将n个碗从一个盘子，保持原样的移动到另一个盘子中去，不改变原本n个碗的摆放顺序\n    初始 : n个碗由上到下，由小至大放置于一个盘子之上\n    结果 : 在不改变n个碗的摆放顺序的条件下，将所有n个碗\"平移\"到另一个盘子之上\n        要求 : 一次只能移动一个碗，且小碗必须在大碗上面\n\"\"\"\n\n\"\"\"\n例:\n现有 A B C 三个盘子，a(小碗) b(中碗) c(大碗) 三个碗，\n初始: abc摞在A上\n过程:\n    a -> C | b -> B | a -> B | c -> C | a -> A | b -> C | a -> C\n结束: 原在A上的abc，平移至C上，共计如上移动了七次\n\"\"\"\n\n\"\"\"\n当有n个碗需要平移时，可以近似将n个碗拆分成 最大的第n个碗 和 其他(n-1)个碗\n此时类似于\n    第一步 : (n-1)个碗 从A 经过C 至B\n    第二步 : 最大的第n个碗 从A 至C\n    第三步 : (n-1)个碗 从B 经过A 至C\n\"\"\"\ndef hanoi(n, a, b, c):  # 定义的参数的意思是(n个碗， 从盘子a， 经过盘子b， 到达盘子c)\n\n    if n > 0:  # 碗的数量大于0，才有后续递归。即递归终止的条件\n        hanoi(n-1, a, c, b)  # 对应上述第一步:从a 经过c 到达b\n        print(\"从 %s 到 %s\" % (a, c))\n        hanoi(n-1, b, a, c)  # 对应上述第三步:从b 经过a 到达c\n\nhanoi(3, \"A\", \"B\", \"C\")\n```\n\n------\n\n# Python算法\n\n**查找:在一些数据元素中，通过一定的方法找出与给定关键字相同的数据元素的过程**\n\n列表查找(线性表查找):从列表中查找指定元素\n    输入:列表、待查找元素\n    输出:元素下标(未找到元素时一般返回None或-1)\n\n**Python内置列表查找函数: index()**\n\n## 线性查找\n\n```python\n# 线性查找(linear_search)：从列表第一个元素开始，顺序进行搜索，直到找到元素或搜索到列表最后一个元素为止。\n# 时间复杂度 O(n)\ndef linear_search(li, val):\n    for ind, v in enumerate(li):  # enumerate()是Python的内置函数\n        if v == val:\n            return ind\n    else:\n        return None\n\n\n不用enumerate()函数的代码:\n\ndef linear_search(list_str, n, val):\n    for i in range(0, n):\n        if (list_str[i] == val):\n            return i\n    return -1\n```\n\n## 二分查找\n\n```python\n# 二分查找的对象必须为 【！！！ 有序列表 ！！！】\n# 二分查找(Binary_search):又叫折半查找，从有序列表的初始候选区li[0:n]开始，通过对待查找的值与候选区中间值的比较，可以使候选区减少一半\n# 时间复杂度 O(log n)\ndef binary_search(li, val):\n    left = 0\n    right = len(li) - 1\n    while left <= right:  # 候选区有值\n        mid = (left + right) // 2\n        if li[mid] == val:\n            return mid\n        elif li[mid] > val:\n            right = mid - 1  # 待查找的值在mid左侧\n        else:  # li(mid) < val 待查找的值在mid右侧\n            left = mid + 1\n    else:\n        return None\n```\n\n------\n\n**排序 : 将一组 无序 的记录序列调整为 有序 的记录序列**\n\n列表排序 : 将无序列表变为有序列表\n    输入 : 列表\n    输出 : 有序列表\n\n升序与降序\n\n**Python内置排序函数 : sort()**\n\n常见排序算法：冒泡排序，选择排序，插入排序\n            快速排序，堆排序，归并排序\n            希尔排序，计数排序，基数排序\n\n## 冒泡排序\n\n```python\n\"\"\"\n冒泡排序Bubble Sort         时间复杂度O(n^2)\n\n列表每两个相邻的数，如果前面的比后面的大，则交换这两个数\n\n一趟排序完成后，则无序区减少一个数，有序区增加一个数\n\"\"\"\n\ndef bubble_sort(li):\n    for i in range(len(li)-1):  # 第i趟\n        for j in range(len(li)-i-1):\n            if li[j] > li[j+1]:  # j > j+1 为升序排序，改为j < j+1 则为降序排序\n                li[j], li[j+1] = li[j+1], li[j]\n        print(li)  # 打印每一趟排序\n```\n\n## 选择排序\n\n```python\n\"\"\"\n选择排序select sort         时间复杂度O(n^2)\n\n依次遍历列表，每次遍历返回一个最小的元素，再遍历剩下元素找到剩下元素中最小的，循环直到遍历全部最小的元素\n\"\"\"\ndef select_sort(li):\n    for i in range(len(li)-1):  # i是第几趟\n        min_loc = i\n        for j in range(i, len(li)):\n            if li[j] < li[min_loc]:\n                min_loc = j\n        li[i], li[min_loc] = li[min_loc], li[i]\n        print(li)\n```\n\n## 插入排序\n\n```python\n\"\"\"\n插入排序insert sort         时间复杂度O(n^2)\n\n初始有序区只有一个元素，从无序区拿来一个元素，按有序插入原有序区，如此循环\n\n\"\"\"\n\ndef insert_sort(li):\n    for i in range(1, len(li)):  # i 表示拿到的元素的下标\n        tmp = li[i]\n        j = i - 1  # j 指的是已存入有序区的元素\n        while j >= 0 and li[j] > tmp:\n            li[j+1] = li[j]\n            j -= 1\n        li[j+1] = tmp\n        print(li)\n```\n\n## 快速排序\n\n```python\n\"\"\"\n快速排序quick sort:         时间复杂度O(n * log n)\n取一个元素p（第一个元素），使元素p归位\n列表被p分成左右两个部分，左边都比p小，右边都比p大。递归完成排序。\n\"\"\"\ndef partition(li, left, right):  # left左指针对应0号元素，right右指针对应n-1号元素\n    tmp = li[left]\n\n    while left < right:\n        while left < right and li[right] >= tmp:  # 从右边找比tmp小的数\n            right -= 1           # 往左走一步\n        li[left] = li[right]  # 把右边的值写到左边空位上\n        # print(li)\n\n        while left < right and li[left] <= tmp:   # 从左边找比tmp大的数\n            left += 1            # 往右走一步\n        li[right] = li[left]  # 把左边的值写到右边空位上\n        # print(li)\n\n    li[left] = tmp  # 把tmp归位\n    return left\n\n\ndef quick_sort(li, left, right):\n    if left < right:  # 表示列表至少有两个元素\n        mid = partition(li, left, right)\n        quick_sort(li, left, mid-1)\n        quick_sort(li, mid+1, right)\n```\n\n## 堆排序\n\n```python\n\"\"\"\n堆排序的过程：         时间复杂度O(n * log n)\n        建立堆\n        得到堆顶元素，为最大元素\n        去掉堆顶，将堆最后一个元素放到堆顶，此时可通过一次调整重新使堆有序\n        堆顶元素为第二大元素\n        重复\"去掉堆顶...\"操作，直到堆变空\n\"\"\"\ndef sift(li, low, high):\n    \"\"\"\n    :param li: 列表\n    :param low: 堆的根节点的位置\n    :param high: 堆的最后一个元素的位置\n    :return:\n    \"\"\"\n    i = low  # i最开始指向根节点\n    j = 2 * i + 1  # j开始是i的左孩子\n    tmp = li[low]  # 把堆顶存起来\n    while j <= high:  # 只要j位置有数\n        if j + 1 <= high and li[j+1] > li[j]:  # 如果右孩子存在且比左孩子大\n            j = j + 1  # 将j指向右孩子\n        if li[j] > tmp:\n            li[i] = li[j]\n            i = j  # 往下看一层\n            j = 2 * i + 1\n        else:  # tmp更大，把tmp放到i的位置上\n            li[i] = tmp  # 把tmp放到某一级领导位置上\n            break\n    else:\n        li[i] = tmp  # 把tmp放到叶子节点上\n\ndef heap_sort(li):\n    n = len(li)\n    for i in range((n-2)//2, -1, -1):\n        # i表示建堆的时候调整的部分的根的下标\n        sift(li, i, n-1)\n    # 建堆完成\n    for i in range(n-1, -1, -1):\n        li[0], li[i] = li[i], li[0]\n        sift(li, 0, i-1)\n```\n\n## 归并排序\n\n```python\n\"\"\"\n将列表由mid分为两边low, high\n由low->mid，mid+1->high两部分\n\n时间复杂度O(n * log n)\n空间复杂度O(n)\n\n分解：将列表越分越小，直至分成一个元素\n终止条件：一个元素是有序的\n合并：将两个有序列表归并，列表越来越大\n\"\"\"\ndef merge(li, low, mid, high):\n    i = low\n    j = mid + 1\n    ltmp = []\n    while i <= mid and j <= high:\n        if li[i] < li[j]:\n            ltmp.append(li[i])\n            i += 1\n        else:\n            ltmp.append(li[j])\n            j += 1\n    # while执行完后，左半和右半肯定有一部分没有可比较元素\n    while i <= mid:\n        ltmp.append(li[i])\n        i += 1\n    while j <= high:\n        ltmp.append(li[j])\n        j += 1\n    li[low:high+1] = ltmp\n\ndef merge_sort(li, low, high):\n    if low < high:  # 至少有两个元素\n        mid = (low + high) // 2\n        merge_sort(li, low, mid)\n        merge_sort(li, mid+1, high)\n        merge(li, low, mid, high)\n```\n\n------\n\n# Python实战\n\n## 名片管理系统(基础)\n\n### 实现的功能\n\n1. 无限循环实现系统的连续操作\n2. 实现系统基本的增删改查和显示功能\n\n### cards_main.py\n\n```python\nimport cards_tools\n# 无限循环方法\nwhile True:\n\n    # 主界面显示\n    cards_tools.show_menu()\n\n    user = input(\"请选择将要进行的操作:\")\n    print(\"您选择的操作是 %s\" % user)\n\n    # 系统执行操作1、2、3\n    if user in [\"1\", \"2\", \"3\"]:\n\n        # 新增名片功能\n        if user == \"1\":\n            cards_tools.new_card()\n        # 显示名片功能\n        elif user == \"2\":\n            cards_tools.show_card()\n        # 查询名片功能\n        elif user == \"3\":\n            cards_tools.search_card()\n\n    # 退出系统\n    elif user == \"0\":\n        print(\"欢迎再次使用【名片管理系统】\")\n        break\n\n    # 用户输入错误3\n    else:\n        print(\"输入错误，请重新输入\")\n```\n\n### cards_tools.py\n\n```python\ncard_list = []\n\n\ndef show_menu():\n\n    \"\"\"主界面的显示\"\"\"\n    print(\"* \" * 15)\n    print(\"    欢迎使用【名片管理系统】\")\n    print(\"\")\n    print(\"        1.新增名片\")\n    print(\"        2.显示名片\")\n    print(\"        3.查找名片\")\n    print(\"\")\n    print(\"        0.退出系统\")\n    print(\"* \" * 15)\n\n\ndef new_card():\n\n    \"\"\"新增名片\"\"\"\n    print(\"1.新增名片\")\n\n    # 1.用户依次输入名片的所有信息\n    name = input(\"请输入用户的姓名:\")\n    phone = input(\"请输入用户的电话号码:\")\n    qq = input(\"请输入用户的qq号码:\")\n    email = input(\"请输入用户的邮箱:\")\n\n    # 2.新建一个字典用于保存用户的输入\n    card_dict = {\"name\": name,\n                 \"phone\": phone,\n                 \"qq\": qq,\n                 \"email\": email}\n\n    # 3.将该字典的信息存放到数组上\n    card_list.append(card_dict)\n\n    print(card_list)\n\n    # 4.提示用户添加成功\n    print(\"用户 %s 的信息添加成功\" % name)\n\n\ndef show_card():\n\n    \"\"\"显示名片\"\"\"\n    print(\"2.显示名片\")\n    print(\"- \" * 15)\n\n    # 判断是否存在名片信息记录，若没有，提示用户返回\n    if len(card_list) == 0:\n        print(\"当前没有任何名片，请使用新增功能先添加名片再进行后续操作！\")\n        return\n\n    # 打印表头\n    for name in card_list:\n        print(name, end=\"\\t\\t\")\n\n    print(\"\")\n\n    for card_dict in card_list:\n        print(\"%s\\t\\t%s\\t\\t%s\\t\\t%s\" % (card_dict[\"name\"],\n                                        card_dict[\"phone\"],\n                                        card_dict[\"qq\"],\n                                        card_dict[\"email\"]))\n    print(\"- \" * 15)\n\n\ndef search_card():\n\n    \"\"\"查找名片\"\"\"\n    print(\"3.查找名片\")\n\n    # 1.提示用户输入要搜索的姓名\n    find_name = input(\"请输入要搜索的用户姓名:\")\n\n    # 2.遍历名片列表，查询要搜索的姓名，若没有，需要提示用户\n    for card_dict in card_list:\n        if card_dict[\"name\"] == find_name:\n            print(\"姓名\\t\\t电话\\t\\tQQ\\t\\t地址\")\n            print(\"%s\\t\\t%s\\t\\t%s\\t\\t%s\" % (card_dict[\"name\"],\n                                            card_dict[\"phone\"],\n                                            card_dict[\"qq\"],\n                                            card_dict[\"email\"]))\n            # 针对找到的名片执行修改和删除操作\n            deal_card(card_dict)\n\n            break\n    else:\n        print(\"没有找到 %s 的信息\" % find_name)\n\n\ndef deal_card(find_dict):\n\n    print(find_dict)\n\n    user_do = input(\"请选择要执行的操作\"\n                    \"[1]修改  [2]删除  [0]返回上一级\")\n\n    if user_do == \"1\":\n        find_dict[\"name\"] = input_card_info(find_dict[\"name\"], \"姓名:\")\n        find_dict[\"phone\"] = input_card_info(find_dict[\"phone\"], \"电话:\")\n        find_dict[\"qq\"] = input_card_info(find_dict[\"qq\"], \"QQ:\")\n        find_dict[\"email\"] = input_card_info(find_dict[\"email\"], \"邮箱:\")\n        print(\"修改名片成功\")\n\n    elif user_do == \"2\":\n        card_list.remove(find_dict)\n\n        print(\"删除名片成功\")\n\n\ndef input_card_info(dict_value, tip_message):\n\n    result_str = input(tip_message)\n\n    if len(result_str) > 0:\n        return result_str\n    else:\n        return dict_value\n```\n\n### 控制台效果展示\n\n{% asset_img 名片管理系统效果图1.jpg  %}\n\n{% asset_img 名片管理系统效果图2.jpg  %}\n\n{% asset_img 名片管理系统效果图3.jpg  %}\n\n------\n\n## 飞机大战游戏(pygame)\n\n### **实现的功能**\n\n1. 背景图片的滚动播放\n2. 碰撞检测----子弹碰撞飞机，敌机碰撞飞机\n3. 键盘←→控制飞机的左右移动\n4. random随机数实现敌机的出现数量\n5. 代码中可直接修改所有飞机的移动速度\n\n### plane_main.py\n\n```py\n# import pygame 飞机精灵导入了pygame的模块\nfrom plane_sprites import *\n\nclass PlaneGame(object):\n    \"\"\"飞机大战主游戏\"\"\"\n    def __init__(self):\n        print(\"...游戏初始化...\")\n\n        # 1.创建游戏窗口\n        self.screen = pygame.display.set_mode(SCREEN_RECT.size)\n        # 2.创建游戏时钟\n        self.clock = pygame.time.Clock()\n        # 3.调用私有方法，精灵和精灵组的创建\n        self.__create_sprites()\n        # 4.设置定时器事件 - 创建敌机 1s/架\n        pygame.time.set_timer(CREATE_ENEMY_EVENT, 1000)  # 第二个参数以毫秒为单位\n        pygame.time.set_timer(HERO_FIRE_EVENT, 500)\n\n    def __create_sprites(self):\n        # 创建背景精灵和精灵组\n        bg1 = Background()\n        bg2 = Background(True)\n\n        self.back_group = pygame.sprite.Group(bg1, bg2)\n\n        # 创建敌机的精灵组\n        self.enemy_group = pygame.sprite.Group()\n\n        # 创建英雄的精灵和精灵组\n        self.hero = Hero()\n        self.hero_group = pygame.sprite.Group(self.hero)\n\n    def start_game(self):\n        print(\"...游戏开始...\")\n\n        while True:\n            # 1.设置刷新帧率\n            self.clock.tick(FRAME_PER_SEC)\n            # 2.事件监听\n            self.__event_handler()\n            # 3.碰撞检测\n            self.__check_collide()\n            # 4.更新/绘制精灵组\n            self.__update_sprites()\n            # 5.更新显示\n            pygame.display.update()\n\n    def __event_handler(self):\n        for event in pygame.event.get():\n            # 判断是否退出游戏\n            if event.type == pygame.QUIT:\n                PlaneGame.__game_over()\n            elif event.type == CREATE_ENEMY_EVENT:\n                # print(\"...敌机出场...\")\n                # 创建敌机精灵\n                enemy = Enemy()\n                # 将敌机精灵添加到敌机精灵组\n                self.enemy_group.add(enemy)\n            elif event.type == HERO_FIRE_EVENT:\n                self.hero.fire()\n            # elif event.type == pygame.KEY_DOWN and event.key == pygame.K_RIGHT:\n                # print(\"向右移动\")\n        # 使用键盘提供的方法获取键盘按键\n        keys_pressed = pygame.key.get_pressed()\n        # 判断元组中对应的按键索引值\n        if keys_pressed[pygame.K_RIGHT]:\n            self.hero.speed = 5\n        elif keys_pressed[pygame.K_LEFT]:\n            self.hero.speed = -5\n        else:\n            self.hero.speed = 0\n\n    def __check_collide(self):\n        # 1.子弹摧毁敌机\n        pygame.sprite.groupcollide(self.hero.bullets, self.enemy_group, True, True)\n        # 2.敌机撞毁英雄\n        enemies = pygame.sprite.spritecollide(self.hero, self.enemy_group, True)\n        # 3.判断列表是否有内容\n        if len(enemies) > 0:\n            # 让英雄牺牲\n            self.hero.kill()\n            # 结束游戏\n            PlaneGame.__game_over()\n\n    def __update_sprites(self):\n        self.back_group.update()\n        self.back_group.draw(self.screen)\n\n        self.enemy_group.update()\n        self.enemy_group.draw(self.screen)\n\n        self.hero_group.update()\n        self.hero_group.draw(self.screen)\n\n        self.hero.bullets.update()\n        self.hero.bullets.draw(self.screen)\n\n    @staticmethod\n    def __game_over():\n        print(\"游戏结束\")\n        pygame.quit()\n        exit()\n\nif __name__ == '__main__':\n    # 创建游戏对象\n    game = PlaneGame()\n    # 启动游戏\n    game.start_game()\n```\n\n### plane_sprites.py\n\n```py\nimport random\n\nimport pygame\n\n# 屏幕大小的常量\nSCREEN_RECT = pygame.Rect(0, 0, 480, 700)\n\n# 刷新的帧率\nFRAME_PER_SEC = 60\n\n# 创建敌机的定时器常量\nCREATE_ENEMY_EVENT = pygame.USEREVENT\n\n# 英雄发射子弹事件\nHERO_FIRE_EVENT = pygame.USEREVENT + 1\n\nclass GameSprite(pygame.sprite.Sprite):\n    \"\"\"飞机大战游戏精灵\"\"\"\n    def __init__(self, image_name, speed=1):\n\n        # 调用父类的初始化方法\n        super().__init__()\n\n        # 定义对象的属性\n        self.image = pygame.image.load(image_name)\n        self.rect = self.image.get_rect()\n        self.speed = speed\n\n    def update(self):\n        # 在屏幕的垂直方向上移动\n        self.rect.y += self.speed\n\nclass Background(GameSprite):\n    \"\"\"游戏背景精灵\"\"\"\n    def __init__(self, is_alt=False):\n        # 1.调用父类方法实现精灵的创建(image/rect/speed)\n        super().__init__(\"./images/background.png\")\n        # 2.判断是否是交替图像，如果是，需要设置初始位置\n        if is_alt:\n            self.rect.y = -self.rect.height\n\n    def update(self):\n\n        # 1.调用父类的方法实现\n        super().update()\n\n        # 2.判断图像是否移出屏幕，若移出，将图像设置到屏幕的上方\n        if self.rect.y >= SCREEN_RECT.height:\n            self.rect.y = -self.rect.height\n\nclass Enemy(GameSprite):\n    \"\"\"敌机精灵\"\"\"\n    def __init__(self):\n        # 1.调用父类方法，创建敌机精灵，同时指定敌机图片\n        super().__init__(\"./images/enemy1.png\")\n        # 2.指定敌机的初始随机速度\n        self.speed = random.randint(1, 5)\n        # 3.指定敌机的初始随机位置\n        self.rect.bottom = 0\n        max_x = SCREEN_RECT.width - self.rect.width\n        self.rect.x = random.randint(0, max_x)\n\n    def update(self):\n        # 1.调用父类方法，保持垂直方向的飞行\n        super().update()\n        # 2.判断是否飞出屏幕，如果是，需要从精灵组删除敌机\n        if self.rect.y >= SCREEN_RECT.height:\n            # print(\"飞出屏幕，需要从精灵组删除\")\n\n            # kill方法可以将精灵从所有精灵组中移出，精灵就会被自动销毁\n            self.kill()\n\n    def __del__(self):\n        # print(\"敌机爆炸 %s\" % self.rect)\n        pass\n\nclass Hero(GameSprite):\n    \"\"\"英雄精灵\"\"\"\n    def __init__(self):\n        # 1.调用父类方法，设置image&speed\n        super().__init__(\"./images/me1.png\", 0)\n        # 2.设置英雄的初始位置\n        self.rect.centerx = SCREEN_RECT.centerx\n        self.rect.bottom = SCREEN_RECT.bottom - 120\n\n        # 3.创建子弹的精灵组\n        self.bullets = pygame.sprite.Group()\n\n    def update(self):\n        # 英雄在水平方向移动\n        self.rect.x += self.speed\n\n        # 控制英雄不能离开屏幕\n        if self.rect.x < 0:\n            self.rect.x = 0\n        elif self.rect.right > SCREEN_RECT.right:\n            self.rect.right = SCREEN_RECT.right\n\n    def fire(self):\n        # print(\"发射子弹\")\n\n        for i in (0, 1, 2):\n            # 1.创建子弹精灵\n            bullet = Bullet()\n            # 2.设置精灵的位置\n            bullet.rect.bottom = self.rect.y - i * 20\n            bullet.rect.centerx = self.rect.centerx\n            # 3.将精灵添加到精灵组\n            self.bullets.add(bullet)\n\nclass Bullet(GameSprite):\n    \"\"\"子弹精灵\"\"\"\n    def __init__(self):\n        # 调用父类方法，设置子弹图片，设置初始速度\n        super().__init__(\"./images/bullet1.png\", -2)\n\n    def update(self):\n        # 调用父类方法，让子弹沿垂直方向飞行\n        super().update()\n\n        # 判断子弹是否飞出屏幕\n        if self.rect.bottom < 0:\n            self.kill()\n\n    def __del__(self):\n        # print(\"子弹被销毁\")\n        pass\n```\n\n### 游戏运行效果展示图\n\n{% asset_img 飞机大战.jpg  %}\n\n------\n\n# Python面经\n\n## 列表、元组、字典\n\n1. 列表是动态数组，它们不可变且可以重设长度（改变其内部元素的个数）。\n2. 元组是静态数组，它们不可变，且其内部数据一旦创建便无法改变。\n3. 元组缓存于Python运行时环境，这意味着我们每次使用元组时无须访问内核去分配内存。\n\n**列表元组字典的一些区别：**\n\n1、列表list：有序，可变。\n\n2、元组tuple：有序，不可变。\n\n3、字典dict：无序，字典的key是不可变的，值是可变的；在python中字符串，数字，元组都是不可变的对象。\n\n4、序列：列表，元组和字符串都属于序列；即成员有序排列，可以通过下标访问，可以进行切片操作。字符串（普通字符串和unicode字符串）\n\n5、集合：没有顺序的简单对象的聚集。可以检查成员是否存在，是否是另一个集合的子集，得到两个集合的交集等等\n\n6、复制一个列表或者类似的序列或者其他复杂对象，那么必须使用切片操作符来去的拷贝。当你创建一个对象并将它赋值给一个变量的时候，这个变量仅仅引用那个对象，而不是表示这个对象本身！也就是说，变量名指向你计算机中存储那个对象的内存。这被称作名称到对象的绑定。\n\n## Python的异常机制\n\n### 1、什么是异常？\n\n异常即是一个事件，该事件会在程序执行过程中发生，影响了程序的正常执行。\n 一般情况下，在Python无法正常处理程序时就会发生一个异常。\n 异常是Python对象，表示一个错误。\n 当Python脚本发生异常时我们需要捕获处理它，否则程序会终止执行。\n\n### 2、try…except…else结构\n\n如果try块中没有抛出异常，则执行else块，如果try中抛出异常，则执行except模块\n except：捕获所有的异常\n\n不带任何异常类型使用except，如下实例：\n\n```\ntry:\n    正常的操作\n   ......................\nexcept:\n    发生异常，执行这块代码\n   ......................\nelse:\n    如果没有异常执行这块代码\n\n```\n\n使用相同的except语句来处理多个异常信息，如下所示：\n\n```\ntry:\n    正常的操作\n   ......................\nexcept(Exception1[, Exception2[,...ExceptionN]]):\n   发生以上多个异常中的一个，执行这块代码\n   ......................\nelse:\n    如果没有异常执行这块代码\n\n```\n\n### 3、try…except…else…finally\n\nfinally块无论是否发生异常都会执行，能常用来解释try块中申请的的资源\n\n### 4、python中常见的异常类型\n\nException：常规错误的基类\nZeroDivisionError：除(或取模)零 (所有数据类型)\nAssertionError：断言语句失败\nAttributeError：对象没有这个属性\nIOError：输入/输出操作失败\nImportError：导入模块/对象失败\nIndexError：序列中没有此索引(index)\nKeyError：映射中没有这个键\nNameError：未声明/初始化对象 (没有属性)\nSyntaxError：Python 语法错误\nIndentationError：缩进错误\nSystemError：一般的解释器系统错误\nTypeError：对类型无效的操作\nValueError：传入无效的参数\n\n### python异常代码块\n\n```py\n    try:\n        # func   # 可能会抛出异常的代码\n    except (Exception1, Exception2) as e:  # 可以捕获多个异常并处理\n        # 异常处理的代码\n    else:\n        # pass  # 异常没有发生的时候代码逻辑\n    finally:\n        pass     # 无论异常有没有发生都会执行的代码，一般处理资源的关闭和释放\n\n```\n\n------\n\n## Python中的GIL\n\n### 定义\n\n全局解释器锁 GIL，英文名称为 Global Interpreter Lock，它是解释器中一种线程同步的方式。\n\n \n\n对于每一个解释器进程都具有一个 GIL ，它的直接作用是限制单个解释器进程中多线程的并行执行，使得即使在多核处理器上对于单个解释器进程来说，在同一时刻运行的线程仅限一个。 对于 Python 来讲，GIL 并不是它语言本身的特性，而是 CPython 解释器的实现特性。\n\n \n\nPython 代码被编译后的字节码会在解释器中执行，在执行过程中，存在于 CPython 解释器中的 GIL 会致使在同一时刻只有一个线程可以执行字节码。 GIL 的存在引起的最直接的问题便是：在一个解释器进程中通过多线程的方式无法利用多核处理器来实现真正的并行。\n\n \n\n因此，Python的多线程是伪多线程，无法利用多核资源，同一个时刻只有一个线程在真正的运行。\n\n \n\nGIL的限制了程序的多核执行\n\n \n\n  同一个时间只能有一个线程执行字节码\n\n  CPU密集程序难以利用多核优势\n\n  IO期间会释放GIL，对IO密集程序影响不大\n\n \n\n面对GIL的存在，我们有可以有多个方法帮助我们提升性能\n\n在 IO 密集型任务下，我们可以使用多线程或者协程来完成。\n\n可以选择更换 Jython 等没有 GIL 的解释器，但并不推荐更换解释器，因为会错过众多 C 语言模块中的有用特性。\n\nCPU密集可以使用多进程+进程池。\n\n将计算密集型任务转移到 Python 的 C / C++ 扩展模块中完成\n\n### 为什么有了GIL还要关注线程安全\n\nGIL 保证的是每一条字节码在执行过程中的独占性，即每一条字节码的执行都是原子性的。GIL 具有释放机制，所以 GIL 并不会保证字节码在执行过程中线程不会进行切换，即在多个字节码之间，线程具有切换的可能性。\n\n我们可以用python的dis模块去查看a += 1执行的字节码，发现需要有多个字节码去完成，线程具有切换的可能性，所以它是非线程安全的。\n\n 一个操作如果是一个字节码指令可以完成就是原子的，非原子操作不是线程安全的，原子的是可以保证线程安全的。\n\n GIL 和线程互斥锁的粒度是不同的，GIL 是 Python 解释器级别的互斥，保证的是解释器级别共享资源的一致性，而线程互斥锁则是代码级（或用户级）的互斥，保证的是 Python 程序级别共享数据的一致性，所以我们仍需要线程互斥锁及其他线程同步方式来保证数据一致。\n\n## 迭代器和生成器\n\n{% asset_img 迭代器和生成器.jpg  %}\n\n容器（container）\n\ncontainer 可以理解为把多个元素组织在一起的数据结构，container 中的元素可以逐个地迭代获取，可以用 in, not in 关键字判断元素是否包含在容器中。比如Python中常见的container对象有list，deque，set\n\n \n\n可迭代对象(iterables)\n\n大部分的 container 都是可迭代对象，比如 list or set 都是可迭代对象，可以说只要是可以返回一个迭代器的都可以称作可迭代对象。\n\n \n\n迭代器（iterator）\n\npython中的容器有许多，比如列表、元组、字典、集合等，对于容器，可以很直观地想象成多个元素在一起的单元，所有的容器都是可迭代的（iterable）。\n\n \n\n我们通常使用for in 语句对可迭代的对象进行枚举，其底层机制在于：\n\n而可迭代对象，通过 iter() 函数返回一个迭代器（iterator），迭代器提供了一个 next 的方法。调用用这个方法后，你要么得到这个容器的下一个对象，要么得到一个StopIteration 的错误。\n\n \n\n举个例子：\n\n```markdown\n  \\>>> x = [1, 2, 3]\n\n  \\>>> # Get the iterator\n\n  \\>>> y = iter(items) # Invokes items.__iter__()\n\n  \\>>> # Run the iterator\n\n  \\>>> next(y) # Invokes it.__next__()\n\n  1\n\n  \\>>> next(y)\n\n  2\n\n  \\>>> next(y)\n\n  3\n\n  \\>>> type(x)\n\n  <class 'list'>\n\n  \\>>> type(y)\n\n  <class 'list_iterator'>\n\n  \\>>> next(y)\n\n  Traceback (most recent call last):\n\n​    File \"<stdin>\", line 1, in <module>\n\n  StopIteration\n\n  \\>>>\n```\n\n \n\n上面的例子中，x=[1,2,3]是可迭代对象，这里也叫容器。y=iter(x)则是迭代器，且实现了__iter__和__next__方法。\n\n \n\n它们之间的关系如下图所示：\n\n{% asset_img 迭代器实例.jpg  %}\n\n可见通过 iter 方法后就是迭代器。它是一个带状态的对象，调用 next 方法的时候返回容器中的下一个值，可以说任何实现了iter和 next 方法的对象都是迭代器，iter返回迭代器自身，next 返回容器中的下一个值，如果容器中没有更多元素了，则抛异常。\n\n \n\n迭代器就像一个懒加载的工厂，等到有人需要的时候才给它生成值返回，没调用的时候就处于休眠状态等待下一次调用。\n\n \n\n生成器（generator）\n\n \n\n生成器(generator)可以简单理解为懒人版本的迭代器。\n\n \n\n它相比于迭代器的优势是，生成器并不会像迭代器一样占用大量内存。比如声明一个迭代器：[i for i in range(100000000)]就可以声明一个包含一亿个元素的列表，每个元素在生成后都会保存到内存中。但实际上我们也许并不需要保存那么多东西，只希望在你用 next() 函数的时候，才会生成下一个变量，因此生成器应运而生，在python中的写法为(i for i in range(100000000))\n\n \n\n此外，生成器还可以有别的形式，比如生成器函数，通过yield关键字，把结果返回到next()方法中，举个例子：\n\n```py\n def frange(start, stop, increment):\n\tx = start\n\twhile x < stop:\n\t\tyield x\n    \tx += increment\n for n in frange(0, 2, 0.5):\n    print(n)\n\n  0\n  0.5\n  1.0\n  1.5\n```\n\n相比于迭代器，生成器具有以下优点：\n\n1. 减少内存\n2. 延迟计算\n3. 有效提高代码可读性\n\n## python深拷贝和浅拷贝\n\n- 浅拷贝，指的是重新分配一块内存，创建一个新的对象，但**里面的元素是原对象中各个子对象的引用**。\n- 深拷贝，是指重新分配一块内存，创建一个新的对象，并且将原对象中的元素，以递归的方式，通过创建新的子对象拷贝到新对象中。因此，**新对象和原对象没有任何关联**。\n\n### 浅拷贝\n\n- 使用数据类型**本身的构造器**\n- 对于**可变的序列**，还可以通过切片操作符 : 来完成浅拷贝\n- Python 还提供了对应的函数 **copy.copy()** 函数，适用于任何数据类型\n\n对于元组，使用 tuple() 或者切片操作符 ‘:’ 不会创建一份浅拷贝，相反它会返回一个指向相同元组的引用：\n\n使用 tuple() 或者切片操作符 ‘:’ **不会创建一份浅拷贝**，因为它开辟新的内存存储的是**原对象的引用**，而没有创建新的对象来存储原对象的子对象的引用，所以不是浅拷贝。相反它会返回一个**指向相同元组的引用。**\n\n对字符串使用 str() 或者切片操作符 ‘:’，原理和 元组相同。\n\n也就是说，对字符串和元组使用 copy（）、[:]、本身的构造器完成的复制，都只是开辟了内存存储原对象的引用，而不是存储原对象的子对象的引用。\n\n### 深拷贝\n\nPython 中以 copy.deepcopy() 来实现对象的深度拷贝\n\n### 两者的优缺点对比\n\n（1）深拷贝拷贝程度高，将原数据复制到新的内存空间中。改变拷贝后的内容不影响原数据内容。但是深拷贝耗时长，且占用内存空间。\n（2）浅拷贝拷贝程度低，只复制原数据的地址。其实是将副本的地址指向原数据地址。修改副本内容，是通过当前地址指向原数据地址，去修改。所以修改副本内容会影响到原数据内容。但是浅拷贝耗时短，占用内存空间少\n","source":"_posts/Python学习.md","raw":"---\ntitle: Python学习\ntags: 4\nabbrlink: e39e2a4e\ndate: 2022-06-15 16:08:28\n---\n\n**Python的学习记录**\n\n<!--more-->\n\n# Python数据结构\n\n## 时间复杂度\n\n```markdown\n时间复杂度：是用来估计算法运行时间的一个式子\n\n一般来说，时间复杂度高的算法比复杂度低的算法慢\n\n常见时间复杂度效率排序（由高到低）：\nO(1) < O(log2^n) < O(n) < O(n * log2^n) < O(n^2) < O(n^2 * log2^n) < O(n^3)\n\n\n快速判断算法时间复杂度：\n确定问题规模n\n循环减半---->>log n\nk层关于n的循环---->>n^k\n\n\n空间复杂度：用来评估算法内存占用大小的式子\n\n算法使用了几个变量：O(1)\n算法使用了长度为n的一维列表：O(n)\n算法使用了m行n列的二维列表：O(mn)\n```\n\n------\n\n## 递归\n\n函数的嵌套调用，在函数中调用它自身\n\n```python\ndef func1(x):\n    if x > 0:\n        func1(x-1)\n        print(x)\n\ndef func2(y):\n    if y > 0:\n        print(y)\n        func2(y-1)\n```\n\n递归：计算1+2+...+100的值\n\n```python\ndef sum_int(n):\n    if n > 0:\n        return n + sum_int(n-1)\n    else:\n        return 0\n```\n\n递归：汉诺塔问题实例\n\n```python\n\"\"\"\n汉诺塔问题\n有n个大小不同的碗，三个盘子，需要将n个碗从一个盘子，保持原样的移动到另一个盘子中去，不改变原本n个碗的摆放顺序\n    初始 : n个碗由上到下，由小至大放置于一个盘子之上\n    结果 : 在不改变n个碗的摆放顺序的条件下，将所有n个碗\"平移\"到另一个盘子之上\n        要求 : 一次只能移动一个碗，且小碗必须在大碗上面\n\"\"\"\n\n\"\"\"\n例:\n现有 A B C 三个盘子，a(小碗) b(中碗) c(大碗) 三个碗，\n初始: abc摞在A上\n过程:\n    a -> C | b -> B | a -> B | c -> C | a -> A | b -> C | a -> C\n结束: 原在A上的abc，平移至C上，共计如上移动了七次\n\"\"\"\n\n\"\"\"\n当有n个碗需要平移时，可以近似将n个碗拆分成 最大的第n个碗 和 其他(n-1)个碗\n此时类似于\n    第一步 : (n-1)个碗 从A 经过C 至B\n    第二步 : 最大的第n个碗 从A 至C\n    第三步 : (n-1)个碗 从B 经过A 至C\n\"\"\"\ndef hanoi(n, a, b, c):  # 定义的参数的意思是(n个碗， 从盘子a， 经过盘子b， 到达盘子c)\n\n    if n > 0:  # 碗的数量大于0，才有后续递归。即递归终止的条件\n        hanoi(n-1, a, c, b)  # 对应上述第一步:从a 经过c 到达b\n        print(\"从 %s 到 %s\" % (a, c))\n        hanoi(n-1, b, a, c)  # 对应上述第三步:从b 经过a 到达c\n\nhanoi(3, \"A\", \"B\", \"C\")\n```\n\n------\n\n# Python算法\n\n**查找:在一些数据元素中，通过一定的方法找出与给定关键字相同的数据元素的过程**\n\n列表查找(线性表查找):从列表中查找指定元素\n    输入:列表、待查找元素\n    输出:元素下标(未找到元素时一般返回None或-1)\n\n**Python内置列表查找函数: index()**\n\n## 线性查找\n\n```python\n# 线性查找(linear_search)：从列表第一个元素开始，顺序进行搜索，直到找到元素或搜索到列表最后一个元素为止。\n# 时间复杂度 O(n)\ndef linear_search(li, val):\n    for ind, v in enumerate(li):  # enumerate()是Python的内置函数\n        if v == val:\n            return ind\n    else:\n        return None\n\n\n不用enumerate()函数的代码:\n\ndef linear_search(list_str, n, val):\n    for i in range(0, n):\n        if (list_str[i] == val):\n            return i\n    return -1\n```\n\n## 二分查找\n\n```python\n# 二分查找的对象必须为 【！！！ 有序列表 ！！！】\n# 二分查找(Binary_search):又叫折半查找，从有序列表的初始候选区li[0:n]开始，通过对待查找的值与候选区中间值的比较，可以使候选区减少一半\n# 时间复杂度 O(log n)\ndef binary_search(li, val):\n    left = 0\n    right = len(li) - 1\n    while left <= right:  # 候选区有值\n        mid = (left + right) // 2\n        if li[mid] == val:\n            return mid\n        elif li[mid] > val:\n            right = mid - 1  # 待查找的值在mid左侧\n        else:  # li(mid) < val 待查找的值在mid右侧\n            left = mid + 1\n    else:\n        return None\n```\n\n------\n\n**排序 : 将一组 无序 的记录序列调整为 有序 的记录序列**\n\n列表排序 : 将无序列表变为有序列表\n    输入 : 列表\n    输出 : 有序列表\n\n升序与降序\n\n**Python内置排序函数 : sort()**\n\n常见排序算法：冒泡排序，选择排序，插入排序\n            快速排序，堆排序，归并排序\n            希尔排序，计数排序，基数排序\n\n## 冒泡排序\n\n```python\n\"\"\"\n冒泡排序Bubble Sort         时间复杂度O(n^2)\n\n列表每两个相邻的数，如果前面的比后面的大，则交换这两个数\n\n一趟排序完成后，则无序区减少一个数，有序区增加一个数\n\"\"\"\n\ndef bubble_sort(li):\n    for i in range(len(li)-1):  # 第i趟\n        for j in range(len(li)-i-1):\n            if li[j] > li[j+1]:  # j > j+1 为升序排序，改为j < j+1 则为降序排序\n                li[j], li[j+1] = li[j+1], li[j]\n        print(li)  # 打印每一趟排序\n```\n\n## 选择排序\n\n```python\n\"\"\"\n选择排序select sort         时间复杂度O(n^2)\n\n依次遍历列表，每次遍历返回一个最小的元素，再遍历剩下元素找到剩下元素中最小的，循环直到遍历全部最小的元素\n\"\"\"\ndef select_sort(li):\n    for i in range(len(li)-1):  # i是第几趟\n        min_loc = i\n        for j in range(i, len(li)):\n            if li[j] < li[min_loc]:\n                min_loc = j\n        li[i], li[min_loc] = li[min_loc], li[i]\n        print(li)\n```\n\n## 插入排序\n\n```python\n\"\"\"\n插入排序insert sort         时间复杂度O(n^2)\n\n初始有序区只有一个元素，从无序区拿来一个元素，按有序插入原有序区，如此循环\n\n\"\"\"\n\ndef insert_sort(li):\n    for i in range(1, len(li)):  # i 表示拿到的元素的下标\n        tmp = li[i]\n        j = i - 1  # j 指的是已存入有序区的元素\n        while j >= 0 and li[j] > tmp:\n            li[j+1] = li[j]\n            j -= 1\n        li[j+1] = tmp\n        print(li)\n```\n\n## 快速排序\n\n```python\n\"\"\"\n快速排序quick sort:         时间复杂度O(n * log n)\n取一个元素p（第一个元素），使元素p归位\n列表被p分成左右两个部分，左边都比p小，右边都比p大。递归完成排序。\n\"\"\"\ndef partition(li, left, right):  # left左指针对应0号元素，right右指针对应n-1号元素\n    tmp = li[left]\n\n    while left < right:\n        while left < right and li[right] >= tmp:  # 从右边找比tmp小的数\n            right -= 1           # 往左走一步\n        li[left] = li[right]  # 把右边的值写到左边空位上\n        # print(li)\n\n        while left < right and li[left] <= tmp:   # 从左边找比tmp大的数\n            left += 1            # 往右走一步\n        li[right] = li[left]  # 把左边的值写到右边空位上\n        # print(li)\n\n    li[left] = tmp  # 把tmp归位\n    return left\n\n\ndef quick_sort(li, left, right):\n    if left < right:  # 表示列表至少有两个元素\n        mid = partition(li, left, right)\n        quick_sort(li, left, mid-1)\n        quick_sort(li, mid+1, right)\n```\n\n## 堆排序\n\n```python\n\"\"\"\n堆排序的过程：         时间复杂度O(n * log n)\n        建立堆\n        得到堆顶元素，为最大元素\n        去掉堆顶，将堆最后一个元素放到堆顶，此时可通过一次调整重新使堆有序\n        堆顶元素为第二大元素\n        重复\"去掉堆顶...\"操作，直到堆变空\n\"\"\"\ndef sift(li, low, high):\n    \"\"\"\n    :param li: 列表\n    :param low: 堆的根节点的位置\n    :param high: 堆的最后一个元素的位置\n    :return:\n    \"\"\"\n    i = low  # i最开始指向根节点\n    j = 2 * i + 1  # j开始是i的左孩子\n    tmp = li[low]  # 把堆顶存起来\n    while j <= high:  # 只要j位置有数\n        if j + 1 <= high and li[j+1] > li[j]:  # 如果右孩子存在且比左孩子大\n            j = j + 1  # 将j指向右孩子\n        if li[j] > tmp:\n            li[i] = li[j]\n            i = j  # 往下看一层\n            j = 2 * i + 1\n        else:  # tmp更大，把tmp放到i的位置上\n            li[i] = tmp  # 把tmp放到某一级领导位置上\n            break\n    else:\n        li[i] = tmp  # 把tmp放到叶子节点上\n\ndef heap_sort(li):\n    n = len(li)\n    for i in range((n-2)//2, -1, -1):\n        # i表示建堆的时候调整的部分的根的下标\n        sift(li, i, n-1)\n    # 建堆完成\n    for i in range(n-1, -1, -1):\n        li[0], li[i] = li[i], li[0]\n        sift(li, 0, i-1)\n```\n\n## 归并排序\n\n```python\n\"\"\"\n将列表由mid分为两边low, high\n由low->mid，mid+1->high两部分\n\n时间复杂度O(n * log n)\n空间复杂度O(n)\n\n分解：将列表越分越小，直至分成一个元素\n终止条件：一个元素是有序的\n合并：将两个有序列表归并，列表越来越大\n\"\"\"\ndef merge(li, low, mid, high):\n    i = low\n    j = mid + 1\n    ltmp = []\n    while i <= mid and j <= high:\n        if li[i] < li[j]:\n            ltmp.append(li[i])\n            i += 1\n        else:\n            ltmp.append(li[j])\n            j += 1\n    # while执行完后，左半和右半肯定有一部分没有可比较元素\n    while i <= mid:\n        ltmp.append(li[i])\n        i += 1\n    while j <= high:\n        ltmp.append(li[j])\n        j += 1\n    li[low:high+1] = ltmp\n\ndef merge_sort(li, low, high):\n    if low < high:  # 至少有两个元素\n        mid = (low + high) // 2\n        merge_sort(li, low, mid)\n        merge_sort(li, mid+1, high)\n        merge(li, low, mid, high)\n```\n\n------\n\n# Python实战\n\n## 名片管理系统(基础)\n\n### 实现的功能\n\n1. 无限循环实现系统的连续操作\n2. 实现系统基本的增删改查和显示功能\n\n### cards_main.py\n\n```python\nimport cards_tools\n# 无限循环方法\nwhile True:\n\n    # 主界面显示\n    cards_tools.show_menu()\n\n    user = input(\"请选择将要进行的操作:\")\n    print(\"您选择的操作是 %s\" % user)\n\n    # 系统执行操作1、2、3\n    if user in [\"1\", \"2\", \"3\"]:\n\n        # 新增名片功能\n        if user == \"1\":\n            cards_tools.new_card()\n        # 显示名片功能\n        elif user == \"2\":\n            cards_tools.show_card()\n        # 查询名片功能\n        elif user == \"3\":\n            cards_tools.search_card()\n\n    # 退出系统\n    elif user == \"0\":\n        print(\"欢迎再次使用【名片管理系统】\")\n        break\n\n    # 用户输入错误3\n    else:\n        print(\"输入错误，请重新输入\")\n```\n\n### cards_tools.py\n\n```python\ncard_list = []\n\n\ndef show_menu():\n\n    \"\"\"主界面的显示\"\"\"\n    print(\"* \" * 15)\n    print(\"    欢迎使用【名片管理系统】\")\n    print(\"\")\n    print(\"        1.新增名片\")\n    print(\"        2.显示名片\")\n    print(\"        3.查找名片\")\n    print(\"\")\n    print(\"        0.退出系统\")\n    print(\"* \" * 15)\n\n\ndef new_card():\n\n    \"\"\"新增名片\"\"\"\n    print(\"1.新增名片\")\n\n    # 1.用户依次输入名片的所有信息\n    name = input(\"请输入用户的姓名:\")\n    phone = input(\"请输入用户的电话号码:\")\n    qq = input(\"请输入用户的qq号码:\")\n    email = input(\"请输入用户的邮箱:\")\n\n    # 2.新建一个字典用于保存用户的输入\n    card_dict = {\"name\": name,\n                 \"phone\": phone,\n                 \"qq\": qq,\n                 \"email\": email}\n\n    # 3.将该字典的信息存放到数组上\n    card_list.append(card_dict)\n\n    print(card_list)\n\n    # 4.提示用户添加成功\n    print(\"用户 %s 的信息添加成功\" % name)\n\n\ndef show_card():\n\n    \"\"\"显示名片\"\"\"\n    print(\"2.显示名片\")\n    print(\"- \" * 15)\n\n    # 判断是否存在名片信息记录，若没有，提示用户返回\n    if len(card_list) == 0:\n        print(\"当前没有任何名片，请使用新增功能先添加名片再进行后续操作！\")\n        return\n\n    # 打印表头\n    for name in card_list:\n        print(name, end=\"\\t\\t\")\n\n    print(\"\")\n\n    for card_dict in card_list:\n        print(\"%s\\t\\t%s\\t\\t%s\\t\\t%s\" % (card_dict[\"name\"],\n                                        card_dict[\"phone\"],\n                                        card_dict[\"qq\"],\n                                        card_dict[\"email\"]))\n    print(\"- \" * 15)\n\n\ndef search_card():\n\n    \"\"\"查找名片\"\"\"\n    print(\"3.查找名片\")\n\n    # 1.提示用户输入要搜索的姓名\n    find_name = input(\"请输入要搜索的用户姓名:\")\n\n    # 2.遍历名片列表，查询要搜索的姓名，若没有，需要提示用户\n    for card_dict in card_list:\n        if card_dict[\"name\"] == find_name:\n            print(\"姓名\\t\\t电话\\t\\tQQ\\t\\t地址\")\n            print(\"%s\\t\\t%s\\t\\t%s\\t\\t%s\" % (card_dict[\"name\"],\n                                            card_dict[\"phone\"],\n                                            card_dict[\"qq\"],\n                                            card_dict[\"email\"]))\n            # 针对找到的名片执行修改和删除操作\n            deal_card(card_dict)\n\n            break\n    else:\n        print(\"没有找到 %s 的信息\" % find_name)\n\n\ndef deal_card(find_dict):\n\n    print(find_dict)\n\n    user_do = input(\"请选择要执行的操作\"\n                    \"[1]修改  [2]删除  [0]返回上一级\")\n\n    if user_do == \"1\":\n        find_dict[\"name\"] = input_card_info(find_dict[\"name\"], \"姓名:\")\n        find_dict[\"phone\"] = input_card_info(find_dict[\"phone\"], \"电话:\")\n        find_dict[\"qq\"] = input_card_info(find_dict[\"qq\"], \"QQ:\")\n        find_dict[\"email\"] = input_card_info(find_dict[\"email\"], \"邮箱:\")\n        print(\"修改名片成功\")\n\n    elif user_do == \"2\":\n        card_list.remove(find_dict)\n\n        print(\"删除名片成功\")\n\n\ndef input_card_info(dict_value, tip_message):\n\n    result_str = input(tip_message)\n\n    if len(result_str) > 0:\n        return result_str\n    else:\n        return dict_value\n```\n\n### 控制台效果展示\n\n{% asset_img 名片管理系统效果图1.jpg  %}\n\n{% asset_img 名片管理系统效果图2.jpg  %}\n\n{% asset_img 名片管理系统效果图3.jpg  %}\n\n------\n\n## 飞机大战游戏(pygame)\n\n### **实现的功能**\n\n1. 背景图片的滚动播放\n2. 碰撞检测----子弹碰撞飞机，敌机碰撞飞机\n3. 键盘←→控制飞机的左右移动\n4. random随机数实现敌机的出现数量\n5. 代码中可直接修改所有飞机的移动速度\n\n### plane_main.py\n\n```py\n# import pygame 飞机精灵导入了pygame的模块\nfrom plane_sprites import *\n\nclass PlaneGame(object):\n    \"\"\"飞机大战主游戏\"\"\"\n    def __init__(self):\n        print(\"...游戏初始化...\")\n\n        # 1.创建游戏窗口\n        self.screen = pygame.display.set_mode(SCREEN_RECT.size)\n        # 2.创建游戏时钟\n        self.clock = pygame.time.Clock()\n        # 3.调用私有方法，精灵和精灵组的创建\n        self.__create_sprites()\n        # 4.设置定时器事件 - 创建敌机 1s/架\n        pygame.time.set_timer(CREATE_ENEMY_EVENT, 1000)  # 第二个参数以毫秒为单位\n        pygame.time.set_timer(HERO_FIRE_EVENT, 500)\n\n    def __create_sprites(self):\n        # 创建背景精灵和精灵组\n        bg1 = Background()\n        bg2 = Background(True)\n\n        self.back_group = pygame.sprite.Group(bg1, bg2)\n\n        # 创建敌机的精灵组\n        self.enemy_group = pygame.sprite.Group()\n\n        # 创建英雄的精灵和精灵组\n        self.hero = Hero()\n        self.hero_group = pygame.sprite.Group(self.hero)\n\n    def start_game(self):\n        print(\"...游戏开始...\")\n\n        while True:\n            # 1.设置刷新帧率\n            self.clock.tick(FRAME_PER_SEC)\n            # 2.事件监听\n            self.__event_handler()\n            # 3.碰撞检测\n            self.__check_collide()\n            # 4.更新/绘制精灵组\n            self.__update_sprites()\n            # 5.更新显示\n            pygame.display.update()\n\n    def __event_handler(self):\n        for event in pygame.event.get():\n            # 判断是否退出游戏\n            if event.type == pygame.QUIT:\n                PlaneGame.__game_over()\n            elif event.type == CREATE_ENEMY_EVENT:\n                # print(\"...敌机出场...\")\n                # 创建敌机精灵\n                enemy = Enemy()\n                # 将敌机精灵添加到敌机精灵组\n                self.enemy_group.add(enemy)\n            elif event.type == HERO_FIRE_EVENT:\n                self.hero.fire()\n            # elif event.type == pygame.KEY_DOWN and event.key == pygame.K_RIGHT:\n                # print(\"向右移动\")\n        # 使用键盘提供的方法获取键盘按键\n        keys_pressed = pygame.key.get_pressed()\n        # 判断元组中对应的按键索引值\n        if keys_pressed[pygame.K_RIGHT]:\n            self.hero.speed = 5\n        elif keys_pressed[pygame.K_LEFT]:\n            self.hero.speed = -5\n        else:\n            self.hero.speed = 0\n\n    def __check_collide(self):\n        # 1.子弹摧毁敌机\n        pygame.sprite.groupcollide(self.hero.bullets, self.enemy_group, True, True)\n        # 2.敌机撞毁英雄\n        enemies = pygame.sprite.spritecollide(self.hero, self.enemy_group, True)\n        # 3.判断列表是否有内容\n        if len(enemies) > 0:\n            # 让英雄牺牲\n            self.hero.kill()\n            # 结束游戏\n            PlaneGame.__game_over()\n\n    def __update_sprites(self):\n        self.back_group.update()\n        self.back_group.draw(self.screen)\n\n        self.enemy_group.update()\n        self.enemy_group.draw(self.screen)\n\n        self.hero_group.update()\n        self.hero_group.draw(self.screen)\n\n        self.hero.bullets.update()\n        self.hero.bullets.draw(self.screen)\n\n    @staticmethod\n    def __game_over():\n        print(\"游戏结束\")\n        pygame.quit()\n        exit()\n\nif __name__ == '__main__':\n    # 创建游戏对象\n    game = PlaneGame()\n    # 启动游戏\n    game.start_game()\n```\n\n### plane_sprites.py\n\n```py\nimport random\n\nimport pygame\n\n# 屏幕大小的常量\nSCREEN_RECT = pygame.Rect(0, 0, 480, 700)\n\n# 刷新的帧率\nFRAME_PER_SEC = 60\n\n# 创建敌机的定时器常量\nCREATE_ENEMY_EVENT = pygame.USEREVENT\n\n# 英雄发射子弹事件\nHERO_FIRE_EVENT = pygame.USEREVENT + 1\n\nclass GameSprite(pygame.sprite.Sprite):\n    \"\"\"飞机大战游戏精灵\"\"\"\n    def __init__(self, image_name, speed=1):\n\n        # 调用父类的初始化方法\n        super().__init__()\n\n        # 定义对象的属性\n        self.image = pygame.image.load(image_name)\n        self.rect = self.image.get_rect()\n        self.speed = speed\n\n    def update(self):\n        # 在屏幕的垂直方向上移动\n        self.rect.y += self.speed\n\nclass Background(GameSprite):\n    \"\"\"游戏背景精灵\"\"\"\n    def __init__(self, is_alt=False):\n        # 1.调用父类方法实现精灵的创建(image/rect/speed)\n        super().__init__(\"./images/background.png\")\n        # 2.判断是否是交替图像，如果是，需要设置初始位置\n        if is_alt:\n            self.rect.y = -self.rect.height\n\n    def update(self):\n\n        # 1.调用父类的方法实现\n        super().update()\n\n        # 2.判断图像是否移出屏幕，若移出，将图像设置到屏幕的上方\n        if self.rect.y >= SCREEN_RECT.height:\n            self.rect.y = -self.rect.height\n\nclass Enemy(GameSprite):\n    \"\"\"敌机精灵\"\"\"\n    def __init__(self):\n        # 1.调用父类方法，创建敌机精灵，同时指定敌机图片\n        super().__init__(\"./images/enemy1.png\")\n        # 2.指定敌机的初始随机速度\n        self.speed = random.randint(1, 5)\n        # 3.指定敌机的初始随机位置\n        self.rect.bottom = 0\n        max_x = SCREEN_RECT.width - self.rect.width\n        self.rect.x = random.randint(0, max_x)\n\n    def update(self):\n        # 1.调用父类方法，保持垂直方向的飞行\n        super().update()\n        # 2.判断是否飞出屏幕，如果是，需要从精灵组删除敌机\n        if self.rect.y >= SCREEN_RECT.height:\n            # print(\"飞出屏幕，需要从精灵组删除\")\n\n            # kill方法可以将精灵从所有精灵组中移出，精灵就会被自动销毁\n            self.kill()\n\n    def __del__(self):\n        # print(\"敌机爆炸 %s\" % self.rect)\n        pass\n\nclass Hero(GameSprite):\n    \"\"\"英雄精灵\"\"\"\n    def __init__(self):\n        # 1.调用父类方法，设置image&speed\n        super().__init__(\"./images/me1.png\", 0)\n        # 2.设置英雄的初始位置\n        self.rect.centerx = SCREEN_RECT.centerx\n        self.rect.bottom = SCREEN_RECT.bottom - 120\n\n        # 3.创建子弹的精灵组\n        self.bullets = pygame.sprite.Group()\n\n    def update(self):\n        # 英雄在水平方向移动\n        self.rect.x += self.speed\n\n        # 控制英雄不能离开屏幕\n        if self.rect.x < 0:\n            self.rect.x = 0\n        elif self.rect.right > SCREEN_RECT.right:\n            self.rect.right = SCREEN_RECT.right\n\n    def fire(self):\n        # print(\"发射子弹\")\n\n        for i in (0, 1, 2):\n            # 1.创建子弹精灵\n            bullet = Bullet()\n            # 2.设置精灵的位置\n            bullet.rect.bottom = self.rect.y - i * 20\n            bullet.rect.centerx = self.rect.centerx\n            # 3.将精灵添加到精灵组\n            self.bullets.add(bullet)\n\nclass Bullet(GameSprite):\n    \"\"\"子弹精灵\"\"\"\n    def __init__(self):\n        # 调用父类方法，设置子弹图片，设置初始速度\n        super().__init__(\"./images/bullet1.png\", -2)\n\n    def update(self):\n        # 调用父类方法，让子弹沿垂直方向飞行\n        super().update()\n\n        # 判断子弹是否飞出屏幕\n        if self.rect.bottom < 0:\n            self.kill()\n\n    def __del__(self):\n        # print(\"子弹被销毁\")\n        pass\n```\n\n### 游戏运行效果展示图\n\n{% asset_img 飞机大战.jpg  %}\n\n------\n\n# Python面经\n\n## 列表、元组、字典\n\n1. 列表是动态数组，它们不可变且可以重设长度（改变其内部元素的个数）。\n2. 元组是静态数组，它们不可变，且其内部数据一旦创建便无法改变。\n3. 元组缓存于Python运行时环境，这意味着我们每次使用元组时无须访问内核去分配内存。\n\n**列表元组字典的一些区别：**\n\n1、列表list：有序，可变。\n\n2、元组tuple：有序，不可变。\n\n3、字典dict：无序，字典的key是不可变的，值是可变的；在python中字符串，数字，元组都是不可变的对象。\n\n4、序列：列表，元组和字符串都属于序列；即成员有序排列，可以通过下标访问，可以进行切片操作。字符串（普通字符串和unicode字符串）\n\n5、集合：没有顺序的简单对象的聚集。可以检查成员是否存在，是否是另一个集合的子集，得到两个集合的交集等等\n\n6、复制一个列表或者类似的序列或者其他复杂对象，那么必须使用切片操作符来去的拷贝。当你创建一个对象并将它赋值给一个变量的时候，这个变量仅仅引用那个对象，而不是表示这个对象本身！也就是说，变量名指向你计算机中存储那个对象的内存。这被称作名称到对象的绑定。\n\n## Python的异常机制\n\n### 1、什么是异常？\n\n异常即是一个事件，该事件会在程序执行过程中发生，影响了程序的正常执行。\n 一般情况下，在Python无法正常处理程序时就会发生一个异常。\n 异常是Python对象，表示一个错误。\n 当Python脚本发生异常时我们需要捕获处理它，否则程序会终止执行。\n\n### 2、try…except…else结构\n\n如果try块中没有抛出异常，则执行else块，如果try中抛出异常，则执行except模块\n except：捕获所有的异常\n\n不带任何异常类型使用except，如下实例：\n\n```\ntry:\n    正常的操作\n   ......................\nexcept:\n    发生异常，执行这块代码\n   ......................\nelse:\n    如果没有异常执行这块代码\n\n```\n\n使用相同的except语句来处理多个异常信息，如下所示：\n\n```\ntry:\n    正常的操作\n   ......................\nexcept(Exception1[, Exception2[,...ExceptionN]]):\n   发生以上多个异常中的一个，执行这块代码\n   ......................\nelse:\n    如果没有异常执行这块代码\n\n```\n\n### 3、try…except…else…finally\n\nfinally块无论是否发生异常都会执行，能常用来解释try块中申请的的资源\n\n### 4、python中常见的异常类型\n\nException：常规错误的基类\nZeroDivisionError：除(或取模)零 (所有数据类型)\nAssertionError：断言语句失败\nAttributeError：对象没有这个属性\nIOError：输入/输出操作失败\nImportError：导入模块/对象失败\nIndexError：序列中没有此索引(index)\nKeyError：映射中没有这个键\nNameError：未声明/初始化对象 (没有属性)\nSyntaxError：Python 语法错误\nIndentationError：缩进错误\nSystemError：一般的解释器系统错误\nTypeError：对类型无效的操作\nValueError：传入无效的参数\n\n### python异常代码块\n\n```py\n    try:\n        # func   # 可能会抛出异常的代码\n    except (Exception1, Exception2) as e:  # 可以捕获多个异常并处理\n        # 异常处理的代码\n    else:\n        # pass  # 异常没有发生的时候代码逻辑\n    finally:\n        pass     # 无论异常有没有发生都会执行的代码，一般处理资源的关闭和释放\n\n```\n\n------\n\n## Python中的GIL\n\n### 定义\n\n全局解释器锁 GIL，英文名称为 Global Interpreter Lock，它是解释器中一种线程同步的方式。\n\n \n\n对于每一个解释器进程都具有一个 GIL ，它的直接作用是限制单个解释器进程中多线程的并行执行，使得即使在多核处理器上对于单个解释器进程来说，在同一时刻运行的线程仅限一个。 对于 Python 来讲，GIL 并不是它语言本身的特性，而是 CPython 解释器的实现特性。\n\n \n\nPython 代码被编译后的字节码会在解释器中执行，在执行过程中，存在于 CPython 解释器中的 GIL 会致使在同一时刻只有一个线程可以执行字节码。 GIL 的存在引起的最直接的问题便是：在一个解释器进程中通过多线程的方式无法利用多核处理器来实现真正的并行。\n\n \n\n因此，Python的多线程是伪多线程，无法利用多核资源，同一个时刻只有一个线程在真正的运行。\n\n \n\nGIL的限制了程序的多核执行\n\n \n\n  同一个时间只能有一个线程执行字节码\n\n  CPU密集程序难以利用多核优势\n\n  IO期间会释放GIL，对IO密集程序影响不大\n\n \n\n面对GIL的存在，我们有可以有多个方法帮助我们提升性能\n\n在 IO 密集型任务下，我们可以使用多线程或者协程来完成。\n\n可以选择更换 Jython 等没有 GIL 的解释器，但并不推荐更换解释器，因为会错过众多 C 语言模块中的有用特性。\n\nCPU密集可以使用多进程+进程池。\n\n将计算密集型任务转移到 Python 的 C / C++ 扩展模块中完成\n\n### 为什么有了GIL还要关注线程安全\n\nGIL 保证的是每一条字节码在执行过程中的独占性，即每一条字节码的执行都是原子性的。GIL 具有释放机制，所以 GIL 并不会保证字节码在执行过程中线程不会进行切换，即在多个字节码之间，线程具有切换的可能性。\n\n我们可以用python的dis模块去查看a += 1执行的字节码，发现需要有多个字节码去完成，线程具有切换的可能性，所以它是非线程安全的。\n\n 一个操作如果是一个字节码指令可以完成就是原子的，非原子操作不是线程安全的，原子的是可以保证线程安全的。\n\n GIL 和线程互斥锁的粒度是不同的，GIL 是 Python 解释器级别的互斥，保证的是解释器级别共享资源的一致性，而线程互斥锁则是代码级（或用户级）的互斥，保证的是 Python 程序级别共享数据的一致性，所以我们仍需要线程互斥锁及其他线程同步方式来保证数据一致。\n\n## 迭代器和生成器\n\n{% asset_img 迭代器和生成器.jpg  %}\n\n容器（container）\n\ncontainer 可以理解为把多个元素组织在一起的数据结构，container 中的元素可以逐个地迭代获取，可以用 in, not in 关键字判断元素是否包含在容器中。比如Python中常见的container对象有list，deque，set\n\n \n\n可迭代对象(iterables)\n\n大部分的 container 都是可迭代对象，比如 list or set 都是可迭代对象，可以说只要是可以返回一个迭代器的都可以称作可迭代对象。\n\n \n\n迭代器（iterator）\n\npython中的容器有许多，比如列表、元组、字典、集合等，对于容器，可以很直观地想象成多个元素在一起的单元，所有的容器都是可迭代的（iterable）。\n\n \n\n我们通常使用for in 语句对可迭代的对象进行枚举，其底层机制在于：\n\n而可迭代对象，通过 iter() 函数返回一个迭代器（iterator），迭代器提供了一个 next 的方法。调用用这个方法后，你要么得到这个容器的下一个对象，要么得到一个StopIteration 的错误。\n\n \n\n举个例子：\n\n```markdown\n  \\>>> x = [1, 2, 3]\n\n  \\>>> # Get the iterator\n\n  \\>>> y = iter(items) # Invokes items.__iter__()\n\n  \\>>> # Run the iterator\n\n  \\>>> next(y) # Invokes it.__next__()\n\n  1\n\n  \\>>> next(y)\n\n  2\n\n  \\>>> next(y)\n\n  3\n\n  \\>>> type(x)\n\n  <class 'list'>\n\n  \\>>> type(y)\n\n  <class 'list_iterator'>\n\n  \\>>> next(y)\n\n  Traceback (most recent call last):\n\n​    File \"<stdin>\", line 1, in <module>\n\n  StopIteration\n\n  \\>>>\n```\n\n \n\n上面的例子中，x=[1,2,3]是可迭代对象，这里也叫容器。y=iter(x)则是迭代器，且实现了__iter__和__next__方法。\n\n \n\n它们之间的关系如下图所示：\n\n{% asset_img 迭代器实例.jpg  %}\n\n可见通过 iter 方法后就是迭代器。它是一个带状态的对象，调用 next 方法的时候返回容器中的下一个值，可以说任何实现了iter和 next 方法的对象都是迭代器，iter返回迭代器自身，next 返回容器中的下一个值，如果容器中没有更多元素了，则抛异常。\n\n \n\n迭代器就像一个懒加载的工厂，等到有人需要的时候才给它生成值返回，没调用的时候就处于休眠状态等待下一次调用。\n\n \n\n生成器（generator）\n\n \n\n生成器(generator)可以简单理解为懒人版本的迭代器。\n\n \n\n它相比于迭代器的优势是，生成器并不会像迭代器一样占用大量内存。比如声明一个迭代器：[i for i in range(100000000)]就可以声明一个包含一亿个元素的列表，每个元素在生成后都会保存到内存中。但实际上我们也许并不需要保存那么多东西，只希望在你用 next() 函数的时候，才会生成下一个变量，因此生成器应运而生，在python中的写法为(i for i in range(100000000))\n\n \n\n此外，生成器还可以有别的形式，比如生成器函数，通过yield关键字，把结果返回到next()方法中，举个例子：\n\n```py\n def frange(start, stop, increment):\n\tx = start\n\twhile x < stop:\n\t\tyield x\n    \tx += increment\n for n in frange(0, 2, 0.5):\n    print(n)\n\n  0\n  0.5\n  1.0\n  1.5\n```\n\n相比于迭代器，生成器具有以下优点：\n\n1. 减少内存\n2. 延迟计算\n3. 有效提高代码可读性\n\n## python深拷贝和浅拷贝\n\n- 浅拷贝，指的是重新分配一块内存，创建一个新的对象，但**里面的元素是原对象中各个子对象的引用**。\n- 深拷贝，是指重新分配一块内存，创建一个新的对象，并且将原对象中的元素，以递归的方式，通过创建新的子对象拷贝到新对象中。因此，**新对象和原对象没有任何关联**。\n\n### 浅拷贝\n\n- 使用数据类型**本身的构造器**\n- 对于**可变的序列**，还可以通过切片操作符 : 来完成浅拷贝\n- Python 还提供了对应的函数 **copy.copy()** 函数，适用于任何数据类型\n\n对于元组，使用 tuple() 或者切片操作符 ‘:’ 不会创建一份浅拷贝，相反它会返回一个指向相同元组的引用：\n\n使用 tuple() 或者切片操作符 ‘:’ **不会创建一份浅拷贝**，因为它开辟新的内存存储的是**原对象的引用**，而没有创建新的对象来存储原对象的子对象的引用，所以不是浅拷贝。相反它会返回一个**指向相同元组的引用。**\n\n对字符串使用 str() 或者切片操作符 ‘:’，原理和 元组相同。\n\n也就是说，对字符串和元组使用 copy（）、[:]、本身的构造器完成的复制，都只是开辟了内存存储原对象的引用，而不是存储原对象的子对象的引用。\n\n### 深拷贝\n\nPython 中以 copy.deepcopy() 来实现对象的深度拷贝\n\n### 两者的优缺点对比\n\n（1）深拷贝拷贝程度高，将原数据复制到新的内存空间中。改变拷贝后的内容不影响原数据内容。但是深拷贝耗时长，且占用内存空间。\n（2）浅拷贝拷贝程度低，只复制原数据的地址。其实是将副本的地址指向原数据地址。修改副本内容，是通过当前地址指向原数据地址，去修改。所以修改副本内容会影响到原数据内容。但是浅拷贝耗时短，占用内存空间少\n","slug":"Python学习","published":1,"updated":"2024-09-26T11:26:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm1rz0oew000818qlbtgf5uwh","content":"<p><strong>Python的学习记录</strong></p>\n<span id=\"more\"></span>\n\n<h1 id=\"Python数据结构\"><a href=\"#Python数据结构\" class=\"headerlink\" title=\"Python数据结构\"></a>Python数据结构</h1><h2 id=\"时间复杂度\"><a href=\"#时间复杂度\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">时间复杂度：是用来估计算法运行时间的一个式子</span><br><span class=\"line\"></span><br><span class=\"line\">一般来说，时间复杂度高的算法比复杂度低的算法慢</span><br><span class=\"line\"></span><br><span class=\"line\">常见时间复杂度效率排序（由高到低）：</span><br><span class=\"line\">O(1) &lt; O(log2^n) &lt; O(n) &lt; O(n * log2^n) &lt; O(n^2) &lt; O(n^2 * log2^n) &lt; O(n^3)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">快速判断算法时间复杂度：</span><br><span class=\"line\">确定问题规模n</span><br><span class=\"line\">循环减半----&gt;&gt;log n</span><br><span class=\"line\">k层关于n的循环----&gt;&gt;n^k</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">空间复杂度：用来评估算法内存占用大小的式子</span><br><span class=\"line\"></span><br><span class=\"line\">算法使用了几个变量：O(1)</span><br><span class=\"line\">算法使用了长度为n的一维列表：O(n)</span><br><span class=\"line\">算法使用了m行n列的二维列表：O(mn)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h2><p>函数的嵌套调用，在函数中调用它自身</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">func1</span>(<span class=\"params\">x</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> x &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        func1(x-<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(x)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">func2</span>(<span class=\"params\">y</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> y &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(y)</span><br><span class=\"line\">        func2(y-<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<p>递归：计算1+2+…+100的值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">sum_int</span>(<span class=\"params\">n</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> n &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n + sum_int(n-<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p>递归：汉诺塔问题实例</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">汉诺塔问题</span></span><br><span class=\"line\"><span class=\"string\">有n个大小不同的碗，三个盘子，需要将n个碗从一个盘子，保持原样的移动到另一个盘子中去，不改变原本n个碗的摆放顺序</span></span><br><span class=\"line\"><span class=\"string\">    初始 : n个碗由上到下，由小至大放置于一个盘子之上</span></span><br><span class=\"line\"><span class=\"string\">    结果 : 在不改变n个碗的摆放顺序的条件下，将所有n个碗&quot;平移&quot;到另一个盘子之上</span></span><br><span class=\"line\"><span class=\"string\">        要求 : 一次只能移动一个碗，且小碗必须在大碗上面</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">例:</span></span><br><span class=\"line\"><span class=\"string\">现有 A B C 三个盘子，a(小碗) b(中碗) c(大碗) 三个碗，</span></span><br><span class=\"line\"><span class=\"string\">初始: abc摞在A上</span></span><br><span class=\"line\"><span class=\"string\">过程:</span></span><br><span class=\"line\"><span class=\"string\">    a -&gt; C | b -&gt; B | a -&gt; B | c -&gt; C | a -&gt; A | b -&gt; C | a -&gt; C</span></span><br><span class=\"line\"><span class=\"string\">结束: 原在A上的abc，平移至C上，共计如上移动了七次</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">当有n个碗需要平移时，可以近似将n个碗拆分成 最大的第n个碗 和 其他(n-1)个碗</span></span><br><span class=\"line\"><span class=\"string\">此时类似于</span></span><br><span class=\"line\"><span class=\"string\">    第一步 : (n-1)个碗 从A 经过C 至B</span></span><br><span class=\"line\"><span class=\"string\">    第二步 : 最大的第n个碗 从A 至C</span></span><br><span class=\"line\"><span class=\"string\">    第三步 : (n-1)个碗 从B 经过A 至C</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">hanoi</span>(<span class=\"params\">n, a, b, c</span>):  <span class=\"comment\"># 定义的参数的意思是(n个碗， 从盘子a， 经过盘子b， 到达盘子c)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> n &gt; <span class=\"number\">0</span>:  <span class=\"comment\"># 碗的数量大于0，才有后续递归。即递归终止的条件</span></span><br><span class=\"line\">        hanoi(n-<span class=\"number\">1</span>, a, c, b)  <span class=\"comment\"># 对应上述第一步:从a 经过c 到达b</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;从 %s 到 %s&quot;</span> % (a, c))</span><br><span class=\"line\">        hanoi(n-<span class=\"number\">1</span>, b, a, c)  <span class=\"comment\"># 对应上述第三步:从b 经过a 到达c</span></span><br><span class=\"line\"></span><br><span class=\"line\">hanoi(<span class=\"number\">3</span>, <span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;C&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"Python算法\"><a href=\"#Python算法\" class=\"headerlink\" title=\"Python算法\"></a>Python算法</h1><p><strong>查找:在一些数据元素中，通过一定的方法找出与给定关键字相同的数据元素的过程</strong></p>\n<p>列表查找(线性表查找):从列表中查找指定元素<br>    输入:列表、待查找元素<br>    输出:元素下标(未找到元素时一般返回None或-1)</p>\n<p><strong>Python内置列表查找函数: index()</strong></p>\n<h2 id=\"线性查找\"><a href=\"#线性查找\" class=\"headerlink\" title=\"线性查找\"></a>线性查找</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 线性查找(linear_search)：从列表第一个元素开始，顺序进行搜索，直到找到元素或搜索到列表最后一个元素为止。</span></span><br><span class=\"line\"><span class=\"comment\"># 时间复杂度 O(n)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">linear_search</span>(<span class=\"params\">li, val</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ind, v <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(li):  <span class=\"comment\"># enumerate()是Python的内置函数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> v == val:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ind</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">不用<span class=\"built_in\">enumerate</span>()函数的代码:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">linear_search</span>(<span class=\"params\">list_str, n, val</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, n):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (list_str[i] == val):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二分查找\"><a href=\"#二分查找\" class=\"headerlink\" title=\"二分查找\"></a>二分查找</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 二分查找的对象必须为 【！！！ 有序列表 ！！！】</span></span><br><span class=\"line\"><span class=\"comment\"># 二分查找(Binary_search):又叫折半查找，从有序列表的初始候选区li[0:n]开始，通过对待查找的值与候选区中间值的比较，可以使候选区减少一半</span></span><br><span class=\"line\"><span class=\"comment\"># 时间复杂度 O(log n)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">binary_search</span>(<span class=\"params\">li, val</span>):</span><br><span class=\"line\">    left = <span class=\"number\">0</span></span><br><span class=\"line\">    right = <span class=\"built_in\">len</span>(li) - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> left &lt;= right:  <span class=\"comment\"># 候选区有值</span></span><br><span class=\"line\">        mid = (left + right) // <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> li[mid] == val:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> li[mid] &gt; val:</span><br><span class=\"line\">            right = mid - <span class=\"number\">1</span>  <span class=\"comment\"># 待查找的值在mid左侧</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:  <span class=\"comment\"># li(mid) &lt; val 待查找的值在mid右侧</span></span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><strong>排序 : 将一组 无序 的记录序列调整为 有序 的记录序列</strong></p>\n<p>列表排序 : 将无序列表变为有序列表<br>    输入 : 列表<br>    输出 : 有序列表</p>\n<p>升序与降序</p>\n<p><strong>Python内置排序函数 : sort()</strong></p>\n<p>常见排序算法：冒泡排序，选择排序，插入排序<br>            快速排序，堆排序，归并排序<br>            希尔排序，计数排序，基数排序</p>\n<h2 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">冒泡排序Bubble Sort         时间复杂度O(n^2)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">列表每两个相邻的数，如果前面的比后面的大，则交换这两个数</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">一趟排序完成后，则无序区减少一个数，有序区增加一个数</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">bubble_sort</span>(<span class=\"params\">li</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(li)-<span class=\"number\">1</span>):  <span class=\"comment\"># 第i趟</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(li)-i-<span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> li[j] &gt; li[j+<span class=\"number\">1</span>]:  <span class=\"comment\"># j &gt; j+1 为升序排序，改为j &lt; j+1 则为降序排序</span></span><br><span class=\"line\">                li[j], li[j+<span class=\"number\">1</span>] = li[j+<span class=\"number\">1</span>], li[j]</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(li)  <span class=\"comment\"># 打印每一趟排序</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">选择排序select sort         时间复杂度O(n^2)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">依次遍历列表，每次遍历返回一个最小的元素，再遍历剩下元素找到剩下元素中最小的，循环直到遍历全部最小的元素</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">select_sort</span>(<span class=\"params\">li</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(li)-<span class=\"number\">1</span>):  <span class=\"comment\"># i是第几趟</span></span><br><span class=\"line\">        min_loc = i</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i, <span class=\"built_in\">len</span>(li)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> li[j] &lt; li[min_loc]:</span><br><span class=\"line\">                min_loc = j</span><br><span class=\"line\">        li[i], li[min_loc] = li[min_loc], li[i]</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(li)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">插入排序insert sort         时间复杂度O(n^2)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">初始有序区只有一个元素，从无序区拿来一个元素，按有序插入原有序区，如此循环</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">insert_sort</span>(<span class=\"params\">li</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">len</span>(li)):  <span class=\"comment\"># i 表示拿到的元素的下标</span></span><br><span class=\"line\">        tmp = li[i]</span><br><span class=\"line\">        j = i - <span class=\"number\">1</span>  <span class=\"comment\"># j 指的是已存入有序区的元素</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> j &gt;= <span class=\"number\">0</span> <span class=\"keyword\">and</span> li[j] &gt; tmp:</span><br><span class=\"line\">            li[j+<span class=\"number\">1</span>] = li[j]</span><br><span class=\"line\">            j -= <span class=\"number\">1</span></span><br><span class=\"line\">        li[j+<span class=\"number\">1</span>] = tmp</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(li)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">快速排序quick sort:         时间复杂度O(n * log n)</span></span><br><span class=\"line\"><span class=\"string\">取一个元素p（第一个元素），使元素p归位</span></span><br><span class=\"line\"><span class=\"string\">列表被p分成左右两个部分，左边都比p小，右边都比p大。递归完成排序。</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">partition</span>(<span class=\"params\">li, left, right</span>):  <span class=\"comment\"># left左指针对应0号元素，right右指针对应n-1号元素</span></span><br><span class=\"line\">    tmp = li[left]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> left &lt; right:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> left &lt; right <span class=\"keyword\">and</span> li[right] &gt;= tmp:  <span class=\"comment\"># 从右边找比tmp小的数</span></span><br><span class=\"line\">            right -= <span class=\"number\">1</span>           <span class=\"comment\"># 往左走一步</span></span><br><span class=\"line\">        li[left] = li[right]  <span class=\"comment\"># 把右边的值写到左边空位上</span></span><br><span class=\"line\">        <span class=\"comment\"># print(li)</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> left &lt; right <span class=\"keyword\">and</span> li[left] &lt;= tmp:   <span class=\"comment\"># 从左边找比tmp大的数</span></span><br><span class=\"line\">            left += <span class=\"number\">1</span>            <span class=\"comment\"># 往右走一步</span></span><br><span class=\"line\">        li[right] = li[left]  <span class=\"comment\"># 把左边的值写到右边空位上</span></span><br><span class=\"line\">        <span class=\"comment\"># print(li)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    li[left] = tmp  <span class=\"comment\"># 把tmp归位</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> left</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">quick_sort</span>(<span class=\"params\">li, left, right</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> left &lt; right:  <span class=\"comment\"># 表示列表至少有两个元素</span></span><br><span class=\"line\">        mid = partition(li, left, right)</span><br><span class=\"line\">        quick_sort(li, left, mid-<span class=\"number\">1</span>)</span><br><span class=\"line\">        quick_sort(li, mid+<span class=\"number\">1</span>, right)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">堆排序的过程：         时间复杂度O(n * log n)</span></span><br><span class=\"line\"><span class=\"string\">        建立堆</span></span><br><span class=\"line\"><span class=\"string\">        得到堆顶元素，为最大元素</span></span><br><span class=\"line\"><span class=\"string\">        去掉堆顶，将堆最后一个元素放到堆顶，此时可通过一次调整重新使堆有序</span></span><br><span class=\"line\"><span class=\"string\">        堆顶元素为第二大元素</span></span><br><span class=\"line\"><span class=\"string\">        重复&quot;去掉堆顶...&quot;操作，直到堆变空</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">sift</span>(<span class=\"params\">li, low, high</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    :param li: 列表</span></span><br><span class=\"line\"><span class=\"string\">    :param low: 堆的根节点的位置</span></span><br><span class=\"line\"><span class=\"string\">    :param high: 堆的最后一个元素的位置</span></span><br><span class=\"line\"><span class=\"string\">    :return:</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    i = low  <span class=\"comment\"># i最开始指向根节点</span></span><br><span class=\"line\">    j = <span class=\"number\">2</span> * i + <span class=\"number\">1</span>  <span class=\"comment\"># j开始是i的左孩子</span></span><br><span class=\"line\">    tmp = li[low]  <span class=\"comment\"># 把堆顶存起来</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> j &lt;= high:  <span class=\"comment\"># 只要j位置有数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> j + <span class=\"number\">1</span> &lt;= high <span class=\"keyword\">and</span> li[j+<span class=\"number\">1</span>] &gt; li[j]:  <span class=\"comment\"># 如果右孩子存在且比左孩子大</span></span><br><span class=\"line\">            j = j + <span class=\"number\">1</span>  <span class=\"comment\"># 将j指向右孩子</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> li[j] &gt; tmp:</span><br><span class=\"line\">            li[i] = li[j]</span><br><span class=\"line\">            i = j  <span class=\"comment\"># 往下看一层</span></span><br><span class=\"line\">            j = <span class=\"number\">2</span> * i + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:  <span class=\"comment\"># tmp更大，把tmp放到i的位置上</span></span><br><span class=\"line\">            li[i] = tmp  <span class=\"comment\"># 把tmp放到某一级领导位置上</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        li[i] = tmp  <span class=\"comment\"># 把tmp放到叶子节点上</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">heap_sort</span>(<span class=\"params\">li</span>):</span><br><span class=\"line\">    n = <span class=\"built_in\">len</span>(li)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>((n-<span class=\"number\">2</span>)//<span class=\"number\">2</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"comment\"># i表示建堆的时候调整的部分的根的下标</span></span><br><span class=\"line\">        sift(li, i, n-<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 建堆完成</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n-<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>):</span><br><span class=\"line\">        li[<span class=\"number\">0</span>], li[i] = li[i], li[<span class=\"number\">0</span>]</span><br><span class=\"line\">        sift(li, <span class=\"number\">0</span>, i-<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">将列表由mid分为两边low, high</span></span><br><span class=\"line\"><span class=\"string\">由low-&gt;mid，mid+1-&gt;high两部分</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">时间复杂度O(n * log n)</span></span><br><span class=\"line\"><span class=\"string\">空间复杂度O(n)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">分解：将列表越分越小，直至分成一个元素</span></span><br><span class=\"line\"><span class=\"string\">终止条件：一个元素是有序的</span></span><br><span class=\"line\"><span class=\"string\">合并：将两个有序列表归并，列表越来越大</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">merge</span>(<span class=\"params\">li, low, mid, high</span>):</span><br><span class=\"line\">    i = low</span><br><span class=\"line\">    j = mid + <span class=\"number\">1</span></span><br><span class=\"line\">    ltmp = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> i &lt;= mid <span class=\"keyword\">and</span> j &lt;= high:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> li[i] &lt; li[j]:</span><br><span class=\"line\">            ltmp.append(li[i])</span><br><span class=\"line\">            i += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            ltmp.append(li[j])</span><br><span class=\"line\">            j += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"comment\"># while执行完后，左半和右半肯定有一部分没有可比较元素</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> i &lt;= mid:</span><br><span class=\"line\">        ltmp.append(li[i])</span><br><span class=\"line\">        i += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> j &lt;= high:</span><br><span class=\"line\">        ltmp.append(li[j])</span><br><span class=\"line\">        j += <span class=\"number\">1</span></span><br><span class=\"line\">    li[low:high+<span class=\"number\">1</span>] = ltmp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">merge_sort</span>(<span class=\"params\">li, low, high</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> low &lt; high:  <span class=\"comment\"># 至少有两个元素</span></span><br><span class=\"line\">        mid = (low + high) // <span class=\"number\">2</span></span><br><span class=\"line\">        merge_sort(li, low, mid)</span><br><span class=\"line\">        merge_sort(li, mid+<span class=\"number\">1</span>, high)</span><br><span class=\"line\">        merge(li, low, mid, high)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"Python实战\"><a href=\"#Python实战\" class=\"headerlink\" title=\"Python实战\"></a>Python实战</h1><h2 id=\"名片管理系统-基础\"><a href=\"#名片管理系统-基础\" class=\"headerlink\" title=\"名片管理系统(基础)\"></a>名片管理系统(基础)</h2><h3 id=\"实现的功能\"><a href=\"#实现的功能\" class=\"headerlink\" title=\"实现的功能\"></a>实现的功能</h3><ol>\n<li>无限循环实现系统的连续操作</li>\n<li>实现系统基本的增删改查和显示功能</li>\n</ol>\n<h3 id=\"cards-main-py\"><a href=\"#cards-main-py\" class=\"headerlink\" title=\"cards_main.py\"></a>cards_main.py</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cards_tools</span><br><span class=\"line\"><span class=\"comment\"># 无限循环方法</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 主界面显示</span></span><br><span class=\"line\">    cards_tools.show_menu()</span><br><span class=\"line\"></span><br><span class=\"line\">    user = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请选择将要进行的操作:&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;您选择的操作是 %s&quot;</span> % user)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 系统执行操作1、2、3</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> user <span class=\"keyword\">in</span> [<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>]:</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 新增名片功能</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> user == <span class=\"string\">&quot;1&quot;</span>:</span><br><span class=\"line\">            cards_tools.new_card()</span><br><span class=\"line\">        <span class=\"comment\"># 显示名片功能</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> user == <span class=\"string\">&quot;2&quot;</span>:</span><br><span class=\"line\">            cards_tools.show_card()</span><br><span class=\"line\">        <span class=\"comment\"># 查询名片功能</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> user == <span class=\"string\">&quot;3&quot;</span>:</span><br><span class=\"line\">            cards_tools.search_card()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 退出系统</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> user == <span class=\"string\">&quot;0&quot;</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;欢迎再次使用【名片管理系统】&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 用户输入错误3</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;输入错误，请重新输入&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"cards-tools-py\"><a href=\"#cards-tools-py\" class=\"headerlink\" title=\"cards_tools.py\"></a>cards_tools.py</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">card_list = []</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">show_menu</span>():</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;主界面的显示&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;* &quot;</span> * <span class=\"number\">15</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;    欢迎使用【名片管理系统】&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;        1.新增名片&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;        2.显示名片&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;        3.查找名片&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;        0.退出系统&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;* &quot;</span> * <span class=\"number\">15</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">new_card</span>():</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;新增名片&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;1.新增名片&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 1.用户依次输入名片的所有信息</span></span><br><span class=\"line\">    name = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入用户的姓名:&quot;</span>)</span><br><span class=\"line\">    phone = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入用户的电话号码:&quot;</span>)</span><br><span class=\"line\">    qq = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入用户的qq号码:&quot;</span>)</span><br><span class=\"line\">    email = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入用户的邮箱:&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 2.新建一个字典用于保存用户的输入</span></span><br><span class=\"line\">    card_dict = &#123;<span class=\"string\">&quot;name&quot;</span>: name,</span><br><span class=\"line\">                 <span class=\"string\">&quot;phone&quot;</span>: phone,</span><br><span class=\"line\">                 <span class=\"string\">&quot;qq&quot;</span>: qq,</span><br><span class=\"line\">                 <span class=\"string\">&quot;email&quot;</span>: email&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 3.将该字典的信息存放到数组上</span></span><br><span class=\"line\">    card_list.append(card_dict)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(card_list)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 4.提示用户添加成功</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;用户 %s 的信息添加成功&quot;</span> % name)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">show_card</span>():</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;显示名片&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;2.显示名片&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;- &quot;</span> * <span class=\"number\">15</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 判断是否存在名片信息记录，若没有，提示用户返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(card_list) == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;当前没有任何名片，请使用新增功能先添加名片再进行后续操作！&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 打印表头</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> card_list:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(name, end=<span class=\"string\">&quot;\\t\\t&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> card_dict <span class=\"keyword\">in</span> card_list:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;%s\\t\\t%s\\t\\t%s\\t\\t%s&quot;</span> % (card_dict[<span class=\"string\">&quot;name&quot;</span>],</span><br><span class=\"line\">                                        card_dict[<span class=\"string\">&quot;phone&quot;</span>],</span><br><span class=\"line\">                                        card_dict[<span class=\"string\">&quot;qq&quot;</span>],</span><br><span class=\"line\">                                        card_dict[<span class=\"string\">&quot;email&quot;</span>]))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;- &quot;</span> * <span class=\"number\">15</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">search_card</span>():</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;查找名片&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;3.查找名片&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 1.提示用户输入要搜索的姓名</span></span><br><span class=\"line\">    find_name = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入要搜索的用户姓名:&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 2.遍历名片列表，查询要搜索的姓名，若没有，需要提示用户</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> card_dict <span class=\"keyword\">in</span> card_list:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> card_dict[<span class=\"string\">&quot;name&quot;</span>] == find_name:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;姓名\\t\\t电话\\t\\tQQ\\t\\t地址&quot;</span>)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;%s\\t\\t%s\\t\\t%s\\t\\t%s&quot;</span> % (card_dict[<span class=\"string\">&quot;name&quot;</span>],</span><br><span class=\"line\">                                            card_dict[<span class=\"string\">&quot;phone&quot;</span>],</span><br><span class=\"line\">                                            card_dict[<span class=\"string\">&quot;qq&quot;</span>],</span><br><span class=\"line\">                                            card_dict[<span class=\"string\">&quot;email&quot;</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 针对找到的名片执行修改和删除操作</span></span><br><span class=\"line\">            deal_card(card_dict)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;没有找到 %s 的信息&quot;</span> % find_name)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">deal_card</span>(<span class=\"params\">find_dict</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(find_dict)</span><br><span class=\"line\"></span><br><span class=\"line\">    user_do = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请选择要执行的操作&quot;</span></span><br><span class=\"line\">                    <span class=\"string\">&quot;[1]修改  [2]删除  [0]返回上一级&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> user_do == <span class=\"string\">&quot;1&quot;</span>:</span><br><span class=\"line\">        find_dict[<span class=\"string\">&quot;name&quot;</span>] = input_card_info(find_dict[<span class=\"string\">&quot;name&quot;</span>], <span class=\"string\">&quot;姓名:&quot;</span>)</span><br><span class=\"line\">        find_dict[<span class=\"string\">&quot;phone&quot;</span>] = input_card_info(find_dict[<span class=\"string\">&quot;phone&quot;</span>], <span class=\"string\">&quot;电话:&quot;</span>)</span><br><span class=\"line\">        find_dict[<span class=\"string\">&quot;qq&quot;</span>] = input_card_info(find_dict[<span class=\"string\">&quot;qq&quot;</span>], <span class=\"string\">&quot;QQ:&quot;</span>)</span><br><span class=\"line\">        find_dict[<span class=\"string\">&quot;email&quot;</span>] = input_card_info(find_dict[<span class=\"string\">&quot;email&quot;</span>], <span class=\"string\">&quot;邮箱:&quot;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;修改名片成功&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> user_do == <span class=\"string\">&quot;2&quot;</span>:</span><br><span class=\"line\">        card_list.remove(find_dict)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;删除名片成功&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">input_card_info</span>(<span class=\"params\">dict_value, tip_message</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    result_str = <span class=\"built_in\">input</span>(tip_message)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(result_str) &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result_str</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dict_value</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"控制台效果展示\"><a href=\"#控制台效果展示\" class=\"headerlink\" title=\"控制台效果展示\"></a>控制台效果展示</h3><img src=\"/posts/e39e2a4e/%E5%90%8D%E7%89%87%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E6%95%88%E6%9E%9C%E5%9B%BE1.jpg\" class=\"\">\n\n<img src=\"/posts/e39e2a4e/%E5%90%8D%E7%89%87%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E6%95%88%E6%9E%9C%E5%9B%BE2.jpg\" class=\"\">\n\n<img src=\"/posts/e39e2a4e/%E5%90%8D%E7%89%87%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E6%95%88%E6%9E%9C%E5%9B%BE3.jpg\" class=\"\">\n\n<hr>\n<h2 id=\"飞机大战游戏-pygame\"><a href=\"#飞机大战游戏-pygame\" class=\"headerlink\" title=\"飞机大战游戏(pygame)\"></a>飞机大战游戏(pygame)</h2><h3 id=\"实现的功能-1\"><a href=\"#实现的功能-1\" class=\"headerlink\" title=\"实现的功能\"></a><strong>实现的功能</strong></h3><ol>\n<li>背景图片的滚动播放</li>\n<li>碰撞检测—-子弹碰撞飞机，敌机碰撞飞机</li>\n<li>键盘←→控制飞机的左右移动</li>\n<li>random随机数实现敌机的出现数量</li>\n<li>代码中可直接修改所有飞机的移动速度</li>\n</ol>\n<h3 id=\"plane-main-py\"><a href=\"#plane-main-py\" class=\"headerlink\" title=\"plane_main.py\"></a>plane_main.py</h3><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># import pygame 飞机精灵导入了pygame的模块</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> plane_sprites <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">PlaneGame</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;飞机大战主游戏&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;...游戏初始化...&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 1.创建游戏窗口</span></span><br><span class=\"line\">        self.screen = pygame.display.set_mode(SCREEN_RECT.size)</span><br><span class=\"line\">        <span class=\"comment\"># 2.创建游戏时钟</span></span><br><span class=\"line\">        self.clock = pygame.time.Clock()</span><br><span class=\"line\">        <span class=\"comment\"># 3.调用私有方法，精灵和精灵组的创建</span></span><br><span class=\"line\">        self.__create_sprites()</span><br><span class=\"line\">        <span class=\"comment\"># 4.设置定时器事件 - 创建敌机 1s/架</span></span><br><span class=\"line\">        pygame.time.set_timer(CREATE_ENEMY_EVENT, <span class=\"number\">1000</span>)  <span class=\"comment\"># 第二个参数以毫秒为单位</span></span><br><span class=\"line\">        pygame.time.set_timer(HERO_FIRE_EVENT, <span class=\"number\">500</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__create_sprites</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 创建背景精灵和精灵组</span></span><br><span class=\"line\">        bg1 = Background()</span><br><span class=\"line\">        bg2 = Background(<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.back_group = pygame.sprite.Group(bg1, bg2)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 创建敌机的精灵组</span></span><br><span class=\"line\">        self.enemy_group = pygame.sprite.Group()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 创建英雄的精灵和精灵组</span></span><br><span class=\"line\">        self.hero = Hero()</span><br><span class=\"line\">        self.hero_group = pygame.sprite.Group(self.hero)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">start_game</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;...游戏开始...&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 1.设置刷新帧率</span></span><br><span class=\"line\">            self.clock.tick(FRAME_PER_SEC)</span><br><span class=\"line\">            <span class=\"comment\"># 2.事件监听</span></span><br><span class=\"line\">            self.__event_handler()</span><br><span class=\"line\">            <span class=\"comment\"># 3.碰撞检测</span></span><br><span class=\"line\">            self.__check_collide()</span><br><span class=\"line\">            <span class=\"comment\"># 4.更新/绘制精灵组</span></span><br><span class=\"line\">            self.__update_sprites()</span><br><span class=\"line\">            <span class=\"comment\"># 5.更新显示</span></span><br><span class=\"line\">            pygame.display.update()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__event_handler</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> event <span class=\"keyword\">in</span> pygame.event.get():</span><br><span class=\"line\">            <span class=\"comment\"># 判断是否退出游戏</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> event.<span class=\"built_in\">type</span> == pygame.QUIT:</span><br><span class=\"line\">                PlaneGame.__game_over()</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> event.<span class=\"built_in\">type</span> == CREATE_ENEMY_EVENT:</span><br><span class=\"line\">                <span class=\"comment\"># print(&quot;...敌机出场...&quot;)</span></span><br><span class=\"line\">                <span class=\"comment\"># 创建敌机精灵</span></span><br><span class=\"line\">                enemy = Enemy()</span><br><span class=\"line\">                <span class=\"comment\"># 将敌机精灵添加到敌机精灵组</span></span><br><span class=\"line\">                self.enemy_group.add(enemy)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> event.<span class=\"built_in\">type</span> == HERO_FIRE_EVENT:</span><br><span class=\"line\">                self.hero.fire()</span><br><span class=\"line\">            <span class=\"comment\"># elif event.type == pygame.KEY_DOWN and event.key == pygame.K_RIGHT:</span></span><br><span class=\"line\">                <span class=\"comment\"># print(&quot;向右移动&quot;)</span></span><br><span class=\"line\">        <span class=\"comment\"># 使用键盘提供的方法获取键盘按键</span></span><br><span class=\"line\">        keys_pressed = pygame.key.get_pressed()</span><br><span class=\"line\">        <span class=\"comment\"># 判断元组中对应的按键索引值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> keys_pressed[pygame.K_RIGHT]:</span><br><span class=\"line\">            self.hero.speed = <span class=\"number\">5</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> keys_pressed[pygame.K_LEFT]:</span><br><span class=\"line\">            self.hero.speed = -<span class=\"number\">5</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.hero.speed = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__check_collide</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 1.子弹摧毁敌机</span></span><br><span class=\"line\">        pygame.sprite.groupcollide(self.hero.bullets, self.enemy_group, <span class=\"literal\">True</span>, <span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 2.敌机撞毁英雄</span></span><br><span class=\"line\">        enemies = pygame.sprite.spritecollide(self.hero, self.enemy_group, <span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 3.判断列表是否有内容</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(enemies) &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 让英雄牺牲</span></span><br><span class=\"line\">            self.hero.kill()</span><br><span class=\"line\">            <span class=\"comment\"># 结束游戏</span></span><br><span class=\"line\">            PlaneGame.__game_over()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__update_sprites</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.back_group.update()</span><br><span class=\"line\">        self.back_group.draw(self.screen)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.enemy_group.update()</span><br><span class=\"line\">        self.enemy_group.draw(self.screen)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.hero_group.update()</span><br><span class=\"line\">        self.hero_group.draw(self.screen)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.hero.bullets.update()</span><br><span class=\"line\">        self.hero.bullets.draw(self.screen)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__game_over</span>():</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;游戏结束&quot;</span>)</span><br><span class=\"line\">        pygame.quit()</span><br><span class=\"line\">        exit()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 创建游戏对象</span></span><br><span class=\"line\">    game = PlaneGame()</span><br><span class=\"line\">    <span class=\"comment\"># 启动游戏</span></span><br><span class=\"line\">    game.start_game()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"plane-sprites-py\"><a href=\"#plane-sprites-py\" class=\"headerlink\" title=\"plane_sprites.py\"></a>plane_sprites.py</h3><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> pygame</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 屏幕大小的常量</span></span><br><span class=\"line\">SCREEN_RECT = pygame.Rect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">480</span>, <span class=\"number\">700</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 刷新的帧率</span></span><br><span class=\"line\">FRAME_PER_SEC = <span class=\"number\">60</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建敌机的定时器常量</span></span><br><span class=\"line\">CREATE_ENEMY_EVENT = pygame.USEREVENT</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 英雄发射子弹事件</span></span><br><span class=\"line\">HERO_FIRE_EVENT = pygame.USEREVENT + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">GameSprite</span>(pygame.sprite.Sprite):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;飞机大战游戏精灵&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, image_name, speed=<span class=\"number\">1</span></span>):</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 调用父类的初始化方法</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 定义对象的属性</span></span><br><span class=\"line\">        self.image = pygame.image.load(image_name)</span><br><span class=\"line\">        self.rect = self.image.get_rect()</span><br><span class=\"line\">        self.speed = speed</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">update</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 在屏幕的垂直方向上移动</span></span><br><span class=\"line\">        self.rect.y += self.speed</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Background</span>(<span class=\"title class_ inherited__\">GameSprite</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;游戏背景精灵&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, is_alt=<span class=\"literal\">False</span></span>):</span><br><span class=\"line\">        <span class=\"comment\"># 1.调用父类方法实现精灵的创建(image/rect/speed)</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__(<span class=\"string\">&quot;./images/background.png&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 2.判断是否是交替图像，如果是，需要设置初始位置</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_alt:</span><br><span class=\"line\">            self.rect.y = -self.rect.height</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">update</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 1.调用父类的方法实现</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>().update()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 2.判断图像是否移出屏幕，若移出，将图像设置到屏幕的上方</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.rect.y &gt;= SCREEN_RECT.height:</span><br><span class=\"line\">            self.rect.y = -self.rect.height</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Enemy</span>(<span class=\"title class_ inherited__\">GameSprite</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;敌机精灵&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 1.调用父类方法，创建敌机精灵，同时指定敌机图片</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__(<span class=\"string\">&quot;./images/enemy1.png&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 2.指定敌机的初始随机速度</span></span><br><span class=\"line\">        self.speed = random.randint(<span class=\"number\">1</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 3.指定敌机的初始随机位置</span></span><br><span class=\"line\">        self.rect.bottom = <span class=\"number\">0</span></span><br><span class=\"line\">        max_x = SCREEN_RECT.width - self.rect.width</span><br><span class=\"line\">        self.rect.x = random.randint(<span class=\"number\">0</span>, max_x)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">update</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 1.调用父类方法，保持垂直方向的飞行</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>().update()</span><br><span class=\"line\">        <span class=\"comment\"># 2.判断是否飞出屏幕，如果是，需要从精灵组删除敌机</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.rect.y &gt;= SCREEN_RECT.height:</span><br><span class=\"line\">            <span class=\"comment\"># print(&quot;飞出屏幕，需要从精灵组删除&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># kill方法可以将精灵从所有精灵组中移出，精灵就会被自动销毁</span></span><br><span class=\"line\">            self.kill()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__del__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># print(&quot;敌机爆炸 %s&quot; % self.rect)</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Hero</span>(<span class=\"title class_ inherited__\">GameSprite</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;英雄精灵&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 1.调用父类方法，设置image&amp;speed</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__(<span class=\"string\">&quot;./images/me1.png&quot;</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 2.设置英雄的初始位置</span></span><br><span class=\"line\">        self.rect.centerx = SCREEN_RECT.centerx</span><br><span class=\"line\">        self.rect.bottom = SCREEN_RECT.bottom - <span class=\"number\">120</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 3.创建子弹的精灵组</span></span><br><span class=\"line\">        self.bullets = pygame.sprite.Group()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">update</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 英雄在水平方向移动</span></span><br><span class=\"line\">        self.rect.x += self.speed</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 控制英雄不能离开屏幕</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.rect.x &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            self.rect.x = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> self.rect.right &gt; SCREEN_RECT.right:</span><br><span class=\"line\">            self.rect.right = SCREEN_RECT.right</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">fire</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># print(&quot;发射子弹&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> (<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>):</span><br><span class=\"line\">            <span class=\"comment\"># 1.创建子弹精灵</span></span><br><span class=\"line\">            bullet = Bullet()</span><br><span class=\"line\">            <span class=\"comment\"># 2.设置精灵的位置</span></span><br><span class=\"line\">            bullet.rect.bottom = self.rect.y - i * <span class=\"number\">20</span></span><br><span class=\"line\">            bullet.rect.centerx = self.rect.centerx</span><br><span class=\"line\">            <span class=\"comment\"># 3.将精灵添加到精灵组</span></span><br><span class=\"line\">            self.bullets.add(bullet)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Bullet</span>(<span class=\"title class_ inherited__\">GameSprite</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;子弹精灵&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 调用父类方法，设置子弹图片，设置初始速度</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__(<span class=\"string\">&quot;./images/bullet1.png&quot;</span>, -<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">update</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 调用父类方法，让子弹沿垂直方向飞行</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>().update()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 判断子弹是否飞出屏幕</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.rect.bottom &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            self.kill()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__del__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># print(&quot;子弹被销毁&quot;)</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"游戏运行效果展示图\"><a href=\"#游戏运行效果展示图\" class=\"headerlink\" title=\"游戏运行效果展示图\"></a>游戏运行效果展示图</h3><img src=\"/posts/e39e2a4e/%E9%A3%9E%E6%9C%BA%E5%A4%A7%E6%88%98.jpg\" class=\"\">\n\n<hr>\n<h1 id=\"Python面经\"><a href=\"#Python面经\" class=\"headerlink\" title=\"Python面经\"></a>Python面经</h1><h2 id=\"列表、元组、字典\"><a href=\"#列表、元组、字典\" class=\"headerlink\" title=\"列表、元组、字典\"></a>列表、元组、字典</h2><ol>\n<li>列表是动态数组，它们不可变且可以重设长度（改变其内部元素的个数）。</li>\n<li>元组是静态数组，它们不可变，且其内部数据一旦创建便无法改变。</li>\n<li>元组缓存于Python运行时环境，这意味着我们每次使用元组时无须访问内核去分配内存。</li>\n</ol>\n<p><strong>列表元组字典的一些区别：</strong></p>\n<p>1、列表list：有序，可变。</p>\n<p>2、元组tuple：有序，不可变。</p>\n<p>3、字典dict：无序，字典的key是不可变的，值是可变的；在python中字符串，数字，元组都是不可变的对象。</p>\n<p>4、序列：列表，元组和字符串都属于序列；即成员有序排列，可以通过下标访问，可以进行切片操作。字符串（普通字符串和unicode字符串）</p>\n<p>5、集合：没有顺序的简单对象的聚集。可以检查成员是否存在，是否是另一个集合的子集，得到两个集合的交集等等</p>\n<p>6、复制一个列表或者类似的序列或者其他复杂对象，那么必须使用切片操作符来去的拷贝。当你创建一个对象并将它赋值给一个变量的时候，这个变量仅仅引用那个对象，而不是表示这个对象本身！也就是说，变量名指向你计算机中存储那个对象的内存。这被称作名称到对象的绑定。</p>\n<h2 id=\"Python的异常机制\"><a href=\"#Python的异常机制\" class=\"headerlink\" title=\"Python的异常机制\"></a>Python的异常机制</h2><h3 id=\"1、什么是异常？\"><a href=\"#1、什么是异常？\" class=\"headerlink\" title=\"1、什么是异常？\"></a>1、什么是异常？</h3><p>异常即是一个事件，该事件会在程序执行过程中发生，影响了程序的正常执行。<br> 一般情况下，在Python无法正常处理程序时就会发生一个异常。<br> 异常是Python对象，表示一个错误。<br> 当Python脚本发生异常时我们需要捕获处理它，否则程序会终止执行。</p>\n<h3 id=\"2、try…except…else结构\"><a href=\"#2、try…except…else结构\" class=\"headerlink\" title=\"2、try…except…else结构\"></a>2、try…except…else结构</h3><p>如果try块中没有抛出异常，则执行else块，如果try中抛出异常，则执行except模块<br> except：捕获所有的异常</p>\n<p>不带任何异常类型使用except，如下实例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try:</span><br><span class=\"line\">    正常的操作</span><br><span class=\"line\">   ......................</span><br><span class=\"line\">except:</span><br><span class=\"line\">    发生异常，执行这块代码</span><br><span class=\"line\">   ......................</span><br><span class=\"line\">else:</span><br><span class=\"line\">    如果没有异常执行这块代码</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>使用相同的except语句来处理多个异常信息，如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try:</span><br><span class=\"line\">    正常的操作</span><br><span class=\"line\">   ......................</span><br><span class=\"line\">except(Exception1[, Exception2[,...ExceptionN]]):</span><br><span class=\"line\">   发生以上多个异常中的一个，执行这块代码</span><br><span class=\"line\">   ......................</span><br><span class=\"line\">else:</span><br><span class=\"line\">    如果没有异常执行这块代码</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、try…except…else…finally\"><a href=\"#3、try…except…else…finally\" class=\"headerlink\" title=\"3、try…except…else…finally\"></a>3、try…except…else…finally</h3><p>finally块无论是否发生异常都会执行，能常用来解释try块中申请的的资源</p>\n<h3 id=\"4、python中常见的异常类型\"><a href=\"#4、python中常见的异常类型\" class=\"headerlink\" title=\"4、python中常见的异常类型\"></a>4、python中常见的异常类型</h3><p>Exception：常规错误的基类<br>ZeroDivisionError：除(或取模)零 (所有数据类型)<br>AssertionError：断言语句失败<br>AttributeError：对象没有这个属性<br>IOError：输入&#x2F;输出操作失败<br>ImportError：导入模块&#x2F;对象失败<br>IndexError：序列中没有此索引(index)<br>KeyError：映射中没有这个键<br>NameError：未声明&#x2F;初始化对象 (没有属性)<br>SyntaxError：Python 语法错误<br>IndentationError：缩进错误<br>SystemError：一般的解释器系统错误<br>TypeError：对类型无效的操作<br>ValueError：传入无效的参数</p>\n<h3 id=\"python异常代码块\"><a href=\"#python异常代码块\" class=\"headerlink\" title=\"python异常代码块\"></a>python异常代码块</h3><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"comment\"># func   # 可能会抛出异常的代码</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> (Exception1, Exception2) <span class=\"keyword\">as</span> e:  <span class=\"comment\"># 可以捕获多个异常并处理</span></span><br><span class=\"line\">    <span class=\"comment\"># 异常处理的代码</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"comment\"># pass  # 异常没有发生的时候代码逻辑</span></span><br><span class=\"line\"><span class=\"keyword\">finally</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span>     <span class=\"comment\"># 无论异常有没有发生都会执行的代码，一般处理资源的关闭和释放</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"Python中的GIL\"><a href=\"#Python中的GIL\" class=\"headerlink\" title=\"Python中的GIL\"></a>Python中的GIL</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>全局解释器锁 GIL，英文名称为 Global Interpreter Lock，它是解释器中一种线程同步的方式。</p>\n<p>对于每一个解释器进程都具有一个 GIL ，它的直接作用是限制单个解释器进程中多线程的并行执行，使得即使在多核处理器上对于单个解释器进程来说，在同一时刻运行的线程仅限一个。 对于 Python 来讲，GIL 并不是它语言本身的特性，而是 CPython 解释器的实现特性。</p>\n<p>Python 代码被编译后的字节码会在解释器中执行，在执行过程中，存在于 CPython 解释器中的 GIL 会致使在同一时刻只有一个线程可以执行字节码。 GIL 的存在引起的最直接的问题便是：在一个解释器进程中通过多线程的方式无法利用多核处理器来实现真正的并行。</p>\n<p>因此，Python的多线程是伪多线程，无法利用多核资源，同一个时刻只有一个线程在真正的运行。</p>\n<p>GIL的限制了程序的多核执行</p>\n<p>  同一个时间只能有一个线程执行字节码</p>\n<p>  CPU密集程序难以利用多核优势</p>\n<p>  IO期间会释放GIL，对IO密集程序影响不大</p>\n<p>面对GIL的存在，我们有可以有多个方法帮助我们提升性能</p>\n<p>在 IO 密集型任务下，我们可以使用多线程或者协程来完成。</p>\n<p>可以选择更换 Jython 等没有 GIL 的解释器，但并不推荐更换解释器，因为会错过众多 C 语言模块中的有用特性。</p>\n<p>CPU密集可以使用多进程+进程池。</p>\n<p>将计算密集型任务转移到 Python 的 C &#x2F; C++ 扩展模块中完成</p>\n<h3 id=\"为什么有了GIL还要关注线程安全\"><a href=\"#为什么有了GIL还要关注线程安全\" class=\"headerlink\" title=\"为什么有了GIL还要关注线程安全\"></a>为什么有了GIL还要关注线程安全</h3><p>GIL 保证的是每一条字节码在执行过程中的独占性，即每一条字节码的执行都是原子性的。GIL 具有释放机制，所以 GIL 并不会保证字节码在执行过程中线程不会进行切换，即在多个字节码之间，线程具有切换的可能性。</p>\n<p>我们可以用python的dis模块去查看a +&#x3D; 1执行的字节码，发现需要有多个字节码去完成，线程具有切换的可能性，所以它是非线程安全的。</p>\n<p> 一个操作如果是一个字节码指令可以完成就是原子的，非原子操作不是线程安全的，原子的是可以保证线程安全的。</p>\n<p> GIL 和线程互斥锁的粒度是不同的，GIL 是 Python 解释器级别的互斥，保证的是解释器级别共享资源的一致性，而线程互斥锁则是代码级（或用户级）的互斥，保证的是 Python 程序级别共享数据的一致性，所以我们仍需要线程互斥锁及其他线程同步方式来保证数据一致。</p>\n<h2 id=\"迭代器和生成器\"><a href=\"#迭代器和生成器\" class=\"headerlink\" title=\"迭代器和生成器\"></a>迭代器和生成器</h2><img src=\"/posts/e39e2a4e/%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8.jpg\" class=\"\">\n\n<p>容器（container）</p>\n<p>container 可以理解为把多个元素组织在一起的数据结构，container 中的元素可以逐个地迭代获取，可以用 in, not in 关键字判断元素是否包含在容器中。比如Python中常见的container对象有list，deque，set</p>\n<p>可迭代对象(iterables)</p>\n<p>大部分的 container 都是可迭代对象，比如 list or set 都是可迭代对象，可以说只要是可以返回一个迭代器的都可以称作可迭代对象。</p>\n<p>迭代器（iterator）</p>\n<p>python中的容器有许多，比如列表、元组、字典、集合等，对于容器，可以很直观地想象成多个元素在一起的单元，所有的容器都是可迭代的（iterable）。</p>\n<p>我们通常使用for in 语句对可迭代的对象进行枚举，其底层机制在于：</p>\n<p>而可迭代对象，通过 iter() 函数返回一个迭代器（iterator），迭代器提供了一个 next 的方法。调用用这个方法后，你要么得到这个容器的下一个对象，要么得到一个StopIteration 的错误。</p>\n<p>举个例子：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  \\&gt;&gt;&gt; x = [1, 2, 3]</span><br><span class=\"line\"></span><br><span class=\"line\">  \\&gt;&gt;&gt; # Get the iterator</span><br><span class=\"line\"></span><br><span class=\"line\">  \\&gt;&gt;&gt; y = iter(items) # Invokes items.<span class=\"strong\">__iter__</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  \\&gt;&gt;&gt; # Run the iterator</span><br><span class=\"line\"></span><br><span class=\"line\">  \\&gt;&gt;&gt; next(y) # Invokes it.<span class=\"strong\">__next__</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  1</span><br><span class=\"line\"></span><br><span class=\"line\">  \\&gt;&gt;&gt; next(y)</span><br><span class=\"line\"></span><br><span class=\"line\">  2</span><br><span class=\"line\"></span><br><span class=\"line\">  \\&gt;&gt;&gt; next(y)</span><br><span class=\"line\"></span><br><span class=\"line\">  3</span><br><span class=\"line\"></span><br><span class=\"line\">  \\&gt;&gt;&gt; type(x)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">class</span> &#x27;<span class=\"attr\">list</span>&#x27;&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  \\&gt;&gt;&gt; type(y)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">class</span> &#x27;<span class=\"attr\">list_iterator</span>&#x27;&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  \\&gt;&gt;&gt; next(y)</span><br><span class=\"line\"></span><br><span class=\"line\">  Traceback (most recent call last):</span><br><span class=\"line\"></span><br><span class=\"line\">​    File &quot;<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">stdin</span>&gt;</span></span>&quot;, line 1, in <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  StopIteration</span><br><span class=\"line\"></span><br><span class=\"line\">  \\&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>上面的例子中，x&#x3D;[1,2,3]是可迭代对象，这里也叫容器。y&#x3D;iter(x)则是迭代器，且实现了__iter__和__next__方法。</p>\n<p>它们之间的关系如下图所示：</p>\n<img src=\"/posts/e39e2a4e/%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%AE%9E%E4%BE%8B.jpg\" class=\"\">\n\n<p>可见通过 iter 方法后就是迭代器。它是一个带状态的对象，调用 next 方法的时候返回容器中的下一个值，可以说任何实现了iter和 next 方法的对象都是迭代器，iter返回迭代器自身，next 返回容器中的下一个值，如果容器中没有更多元素了，则抛异常。</p>\n<p>迭代器就像一个懒加载的工厂，等到有人需要的时候才给它生成值返回，没调用的时候就处于休眠状态等待下一次调用。</p>\n<p>生成器（generator）</p>\n<p>生成器(generator)可以简单理解为懒人版本的迭代器。</p>\n<p>它相比于迭代器的优势是，生成器并不会像迭代器一样占用大量内存。比如声明一个迭代器：[i for i in range(100000000)]就可以声明一个包含一亿个元素的列表，每个元素在生成后都会保存到内存中。但实际上我们也许并不需要保存那么多东西，只希望在你用 next() 函数的时候，才会生成下一个变量，因此生成器应运而生，在python中的写法为(i for i in range(100000000))</p>\n<p>此外，生成器还可以有别的形式，比如生成器函数，通过yield关键字，把结果返回到next()方法中，举个例子：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">frange</span>(<span class=\"params\">start, stop, increment</span>):</span><br><span class=\"line\">x = start</span><br><span class=\"line\"><span class=\"keyword\">while</span> x &lt; stop:</span><br><span class=\"line\">\t<span class=\"keyword\">yield</span> x</span><br><span class=\"line\">   \tx += increment</span><br><span class=\"line\"><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> frange(<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">0.5</span>):</span><br><span class=\"line\">   <span class=\"built_in\">print</span>(n)</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"number\">0</span></span><br><span class=\"line\"> <span class=\"number\">0.5</span></span><br><span class=\"line\"> <span class=\"number\">1.0</span></span><br><span class=\"line\"> <span class=\"number\">1.5</span></span><br></pre></td></tr></table></figure>\n\n<p>相比于迭代器，生成器具有以下优点：</p>\n<ol>\n<li>减少内存</li>\n<li>延迟计算</li>\n<li>有效提高代码可读性</li>\n</ol>\n<h2 id=\"python深拷贝和浅拷贝\"><a href=\"#python深拷贝和浅拷贝\" class=\"headerlink\" title=\"python深拷贝和浅拷贝\"></a>python深拷贝和浅拷贝</h2><ul>\n<li>浅拷贝，指的是重新分配一块内存，创建一个新的对象，但<strong>里面的元素是原对象中各个子对象的引用</strong>。</li>\n<li>深拷贝，是指重新分配一块内存，创建一个新的对象，并且将原对象中的元素，以递归的方式，通过创建新的子对象拷贝到新对象中。因此，<strong>新对象和原对象没有任何关联</strong>。</li>\n</ul>\n<h3 id=\"浅拷贝\"><a href=\"#浅拷贝\" class=\"headerlink\" title=\"浅拷贝\"></a>浅拷贝</h3><ul>\n<li>使用数据类型<strong>本身的构造器</strong></li>\n<li>对于<strong>可变的序列</strong>，还可以通过切片操作符 : 来完成浅拷贝</li>\n<li>Python 还提供了对应的函数 <strong>copy.copy()</strong> 函数，适用于任何数据类型</li>\n</ul>\n<p>对于元组，使用 tuple() 或者切片操作符 ‘:’ 不会创建一份浅拷贝，相反它会返回一个指向相同元组的引用：</p>\n<p>使用 tuple() 或者切片操作符 ‘:’ <strong>不会创建一份浅拷贝</strong>，因为它开辟新的内存存储的是<strong>原对象的引用</strong>，而没有创建新的对象来存储原对象的子对象的引用，所以不是浅拷贝。相反它会返回一个<strong>指向相同元组的引用。</strong></p>\n<p>对字符串使用 str() 或者切片操作符 ‘:’，原理和 元组相同。</p>\n<p>也就是说，对字符串和元组使用 copy（）、[:]、本身的构造器完成的复制，都只是开辟了内存存储原对象的引用，而不是存储原对象的子对象的引用。</p>\n<h3 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h3><p>Python 中以 copy.deepcopy() 来实现对象的深度拷贝</p>\n<h3 id=\"两者的优缺点对比\"><a href=\"#两者的优缺点对比\" class=\"headerlink\" title=\"两者的优缺点对比\"></a>两者的优缺点对比</h3><p>（1）深拷贝拷贝程度高，将原数据复制到新的内存空间中。改变拷贝后的内容不影响原数据内容。但是深拷贝耗时长，且占用内存空间。<br>（2）浅拷贝拷贝程度低，只复制原数据的地址。其实是将副本的地址指向原数据地址。修改副本内容，是通过当前地址指向原数据地址，去修改。所以修改副本内容会影响到原数据内容。但是浅拷贝耗时短，占用内存空间少</p>\n","site":{"data":{}},"length":18316,"excerpt":"<p><strong>Python的学习记录</strong></p>","more":"<h1 id=\"Python数据结构\"><a href=\"#Python数据结构\" class=\"headerlink\" title=\"Python数据结构\"></a>Python数据结构</h1><h2 id=\"时间复杂度\"><a href=\"#时间复杂度\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">时间复杂度：是用来估计算法运行时间的一个式子</span><br><span class=\"line\"></span><br><span class=\"line\">一般来说，时间复杂度高的算法比复杂度低的算法慢</span><br><span class=\"line\"></span><br><span class=\"line\">常见时间复杂度效率排序（由高到低）：</span><br><span class=\"line\">O(1) &lt; O(log2^n) &lt; O(n) &lt; O(n * log2^n) &lt; O(n^2) &lt; O(n^2 * log2^n) &lt; O(n^3)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">快速判断算法时间复杂度：</span><br><span class=\"line\">确定问题规模n</span><br><span class=\"line\">循环减半----&gt;&gt;log n</span><br><span class=\"line\">k层关于n的循环----&gt;&gt;n^k</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">空间复杂度：用来评估算法内存占用大小的式子</span><br><span class=\"line\"></span><br><span class=\"line\">算法使用了几个变量：O(1)</span><br><span class=\"line\">算法使用了长度为n的一维列表：O(n)</span><br><span class=\"line\">算法使用了m行n列的二维列表：O(mn)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h2><p>函数的嵌套调用，在函数中调用它自身</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">func1</span>(<span class=\"params\">x</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> x &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        func1(x-<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(x)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">func2</span>(<span class=\"params\">y</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> y &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(y)</span><br><span class=\"line\">        func2(y-<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<p>递归：计算1+2+…+100的值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">sum_int</span>(<span class=\"params\">n</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> n &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n + sum_int(n-<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p>递归：汉诺塔问题实例</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">汉诺塔问题</span></span><br><span class=\"line\"><span class=\"string\">有n个大小不同的碗，三个盘子，需要将n个碗从一个盘子，保持原样的移动到另一个盘子中去，不改变原本n个碗的摆放顺序</span></span><br><span class=\"line\"><span class=\"string\">    初始 : n个碗由上到下，由小至大放置于一个盘子之上</span></span><br><span class=\"line\"><span class=\"string\">    结果 : 在不改变n个碗的摆放顺序的条件下，将所有n个碗&quot;平移&quot;到另一个盘子之上</span></span><br><span class=\"line\"><span class=\"string\">        要求 : 一次只能移动一个碗，且小碗必须在大碗上面</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">例:</span></span><br><span class=\"line\"><span class=\"string\">现有 A B C 三个盘子，a(小碗) b(中碗) c(大碗) 三个碗，</span></span><br><span class=\"line\"><span class=\"string\">初始: abc摞在A上</span></span><br><span class=\"line\"><span class=\"string\">过程:</span></span><br><span class=\"line\"><span class=\"string\">    a -&gt; C | b -&gt; B | a -&gt; B | c -&gt; C | a -&gt; A | b -&gt; C | a -&gt; C</span></span><br><span class=\"line\"><span class=\"string\">结束: 原在A上的abc，平移至C上，共计如上移动了七次</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">当有n个碗需要平移时，可以近似将n个碗拆分成 最大的第n个碗 和 其他(n-1)个碗</span></span><br><span class=\"line\"><span class=\"string\">此时类似于</span></span><br><span class=\"line\"><span class=\"string\">    第一步 : (n-1)个碗 从A 经过C 至B</span></span><br><span class=\"line\"><span class=\"string\">    第二步 : 最大的第n个碗 从A 至C</span></span><br><span class=\"line\"><span class=\"string\">    第三步 : (n-1)个碗 从B 经过A 至C</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">hanoi</span>(<span class=\"params\">n, a, b, c</span>):  <span class=\"comment\"># 定义的参数的意思是(n个碗， 从盘子a， 经过盘子b， 到达盘子c)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> n &gt; <span class=\"number\">0</span>:  <span class=\"comment\"># 碗的数量大于0，才有后续递归。即递归终止的条件</span></span><br><span class=\"line\">        hanoi(n-<span class=\"number\">1</span>, a, c, b)  <span class=\"comment\"># 对应上述第一步:从a 经过c 到达b</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;从 %s 到 %s&quot;</span> % (a, c))</span><br><span class=\"line\">        hanoi(n-<span class=\"number\">1</span>, b, a, c)  <span class=\"comment\"># 对应上述第三步:从b 经过a 到达c</span></span><br><span class=\"line\"></span><br><span class=\"line\">hanoi(<span class=\"number\">3</span>, <span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;C&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"Python算法\"><a href=\"#Python算法\" class=\"headerlink\" title=\"Python算法\"></a>Python算法</h1><p><strong>查找:在一些数据元素中，通过一定的方法找出与给定关键字相同的数据元素的过程</strong></p>\n<p>列表查找(线性表查找):从列表中查找指定元素<br>    输入:列表、待查找元素<br>    输出:元素下标(未找到元素时一般返回None或-1)</p>\n<p><strong>Python内置列表查找函数: index()</strong></p>\n<h2 id=\"线性查找\"><a href=\"#线性查找\" class=\"headerlink\" title=\"线性查找\"></a>线性查找</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 线性查找(linear_search)：从列表第一个元素开始，顺序进行搜索，直到找到元素或搜索到列表最后一个元素为止。</span></span><br><span class=\"line\"><span class=\"comment\"># 时间复杂度 O(n)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">linear_search</span>(<span class=\"params\">li, val</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ind, v <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(li):  <span class=\"comment\"># enumerate()是Python的内置函数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> v == val:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ind</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">不用<span class=\"built_in\">enumerate</span>()函数的代码:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">linear_search</span>(<span class=\"params\">list_str, n, val</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, n):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (list_str[i] == val):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二分查找\"><a href=\"#二分查找\" class=\"headerlink\" title=\"二分查找\"></a>二分查找</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 二分查找的对象必须为 【！！！ 有序列表 ！！！】</span></span><br><span class=\"line\"><span class=\"comment\"># 二分查找(Binary_search):又叫折半查找，从有序列表的初始候选区li[0:n]开始，通过对待查找的值与候选区中间值的比较，可以使候选区减少一半</span></span><br><span class=\"line\"><span class=\"comment\"># 时间复杂度 O(log n)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">binary_search</span>(<span class=\"params\">li, val</span>):</span><br><span class=\"line\">    left = <span class=\"number\">0</span></span><br><span class=\"line\">    right = <span class=\"built_in\">len</span>(li) - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> left &lt;= right:  <span class=\"comment\"># 候选区有值</span></span><br><span class=\"line\">        mid = (left + right) // <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> li[mid] == val:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> li[mid] &gt; val:</span><br><span class=\"line\">            right = mid - <span class=\"number\">1</span>  <span class=\"comment\"># 待查找的值在mid左侧</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:  <span class=\"comment\"># li(mid) &lt; val 待查找的值在mid右侧</span></span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><strong>排序 : 将一组 无序 的记录序列调整为 有序 的记录序列</strong></p>\n<p>列表排序 : 将无序列表变为有序列表<br>    输入 : 列表<br>    输出 : 有序列表</p>\n<p>升序与降序</p>\n<p><strong>Python内置排序函数 : sort()</strong></p>\n<p>常见排序算法：冒泡排序，选择排序，插入排序<br>            快速排序，堆排序，归并排序<br>            希尔排序，计数排序，基数排序</p>\n<h2 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">冒泡排序Bubble Sort         时间复杂度O(n^2)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">列表每两个相邻的数，如果前面的比后面的大，则交换这两个数</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">一趟排序完成后，则无序区减少一个数，有序区增加一个数</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">bubble_sort</span>(<span class=\"params\">li</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(li)-<span class=\"number\">1</span>):  <span class=\"comment\"># 第i趟</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(li)-i-<span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> li[j] &gt; li[j+<span class=\"number\">1</span>]:  <span class=\"comment\"># j &gt; j+1 为升序排序，改为j &lt; j+1 则为降序排序</span></span><br><span class=\"line\">                li[j], li[j+<span class=\"number\">1</span>] = li[j+<span class=\"number\">1</span>], li[j]</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(li)  <span class=\"comment\"># 打印每一趟排序</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">选择排序select sort         时间复杂度O(n^2)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">依次遍历列表，每次遍历返回一个最小的元素，再遍历剩下元素找到剩下元素中最小的，循环直到遍历全部最小的元素</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">select_sort</span>(<span class=\"params\">li</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(li)-<span class=\"number\">1</span>):  <span class=\"comment\"># i是第几趟</span></span><br><span class=\"line\">        min_loc = i</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i, <span class=\"built_in\">len</span>(li)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> li[j] &lt; li[min_loc]:</span><br><span class=\"line\">                min_loc = j</span><br><span class=\"line\">        li[i], li[min_loc] = li[min_loc], li[i]</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(li)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">插入排序insert sort         时间复杂度O(n^2)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">初始有序区只有一个元素，从无序区拿来一个元素，按有序插入原有序区，如此循环</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">insert_sort</span>(<span class=\"params\">li</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">len</span>(li)):  <span class=\"comment\"># i 表示拿到的元素的下标</span></span><br><span class=\"line\">        tmp = li[i]</span><br><span class=\"line\">        j = i - <span class=\"number\">1</span>  <span class=\"comment\"># j 指的是已存入有序区的元素</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> j &gt;= <span class=\"number\">0</span> <span class=\"keyword\">and</span> li[j] &gt; tmp:</span><br><span class=\"line\">            li[j+<span class=\"number\">1</span>] = li[j]</span><br><span class=\"line\">            j -= <span class=\"number\">1</span></span><br><span class=\"line\">        li[j+<span class=\"number\">1</span>] = tmp</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(li)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">快速排序quick sort:         时间复杂度O(n * log n)</span></span><br><span class=\"line\"><span class=\"string\">取一个元素p（第一个元素），使元素p归位</span></span><br><span class=\"line\"><span class=\"string\">列表被p分成左右两个部分，左边都比p小，右边都比p大。递归完成排序。</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">partition</span>(<span class=\"params\">li, left, right</span>):  <span class=\"comment\"># left左指针对应0号元素，right右指针对应n-1号元素</span></span><br><span class=\"line\">    tmp = li[left]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> left &lt; right:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> left &lt; right <span class=\"keyword\">and</span> li[right] &gt;= tmp:  <span class=\"comment\"># 从右边找比tmp小的数</span></span><br><span class=\"line\">            right -= <span class=\"number\">1</span>           <span class=\"comment\"># 往左走一步</span></span><br><span class=\"line\">        li[left] = li[right]  <span class=\"comment\"># 把右边的值写到左边空位上</span></span><br><span class=\"line\">        <span class=\"comment\"># print(li)</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> left &lt; right <span class=\"keyword\">and</span> li[left] &lt;= tmp:   <span class=\"comment\"># 从左边找比tmp大的数</span></span><br><span class=\"line\">            left += <span class=\"number\">1</span>            <span class=\"comment\"># 往右走一步</span></span><br><span class=\"line\">        li[right] = li[left]  <span class=\"comment\"># 把左边的值写到右边空位上</span></span><br><span class=\"line\">        <span class=\"comment\"># print(li)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    li[left] = tmp  <span class=\"comment\"># 把tmp归位</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> left</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">quick_sort</span>(<span class=\"params\">li, left, right</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> left &lt; right:  <span class=\"comment\"># 表示列表至少有两个元素</span></span><br><span class=\"line\">        mid = partition(li, left, right)</span><br><span class=\"line\">        quick_sort(li, left, mid-<span class=\"number\">1</span>)</span><br><span class=\"line\">        quick_sort(li, mid+<span class=\"number\">1</span>, right)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">堆排序的过程：         时间复杂度O(n * log n)</span></span><br><span class=\"line\"><span class=\"string\">        建立堆</span></span><br><span class=\"line\"><span class=\"string\">        得到堆顶元素，为最大元素</span></span><br><span class=\"line\"><span class=\"string\">        去掉堆顶，将堆最后一个元素放到堆顶，此时可通过一次调整重新使堆有序</span></span><br><span class=\"line\"><span class=\"string\">        堆顶元素为第二大元素</span></span><br><span class=\"line\"><span class=\"string\">        重复&quot;去掉堆顶...&quot;操作，直到堆变空</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">sift</span>(<span class=\"params\">li, low, high</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    :param li: 列表</span></span><br><span class=\"line\"><span class=\"string\">    :param low: 堆的根节点的位置</span></span><br><span class=\"line\"><span class=\"string\">    :param high: 堆的最后一个元素的位置</span></span><br><span class=\"line\"><span class=\"string\">    :return:</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    i = low  <span class=\"comment\"># i最开始指向根节点</span></span><br><span class=\"line\">    j = <span class=\"number\">2</span> * i + <span class=\"number\">1</span>  <span class=\"comment\"># j开始是i的左孩子</span></span><br><span class=\"line\">    tmp = li[low]  <span class=\"comment\"># 把堆顶存起来</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> j &lt;= high:  <span class=\"comment\"># 只要j位置有数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> j + <span class=\"number\">1</span> &lt;= high <span class=\"keyword\">and</span> li[j+<span class=\"number\">1</span>] &gt; li[j]:  <span class=\"comment\"># 如果右孩子存在且比左孩子大</span></span><br><span class=\"line\">            j = j + <span class=\"number\">1</span>  <span class=\"comment\"># 将j指向右孩子</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> li[j] &gt; tmp:</span><br><span class=\"line\">            li[i] = li[j]</span><br><span class=\"line\">            i = j  <span class=\"comment\"># 往下看一层</span></span><br><span class=\"line\">            j = <span class=\"number\">2</span> * i + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:  <span class=\"comment\"># tmp更大，把tmp放到i的位置上</span></span><br><span class=\"line\">            li[i] = tmp  <span class=\"comment\"># 把tmp放到某一级领导位置上</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        li[i] = tmp  <span class=\"comment\"># 把tmp放到叶子节点上</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">heap_sort</span>(<span class=\"params\">li</span>):</span><br><span class=\"line\">    n = <span class=\"built_in\">len</span>(li)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>((n-<span class=\"number\">2</span>)//<span class=\"number\">2</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"comment\"># i表示建堆的时候调整的部分的根的下标</span></span><br><span class=\"line\">        sift(li, i, n-<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 建堆完成</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n-<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>):</span><br><span class=\"line\">        li[<span class=\"number\">0</span>], li[i] = li[i], li[<span class=\"number\">0</span>]</span><br><span class=\"line\">        sift(li, <span class=\"number\">0</span>, i-<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">将列表由mid分为两边low, high</span></span><br><span class=\"line\"><span class=\"string\">由low-&gt;mid，mid+1-&gt;high两部分</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">时间复杂度O(n * log n)</span></span><br><span class=\"line\"><span class=\"string\">空间复杂度O(n)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">分解：将列表越分越小，直至分成一个元素</span></span><br><span class=\"line\"><span class=\"string\">终止条件：一个元素是有序的</span></span><br><span class=\"line\"><span class=\"string\">合并：将两个有序列表归并，列表越来越大</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">merge</span>(<span class=\"params\">li, low, mid, high</span>):</span><br><span class=\"line\">    i = low</span><br><span class=\"line\">    j = mid + <span class=\"number\">1</span></span><br><span class=\"line\">    ltmp = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> i &lt;= mid <span class=\"keyword\">and</span> j &lt;= high:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> li[i] &lt; li[j]:</span><br><span class=\"line\">            ltmp.append(li[i])</span><br><span class=\"line\">            i += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            ltmp.append(li[j])</span><br><span class=\"line\">            j += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"comment\"># while执行完后，左半和右半肯定有一部分没有可比较元素</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> i &lt;= mid:</span><br><span class=\"line\">        ltmp.append(li[i])</span><br><span class=\"line\">        i += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> j &lt;= high:</span><br><span class=\"line\">        ltmp.append(li[j])</span><br><span class=\"line\">        j += <span class=\"number\">1</span></span><br><span class=\"line\">    li[low:high+<span class=\"number\">1</span>] = ltmp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">merge_sort</span>(<span class=\"params\">li, low, high</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> low &lt; high:  <span class=\"comment\"># 至少有两个元素</span></span><br><span class=\"line\">        mid = (low + high) // <span class=\"number\">2</span></span><br><span class=\"line\">        merge_sort(li, low, mid)</span><br><span class=\"line\">        merge_sort(li, mid+<span class=\"number\">1</span>, high)</span><br><span class=\"line\">        merge(li, low, mid, high)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"Python实战\"><a href=\"#Python实战\" class=\"headerlink\" title=\"Python实战\"></a>Python实战</h1><h2 id=\"名片管理系统-基础\"><a href=\"#名片管理系统-基础\" class=\"headerlink\" title=\"名片管理系统(基础)\"></a>名片管理系统(基础)</h2><h3 id=\"实现的功能\"><a href=\"#实现的功能\" class=\"headerlink\" title=\"实现的功能\"></a>实现的功能</h3><ol>\n<li>无限循环实现系统的连续操作</li>\n<li>实现系统基本的增删改查和显示功能</li>\n</ol>\n<h3 id=\"cards-main-py\"><a href=\"#cards-main-py\" class=\"headerlink\" title=\"cards_main.py\"></a>cards_main.py</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cards_tools</span><br><span class=\"line\"><span class=\"comment\"># 无限循环方法</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 主界面显示</span></span><br><span class=\"line\">    cards_tools.show_menu()</span><br><span class=\"line\"></span><br><span class=\"line\">    user = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请选择将要进行的操作:&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;您选择的操作是 %s&quot;</span> % user)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 系统执行操作1、2、3</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> user <span class=\"keyword\">in</span> [<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>]:</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 新增名片功能</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> user == <span class=\"string\">&quot;1&quot;</span>:</span><br><span class=\"line\">            cards_tools.new_card()</span><br><span class=\"line\">        <span class=\"comment\"># 显示名片功能</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> user == <span class=\"string\">&quot;2&quot;</span>:</span><br><span class=\"line\">            cards_tools.show_card()</span><br><span class=\"line\">        <span class=\"comment\"># 查询名片功能</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> user == <span class=\"string\">&quot;3&quot;</span>:</span><br><span class=\"line\">            cards_tools.search_card()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 退出系统</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> user == <span class=\"string\">&quot;0&quot;</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;欢迎再次使用【名片管理系统】&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 用户输入错误3</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;输入错误，请重新输入&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"cards-tools-py\"><a href=\"#cards-tools-py\" class=\"headerlink\" title=\"cards_tools.py\"></a>cards_tools.py</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">card_list = []</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">show_menu</span>():</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;主界面的显示&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;* &quot;</span> * <span class=\"number\">15</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;    欢迎使用【名片管理系统】&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;        1.新增名片&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;        2.显示名片&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;        3.查找名片&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;        0.退出系统&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;* &quot;</span> * <span class=\"number\">15</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">new_card</span>():</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;新增名片&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;1.新增名片&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 1.用户依次输入名片的所有信息</span></span><br><span class=\"line\">    name = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入用户的姓名:&quot;</span>)</span><br><span class=\"line\">    phone = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入用户的电话号码:&quot;</span>)</span><br><span class=\"line\">    qq = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入用户的qq号码:&quot;</span>)</span><br><span class=\"line\">    email = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入用户的邮箱:&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 2.新建一个字典用于保存用户的输入</span></span><br><span class=\"line\">    card_dict = &#123;<span class=\"string\">&quot;name&quot;</span>: name,</span><br><span class=\"line\">                 <span class=\"string\">&quot;phone&quot;</span>: phone,</span><br><span class=\"line\">                 <span class=\"string\">&quot;qq&quot;</span>: qq,</span><br><span class=\"line\">                 <span class=\"string\">&quot;email&quot;</span>: email&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 3.将该字典的信息存放到数组上</span></span><br><span class=\"line\">    card_list.append(card_dict)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(card_list)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 4.提示用户添加成功</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;用户 %s 的信息添加成功&quot;</span> % name)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">show_card</span>():</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;显示名片&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;2.显示名片&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;- &quot;</span> * <span class=\"number\">15</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 判断是否存在名片信息记录，若没有，提示用户返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(card_list) == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;当前没有任何名片，请使用新增功能先添加名片再进行后续操作！&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 打印表头</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> card_list:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(name, end=<span class=\"string\">&quot;\\t\\t&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> card_dict <span class=\"keyword\">in</span> card_list:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;%s\\t\\t%s\\t\\t%s\\t\\t%s&quot;</span> % (card_dict[<span class=\"string\">&quot;name&quot;</span>],</span><br><span class=\"line\">                                        card_dict[<span class=\"string\">&quot;phone&quot;</span>],</span><br><span class=\"line\">                                        card_dict[<span class=\"string\">&quot;qq&quot;</span>],</span><br><span class=\"line\">                                        card_dict[<span class=\"string\">&quot;email&quot;</span>]))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;- &quot;</span> * <span class=\"number\">15</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">search_card</span>():</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;查找名片&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;3.查找名片&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 1.提示用户输入要搜索的姓名</span></span><br><span class=\"line\">    find_name = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入要搜索的用户姓名:&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 2.遍历名片列表，查询要搜索的姓名，若没有，需要提示用户</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> card_dict <span class=\"keyword\">in</span> card_list:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> card_dict[<span class=\"string\">&quot;name&quot;</span>] == find_name:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;姓名\\t\\t电话\\t\\tQQ\\t\\t地址&quot;</span>)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;%s\\t\\t%s\\t\\t%s\\t\\t%s&quot;</span> % (card_dict[<span class=\"string\">&quot;name&quot;</span>],</span><br><span class=\"line\">                                            card_dict[<span class=\"string\">&quot;phone&quot;</span>],</span><br><span class=\"line\">                                            card_dict[<span class=\"string\">&quot;qq&quot;</span>],</span><br><span class=\"line\">                                            card_dict[<span class=\"string\">&quot;email&quot;</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 针对找到的名片执行修改和删除操作</span></span><br><span class=\"line\">            deal_card(card_dict)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;没有找到 %s 的信息&quot;</span> % find_name)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">deal_card</span>(<span class=\"params\">find_dict</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(find_dict)</span><br><span class=\"line\"></span><br><span class=\"line\">    user_do = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请选择要执行的操作&quot;</span></span><br><span class=\"line\">                    <span class=\"string\">&quot;[1]修改  [2]删除  [0]返回上一级&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> user_do == <span class=\"string\">&quot;1&quot;</span>:</span><br><span class=\"line\">        find_dict[<span class=\"string\">&quot;name&quot;</span>] = input_card_info(find_dict[<span class=\"string\">&quot;name&quot;</span>], <span class=\"string\">&quot;姓名:&quot;</span>)</span><br><span class=\"line\">        find_dict[<span class=\"string\">&quot;phone&quot;</span>] = input_card_info(find_dict[<span class=\"string\">&quot;phone&quot;</span>], <span class=\"string\">&quot;电话:&quot;</span>)</span><br><span class=\"line\">        find_dict[<span class=\"string\">&quot;qq&quot;</span>] = input_card_info(find_dict[<span class=\"string\">&quot;qq&quot;</span>], <span class=\"string\">&quot;QQ:&quot;</span>)</span><br><span class=\"line\">        find_dict[<span class=\"string\">&quot;email&quot;</span>] = input_card_info(find_dict[<span class=\"string\">&quot;email&quot;</span>], <span class=\"string\">&quot;邮箱:&quot;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;修改名片成功&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> user_do == <span class=\"string\">&quot;2&quot;</span>:</span><br><span class=\"line\">        card_list.remove(find_dict)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;删除名片成功&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">input_card_info</span>(<span class=\"params\">dict_value, tip_message</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    result_str = <span class=\"built_in\">input</span>(tip_message)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(result_str) &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result_str</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dict_value</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"控制台效果展示\"><a href=\"#控制台效果展示\" class=\"headerlink\" title=\"控制台效果展示\"></a>控制台效果展示</h3><img src=\"/posts/e39e2a4e/%E5%90%8D%E7%89%87%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E6%95%88%E6%9E%9C%E5%9B%BE1.jpg\" class=\"\">\n\n<img src=\"/posts/e39e2a4e/%E5%90%8D%E7%89%87%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E6%95%88%E6%9E%9C%E5%9B%BE2.jpg\" class=\"\">\n\n<img src=\"/posts/e39e2a4e/%E5%90%8D%E7%89%87%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E6%95%88%E6%9E%9C%E5%9B%BE3.jpg\" class=\"\">\n\n<hr>\n<h2 id=\"飞机大战游戏-pygame\"><a href=\"#飞机大战游戏-pygame\" class=\"headerlink\" title=\"飞机大战游戏(pygame)\"></a>飞机大战游戏(pygame)</h2><h3 id=\"实现的功能-1\"><a href=\"#实现的功能-1\" class=\"headerlink\" title=\"实现的功能\"></a><strong>实现的功能</strong></h3><ol>\n<li>背景图片的滚动播放</li>\n<li>碰撞检测—-子弹碰撞飞机，敌机碰撞飞机</li>\n<li>键盘←→控制飞机的左右移动</li>\n<li>random随机数实现敌机的出现数量</li>\n<li>代码中可直接修改所有飞机的移动速度</li>\n</ol>\n<h3 id=\"plane-main-py\"><a href=\"#plane-main-py\" class=\"headerlink\" title=\"plane_main.py\"></a>plane_main.py</h3><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># import pygame 飞机精灵导入了pygame的模块</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> plane_sprites <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">PlaneGame</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;飞机大战主游戏&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;...游戏初始化...&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 1.创建游戏窗口</span></span><br><span class=\"line\">        self.screen = pygame.display.set_mode(SCREEN_RECT.size)</span><br><span class=\"line\">        <span class=\"comment\"># 2.创建游戏时钟</span></span><br><span class=\"line\">        self.clock = pygame.time.Clock()</span><br><span class=\"line\">        <span class=\"comment\"># 3.调用私有方法，精灵和精灵组的创建</span></span><br><span class=\"line\">        self.__create_sprites()</span><br><span class=\"line\">        <span class=\"comment\"># 4.设置定时器事件 - 创建敌机 1s/架</span></span><br><span class=\"line\">        pygame.time.set_timer(CREATE_ENEMY_EVENT, <span class=\"number\">1000</span>)  <span class=\"comment\"># 第二个参数以毫秒为单位</span></span><br><span class=\"line\">        pygame.time.set_timer(HERO_FIRE_EVENT, <span class=\"number\">500</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__create_sprites</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 创建背景精灵和精灵组</span></span><br><span class=\"line\">        bg1 = Background()</span><br><span class=\"line\">        bg2 = Background(<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.back_group = pygame.sprite.Group(bg1, bg2)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 创建敌机的精灵组</span></span><br><span class=\"line\">        self.enemy_group = pygame.sprite.Group()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 创建英雄的精灵和精灵组</span></span><br><span class=\"line\">        self.hero = Hero()</span><br><span class=\"line\">        self.hero_group = pygame.sprite.Group(self.hero)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">start_game</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;...游戏开始...&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 1.设置刷新帧率</span></span><br><span class=\"line\">            self.clock.tick(FRAME_PER_SEC)</span><br><span class=\"line\">            <span class=\"comment\"># 2.事件监听</span></span><br><span class=\"line\">            self.__event_handler()</span><br><span class=\"line\">            <span class=\"comment\"># 3.碰撞检测</span></span><br><span class=\"line\">            self.__check_collide()</span><br><span class=\"line\">            <span class=\"comment\"># 4.更新/绘制精灵组</span></span><br><span class=\"line\">            self.__update_sprites()</span><br><span class=\"line\">            <span class=\"comment\"># 5.更新显示</span></span><br><span class=\"line\">            pygame.display.update()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__event_handler</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> event <span class=\"keyword\">in</span> pygame.event.get():</span><br><span class=\"line\">            <span class=\"comment\"># 判断是否退出游戏</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> event.<span class=\"built_in\">type</span> == pygame.QUIT:</span><br><span class=\"line\">                PlaneGame.__game_over()</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> event.<span class=\"built_in\">type</span> == CREATE_ENEMY_EVENT:</span><br><span class=\"line\">                <span class=\"comment\"># print(&quot;...敌机出场...&quot;)</span></span><br><span class=\"line\">                <span class=\"comment\"># 创建敌机精灵</span></span><br><span class=\"line\">                enemy = Enemy()</span><br><span class=\"line\">                <span class=\"comment\"># 将敌机精灵添加到敌机精灵组</span></span><br><span class=\"line\">                self.enemy_group.add(enemy)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> event.<span class=\"built_in\">type</span> == HERO_FIRE_EVENT:</span><br><span class=\"line\">                self.hero.fire()</span><br><span class=\"line\">            <span class=\"comment\"># elif event.type == pygame.KEY_DOWN and event.key == pygame.K_RIGHT:</span></span><br><span class=\"line\">                <span class=\"comment\"># print(&quot;向右移动&quot;)</span></span><br><span class=\"line\">        <span class=\"comment\"># 使用键盘提供的方法获取键盘按键</span></span><br><span class=\"line\">        keys_pressed = pygame.key.get_pressed()</span><br><span class=\"line\">        <span class=\"comment\"># 判断元组中对应的按键索引值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> keys_pressed[pygame.K_RIGHT]:</span><br><span class=\"line\">            self.hero.speed = <span class=\"number\">5</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> keys_pressed[pygame.K_LEFT]:</span><br><span class=\"line\">            self.hero.speed = -<span class=\"number\">5</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.hero.speed = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__check_collide</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 1.子弹摧毁敌机</span></span><br><span class=\"line\">        pygame.sprite.groupcollide(self.hero.bullets, self.enemy_group, <span class=\"literal\">True</span>, <span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 2.敌机撞毁英雄</span></span><br><span class=\"line\">        enemies = pygame.sprite.spritecollide(self.hero, self.enemy_group, <span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 3.判断列表是否有内容</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(enemies) &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 让英雄牺牲</span></span><br><span class=\"line\">            self.hero.kill()</span><br><span class=\"line\">            <span class=\"comment\"># 结束游戏</span></span><br><span class=\"line\">            PlaneGame.__game_over()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__update_sprites</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.back_group.update()</span><br><span class=\"line\">        self.back_group.draw(self.screen)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.enemy_group.update()</span><br><span class=\"line\">        self.enemy_group.draw(self.screen)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.hero_group.update()</span><br><span class=\"line\">        self.hero_group.draw(self.screen)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.hero.bullets.update()</span><br><span class=\"line\">        self.hero.bullets.draw(self.screen)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__game_over</span>():</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;游戏结束&quot;</span>)</span><br><span class=\"line\">        pygame.quit()</span><br><span class=\"line\">        exit()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 创建游戏对象</span></span><br><span class=\"line\">    game = PlaneGame()</span><br><span class=\"line\">    <span class=\"comment\"># 启动游戏</span></span><br><span class=\"line\">    game.start_game()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"plane-sprites-py\"><a href=\"#plane-sprites-py\" class=\"headerlink\" title=\"plane_sprites.py\"></a>plane_sprites.py</h3><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> pygame</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 屏幕大小的常量</span></span><br><span class=\"line\">SCREEN_RECT = pygame.Rect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">480</span>, <span class=\"number\">700</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 刷新的帧率</span></span><br><span class=\"line\">FRAME_PER_SEC = <span class=\"number\">60</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建敌机的定时器常量</span></span><br><span class=\"line\">CREATE_ENEMY_EVENT = pygame.USEREVENT</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 英雄发射子弹事件</span></span><br><span class=\"line\">HERO_FIRE_EVENT = pygame.USEREVENT + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">GameSprite</span>(pygame.sprite.Sprite):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;飞机大战游戏精灵&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, image_name, speed=<span class=\"number\">1</span></span>):</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 调用父类的初始化方法</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 定义对象的属性</span></span><br><span class=\"line\">        self.image = pygame.image.load(image_name)</span><br><span class=\"line\">        self.rect = self.image.get_rect()</span><br><span class=\"line\">        self.speed = speed</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">update</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 在屏幕的垂直方向上移动</span></span><br><span class=\"line\">        self.rect.y += self.speed</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Background</span>(<span class=\"title class_ inherited__\">GameSprite</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;游戏背景精灵&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, is_alt=<span class=\"literal\">False</span></span>):</span><br><span class=\"line\">        <span class=\"comment\"># 1.调用父类方法实现精灵的创建(image/rect/speed)</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__(<span class=\"string\">&quot;./images/background.png&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 2.判断是否是交替图像，如果是，需要设置初始位置</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_alt:</span><br><span class=\"line\">            self.rect.y = -self.rect.height</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">update</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 1.调用父类的方法实现</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>().update()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 2.判断图像是否移出屏幕，若移出，将图像设置到屏幕的上方</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.rect.y &gt;= SCREEN_RECT.height:</span><br><span class=\"line\">            self.rect.y = -self.rect.height</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Enemy</span>(<span class=\"title class_ inherited__\">GameSprite</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;敌机精灵&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 1.调用父类方法，创建敌机精灵，同时指定敌机图片</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__(<span class=\"string\">&quot;./images/enemy1.png&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 2.指定敌机的初始随机速度</span></span><br><span class=\"line\">        self.speed = random.randint(<span class=\"number\">1</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 3.指定敌机的初始随机位置</span></span><br><span class=\"line\">        self.rect.bottom = <span class=\"number\">0</span></span><br><span class=\"line\">        max_x = SCREEN_RECT.width - self.rect.width</span><br><span class=\"line\">        self.rect.x = random.randint(<span class=\"number\">0</span>, max_x)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">update</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 1.调用父类方法，保持垂直方向的飞行</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>().update()</span><br><span class=\"line\">        <span class=\"comment\"># 2.判断是否飞出屏幕，如果是，需要从精灵组删除敌机</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.rect.y &gt;= SCREEN_RECT.height:</span><br><span class=\"line\">            <span class=\"comment\"># print(&quot;飞出屏幕，需要从精灵组删除&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># kill方法可以将精灵从所有精灵组中移出，精灵就会被自动销毁</span></span><br><span class=\"line\">            self.kill()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__del__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># print(&quot;敌机爆炸 %s&quot; % self.rect)</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Hero</span>(<span class=\"title class_ inherited__\">GameSprite</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;英雄精灵&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 1.调用父类方法，设置image&amp;speed</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__(<span class=\"string\">&quot;./images/me1.png&quot;</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 2.设置英雄的初始位置</span></span><br><span class=\"line\">        self.rect.centerx = SCREEN_RECT.centerx</span><br><span class=\"line\">        self.rect.bottom = SCREEN_RECT.bottom - <span class=\"number\">120</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 3.创建子弹的精灵组</span></span><br><span class=\"line\">        self.bullets = pygame.sprite.Group()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">update</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 英雄在水平方向移动</span></span><br><span class=\"line\">        self.rect.x += self.speed</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 控制英雄不能离开屏幕</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.rect.x &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            self.rect.x = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> self.rect.right &gt; SCREEN_RECT.right:</span><br><span class=\"line\">            self.rect.right = SCREEN_RECT.right</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">fire</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># print(&quot;发射子弹&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> (<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>):</span><br><span class=\"line\">            <span class=\"comment\"># 1.创建子弹精灵</span></span><br><span class=\"line\">            bullet = Bullet()</span><br><span class=\"line\">            <span class=\"comment\"># 2.设置精灵的位置</span></span><br><span class=\"line\">            bullet.rect.bottom = self.rect.y - i * <span class=\"number\">20</span></span><br><span class=\"line\">            bullet.rect.centerx = self.rect.centerx</span><br><span class=\"line\">            <span class=\"comment\"># 3.将精灵添加到精灵组</span></span><br><span class=\"line\">            self.bullets.add(bullet)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Bullet</span>(<span class=\"title class_ inherited__\">GameSprite</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;子弹精灵&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 调用父类方法，设置子弹图片，设置初始速度</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__(<span class=\"string\">&quot;./images/bullet1.png&quot;</span>, -<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">update</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 调用父类方法，让子弹沿垂直方向飞行</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>().update()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 判断子弹是否飞出屏幕</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.rect.bottom &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            self.kill()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__del__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># print(&quot;子弹被销毁&quot;)</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"游戏运行效果展示图\"><a href=\"#游戏运行效果展示图\" class=\"headerlink\" title=\"游戏运行效果展示图\"></a>游戏运行效果展示图</h3><img src=\"/posts/e39e2a4e/%E9%A3%9E%E6%9C%BA%E5%A4%A7%E6%88%98.jpg\" class=\"\">\n\n<hr>\n<h1 id=\"Python面经\"><a href=\"#Python面经\" class=\"headerlink\" title=\"Python面经\"></a>Python面经</h1><h2 id=\"列表、元组、字典\"><a href=\"#列表、元组、字典\" class=\"headerlink\" title=\"列表、元组、字典\"></a>列表、元组、字典</h2><ol>\n<li>列表是动态数组，它们不可变且可以重设长度（改变其内部元素的个数）。</li>\n<li>元组是静态数组，它们不可变，且其内部数据一旦创建便无法改变。</li>\n<li>元组缓存于Python运行时环境，这意味着我们每次使用元组时无须访问内核去分配内存。</li>\n</ol>\n<p><strong>列表元组字典的一些区别：</strong></p>\n<p>1、列表list：有序，可变。</p>\n<p>2、元组tuple：有序，不可变。</p>\n<p>3、字典dict：无序，字典的key是不可变的，值是可变的；在python中字符串，数字，元组都是不可变的对象。</p>\n<p>4、序列：列表，元组和字符串都属于序列；即成员有序排列，可以通过下标访问，可以进行切片操作。字符串（普通字符串和unicode字符串）</p>\n<p>5、集合：没有顺序的简单对象的聚集。可以检查成员是否存在，是否是另一个集合的子集，得到两个集合的交集等等</p>\n<p>6、复制一个列表或者类似的序列或者其他复杂对象，那么必须使用切片操作符来去的拷贝。当你创建一个对象并将它赋值给一个变量的时候，这个变量仅仅引用那个对象，而不是表示这个对象本身！也就是说，变量名指向你计算机中存储那个对象的内存。这被称作名称到对象的绑定。</p>\n<h2 id=\"Python的异常机制\"><a href=\"#Python的异常机制\" class=\"headerlink\" title=\"Python的异常机制\"></a>Python的异常机制</h2><h3 id=\"1、什么是异常？\"><a href=\"#1、什么是异常？\" class=\"headerlink\" title=\"1、什么是异常？\"></a>1、什么是异常？</h3><p>异常即是一个事件，该事件会在程序执行过程中发生，影响了程序的正常执行。<br> 一般情况下，在Python无法正常处理程序时就会发生一个异常。<br> 异常是Python对象，表示一个错误。<br> 当Python脚本发生异常时我们需要捕获处理它，否则程序会终止执行。</p>\n<h3 id=\"2、try…except…else结构\"><a href=\"#2、try…except…else结构\" class=\"headerlink\" title=\"2、try…except…else结构\"></a>2、try…except…else结构</h3><p>如果try块中没有抛出异常，则执行else块，如果try中抛出异常，则执行except模块<br> except：捕获所有的异常</p>\n<p>不带任何异常类型使用except，如下实例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try:</span><br><span class=\"line\">    正常的操作</span><br><span class=\"line\">   ......................</span><br><span class=\"line\">except:</span><br><span class=\"line\">    发生异常，执行这块代码</span><br><span class=\"line\">   ......................</span><br><span class=\"line\">else:</span><br><span class=\"line\">    如果没有异常执行这块代码</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>使用相同的except语句来处理多个异常信息，如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try:</span><br><span class=\"line\">    正常的操作</span><br><span class=\"line\">   ......................</span><br><span class=\"line\">except(Exception1[, Exception2[,...ExceptionN]]):</span><br><span class=\"line\">   发生以上多个异常中的一个，执行这块代码</span><br><span class=\"line\">   ......................</span><br><span class=\"line\">else:</span><br><span class=\"line\">    如果没有异常执行这块代码</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、try…except…else…finally\"><a href=\"#3、try…except…else…finally\" class=\"headerlink\" title=\"3、try…except…else…finally\"></a>3、try…except…else…finally</h3><p>finally块无论是否发生异常都会执行，能常用来解释try块中申请的的资源</p>\n<h3 id=\"4、python中常见的异常类型\"><a href=\"#4、python中常见的异常类型\" class=\"headerlink\" title=\"4、python中常见的异常类型\"></a>4、python中常见的异常类型</h3><p>Exception：常规错误的基类<br>ZeroDivisionError：除(或取模)零 (所有数据类型)<br>AssertionError：断言语句失败<br>AttributeError：对象没有这个属性<br>IOError：输入&#x2F;输出操作失败<br>ImportError：导入模块&#x2F;对象失败<br>IndexError：序列中没有此索引(index)<br>KeyError：映射中没有这个键<br>NameError：未声明&#x2F;初始化对象 (没有属性)<br>SyntaxError：Python 语法错误<br>IndentationError：缩进错误<br>SystemError：一般的解释器系统错误<br>TypeError：对类型无效的操作<br>ValueError：传入无效的参数</p>\n<h3 id=\"python异常代码块\"><a href=\"#python异常代码块\" class=\"headerlink\" title=\"python异常代码块\"></a>python异常代码块</h3><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"comment\"># func   # 可能会抛出异常的代码</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> (Exception1, Exception2) <span class=\"keyword\">as</span> e:  <span class=\"comment\"># 可以捕获多个异常并处理</span></span><br><span class=\"line\">    <span class=\"comment\"># 异常处理的代码</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"comment\"># pass  # 异常没有发生的时候代码逻辑</span></span><br><span class=\"line\"><span class=\"keyword\">finally</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span>     <span class=\"comment\"># 无论异常有没有发生都会执行的代码，一般处理资源的关闭和释放</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"Python中的GIL\"><a href=\"#Python中的GIL\" class=\"headerlink\" title=\"Python中的GIL\"></a>Python中的GIL</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>全局解释器锁 GIL，英文名称为 Global Interpreter Lock，它是解释器中一种线程同步的方式。</p>\n<p>对于每一个解释器进程都具有一个 GIL ，它的直接作用是限制单个解释器进程中多线程的并行执行，使得即使在多核处理器上对于单个解释器进程来说，在同一时刻运行的线程仅限一个。 对于 Python 来讲，GIL 并不是它语言本身的特性，而是 CPython 解释器的实现特性。</p>\n<p>Python 代码被编译后的字节码会在解释器中执行，在执行过程中，存在于 CPython 解释器中的 GIL 会致使在同一时刻只有一个线程可以执行字节码。 GIL 的存在引起的最直接的问题便是：在一个解释器进程中通过多线程的方式无法利用多核处理器来实现真正的并行。</p>\n<p>因此，Python的多线程是伪多线程，无法利用多核资源，同一个时刻只有一个线程在真正的运行。</p>\n<p>GIL的限制了程序的多核执行</p>\n<p>  同一个时间只能有一个线程执行字节码</p>\n<p>  CPU密集程序难以利用多核优势</p>\n<p>  IO期间会释放GIL，对IO密集程序影响不大</p>\n<p>面对GIL的存在，我们有可以有多个方法帮助我们提升性能</p>\n<p>在 IO 密集型任务下，我们可以使用多线程或者协程来完成。</p>\n<p>可以选择更换 Jython 等没有 GIL 的解释器，但并不推荐更换解释器，因为会错过众多 C 语言模块中的有用特性。</p>\n<p>CPU密集可以使用多进程+进程池。</p>\n<p>将计算密集型任务转移到 Python 的 C &#x2F; C++ 扩展模块中完成</p>\n<h3 id=\"为什么有了GIL还要关注线程安全\"><a href=\"#为什么有了GIL还要关注线程安全\" class=\"headerlink\" title=\"为什么有了GIL还要关注线程安全\"></a>为什么有了GIL还要关注线程安全</h3><p>GIL 保证的是每一条字节码在执行过程中的独占性，即每一条字节码的执行都是原子性的。GIL 具有释放机制，所以 GIL 并不会保证字节码在执行过程中线程不会进行切换，即在多个字节码之间，线程具有切换的可能性。</p>\n<p>我们可以用python的dis模块去查看a +&#x3D; 1执行的字节码，发现需要有多个字节码去完成，线程具有切换的可能性，所以它是非线程安全的。</p>\n<p> 一个操作如果是一个字节码指令可以完成就是原子的，非原子操作不是线程安全的，原子的是可以保证线程安全的。</p>\n<p> GIL 和线程互斥锁的粒度是不同的，GIL 是 Python 解释器级别的互斥，保证的是解释器级别共享资源的一致性，而线程互斥锁则是代码级（或用户级）的互斥，保证的是 Python 程序级别共享数据的一致性，所以我们仍需要线程互斥锁及其他线程同步方式来保证数据一致。</p>\n<h2 id=\"迭代器和生成器\"><a href=\"#迭代器和生成器\" class=\"headerlink\" title=\"迭代器和生成器\"></a>迭代器和生成器</h2><img src=\"/posts/e39e2a4e/%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8.jpg\" class=\"\">\n\n<p>容器（container）</p>\n<p>container 可以理解为把多个元素组织在一起的数据结构，container 中的元素可以逐个地迭代获取，可以用 in, not in 关键字判断元素是否包含在容器中。比如Python中常见的container对象有list，deque，set</p>\n<p>可迭代对象(iterables)</p>\n<p>大部分的 container 都是可迭代对象，比如 list or set 都是可迭代对象，可以说只要是可以返回一个迭代器的都可以称作可迭代对象。</p>\n<p>迭代器（iterator）</p>\n<p>python中的容器有许多，比如列表、元组、字典、集合等，对于容器，可以很直观地想象成多个元素在一起的单元，所有的容器都是可迭代的（iterable）。</p>\n<p>我们通常使用for in 语句对可迭代的对象进行枚举，其底层机制在于：</p>\n<p>而可迭代对象，通过 iter() 函数返回一个迭代器（iterator），迭代器提供了一个 next 的方法。调用用这个方法后，你要么得到这个容器的下一个对象，要么得到一个StopIteration 的错误。</p>\n<p>举个例子：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  \\&gt;&gt;&gt; x = [1, 2, 3]</span><br><span class=\"line\"></span><br><span class=\"line\">  \\&gt;&gt;&gt; # Get the iterator</span><br><span class=\"line\"></span><br><span class=\"line\">  \\&gt;&gt;&gt; y = iter(items) # Invokes items.<span class=\"strong\">__iter__</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  \\&gt;&gt;&gt; # Run the iterator</span><br><span class=\"line\"></span><br><span class=\"line\">  \\&gt;&gt;&gt; next(y) # Invokes it.<span class=\"strong\">__next__</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  1</span><br><span class=\"line\"></span><br><span class=\"line\">  \\&gt;&gt;&gt; next(y)</span><br><span class=\"line\"></span><br><span class=\"line\">  2</span><br><span class=\"line\"></span><br><span class=\"line\">  \\&gt;&gt;&gt; next(y)</span><br><span class=\"line\"></span><br><span class=\"line\">  3</span><br><span class=\"line\"></span><br><span class=\"line\">  \\&gt;&gt;&gt; type(x)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">class</span> &#x27;<span class=\"attr\">list</span>&#x27;&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  \\&gt;&gt;&gt; type(y)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">class</span> &#x27;<span class=\"attr\">list_iterator</span>&#x27;&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  \\&gt;&gt;&gt; next(y)</span><br><span class=\"line\"></span><br><span class=\"line\">  Traceback (most recent call last):</span><br><span class=\"line\"></span><br><span class=\"line\">​    File &quot;<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">stdin</span>&gt;</span></span>&quot;, line 1, in <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">  StopIteration</span><br><span class=\"line\"></span><br><span class=\"line\">  \\&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>上面的例子中，x&#x3D;[1,2,3]是可迭代对象，这里也叫容器。y&#x3D;iter(x)则是迭代器，且实现了__iter__和__next__方法。</p>\n<p>它们之间的关系如下图所示：</p>\n<img src=\"/posts/e39e2a4e/%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%AE%9E%E4%BE%8B.jpg\" class=\"\">\n\n<p>可见通过 iter 方法后就是迭代器。它是一个带状态的对象，调用 next 方法的时候返回容器中的下一个值，可以说任何实现了iter和 next 方法的对象都是迭代器，iter返回迭代器自身，next 返回容器中的下一个值，如果容器中没有更多元素了，则抛异常。</p>\n<p>迭代器就像一个懒加载的工厂，等到有人需要的时候才给它生成值返回，没调用的时候就处于休眠状态等待下一次调用。</p>\n<p>生成器（generator）</p>\n<p>生成器(generator)可以简单理解为懒人版本的迭代器。</p>\n<p>它相比于迭代器的优势是，生成器并不会像迭代器一样占用大量内存。比如声明一个迭代器：[i for i in range(100000000)]就可以声明一个包含一亿个元素的列表，每个元素在生成后都会保存到内存中。但实际上我们也许并不需要保存那么多东西，只希望在你用 next() 函数的时候，才会生成下一个变量，因此生成器应运而生，在python中的写法为(i for i in range(100000000))</p>\n<p>此外，生成器还可以有别的形式，比如生成器函数，通过yield关键字，把结果返回到next()方法中，举个例子：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">frange</span>(<span class=\"params\">start, stop, increment</span>):</span><br><span class=\"line\">x = start</span><br><span class=\"line\"><span class=\"keyword\">while</span> x &lt; stop:</span><br><span class=\"line\">\t<span class=\"keyword\">yield</span> x</span><br><span class=\"line\">   \tx += increment</span><br><span class=\"line\"><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> frange(<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">0.5</span>):</span><br><span class=\"line\">   <span class=\"built_in\">print</span>(n)</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"number\">0</span></span><br><span class=\"line\"> <span class=\"number\">0.5</span></span><br><span class=\"line\"> <span class=\"number\">1.0</span></span><br><span class=\"line\"> <span class=\"number\">1.5</span></span><br></pre></td></tr></table></figure>\n\n<p>相比于迭代器，生成器具有以下优点：</p>\n<ol>\n<li>减少内存</li>\n<li>延迟计算</li>\n<li>有效提高代码可读性</li>\n</ol>\n<h2 id=\"python深拷贝和浅拷贝\"><a href=\"#python深拷贝和浅拷贝\" class=\"headerlink\" title=\"python深拷贝和浅拷贝\"></a>python深拷贝和浅拷贝</h2><ul>\n<li>浅拷贝，指的是重新分配一块内存，创建一个新的对象，但<strong>里面的元素是原对象中各个子对象的引用</strong>。</li>\n<li>深拷贝，是指重新分配一块内存，创建一个新的对象，并且将原对象中的元素，以递归的方式，通过创建新的子对象拷贝到新对象中。因此，<strong>新对象和原对象没有任何关联</strong>。</li>\n</ul>\n<h3 id=\"浅拷贝\"><a href=\"#浅拷贝\" class=\"headerlink\" title=\"浅拷贝\"></a>浅拷贝</h3><ul>\n<li>使用数据类型<strong>本身的构造器</strong></li>\n<li>对于<strong>可变的序列</strong>，还可以通过切片操作符 : 来完成浅拷贝</li>\n<li>Python 还提供了对应的函数 <strong>copy.copy()</strong> 函数，适用于任何数据类型</li>\n</ul>\n<p>对于元组，使用 tuple() 或者切片操作符 ‘:’ 不会创建一份浅拷贝，相反它会返回一个指向相同元组的引用：</p>\n<p>使用 tuple() 或者切片操作符 ‘:’ <strong>不会创建一份浅拷贝</strong>，因为它开辟新的内存存储的是<strong>原对象的引用</strong>，而没有创建新的对象来存储原对象的子对象的引用，所以不是浅拷贝。相反它会返回一个<strong>指向相同元组的引用。</strong></p>\n<p>对字符串使用 str() 或者切片操作符 ‘:’，原理和 元组相同。</p>\n<p>也就是说，对字符串和元组使用 copy（）、[:]、本身的构造器完成的复制，都只是开辟了内存存储原对象的引用，而不是存储原对象的子对象的引用。</p>\n<h3 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h3><p>Python 中以 copy.deepcopy() 来实现对象的深度拷贝</p>\n<h3 id=\"两者的优缺点对比\"><a href=\"#两者的优缺点对比\" class=\"headerlink\" title=\"两者的优缺点对比\"></a>两者的优缺点对比</h3><p>（1）深拷贝拷贝程度高，将原数据复制到新的内存空间中。改变拷贝后的内容不影响原数据内容。但是深拷贝耗时长，且占用内存空间。<br>（2）浅拷贝拷贝程度低，只复制原数据的地址。其实是将副本的地址指向原数据地址。修改副本内容，是通过当前地址指向原数据地址，去修改。所以修改副本内容会影响到原数据内容。但是浅拷贝耗时短，占用内存空间少</p>"},{"title":"Python+Selenium脚本","abbrlink":"e4f344ea","date":"2022-12-14T09:50:51.000Z","_content":"\n**python + selenium UI自动化测试脚本原创**\n\n<!--more-->\n\n# Driver的封装\n\n针对Webhis-baoji的UI自动化脚本，由于其本地URL是始终固定不变的，所需调用的driver也是不变的，故欲打算采用“单例设计模式”。\n\n## 单例设计模式\n\n单例（Singleton）模式的定义：指一个类只有一个实例，且该类能自行创建这个实例的一种模式。例如，Windows 中只能打开一个任务管理器，这样可以避免因打开多个任务管理器窗口而造成内存资源的浪费，或出现各个窗口显示内容的不一致等错误。\n\n在计算机系统中，还有 Windows 的回收站、操作系统中的文件系统、多线程中的线程池、显卡的驱动程序对象、打印机的后台处理服务、应用程序的日志对象、数据库的连接池、网站的计数器、Web 应用的配置对象、应用程序中的对话框、系统中的缓存等常常被设计成单例。\n\n单例模式是设计模式中最简单的模式之一。通常，普通类的构造函数是公有的，外部类可以通过“new 构造函数()”来生成多个实例。但是，如果将类的构造函数设为私有的，外部类就无法调用该构造函数，也就无法生成多个实例。这时该类自身必须定义一个静态私有实例，并向外提供一个静态的公有函数用于创建或获取该静态私有实例。\n\n单例模式有 3 个特点：\n\n- 单例类只有一个实例对象\n- 该单例对象必须由单例类自行创建\n- 单例类对外提供一个访问该单例的全局访问点\n\n------\n\n## UI-WEBHIS目录结构\n\n本章主在展示driver类的封装，仅以挂号功能作为展示及验证。\n\n```markdown\nwebhis-baoji(主目录)/\n│\n├── tool(工具子目录)/\n│   └── driver.py(driver的封装)\n│   └── function.py(函数的调用)\n│\n└── script(脚本子目录-功能)/\t# 以下为当前已实现功能脚本代码\n    └── login.py(登录-功能)\n    └── registered.py(门诊急挂号-功能)\n    └── orders_entry.py(门诊医嘱录入-功能)\n    └── >>>...<<<\n```\n\n------\n\n## driver.py\n\n所需导包：\n\n```python\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.service import Service\nimport pathlib\n```\n\n封装：\n\n```python\n\"\"\"Webhis-Baoji Chrome浏览器驱动 配置及调用\"\"\"\n\n\"\"\"-----多个py文件共同调用同一个webhis-driver时, 使用以下方法-----\"\"\"\nclass DriverSingleton:\n    _instance = None\n\n    @staticmethod\n    def getInstance():\n        if DriverSingleton._instance == None:\n            options = webdriver.ChromeOptions()\n            options.add_experimental_option('excludeSwitches', ['enable-logging'])\n            options.add_experimental_option(\"excludeSwitches\", [\"enable-automation\"])\n            options.add_experimental_option(\"useAutomationExtension\", 'False')\n            options.add_argument(\"--user-data-dir=\" + str(pathlib.Path.home()) + r\"\\AppData\\Local\\Google\\Chrome\\seleniumTest\")\n            DriverSingleton._instance = webdriver.Chrome(service=Service(r'C:\\Program Files\\Google\\Chrome\\Application\\chromedriver.exe'), options=options)\n        return DriverSingleton._instance\n\n\"\"\"-----单个py文件单独调用webhis-driver时, 使用以下方法-----\"\"\"\n\"\"\"\noptions = webdriver.ChromeOptions()\noptions.add_experimental_option('excludeSwitches', ['enable-logging'])\noptions.add_experimental_option(\"excludeSwitches\", [\"enable-automation\"])\noptions.add_experimental_option(\"useAutomationExtension\", 'False')\noptions.add_argument(\"--user-data-dir=\" + str(pathlib.Path.home()) + r\"\\AppData\\Local\\Google\\Chrome\\seleniumTest\")\n\n# 创建 WebDriver 对象, 指明使用chrome浏览器驱动\ndriver = webdriver.Chrome(service=Service(r'C:\\Program Files\\Google\\Chrome\\Application\\chromedriver.exe'), options=options)\n\"\"\"\n```\n\n\n\n在这个类中，_instance是一个类变量，用于存储DriverSingleton的实例。getInstance是一个静态方法，用于获取DriverSingleton的实例。\n\n- 如果_instance为None，则创建一个新的webdriver.Chrome实例并将其存储在_instance中。\n\n(webdriver.Chrome实例使用了一些特定的选项，例如禁用日志记录，禁用自动化，禁用自动化扩展，并设置用户数据目录)\n\n- 如果_instance不为None，则直接返回_instance。这就保证了无论何时调用getInstance方法，都会返回同一个webdriver.Chrome实例。\n\n这种设计模式在需要确保类只有一个实例，并且需要全局访问点的情况下非常有用。在这个情况下，webdriver.Chrome实例在整个应用程序中都使用同一个浏览器实例。\n\n------\n\n## function.py\n\n所需导包：\n\n```python\nimport sys\nsys.path.append('C:\\webhispython\\Webhis-test\\webhis-baoji')\n\nimport inspect\nimport time\nfrom selenium import webdriver\nfrom selenium.webdriver import Keys\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.action_chains import ActionChains\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nfrom selenium.common.exceptions import NoSuchElementException\n```\n\n------\n\n### 登录-函数模块\n\n```python\n\"\"\"---登录 模块---\"\"\"\n# login(driver， 用户名, 密码, 登录地点, 登录科室)\ndef login(driver, username, password, xpath_role, xpath_location):  # login(用户名, 密码, 角色, 登录地点)\n    time.sleep(5)  # 停止5秒，等待浏览器加载页面\n\n    \"\"\"系统登录首页\"\"\"\n    driver.find_element(by=By.ID, value='login_username').send_keys(username)  # 用户名\n    driver.find_element(by=By.ID, value='login_password').send_keys(password)  # 密码\n    driver.find_element(by=By.ID, value='nextBtn').click()\n    driver.implicitly_wait(5)\n\n    \"\"\"登录详细选项页\"\"\"\n    # 角色下拉框选值\n    item = driver.find_element(by=By.ID, value='entryForm_roleMstrId')\n    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()\n    driver.find_element(by=By.XPATH, value=xpath_role).click()  # 选择角色\n    driver.implicitly_wait(5)\n\n    # 科室下拉框选值\n    item = driver.find_element(by=By.ID, value='entryForm_locationMstrId')\n    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()\n    driver.find_element(by=By.XPATH, value=xpath_location).click()  # 选择科室\n    driver.implicitly_wait(5)\n\n    # 点击登录跳转\n    driver.find_element(by=By.ID, value='loginBtn').send_keys(Keys.ENTER)\n    driver.implicitly_wait(5)\n\n    time.sleep(3)\n    if True:\n        function_name = inspect.currentframe().f_code.co_name\n        print(f\"函数 {function_name} 执行完成\")\n```\n\n\n\n------\n\n### 门诊急挂号-函数模块\n\n```python\n\"\"\"---门急诊挂号 模块---\"\"\"\n# registration(driver, 患者门诊病案号, 挂号资源代码)\ndef registration(driver, record_number, registration_resources_code):  # 门急诊挂号\n    time.sleep(3)  # 停止5秒，等待浏览器加载页面\n\n    \"\"\"进入门急诊挂号页面\"\"\"\n    item = driver.find_element(by=By.XPATH, value=\"//*[@class='kt-global-header-common-trigger']\")  # 展开大类菜单\n    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()\n    time.sleep(1)\n\n    driver.find_element(by=By.XPATH, value=\"//*[@id='root']//*[@class='ant-menu-submenu-title']//*[text()='门诊医生站']\")  # 大类菜单\n    time.sleep(1)\n\n    item = driver.find_element(by=By.XPATH, value=\"//*[@id='root']//*[@class='ant-menu-item ant-menu-item-selected']\")  # 子类菜单(门诊医生站)\n    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()\n    time.sleep(1)\n\n    item = driver.find_element(by=By.XPATH, value=\"//*[@class='ant-tabs-nav-list']//*[text()='门诊急挂号']\")  # 进入\"门急诊挂号\"页面\n    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()\n    time.sleep(1)\n\n    item = driver.find_element(by=By.XPATH, value=\"//*[@class='kt-global-header-common-trigger']\")  # 缩回大类菜单\n    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()\n    time.sleep(1)\n\n    # 显式等待, 至\"门急诊挂号\"ID加载后再执行\n    wait = WebDriverWait(driver, 10)\n    wait.until(EC.presence_of_element_located((By.ID, 'rc-tabs-0-tab-5603808')))\n\n    \"\"\"WPB选择患者\"\"\"\n    time.sleep(2)\n    item = driver.find_element(by=By.XPATH, value=\"//input[contains(@placeholder,'请输入姓名/手机号/病案号')]\")\n    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()\n    # 输入所需患者门诊病案号, 唯一身份对应信息\n    driver.find_element(by=By.XPATH, value=\"//input[contains(@placeholder,'请输入姓名/手机号/病案号')]\").send_keys(record_number)\n    driver.implicitly_wait(10)  # 待WPB搜索框加载并检索出send的患者数据\n    time.sleep(2)\n\n    # 定位第一条患者并点击选中\n    item = driver.find_element(by=By.XPATH, value=\"//*[@class='ant-table ant-table-layout-fixed ant-table-fixed-header']//*[@class='ant-table-tbody']/tr[2]\")\n    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()\n    time.sleep(2)\n\n    \"\"\"选择挂号资源\"\"\"\n    time.sleep(2)\n    item = driver.find_element(by=By.XPATH, value=\"//*[@id='rc-tabs-0-panel-5603808']/div/div/div/div/div/div/div[1]/form/div/div[95]/div/div/div/span/div/div/div[2]/input\")\n    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()\n    # 输入所需挂号资源代码, 唯一代码对应信息\n    driver.find_element(by=By.XPATH, value=\"//*[@id='rc-tabs-0-panel-5603808']/div/div/div/div/div/div/div[1]/form/div/div[95]/div/div/div/span/div/div/div[2]/input\").send_keys(registration_resources_code)\n    driver.implicitly_wait(5)  # 待资源列表加载并检索出send的资源数据\n    time.sleep(3)\n    # 定位第一条资源并点击选中\n    driver.find_element(by=By.XPATH, value=\"//tr[@data-row-key='0' and contains(@class, 'ant-table-row-selected')]\").click()\n    driver.implicitly_wait(5)\n\n    \"\"\"账户支付\"\"\"\n    time.sleep(2)\n    item = driver.find_element(by=By.XPATH, value=\"//*[@class='regnRegistration_btnGroup_aOve9']//*[contains(text(),'账户支付')]\")\n    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()\n    driver.implicitly_wait(10)\n\n    try:\n        driver.find_element(By.XPATH, \"//*[text()='挂号成功！']\")\n        driver.implicitly_wait(20)\n        print(\"--- ATTENTION: 患者挂号成功! ---\")\n    except NoSuchElementException:\n        print(\"--- ATTENTION: 函数正常运行 但未完成挂号, 注意网络延迟并重试! ---\")\n\n    time.sleep(3)\n    if True:\n        function_name = inspect.currentframe().f_code.co_name\n        print(f\"函数 {function_name} 执行完成\")\n```\n\n\n\n------\n\n### 门诊医嘱录入-函数模块\n\n```python\n\"\"\"---门诊医嘱录入 模块---\"\"\"\n# outpatient_orders(drivr， 已有挂号患者， pickshell药品， 数量， 剂量， 用法， 频次, 周期)\ndef outpatient_orders(driver, patient_msg, order_insert, quantity, dosage, usage, frequency, cycle):\n    time.sleep(5)  # 停止5秒，等待浏览器加载页面\n\n    item = driver.find_element(by=By.XPATH, value=\"//*[@class='kt-global-header-common-trigger']\")  # 展开大类菜单\n    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()\n    time.sleep(1)\n\n    driver.find_element(by=By.XPATH, value=\"//*[@id='root']//*[@class='ant-menu-submenu-title']//*[text()='门诊医生站']\")  # 大类菜单\n    time.sleep(1)\n\n    item = driver.find_element(by=By.XPATH, value=\"//*[@id='root']//*[@class='ant-menu-item ant-menu-item-selected']\")  # 子类菜单(门诊医生站)\n    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()\n    time.sleep(1)\n\n    item = driver.find_element(by=By.XPATH, value=\"//*[@class='ant-tabs-nav-list']//*[text()='医生看诊']\")  # 进入\"医生看诊\"页面\n    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()\n    time.sleep(1)\n\n    item = driver.find_element(by=By.XPATH, value=\"//*[@class='kt-global-header-common-trigger']\")  # 缩回大类菜单\n    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()\n    time.sleep(1)\n\n    item = driver.find_element(by=By.XPATH, value=\"//button[@class='ant-btn ant-btn-link ant-btn-icon-only']\")  # 患者列表刷新\n    webdriver.ActionChains(driver).move_to_element(item).click().perform()\n    driver.implicitly_wait(5)\n    driver.find_element(by=By.XPATH, value=patient_msg).click()  # 选中患者列表对应挂号患者\n    time.sleep(5)\n\n    # 显式等待, 医嘱pickshell加载\n    wait = WebDriverWait(driver, 10)\n    wait.until(EC.presence_of_element_located((By.XPATH,  \"//*[@class='kt-datapicker kt-datapicker-singleRow']//*[@placeholder='请输入']\")))\n\n    # 定位并点击医嘱pickshell -> 传参, 输入医嘱名称\n    item = driver.find_element(by=By.XPATH, value=\"//*[@class='kt-datapicker kt-datapicker-singleRow']//*[@placeholder='请输入']\")\n    webdriver.ActionChains(driver).move_to_element(item).click().send_keys(order_insert).perform()\n    time.sleep(2)\n\n    # 选中列表第一条并点击\n    driver.find_element(By.XPATH, '//tr[@data-row-key=\"0\" and contains(@class, \"ant-table-row ant-table-row-level-0 kt-table-row-oddeven kt-row-selected-order-picker\")]').click()\n    time.sleep(2)\n\n    \"\"\"患者当前医嘱列表重复开立弹窗判断\"\"\"\n    try:\n        wait = WebDriverWait(driver, 3)\n        wait.until(EC.presence_of_element_located((By.XPATH, \"//*[text()='已经开立，是否继续？']\")))\n\n        confirm_button = driver.find_element(by=By.XPATH, value=\"//*[text()='确定']\")\n        confirm_button.click()\n    except:\n        print(\"---该医嘱可为此患者开立---\")\n        pass\n\n    \"\"\"----------数量----------\"\"\"\n    item = driver.find_element(by=By.ID, value=\"orderQtyId1\")\n    webdriver.ActionChains(driver).move_to_element(item).send_keys(quantity).perform()\n    driver.implicitly_wait(5)\n    time.sleep(1)\n\n    \"\"\"----------剂量----------\"\"\"\n    # '剂量'框存在未知异常，无法定位元素\n    # 又因前端约束 医嘱落入列表后光标自动定位到'数量'框，故使用ActionChains方法模拟TAB操作跳到'用法'框\n    actions = ActionChains(driver)\n    actions.send_keys(Keys.TAB, Keys.TAB).perform()\n    actions.send_keys(dosage).perform()\n    driver.implicitly_wait(5)\n    time.sleep(3)\n\n    \"\"\"----------用法----------\"\"\"\n    # //*[@class='kt-editable-cell tabIndex4']//input\n    item = driver.find_element(by=By.XPATH, value=\"//*[@class='kt-editable-cell tabIndex4']\")\n    webdriver.ActionChains(driver).move_to_element(item).click().perform()\n    time.sleep(3)\n\n    # 采用上述处理'剂量'框异常的方法后，又有未知原因 click定位到'用法'框后，光标会重新回到'剂量'框\n    # 故使用两次click定位'用法'框方法，来避免光标异常定位问题，经测试此方法有效\n    item = driver.find_element(by=By.XPATH, value=\"//*[@class='kt-editable-cell tabIndex4']\")\n    webdriver.ActionChains(driver).move_to_element(item).click().perform()\n    time.sleep(1)\n\n    item = driver.find_element(by=By.XPATH, value=\"//*[@class='kt-editable-cell tabIndex4']\")\n    webdriver.ActionChains(driver).move_to_element(item).send_keys(usage).perform()\n    time.sleep(1)\n    webdriver.ActionChains(driver).move_to_element(item).send_keys(Keys.ENTER).perform()\n\n    # 未知原因 用法框send_key后仍会再弹出下拉框，故设计为传参后立刻点击一处不可编辑区别，强制退出该输入框\n    time.sleep(1)\n    driver.find_element(by=By.XPATH, value=\"//*[@class='kt-global-header-common-logo-icon']\").click()\n    driver.implicitly_wait(5)\n    time.sleep(3)\n\n    \"\"\"----------频次----------\"\"\"\n    item = driver.find_element(by=By.XPATH, value=\"//*[@class='kt-editable-cell tabIndex5']\")\n    webdriver.ActionChains(driver).move_to_element(item).click().perform()\n    driver.implicitly_wait(5)\n\n    item = driver.find_element(by=By.XPATH, value=\"//*[@class='kt-editable-cell tabIndex5']\")\n    webdriver.ActionChains(driver).move_to_element(item).send_keys(frequency).perform()\n    time.sleep(1)\n    webdriver.ActionChains(driver).move_to_element(item).send_keys(Keys.ENTER).perform()\n\n    # 未知原因 频次框send_key后仍会再弹出下拉框，故设计为传参后立刻点击一处不可编辑区别，强制退出该输入框\n    time.sleep(1)\n    driver.find_element(by=By.XPATH, value=\"//*[@class='kt-global-header-common-logo-icon']\").click()\n    driver.implicitly_wait(5)\n    time.sleep(3)\n\n    \"\"\"----------周期----------\"\"\"\n    item = driver.find_element(by=By.XPATH, value=\"//*[@class='kt-editable-cell tabIndex6']\")\n    webdriver.ActionChains(driver).move_to_element(item).click().perform()\n    time.sleep(1)\n\n    item = driver.find_element(by=By.XPATH, value=\"//*[@class='kt-editable-cell tabIndex6']\")\n    for _ in range(4):\n        webdriver.ActionChains(driver).move_to_element(item).send_keys(Keys.BACKSPACE).perform()\n    time.sleep(1)\n\n    item = driver.find_element(by=By.XPATH, value=\"//*[@class='kt-editable-cell tabIndex6']\")\n    webdriver.ActionChains(driver).move_to_element(item).send_keys(cycle).perform()\n    time.sleep(3)\n\n    \"\"\"医嘱保存\"\"\"\n    driver.find_element(by=By.XPATH, value=\"//*[@class='diagnosisAnYang_secondLineItem_RITqA diagnosisAnYang_iconCursor_Jv_RO']//*[text()='保存']\").click()\n\n    \"\"\"患者医嘱重复预警弹窗判断\"\"\"\n    try:\n        wait = WebDriverWait(driver, 3)\n        wait.until(EC.presence_of_element_located((By.XPATH, \"//*[@class='ant-modal']//*[text()='医嘱重复报警']\")))\n\n        confirm_button = driver.find_element(by=By.XPATH, value=\"//*[text()='强制保存']\")\n        webdriver.ActionChains(driver).move_to_element(confirm_button).click().perform()\n    except:\n        print(\"---该医嘱可为此患者开立---\")\n        pass\n    \n    time.sleep(1)\n\n    \"\"\"医嘱保存成功弹窗校验\"\"\"\n    try:\n        item = driver.find_element(By.XPATH, \"//*[text()='医嘱保存成功']\")\n        webdriver.ActionChains(driver).move_to_element(item).perform()\n        driver.implicitly_wait(5)\n        print(\"--- ATTENTION: 医嘱保存成功! ---\")\n    except NoSuchElementException:\n        print(\"--- ATTENTION: 函数正常运行 但未成功保存医嘱，注意网络延迟并重试! ---\")\n\n    time.sleep(3)\n    if True:\n        function_name = inspect.currentframe().f_code.co_name\n        print(f\"函数 {function_name} 执行完成\")\n```\n\n\n\n------\n\n### WPB选择患者-函数模块\n\n```python\n\"\"\"---WPB选择患者 模块---\"\"\"\n# wpb_select(driver, 患者门诊病案号)\ndef wpb_select(driver, record_number):\n    time.sleep(2)\n\n    item = driver.find_element(by=By.XPATH, value=\"//input[contains(@placeholder,'请输入姓名/手机号/病案号')]\")\n    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()\n    # 输入所需患者门诊病案号, 唯一身份对应信息\n    driver.find_element(by=By.XPATH, value=\"//input[contains(@placeholder,'请输入姓名/手机号/病案号')]\").send_keys(record_number)\n    driver.implicitly_wait(10)  # 待WPB搜索框加载并检索出send的患者数据\n    time.sleep(2)\n\n    # 定位第一条患者并点击选中\n    item = driver.find_element(by=By.XPATH, value=\"//*[@class='ant-table ant-table-layout-fixed ant-table-fixed-header']//*[@class='ant-table-tbody']/tr[2]\")\n    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()\n    driver.implicitly_wait(5)\n    time.sleep(2)\n\n    time.sleep(3)\n    if True:\n        function_name = inspect.currentframe().f_code.co_name\n        print(f\"函数 {function_name} 执行完成\")\n```\n\n\n\n------\n\n# Webhis-门诊急挂号-流程测试脚本\n\n{% asset_img Outpatient_registration.png  %}\n\n## registration.py\n\n### 所需导包\n\n```python\nimport time\nimport sys\nsys.path.append('C:\\webhispython\\Webhis-test\\webhis-baoji')\n\nfrom tool.driver import DriverSingleton  # 从tool目录driver.py下，调用公用driver驱动\nfrom tool.function import login, registration  # 从tool目录function.py下，调用login()和registration()函数\n```\n\n### 主函数\n\n```python\ndriver = DriverSingleton.getInstance()  # 从driver.py下调用DriverSingleton.getInstance()方法以打开同一个driver实例\ndriver.get(url=\"http://10.227.16.12/login\")\ndriver.maximize_window()\n# time.sleep(5)  # 停止5秒，等待浏览器加载页面\n\n\nif __name__ == \"__main__\":\n    login(driver, 'RZX', '1', \"//*[text()='门急诊医生']\", \"//*[text()='神经内科二科门诊']\")  # 用户名, 密码, 登录地点, 登录科室\n    registration(driver, '0000000034', 'ZZHRZX')  # '测试01'门诊病案号'0000000034', '专家号-RZX'挂号资源代码'ZZHRZX'\n    time.sleep(3)\n    print(\"Success!\")\n    driver.quit()\n\n```\n\n1. 调用 driver.py 中 DriverSingleton 方法下的浏览器驱动 ，作为 driver 被脚本调用\n2. 主函数走 function.py 中的 login() 函数进行登录\n3. 再走 function.py 中的 registration() 函数进行门诊挂号\n\n登录函数 login() 传参： 用户名username， 密码password，登录角色xpath_role，登录地点xpath_location\n\n挂号函数 registration() 传参： 门诊患者病案号record_number， 挂号资源代码registration_resources_code\n\n------\n\n# Webhis-门诊单个医嘱录入-流程测试脚本\n\n{% asset_img Outpatient_doctor_station.png  %}\n\n## orders_entry.py\n\n### 所需导包\n\n```python\nimport sys\nsys.path.append('C:\\webhispython\\Webhis-test\\webhis-baoji')\nimport time\n\nfrom tool.driver import DriverSingleton  # 从tool目录driver.py下，调用公用driver驱动\nfrom tool.function import login, outpatient_orders  # 从tool目录function.py下，调用login()和outpatient_orders()函数\n```\n\n### 主函数\n\n```python\ndriver = DriverSingleton.getInstance()  # 从driver.py下调用DriverSingleton.getInstance()方法以打开同一个driver实例\ndriver.get(url=\"http://10.227.16.12/login\")\ndriver.maximize_window()\ntime.sleep(5)  # 停止5秒，等待浏览器加载页面\n\n\nif __name__ == \"__main__\":\n    # driver， 用户名, 密码, 登录地点, 登录科室\n    login(driver, 'RZX', '1', \"//*[text()='门急诊医生']\", \"//*[text()='神经内科二科门诊']\")\n\n    # drivr， 已有挂号患者， pickshell药品， 数量， 剂量， 用法， 频次， 周期\n    outpatient_orders(driver, \"//*[text()='测试01 13:54 知名专家号']\", \"布洛芬缓释胶囊\", \"2\", \"10\", \"口服\", \"qd8\", \"3\")\n\n    time.sleep(3)\n    print(\"Success!\")\n    driver.quit()\n```\n\n1. 调用 driver.py 中 DriverSingleton 方法下的浏览器驱动 ，作为 driver 被脚本调用\n2. 主函数走 function.py 中的 login() 函数进行登录\n3. 再走 function.py 中的 outpatient_orders() 函数进行医嘱录入\n\n登录函数 login() 传参：driver，用户名username，密码password，登录角色xpath_role，登录地点xpath_location\n\n医嘱录入函数 outpatient_orders() 传参：driver，已有挂号患者patient_msg，pickshell药品order_insert，数量quantity，剂量dosage，用法，频次frequency，周期cycle\n\n------\n\n# Webhis-门诊自定义多医嘱录入-流程测试脚本详解\n\n## 前情摘要\n\n​\t\t该脚本利用登录、挂号、医嘱等函数，selenium、ActionChains、webdriver等将前面所展示的内容做了一个整合，以实现从编译器终端录入多种医嘱的效果，代码量将近四百行，多以调用函数的方式运行，总耗时大概三周的闲暇时间搞定。\n\n​\t\t由于 宝鸡项目Web端 门诊医生站开立医嘱 会存在很多特殊情况，不同的医嘱类型、不同的维护、不同的页面参数，系统参数都会导致Web前端页面的效果不同，会出现不同的弹窗等，针对多种情况去做脚本的判断部分没有意义，故此脚本为UI自动化测试脚本的终章。\n\n​\t\t以下详解部分，也将更详细的切分脚本的代码，附上更多的效果图，以便更好的理解其实现的流程及原理。\n\n------\n\n## 所需导包\n\n```python\nimport sys\nsys.path.append('C:\\webhispython\\Webhis-test\\webhis-baoji')\n\nimport pathlib\nimport inspect\nimport time\nfrom selenium import webdriver\nfrom selenium.webdriver import Keys\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.action_chains import ActionChains\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nfrom selenium.common.exceptions import NoSuchElementException\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.service import Service\n```\n\n------\n\n## driver的调用及设置\n\n- 对新调用的 Google 浏览器的启动参数进行设置：\n\n```python\noptions = webdriver.ChromeOptions()\n```\n\n------\n\n使用Cursor的编译器执行脚本，脚本运行过程中，终端会时不时弹出一些ERROR信息，很影响脚本中的print打印内容显示。\n\n例如：[ERROR:ssl_client_socket_impl.cc(968)] handshake failed; returned -1, SSL error code 1, net_error -101\n\n这个错误信息是由于 SSL 握手失败导致的，宝鸡Webhis系统由本地启动，通过VPN访问远程服务器，SSL证书问题等并不需要着重考虑。\n\n故使用以下两项设置，以强制关闭诸如此类的警告打印：\n\n- 设置 Chrome 的日志级别，3表示只记录ERROR级别的日志：\n\n```python\noptions.add_argument('--log-level=3')\n```\n\n- 禁用了 Chrome 的日志记录功能。这可以使得 Chrome 在运行时更加安静，不会输出不必要的日志信息：\n\n```python\noptions.add_experimental_option('excludeSwitches', ['enable-logging'])\n```\n\n------\n\n- 该设置禁用了 Chrome 的自动化控制提示。在使用 Selenium 控制 Chrome 时，浏览器顶部的 \"Chrome正在受到自动软件的控制\" 这个提示将不会出现：\n\n```python\noptions.add_experimental_option(\"excludeSwitches\", [\"enable-automation\"])\n```\n\n------\n\n- 该设置禁用了 Chrome 的自动化扩展。这可以防止 Chrome 在启动时加载不必要的扩展，从而提高启动速度：\n\n```python\noptions.add_experimental_option(\"useAutomationExtension\", 'False')\n```\n\n------\n\n- 这个设置约束了 Chrome 的本地数据目录。这意味着 Chrome 将会在这个目录下存储用户的个人信息，如浏览历史、书签等。这个选项可以在多次运行 Selenium 时保持相同的浏览环境：\n\n```python\noptions.add_argument(\"--user-data-dir=\" + str(pathlib.Path.home()) + r\"\\AppData\\Local\\Google\\Chrome\\seleniumTest\")\n```\n\n------\n\n- 创建 WebDriver 对象, 指明使用chrome浏览器驱动，并进行以上options的设置：\n\n```python\ndriver = webdriver.Chrome(service=Service(r'C:\\Program Files\\Google\\Chrome\\Application\\chromedriver.exe'), options=options)\n```\n\n------\n\n- 调项目环境URL，启动浏览器自动化脚本控制：\n\n```python\ndriver.get(url=\"http://10.227.16.12/login\")\ndriver.maximize_window()\ntime.sleep(3)  # 强制停止5秒，等待浏览器加载页面\n```\n\n------\n\n## 登录-函数模块\n\n项目系统登录页面有主页面和子页面之分，主页面输入登录账户密码，子页面选择登录人的角色及登录地点。\n\n登录函数：\n\n```python\ndef login(driver, username, password, xpath_role, xpath_location):  # login(用户名, 密码, 角色, 登录地点)\n```\n\n登录主页面：\n\n```python\nprint(\"脚本已进入 [登录菜单] \")\n\"\"\"系统登录首页\"\"\"\ndriver.find_element(by=By.ID, value='login_username').send_keys(username)  # 用户名\ndriver.find_element(by=By.ID, value='login_password').send_keys(password)  # 密码\ndriver.find_element(by=By.ID, value='nextBtn').click()\ndriver.implicitly_wait(5)\n```\n\n{% asset_img 登录主页面.png  %}\n\n登录子页面：\n\n```python\n\"\"\"登录详细选项页\"\"\"\nprint(\"脚本已进入 [登录子菜单] \")\n# 角色下拉框选值\nitem = driver.find_element(by=By.ID, value='entryForm_roleMstrId')\nwebdriver.ActionChains(driver).move_to_element(item).click(item).perform()\ndriver.find_element(by=By.XPATH, value=xpath_role).click()  # 选择角色\ndriver.implicitly_wait(5)\n\n# 科室下拉框选值\nitem = driver.find_element(by=By.ID, value='entryForm_locationMstrId')\nwebdriver.ActionChains(driver).move_to_element(item).click(item).perform()\ndriver.find_element(by=By.XPATH, value=xpath_location).click()  # 选择科室\ndriver.implicitly_wait(5)\n\n# 点击登录跳转\ndriver.find_element(by=By.ID, value='loginBtn').send_keys(Keys.ENTER)\ndriver.implicitly_wait(5)\n\n```\n\n{% asset_img 登录子页面.png  %}\n\n------\n\n## 门诊多医嘱录入-函数模块 [重]\n\n### 整体结构概述\n\n医嘱录入的过程本身就是顺序执行到底的，所以这部分脚本代码也保持顺序执行的逻辑。本意就是想要设计一个能够自主任意的录入多次多种医嘱的脚本，所以设计了 函数嵌套的方式，以实现循环执行录入医嘱的函数，通过终端输入的方式，自主决定录入不同数量的医嘱、不同种类的医嘱。\n\n当然，编译器终端输入以实现可控制性的方法固然是最原始最笨的办法，因为在脚本执行的过程中，driver调用的浏览器窗口设定为最大化maxmize_window；而每次自定义选择医嘱时，又需要切出浏览器，在终端存值，会很影响感官。\n\n- 我能设想到的最理想的是，用前端方法设计一个大小合适且可拖动调整的小窗，同步编译器终端的功能，可通过小窗输入输出终端内容，并将该窗口置于可视桌面最前端，这样既能看到浏览器自动化运行的过程，又能快捷终端输入输出，也不会很影响视觉。这想法只能说以我当前能力是无法实现的了，以后如果有机会，可以拓展到其他工作项目的自动化脚本里去。\n\n多医嘱录入函数的框架大致如下：\n\n```python\ndef outpatient_orders(driver, patient_msg):\n    ...  # 脚本进入医生看诊页面的代码执行\n    def orders_entry_main():\n        def loop_entry(entry):\n            match entry:\n                case '1': pickshell医嘱\n                case '2': 检验类医嘱\n                case '3': 检查类医嘱\n                case _: 提示输入错误\n        while True:\n            entry = input()\n            loop_entry(entry)\n            if entry == '0':\n                break\n    orders_entry_main()\noutpatient_orders(driver, patient_msg)\n```\n\n函数嵌套方法：\n\n- loop_entry()函数传参entry，通过match...case方法，读取entry的值，进而进行不同的case操作，以实现参数控制代码执行范围，自定义选择开立的医嘱类型\n- orders_entry_main()函数通过while True无限循环调用loop_entry()函数，entry通过终端键盘input输入的方法传参给loop_entry()，输入字符'0'时跳出循环\n- outpatient_orders()函数传参patient_msg，脚本进入到医生看诊页面后，选中对应挂号患者patient_msg，以为指定患者开立医嘱执行嵌套内的函数\n\n------\n\n### 脚本进入医生看诊页面\n\n{% asset_img 医生看诊页面.png  %}\n\n① 展开大类主菜单，并进入门诊医生站对应的大类菜单：\n\n```python\nitem = driver.find_element(by=By.XPATH, value=\"//*[@class='kt-global-header-common-trigger']\")  # 展开大类菜单\nwebdriver.ActionChains(driver).move_to_element(item).click(item).perform()\ntime.sleep(1)\n\ndriver.find_element(by=By.XPATH, value=\"//*[@id='root']//*[@class='ant-menu-submenu-title']//*[text()='门诊医生站']\")  # 大类菜单\ntime.sleep(1)\n```\n\n② 进入子类菜单，并进入医生看诊页面：\n\n```python\nitem = driver.find_element(by=By.XPATH, value=\"//*[@id='root']//*[@class='ant-menu-item ant-menu-item-selected']\")  # 子类菜单(门诊医生站)\nwebdriver.ActionChains(driver).move_to_element(item).click(item).perform()\ntime.sleep(1)\n\nitem = driver.find_element(by=By.XPATH, value=\"//*[@class='ant-tabs-nav-list']//*[text()='医生看诊']\")  # 进入\"医生看诊\"页面\nwebdriver.ActionChains(driver).move_to_element(item).click(item).perform()\nprint(\"脚本已切换到 [门诊医生站] 页面\")\ntime.sleep(1)\n```\n\n③ 选中患者，进入门诊医生站待录入医嘱：\n\n```python\nitem = driver.find_element(by=By.XPATH, value=\"//button[@class='ant-btn ant-btn-link ant-btn-icon-only']\")  # 患者列表刷新\nwebdriver.ActionChains(driver).move_to_element(item).click().perform()\ndriver.implicitly_wait(5)\ndriver.find_element(by=By.XPATH, value=patient_msg).click()  # 选中患者列表对应挂号患者\nprint(\"已选中 门诊挂号患者[ %s ]\" % patient_msg)\ntime.sleep(5)  # 强制等待页面加载, 待患者信息、门诊医生站功能加载\n```\n\n------\n\n### pickshell医嘱录入功能的实现\n\n{% asset_img pickshell输入医嘱.png  %}\n\n如上图，以 medicine传参医嘱完整全称 定位到pickshell输入框。部分医嘱例如葡萄糖注射液，列表会显示名称带有“葡萄糖注射液”的所有医嘱，会出现不同浓度、不同规格、不同厂商等多种葡萄糖注射液医嘱，此处并不做特殊情况的考虑，均定位到列表内第一条医嘱并点击。\n\n```python\nmedicine = input(\"请输入所要开立的pickshell药品完整名称: \")\n\nitem = driver.find_element(by=By.XPATH, value=\"//*[@class='kt-datapicker kt-datapicker-singleRow']//*[@placeholder='请输入']\")\nwebdriver.ActionChains(driver).move_to_element(item).click().send_keys(medicine).perform()\ntime.sleep(3)  # 强制等待给检索医嘱列表的加载时间\n\n# 定位并选择目录列表第一条医嘱\ndriver.find_element(By.XPATH, '//tr[@data-row-key=\"0\" and contains(@class, \"ant-table-row ant-table-row-level-0 kt-table-row-oddeven kt-row-selected-order-picker\")]').click()\ntime.sleep(2)\n```\n\n------\n\n{% asset_img 医嘱重复弹窗.png  %}\n\n如上图，医嘱落入医生站时有多个校验，医嘱重复校验弹窗就是其一。当该患者的医嘱列表存在相同医嘱，会出现并需要判断点击。故在脚本代码中使用try...except...方法同步进行校验。\n\n```python\n\"\"\"患者当前医嘱列表重复开立弹窗判断\"\"\"\ntry:\n\twait = WebDriverWait(driver, 10)\n\twait.until(EC.presence_of_element_located((By.XPATH, \"//*[text()='已经开立，是否继续？']\")))\n\n\tconfirm_button = driver.find_element(by=By.XPATH, value=\"//*[text()='确定']\")\n\tconfirm_button.click()\nexcept:\n\tpass\n```\n\n------\n\n{% asset_img 医嘱详细信息录入.png  %}\n\n医嘱落入医生站后，则需要对其医嘱的信息进行手动的填写了，过程都是类似的，但是这部分内容一直存在历史bug，前端开发在此处放置的下拉框会出现异常跳转、光标回弹的问题。**撰写此处脚本的时候，着实是见识到了水货开发的实力**。。。当然脚本代码也用了最原始最简单的方法避免这些bug：time.sleep()设定强制等待、点击其他空白可定位位置以防止原本sendkeys的值消失、在前端光标自动回弹后再重复定位下一个元素重新存值。\n\n上述所说的前端bug问题具体为：光标定位到“剂量”框并存值后，切到下一个“用法”框时，光标会自动跳转回“剂量”框去；有时脚本在执行过程中，已向“用法”框存值后，切到其他输入框时，原存值会莫名消失等（此问题非必现，大多运行时正常，故脚本内并未做相关问题的解决方案；如果执行过程中复现此问题，只能重新录入或快速手动输入了）。。。\n\n- “数量”输入框\n\n```python\n\"\"\"----------数量----------\"\"\"\nitem = driver.find_element(by=By.XPATH, value=\"//*[@id='orderQtyId1']\")\nwebdriver.ActionChains(driver).move_to_element(item).send_keys(\"3\").perform()  # '数量'固定存值'3'\ndriver.implicitly_wait(3)\ntime.sleep(1)\n```\n\n- “剂量”输入框\n\n```python\n\"\"\"----------剂量----------\"\"\"\n# '剂量'框存在未知异常，无法定位元素\n# 又因前端约束 医嘱落入列表后光标自动定位到'数量'框，故使用ActionChains方法模拟TAB操作跳到'用法'框\nactions = ActionChains(driver)\nactions.send_keys(Keys.TAB, Keys.TAB).perform()\nactions.send_keys(\"1\").perform()\ndriver.implicitly_wait(5)\ntime.sleep(3)\n```\n\n- “用法”输入框\n\n```python\n\"\"\"----------用法----------\"\"\"\nitem = driver.find_element(by=By.XPATH, value=\"//*[@class='kt-editable-cell tabIndex4']\")\nwebdriver.ActionChains(driver).move_to_element(item).click().perform()\ntime.sleep(3)\n\n# 采用上述处理'剂量'框异常的方法后，又有未知原因 click定位到'用法'框后，光标会重新回到'剂量'框(前端代码问题)\n# 故使用两次click定位'用法'框方法，来避免光标异常定位问题，经测试此方法有效\nitem = driver.find_element(by=By.XPATH, value=\"//*[@class='kt-editable-cell tabIndex4']\")\nwebdriver.ActionChains(driver).move_to_element(item).click().perform()\ntime.sleep(1)\n\nitem = driver.find_element(by=By.XPATH, value=\"//*[@class='kt-editable-cell tabIndex4']\")\nwebdriver.ActionChains(driver).move_to_element(item).send_keys(\"口服\").perform()\ntime.sleep(1)\nwebdriver.ActionChains(driver).move_to_element(item).send_keys(Keys.ENTER).perform()\n\n# 未知原因 用法框send_key后仍会再弹出下拉框，故设计为传参后立刻点击一处不可编辑区别，强制退出该输入框\ntime.sleep(1)\ndriver.find_element(by=By.XPATH, value=\"//*[@class='kt-global-header-common-logo-icon']\").click()\ndriver.implicitly_wait(5)\ntime.sleep(3)\n```\n\n- “频次”输入框\n\n```python\n\"\"\"----------频次----------\"\"\"\nitem = driver.find_element(by=By.XPATH, value=\"//*[@class='kt-editable-cell tabIndex5']\")\nwebdriver.ActionChains(driver).move_to_element(item).click().perform()\ndriver.implicitly_wait(5)\n\nitem = driver.find_element(by=By.XPATH, value=\"//*[@class='kt-editable-cell tabIndex5']\")\nwebdriver.ActionChains(driver).move_to_element(item).send_keys(\"qd8\").perform()\ntime.sleep(1)\nwebdriver.ActionChains(driver).move_to_element(item).send_keys(Keys.ENTER).perform()\n\n# 未知原因 频次框send_key后仍会再弹出下拉框，故设计为传参后立刻点击一处不可编辑区别，强制退出该输入框\ntime.sleep(1)\ndriver.find_element(by=By.XPATH, value=\"//*[@class='kt-global-header-common-logo-icon']\").click()\ndriver.implicitly_wait(5)\ntime.sleep(3)\n```\n\n- “周期”输入框\n\n在录入数量、剂量、频次后，系统会自动换算出“周期”所需的值，脚本在此处为测试能否正常传值，所以也采取传入固定值的方式。使用send_keys全选CTRL + A以清除“周期”内原有值的方法未生效，换成for循环连续4次进行BACKSPACE操作代替。\n\n```python\n\"\"\"----------周期----------\"\"\"\nitem = driver.find_element(by=By.XPATH, value=\"//*[@class='kt-editable-cell tabIndex6']\")\nwebdriver.ActionChains(driver).move_to_element(item).click().perform()\ntime.sleep(1)\n\nitem = driver.find_element(by=By.XPATH, value=\"//*[@class='kt-editable-cell tabIndex6']\")\nfor _ in range(4):\nwebdriver.ActionChains(driver).move_to_element(item).send_keys(Keys.BACKSPACE).perform()\ntime.sleep(1)\n\nitem = driver.find_element(by=By.XPATH, value=\"//*[@class='kt-editable-cell tabIndex6']\")\nwebdriver.ActionChains(driver).move_to_element(item).send_keys(\"3\").perform()\ntime.sleep(3)\n```\n\n- 医嘱保存\n\n```python\n\"\"\"医嘱保存\"\"\"\ndriver.find_element(by=By.XPATH, value=\"//*[@class='diagnosisAnYang_secondLineItem_RITqA diagnosisAnYang_iconCursor_Jv_RO']//*[text()='保存']\").click()\n```\n\n------\n\n{% asset_img 医嘱保存重复校验.png  %}\n\n不光在开立医嘱时有医嘱重复校验，在最后保存医嘱列表时也会弹窗类似重复的校验。针对此类弹窗，采取相同方法，try...except...当定位到“强制保存”的文本，则点击此文本对应按钮，以确认关闭该校验弹窗。\n\n```python\n\"\"\"患者医嘱重复预警弹窗判断\"\"\"\ntry:\n    confirm_button = driver.find_element(by=By.XPATH, value=\"//*[@class='ant-modal-body']//button[text()='强制保存']\")\n    webdriver.ActionChains(driver).move_to_element(confirm_button).click().perform()\n    driver.implicitly_wait(3)\n    time.sleep(1)\nexcept:\n\tpass\n```\n\n------\n\n{% asset_img 医嘱保存成功校验.png  %}\n\n上述所有录入医嘱的操作执行完毕后，要对所有医嘱进行保存才可退出，点击保存后需要物理等待程序加载、数据库存值，保存成功会有“医嘱保存成功”弹窗。\n\n针对该弹窗的定位抓取，终端print打印脚本执行结果是我认为有必要的，所以增加了此脚本代码形式的校验。\n\n```python\n\"\"\"医嘱保存成功弹窗校验\"\"\"\ntry:\n    item = driver.find_element(By.XPATH, \"//*[text()='医嘱保存成功']\")\n    webdriver.ActionChains(driver).move_to_element(item).perform()\n    driver.implicitly_wait(5)\n    print(\"--- ATTENTION: 医嘱保存成功! ---\")\nexcept NoSuchElementException:\n    print(\"--- ATTENTION: 函数正常运行 但未成功保存医嘱，注意网络延迟并重试! ---\")\n```\n\n------\n\n**pickshell医嘱开立 部分完整脚本运行截图：**\n\n{% asset_img pickshell运行系统截图.png  %}\n\n{% asset_img pickshell运行终端截图.png  %}\n\n------\n\n### 检验类医嘱录入功能的实现\n\n{% asset_img 检验类医嘱开立方法.png  %}\n\n检验医嘱开立在功能上可以通过详细检验组分类，选择性显示不同类别的检验医嘱，从而勾选所需要的。但是这本就对于需变动脚本不便，自然也不必要使用此方式。索性直接用inspection_id传参项目代码，既具有唯一性，又可以跳过勾选多个复选框之一时麻烦的定位等问题。所以本脚本在执行检验类医嘱的过程只分为：打开页面 -> 输入inspection_id -> 勾选列表第一个复选框 -> 点击确定。就能简洁且顺利的搞定此部分。\n\n- 进入“检验”类医嘱开立弹窗\n\n```python\n\"\"\"按钮开立检验类医嘱\"\"\"\nprint(\"正在进入检验类医嘱开立弹窗...\")\nitem = driver.find_element(by=By.XPATH, value=\"//*[@class='diagnosisAnYang_secondLine_BsP7f']//*[text()='检验']\")\nwebdriver.ActionChains(driver).move_to_element(item).click().perform()\ntime.sleep(3)\n```\n\n- 终端传参inspection_id项目代码\n\n```python\n# 搜索框搜索 项目代码 以唯一性元素 定位所需项目\ninspection_id = input(\"请输入所要开立的检验类医嘱-项目代码: \")\nitem = driver.find_element(by=By.XPATH, value=\"//*[@class='labReqApplicationDialog_container_J2E8u']//input[contains(@placeholder,'请输入项目描述/项目代码')]\")\nwebdriver.ActionChains(driver).move_to_element(item).click().send_keys(inspection_id).send_keys(Keys.ENTER).perform()\ndriver.implicitly_wait(5)\ntime.sleep(2)\n\n```\n\n- 勾选列表下第一个复选框，点击确定按钮并保存医嘱\n\n```python\nitem = driver.find_element(by=By.XPATH, value=\"//*[@class='ant-table-body']//*[@class='ant-table-row ant-table-row-level-0']//input[1]\")\nwebdriver.ActionChains(driver).move_to_element(item).click().perform()\ndriver.implicitly_wait(5)\ntime.sleep(2)\n\nitem = driver.find_element(by=By.XPATH, value=\"//*[@class='kt-dialog-footer kt-portal-footer-container']//button[text()='确定']\")\nwebdriver.ActionChains(driver).move_to_element(item).click().perform()\ndriver.implicitly_wait(5)\ntime.sleep(2)\n\n\"\"\"医嘱保存\"\"\"\ndriver.find_element(by=By.XPATH, value=\"//*[@class='diagnosisAnYang_secondLineItem_RITqA diagnosisAnYang_iconCursor_Jv_RO']//*[text()='保存']\").click()\ntime.sleep(2)\n```\n\n- 医嘱保存成功校验\n\n效果同pickshell的医嘱保存成功校验\n\n```python\n\"\"\"医嘱保存成功弹窗校验\"\"\"\ntry:\nwait = WebDriverWait(driver, 10)\nwait.until(EC.presence_of_element_located((By.XPATH, \"//*[text()='医嘱保存成功']\")))\n\nitem = driver.find_element(By.XPATH, \"//*[text()='医嘱保存成功']\")\nwebdriver.ActionChains(driver).move_to_element(item).perform()\ndriver.implicitly_wait(5)\ntime.sleep(2)\nprint(\"--- ATTENTION: 医嘱保存成功! ---\")\nexcept NoSuchElementException:\nprint(\"--- ATTENTION: 函数正常运行 但未成功保存医嘱，注意网络延迟并重试! ---\")\n```\n\n------\n\n**检验类医嘱开立 部分完整脚本运行截图：**\n\n{% asset_img 检验类医嘱运行系统截图.png  %}\n\n{% asset_img 检验类医嘱运行终端截图.png  %}\n\n------\n\n### 检查类医嘱录入功能的实现\n\n{% asset_img 检查类医嘱开立方法.png  %}\n\n检查医嘱的脚本代码开立方法大体和检验医嘱一致，通过examination_id传参项目代码，勾选对应项目以实现开立。只不过针对检查类医嘱，会有选择检查部位的情况需要考虑，故再增加一个判断校验，当发现所开立的医嘱需要再录入部位，则默认勾选并带入部位列表下第一个值。所以本脚本在执行检查类医嘱的过程分为：打开页面 -> 输入examination_id -> 勾选列表第一个复选框 -> 判断该项目是否需要录入部位（需要则默认勾选第一个部位；不需要则跳过） -> 点击确定。\n\n- 进入“检查”类医嘱开立弹窗\n\n```python\n\"\"\"按钮开立检查类医嘱\"\"\"\nprint(\"正在进入检查类医嘱开立弹窗...\")\nitem = driver.find_element(by=By.XPATH, value=\"//*[@class='diagnosisAnYang_secondLine_BsP7f']//*[text()='检查']\")\nwebdriver.ActionChains(driver).move_to_element(item).click().perform()\ntime.sleep(3)\ndriver.implicitly_wait(10)\n```\n\n- 录入“检查目的”\n\n```python\nitem = driver.find_element(by=By.XPATH, value=\"//*[@class='ant-modal-body']//*[@class='ant-select-selector']\")\nwebdriver.ActionChains(driver).move_to_element(item).click().send_keys(\"协助诊断\").send_keys(Keys.ENTER).perform()\ndriver.implicitly_wait(5)\ntime.sleep(1)\n```\n\n- 终端传参examination_id项目代码 并勾选\n\n```python\n# 搜索框搜索 项目代码 以唯一性元素 定位所需项目\nexamination_id = input(\"请输入所要开立的检查类医嘱-项目代码: \")\nitem = driver.find_element(by=By.XPATH, value=\"//*[@class='ant-input-affix-wrapper']\")\nwebdriver.ActionChains(driver).move_to_element(item).click().send_keys(examination_id).perform()\ntime.sleep(1)\n\nitem = driver.find_element(by=By.XPATH, value=\"//*[@class='ant-table-body']//*[@class='ant-table-row ant-table-row-level-0']//input[1]\")\nwebdriver.ActionChains(driver).move_to_element(item).click().perform()\ndriver.implicitly_wait(4)\ntime.sleep(2)\n```\n\n- 所开立检查项目是否需要录入部位的判断 及部位的录入\n\n```python\n\"\"\"检查医嘱是否存在部位待选择情况判断\"\"\"\ntry:\n    driver.find_element(by=By.XPATH, value=\"//*[@class='ant-input-affix-wrapper']//*[contains(@placeholder,'请输入部位名称')]\")\n\n    print(\"该检查类医嘱有部位维护, 需要选择部位才能开立! \")\n    # 脚本仅勾选第一个部位, 不打算做多种多个部位勾选的细分代码\n    item = driver.find_element(by=By.XPATH, value=\"//*[@class='ant-checkbox-group examReqmultiApplicationDialog_group_SOSLw']//input[1]\")\n    webdriver.ActionChains(driver).move_to_element(item).click().perform()\n    driver.implicitly_wait(3)\n    time.sleep(1)\nexcept:\n    pass\n```\n\n- 点击确定 落入医嘱\n\n```python\nitem = driver.find_element(by=By.XPATH, value=\"//*[@class='kt-dialog-footer kt-portal-footer-container']//button[contains(text(),'确定')]\")\nwebdriver.ActionChains(driver).move_to_element(item).click().perform()\ndriver.implicitly_wait(4)\ntime.sleep(2)\n```\n\n- 医嘱重复开立弹窗校验\n\n```python\n\"\"\"当前患者该医嘱已开立弹窗校验\"\"\"\ntry:\n    wait = WebDriverWait(driver, 10)\n    wait.until(EC.presence_of_element_located((By.XPATH, \"//*[@class='ant-modal-content']//*[contains(text(),'已经开立，是否继续？')]\")))\n\n    confirm_button = driver.find_element(by=By.XPATH, value=\"//*[@class='kt-dialog-confirm-footer']//button[contains(text(),'确定')]\")\n    webdriver.ActionChains(driver).move_to_element(confirm_button).click().perform()\n    print(\"--- ATTENTION: 检查项目成功落入医嘱列表 ---\")\nexcept:\n    pass\n```\n\n- 医嘱保存及保存成功校验\n\n```python\n\"\"\"医嘱保存\"\"\"\ndriver.find_element(by=By.XPATH, value=\"//*[@class='diagnosisAnYang_secondLineItem_RITqA diagnosisAnYang_iconCursor_Jv_RO']//*[text()='保存']\").click()\ntime.sleep(2)\n\n\"\"\"医嘱保存成功弹窗校验\"\"\"\ntry:\n    wait = WebDriverWait(driver, 10)\n    wait.until(EC.presence_of_element_located((By.XPATH, \"//*[text()='医嘱保存成功']\")))\n\n    item = driver.find_element(By.XPATH, \"//*[text()='医嘱保存成功']\")\n    webdriver.ActionChains(driver).move_to_element(item).perform()\n    driver.implicitly_wait(5)\n    time.sleep(2)\n    print(\"--- ATTENTION: 医嘱保存成功! ---\")\nexcept NoSuchElementException:\n    print(\"--- ATTENTION: 函数正常运行 但未成功保存医嘱，注意网络延迟并重试! ---\")\n```\n\n------\n\n**检查类医嘱开立 部分完整脚本运行截图：**\n\n{% asset_img 检查类医嘱运行系统截图.png  %}\n\n{% asset_img 检查类医嘱运行终端截图.png  %}\n\n------\n\n**以上就是基于python 3.10.10 和 selenium 4 版本，结合康博嘉宝鸡项目Webhis门诊医生站系统制作的 UI自动化测试脚本。此项目属于是我的第一份工作的第一个项目，功能性还是比较简单和单一的，四百行的代码量也并不多，代码内容结构也都是比较单一固定的，只能说这个项目于我巩固selenium的使用，恢复对python的学习起到了很大的帮助吧，还望以后的职业生涯再接再厉咯，这个md应该就写至此为止了！**\n","source":"_posts/Python-Selenium脚本.md","raw":"---\ntitle: Python+Selenium脚本\nabbrlink: e4f344ea\ndate: 2022-12-14 17:50:51\ntags:\n---\n\n**python + selenium UI自动化测试脚本原创**\n\n<!--more-->\n\n# Driver的封装\n\n针对Webhis-baoji的UI自动化脚本，由于其本地URL是始终固定不变的，所需调用的driver也是不变的，故欲打算采用“单例设计模式”。\n\n## 单例设计模式\n\n单例（Singleton）模式的定义：指一个类只有一个实例，且该类能自行创建这个实例的一种模式。例如，Windows 中只能打开一个任务管理器，这样可以避免因打开多个任务管理器窗口而造成内存资源的浪费，或出现各个窗口显示内容的不一致等错误。\n\n在计算机系统中，还有 Windows 的回收站、操作系统中的文件系统、多线程中的线程池、显卡的驱动程序对象、打印机的后台处理服务、应用程序的日志对象、数据库的连接池、网站的计数器、Web 应用的配置对象、应用程序中的对话框、系统中的缓存等常常被设计成单例。\n\n单例模式是设计模式中最简单的模式之一。通常，普通类的构造函数是公有的，外部类可以通过“new 构造函数()”来生成多个实例。但是，如果将类的构造函数设为私有的，外部类就无法调用该构造函数，也就无法生成多个实例。这时该类自身必须定义一个静态私有实例，并向外提供一个静态的公有函数用于创建或获取该静态私有实例。\n\n单例模式有 3 个特点：\n\n- 单例类只有一个实例对象\n- 该单例对象必须由单例类自行创建\n- 单例类对外提供一个访问该单例的全局访问点\n\n------\n\n## UI-WEBHIS目录结构\n\n本章主在展示driver类的封装，仅以挂号功能作为展示及验证。\n\n```markdown\nwebhis-baoji(主目录)/\n│\n├── tool(工具子目录)/\n│   └── driver.py(driver的封装)\n│   └── function.py(函数的调用)\n│\n└── script(脚本子目录-功能)/\t# 以下为当前已实现功能脚本代码\n    └── login.py(登录-功能)\n    └── registered.py(门诊急挂号-功能)\n    └── orders_entry.py(门诊医嘱录入-功能)\n    └── >>>...<<<\n```\n\n------\n\n## driver.py\n\n所需导包：\n\n```python\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.service import Service\nimport pathlib\n```\n\n封装：\n\n```python\n\"\"\"Webhis-Baoji Chrome浏览器驱动 配置及调用\"\"\"\n\n\"\"\"-----多个py文件共同调用同一个webhis-driver时, 使用以下方法-----\"\"\"\nclass DriverSingleton:\n    _instance = None\n\n    @staticmethod\n    def getInstance():\n        if DriverSingleton._instance == None:\n            options = webdriver.ChromeOptions()\n            options.add_experimental_option('excludeSwitches', ['enable-logging'])\n            options.add_experimental_option(\"excludeSwitches\", [\"enable-automation\"])\n            options.add_experimental_option(\"useAutomationExtension\", 'False')\n            options.add_argument(\"--user-data-dir=\" + str(pathlib.Path.home()) + r\"\\AppData\\Local\\Google\\Chrome\\seleniumTest\")\n            DriverSingleton._instance = webdriver.Chrome(service=Service(r'C:\\Program Files\\Google\\Chrome\\Application\\chromedriver.exe'), options=options)\n        return DriverSingleton._instance\n\n\"\"\"-----单个py文件单独调用webhis-driver时, 使用以下方法-----\"\"\"\n\"\"\"\noptions = webdriver.ChromeOptions()\noptions.add_experimental_option('excludeSwitches', ['enable-logging'])\noptions.add_experimental_option(\"excludeSwitches\", [\"enable-automation\"])\noptions.add_experimental_option(\"useAutomationExtension\", 'False')\noptions.add_argument(\"--user-data-dir=\" + str(pathlib.Path.home()) + r\"\\AppData\\Local\\Google\\Chrome\\seleniumTest\")\n\n# 创建 WebDriver 对象, 指明使用chrome浏览器驱动\ndriver = webdriver.Chrome(service=Service(r'C:\\Program Files\\Google\\Chrome\\Application\\chromedriver.exe'), options=options)\n\"\"\"\n```\n\n\n\n在这个类中，_instance是一个类变量，用于存储DriverSingleton的实例。getInstance是一个静态方法，用于获取DriverSingleton的实例。\n\n- 如果_instance为None，则创建一个新的webdriver.Chrome实例并将其存储在_instance中。\n\n(webdriver.Chrome实例使用了一些特定的选项，例如禁用日志记录，禁用自动化，禁用自动化扩展，并设置用户数据目录)\n\n- 如果_instance不为None，则直接返回_instance。这就保证了无论何时调用getInstance方法，都会返回同一个webdriver.Chrome实例。\n\n这种设计模式在需要确保类只有一个实例，并且需要全局访问点的情况下非常有用。在这个情况下，webdriver.Chrome实例在整个应用程序中都使用同一个浏览器实例。\n\n------\n\n## function.py\n\n所需导包：\n\n```python\nimport sys\nsys.path.append('C:\\webhispython\\Webhis-test\\webhis-baoji')\n\nimport inspect\nimport time\nfrom selenium import webdriver\nfrom selenium.webdriver import Keys\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.action_chains import ActionChains\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nfrom selenium.common.exceptions import NoSuchElementException\n```\n\n------\n\n### 登录-函数模块\n\n```python\n\"\"\"---登录 模块---\"\"\"\n# login(driver， 用户名, 密码, 登录地点, 登录科室)\ndef login(driver, username, password, xpath_role, xpath_location):  # login(用户名, 密码, 角色, 登录地点)\n    time.sleep(5)  # 停止5秒，等待浏览器加载页面\n\n    \"\"\"系统登录首页\"\"\"\n    driver.find_element(by=By.ID, value='login_username').send_keys(username)  # 用户名\n    driver.find_element(by=By.ID, value='login_password').send_keys(password)  # 密码\n    driver.find_element(by=By.ID, value='nextBtn').click()\n    driver.implicitly_wait(5)\n\n    \"\"\"登录详细选项页\"\"\"\n    # 角色下拉框选值\n    item = driver.find_element(by=By.ID, value='entryForm_roleMstrId')\n    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()\n    driver.find_element(by=By.XPATH, value=xpath_role).click()  # 选择角色\n    driver.implicitly_wait(5)\n\n    # 科室下拉框选值\n    item = driver.find_element(by=By.ID, value='entryForm_locationMstrId')\n    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()\n    driver.find_element(by=By.XPATH, value=xpath_location).click()  # 选择科室\n    driver.implicitly_wait(5)\n\n    # 点击登录跳转\n    driver.find_element(by=By.ID, value='loginBtn').send_keys(Keys.ENTER)\n    driver.implicitly_wait(5)\n\n    time.sleep(3)\n    if True:\n        function_name = inspect.currentframe().f_code.co_name\n        print(f\"函数 {function_name} 执行完成\")\n```\n\n\n\n------\n\n### 门诊急挂号-函数模块\n\n```python\n\"\"\"---门急诊挂号 模块---\"\"\"\n# registration(driver, 患者门诊病案号, 挂号资源代码)\ndef registration(driver, record_number, registration_resources_code):  # 门急诊挂号\n    time.sleep(3)  # 停止5秒，等待浏览器加载页面\n\n    \"\"\"进入门急诊挂号页面\"\"\"\n    item = driver.find_element(by=By.XPATH, value=\"//*[@class='kt-global-header-common-trigger']\")  # 展开大类菜单\n    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()\n    time.sleep(1)\n\n    driver.find_element(by=By.XPATH, value=\"//*[@id='root']//*[@class='ant-menu-submenu-title']//*[text()='门诊医生站']\")  # 大类菜单\n    time.sleep(1)\n\n    item = driver.find_element(by=By.XPATH, value=\"//*[@id='root']//*[@class='ant-menu-item ant-menu-item-selected']\")  # 子类菜单(门诊医生站)\n    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()\n    time.sleep(1)\n\n    item = driver.find_element(by=By.XPATH, value=\"//*[@class='ant-tabs-nav-list']//*[text()='门诊急挂号']\")  # 进入\"门急诊挂号\"页面\n    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()\n    time.sleep(1)\n\n    item = driver.find_element(by=By.XPATH, value=\"//*[@class='kt-global-header-common-trigger']\")  # 缩回大类菜单\n    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()\n    time.sleep(1)\n\n    # 显式等待, 至\"门急诊挂号\"ID加载后再执行\n    wait = WebDriverWait(driver, 10)\n    wait.until(EC.presence_of_element_located((By.ID, 'rc-tabs-0-tab-5603808')))\n\n    \"\"\"WPB选择患者\"\"\"\n    time.sleep(2)\n    item = driver.find_element(by=By.XPATH, value=\"//input[contains(@placeholder,'请输入姓名/手机号/病案号')]\")\n    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()\n    # 输入所需患者门诊病案号, 唯一身份对应信息\n    driver.find_element(by=By.XPATH, value=\"//input[contains(@placeholder,'请输入姓名/手机号/病案号')]\").send_keys(record_number)\n    driver.implicitly_wait(10)  # 待WPB搜索框加载并检索出send的患者数据\n    time.sleep(2)\n\n    # 定位第一条患者并点击选中\n    item = driver.find_element(by=By.XPATH, value=\"//*[@class='ant-table ant-table-layout-fixed ant-table-fixed-header']//*[@class='ant-table-tbody']/tr[2]\")\n    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()\n    time.sleep(2)\n\n    \"\"\"选择挂号资源\"\"\"\n    time.sleep(2)\n    item = driver.find_element(by=By.XPATH, value=\"//*[@id='rc-tabs-0-panel-5603808']/div/div/div/div/div/div/div[1]/form/div/div[95]/div/div/div/span/div/div/div[2]/input\")\n    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()\n    # 输入所需挂号资源代码, 唯一代码对应信息\n    driver.find_element(by=By.XPATH, value=\"//*[@id='rc-tabs-0-panel-5603808']/div/div/div/div/div/div/div[1]/form/div/div[95]/div/div/div/span/div/div/div[2]/input\").send_keys(registration_resources_code)\n    driver.implicitly_wait(5)  # 待资源列表加载并检索出send的资源数据\n    time.sleep(3)\n    # 定位第一条资源并点击选中\n    driver.find_element(by=By.XPATH, value=\"//tr[@data-row-key='0' and contains(@class, 'ant-table-row-selected')]\").click()\n    driver.implicitly_wait(5)\n\n    \"\"\"账户支付\"\"\"\n    time.sleep(2)\n    item = driver.find_element(by=By.XPATH, value=\"//*[@class='regnRegistration_btnGroup_aOve9']//*[contains(text(),'账户支付')]\")\n    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()\n    driver.implicitly_wait(10)\n\n    try:\n        driver.find_element(By.XPATH, \"//*[text()='挂号成功！']\")\n        driver.implicitly_wait(20)\n        print(\"--- ATTENTION: 患者挂号成功! ---\")\n    except NoSuchElementException:\n        print(\"--- ATTENTION: 函数正常运行 但未完成挂号, 注意网络延迟并重试! ---\")\n\n    time.sleep(3)\n    if True:\n        function_name = inspect.currentframe().f_code.co_name\n        print(f\"函数 {function_name} 执行完成\")\n```\n\n\n\n------\n\n### 门诊医嘱录入-函数模块\n\n```python\n\"\"\"---门诊医嘱录入 模块---\"\"\"\n# outpatient_orders(drivr， 已有挂号患者， pickshell药品， 数量， 剂量， 用法， 频次, 周期)\ndef outpatient_orders(driver, patient_msg, order_insert, quantity, dosage, usage, frequency, cycle):\n    time.sleep(5)  # 停止5秒，等待浏览器加载页面\n\n    item = driver.find_element(by=By.XPATH, value=\"//*[@class='kt-global-header-common-trigger']\")  # 展开大类菜单\n    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()\n    time.sleep(1)\n\n    driver.find_element(by=By.XPATH, value=\"//*[@id='root']//*[@class='ant-menu-submenu-title']//*[text()='门诊医生站']\")  # 大类菜单\n    time.sleep(1)\n\n    item = driver.find_element(by=By.XPATH, value=\"//*[@id='root']//*[@class='ant-menu-item ant-menu-item-selected']\")  # 子类菜单(门诊医生站)\n    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()\n    time.sleep(1)\n\n    item = driver.find_element(by=By.XPATH, value=\"//*[@class='ant-tabs-nav-list']//*[text()='医生看诊']\")  # 进入\"医生看诊\"页面\n    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()\n    time.sleep(1)\n\n    item = driver.find_element(by=By.XPATH, value=\"//*[@class='kt-global-header-common-trigger']\")  # 缩回大类菜单\n    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()\n    time.sleep(1)\n\n    item = driver.find_element(by=By.XPATH, value=\"//button[@class='ant-btn ant-btn-link ant-btn-icon-only']\")  # 患者列表刷新\n    webdriver.ActionChains(driver).move_to_element(item).click().perform()\n    driver.implicitly_wait(5)\n    driver.find_element(by=By.XPATH, value=patient_msg).click()  # 选中患者列表对应挂号患者\n    time.sleep(5)\n\n    # 显式等待, 医嘱pickshell加载\n    wait = WebDriverWait(driver, 10)\n    wait.until(EC.presence_of_element_located((By.XPATH,  \"//*[@class='kt-datapicker kt-datapicker-singleRow']//*[@placeholder='请输入']\")))\n\n    # 定位并点击医嘱pickshell -> 传参, 输入医嘱名称\n    item = driver.find_element(by=By.XPATH, value=\"//*[@class='kt-datapicker kt-datapicker-singleRow']//*[@placeholder='请输入']\")\n    webdriver.ActionChains(driver).move_to_element(item).click().send_keys(order_insert).perform()\n    time.sleep(2)\n\n    # 选中列表第一条并点击\n    driver.find_element(By.XPATH, '//tr[@data-row-key=\"0\" and contains(@class, \"ant-table-row ant-table-row-level-0 kt-table-row-oddeven kt-row-selected-order-picker\")]').click()\n    time.sleep(2)\n\n    \"\"\"患者当前医嘱列表重复开立弹窗判断\"\"\"\n    try:\n        wait = WebDriverWait(driver, 3)\n        wait.until(EC.presence_of_element_located((By.XPATH, \"//*[text()='已经开立，是否继续？']\")))\n\n        confirm_button = driver.find_element(by=By.XPATH, value=\"//*[text()='确定']\")\n        confirm_button.click()\n    except:\n        print(\"---该医嘱可为此患者开立---\")\n        pass\n\n    \"\"\"----------数量----------\"\"\"\n    item = driver.find_element(by=By.ID, value=\"orderQtyId1\")\n    webdriver.ActionChains(driver).move_to_element(item).send_keys(quantity).perform()\n    driver.implicitly_wait(5)\n    time.sleep(1)\n\n    \"\"\"----------剂量----------\"\"\"\n    # '剂量'框存在未知异常，无法定位元素\n    # 又因前端约束 医嘱落入列表后光标自动定位到'数量'框，故使用ActionChains方法模拟TAB操作跳到'用法'框\n    actions = ActionChains(driver)\n    actions.send_keys(Keys.TAB, Keys.TAB).perform()\n    actions.send_keys(dosage).perform()\n    driver.implicitly_wait(5)\n    time.sleep(3)\n\n    \"\"\"----------用法----------\"\"\"\n    # //*[@class='kt-editable-cell tabIndex4']//input\n    item = driver.find_element(by=By.XPATH, value=\"//*[@class='kt-editable-cell tabIndex4']\")\n    webdriver.ActionChains(driver).move_to_element(item).click().perform()\n    time.sleep(3)\n\n    # 采用上述处理'剂量'框异常的方法后，又有未知原因 click定位到'用法'框后，光标会重新回到'剂量'框\n    # 故使用两次click定位'用法'框方法，来避免光标异常定位问题，经测试此方法有效\n    item = driver.find_element(by=By.XPATH, value=\"//*[@class='kt-editable-cell tabIndex4']\")\n    webdriver.ActionChains(driver).move_to_element(item).click().perform()\n    time.sleep(1)\n\n    item = driver.find_element(by=By.XPATH, value=\"//*[@class='kt-editable-cell tabIndex4']\")\n    webdriver.ActionChains(driver).move_to_element(item).send_keys(usage).perform()\n    time.sleep(1)\n    webdriver.ActionChains(driver).move_to_element(item).send_keys(Keys.ENTER).perform()\n\n    # 未知原因 用法框send_key后仍会再弹出下拉框，故设计为传参后立刻点击一处不可编辑区别，强制退出该输入框\n    time.sleep(1)\n    driver.find_element(by=By.XPATH, value=\"//*[@class='kt-global-header-common-logo-icon']\").click()\n    driver.implicitly_wait(5)\n    time.sleep(3)\n\n    \"\"\"----------频次----------\"\"\"\n    item = driver.find_element(by=By.XPATH, value=\"//*[@class='kt-editable-cell tabIndex5']\")\n    webdriver.ActionChains(driver).move_to_element(item).click().perform()\n    driver.implicitly_wait(5)\n\n    item = driver.find_element(by=By.XPATH, value=\"//*[@class='kt-editable-cell tabIndex5']\")\n    webdriver.ActionChains(driver).move_to_element(item).send_keys(frequency).perform()\n    time.sleep(1)\n    webdriver.ActionChains(driver).move_to_element(item).send_keys(Keys.ENTER).perform()\n\n    # 未知原因 频次框send_key后仍会再弹出下拉框，故设计为传参后立刻点击一处不可编辑区别，强制退出该输入框\n    time.sleep(1)\n    driver.find_element(by=By.XPATH, value=\"//*[@class='kt-global-header-common-logo-icon']\").click()\n    driver.implicitly_wait(5)\n    time.sleep(3)\n\n    \"\"\"----------周期----------\"\"\"\n    item = driver.find_element(by=By.XPATH, value=\"//*[@class='kt-editable-cell tabIndex6']\")\n    webdriver.ActionChains(driver).move_to_element(item).click().perform()\n    time.sleep(1)\n\n    item = driver.find_element(by=By.XPATH, value=\"//*[@class='kt-editable-cell tabIndex6']\")\n    for _ in range(4):\n        webdriver.ActionChains(driver).move_to_element(item).send_keys(Keys.BACKSPACE).perform()\n    time.sleep(1)\n\n    item = driver.find_element(by=By.XPATH, value=\"//*[@class='kt-editable-cell tabIndex6']\")\n    webdriver.ActionChains(driver).move_to_element(item).send_keys(cycle).perform()\n    time.sleep(3)\n\n    \"\"\"医嘱保存\"\"\"\n    driver.find_element(by=By.XPATH, value=\"//*[@class='diagnosisAnYang_secondLineItem_RITqA diagnosisAnYang_iconCursor_Jv_RO']//*[text()='保存']\").click()\n\n    \"\"\"患者医嘱重复预警弹窗判断\"\"\"\n    try:\n        wait = WebDriverWait(driver, 3)\n        wait.until(EC.presence_of_element_located((By.XPATH, \"//*[@class='ant-modal']//*[text()='医嘱重复报警']\")))\n\n        confirm_button = driver.find_element(by=By.XPATH, value=\"//*[text()='强制保存']\")\n        webdriver.ActionChains(driver).move_to_element(confirm_button).click().perform()\n    except:\n        print(\"---该医嘱可为此患者开立---\")\n        pass\n    \n    time.sleep(1)\n\n    \"\"\"医嘱保存成功弹窗校验\"\"\"\n    try:\n        item = driver.find_element(By.XPATH, \"//*[text()='医嘱保存成功']\")\n        webdriver.ActionChains(driver).move_to_element(item).perform()\n        driver.implicitly_wait(5)\n        print(\"--- ATTENTION: 医嘱保存成功! ---\")\n    except NoSuchElementException:\n        print(\"--- ATTENTION: 函数正常运行 但未成功保存医嘱，注意网络延迟并重试! ---\")\n\n    time.sleep(3)\n    if True:\n        function_name = inspect.currentframe().f_code.co_name\n        print(f\"函数 {function_name} 执行完成\")\n```\n\n\n\n------\n\n### WPB选择患者-函数模块\n\n```python\n\"\"\"---WPB选择患者 模块---\"\"\"\n# wpb_select(driver, 患者门诊病案号)\ndef wpb_select(driver, record_number):\n    time.sleep(2)\n\n    item = driver.find_element(by=By.XPATH, value=\"//input[contains(@placeholder,'请输入姓名/手机号/病案号')]\")\n    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()\n    # 输入所需患者门诊病案号, 唯一身份对应信息\n    driver.find_element(by=By.XPATH, value=\"//input[contains(@placeholder,'请输入姓名/手机号/病案号')]\").send_keys(record_number)\n    driver.implicitly_wait(10)  # 待WPB搜索框加载并检索出send的患者数据\n    time.sleep(2)\n\n    # 定位第一条患者并点击选中\n    item = driver.find_element(by=By.XPATH, value=\"//*[@class='ant-table ant-table-layout-fixed ant-table-fixed-header']//*[@class='ant-table-tbody']/tr[2]\")\n    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()\n    driver.implicitly_wait(5)\n    time.sleep(2)\n\n    time.sleep(3)\n    if True:\n        function_name = inspect.currentframe().f_code.co_name\n        print(f\"函数 {function_name} 执行完成\")\n```\n\n\n\n------\n\n# Webhis-门诊急挂号-流程测试脚本\n\n{% asset_img Outpatient_registration.png  %}\n\n## registration.py\n\n### 所需导包\n\n```python\nimport time\nimport sys\nsys.path.append('C:\\webhispython\\Webhis-test\\webhis-baoji')\n\nfrom tool.driver import DriverSingleton  # 从tool目录driver.py下，调用公用driver驱动\nfrom tool.function import login, registration  # 从tool目录function.py下，调用login()和registration()函数\n```\n\n### 主函数\n\n```python\ndriver = DriverSingleton.getInstance()  # 从driver.py下调用DriverSingleton.getInstance()方法以打开同一个driver实例\ndriver.get(url=\"http://10.227.16.12/login\")\ndriver.maximize_window()\n# time.sleep(5)  # 停止5秒，等待浏览器加载页面\n\n\nif __name__ == \"__main__\":\n    login(driver, 'RZX', '1', \"//*[text()='门急诊医生']\", \"//*[text()='神经内科二科门诊']\")  # 用户名, 密码, 登录地点, 登录科室\n    registration(driver, '0000000034', 'ZZHRZX')  # '测试01'门诊病案号'0000000034', '专家号-RZX'挂号资源代码'ZZHRZX'\n    time.sleep(3)\n    print(\"Success!\")\n    driver.quit()\n\n```\n\n1. 调用 driver.py 中 DriverSingleton 方法下的浏览器驱动 ，作为 driver 被脚本调用\n2. 主函数走 function.py 中的 login() 函数进行登录\n3. 再走 function.py 中的 registration() 函数进行门诊挂号\n\n登录函数 login() 传参： 用户名username， 密码password，登录角色xpath_role，登录地点xpath_location\n\n挂号函数 registration() 传参： 门诊患者病案号record_number， 挂号资源代码registration_resources_code\n\n------\n\n# Webhis-门诊单个医嘱录入-流程测试脚本\n\n{% asset_img Outpatient_doctor_station.png  %}\n\n## orders_entry.py\n\n### 所需导包\n\n```python\nimport sys\nsys.path.append('C:\\webhispython\\Webhis-test\\webhis-baoji')\nimport time\n\nfrom tool.driver import DriverSingleton  # 从tool目录driver.py下，调用公用driver驱动\nfrom tool.function import login, outpatient_orders  # 从tool目录function.py下，调用login()和outpatient_orders()函数\n```\n\n### 主函数\n\n```python\ndriver = DriverSingleton.getInstance()  # 从driver.py下调用DriverSingleton.getInstance()方法以打开同一个driver实例\ndriver.get(url=\"http://10.227.16.12/login\")\ndriver.maximize_window()\ntime.sleep(5)  # 停止5秒，等待浏览器加载页面\n\n\nif __name__ == \"__main__\":\n    # driver， 用户名, 密码, 登录地点, 登录科室\n    login(driver, 'RZX', '1', \"//*[text()='门急诊医生']\", \"//*[text()='神经内科二科门诊']\")\n\n    # drivr， 已有挂号患者， pickshell药品， 数量， 剂量， 用法， 频次， 周期\n    outpatient_orders(driver, \"//*[text()='测试01 13:54 知名专家号']\", \"布洛芬缓释胶囊\", \"2\", \"10\", \"口服\", \"qd8\", \"3\")\n\n    time.sleep(3)\n    print(\"Success!\")\n    driver.quit()\n```\n\n1. 调用 driver.py 中 DriverSingleton 方法下的浏览器驱动 ，作为 driver 被脚本调用\n2. 主函数走 function.py 中的 login() 函数进行登录\n3. 再走 function.py 中的 outpatient_orders() 函数进行医嘱录入\n\n登录函数 login() 传参：driver，用户名username，密码password，登录角色xpath_role，登录地点xpath_location\n\n医嘱录入函数 outpatient_orders() 传参：driver，已有挂号患者patient_msg，pickshell药品order_insert，数量quantity，剂量dosage，用法，频次frequency，周期cycle\n\n------\n\n# Webhis-门诊自定义多医嘱录入-流程测试脚本详解\n\n## 前情摘要\n\n​\t\t该脚本利用登录、挂号、医嘱等函数，selenium、ActionChains、webdriver等将前面所展示的内容做了一个整合，以实现从编译器终端录入多种医嘱的效果，代码量将近四百行，多以调用函数的方式运行，总耗时大概三周的闲暇时间搞定。\n\n​\t\t由于 宝鸡项目Web端 门诊医生站开立医嘱 会存在很多特殊情况，不同的医嘱类型、不同的维护、不同的页面参数，系统参数都会导致Web前端页面的效果不同，会出现不同的弹窗等，针对多种情况去做脚本的判断部分没有意义，故此脚本为UI自动化测试脚本的终章。\n\n​\t\t以下详解部分，也将更详细的切分脚本的代码，附上更多的效果图，以便更好的理解其实现的流程及原理。\n\n------\n\n## 所需导包\n\n```python\nimport sys\nsys.path.append('C:\\webhispython\\Webhis-test\\webhis-baoji')\n\nimport pathlib\nimport inspect\nimport time\nfrom selenium import webdriver\nfrom selenium.webdriver import Keys\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.action_chains import ActionChains\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nfrom selenium.common.exceptions import NoSuchElementException\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.service import Service\n```\n\n------\n\n## driver的调用及设置\n\n- 对新调用的 Google 浏览器的启动参数进行设置：\n\n```python\noptions = webdriver.ChromeOptions()\n```\n\n------\n\n使用Cursor的编译器执行脚本，脚本运行过程中，终端会时不时弹出一些ERROR信息，很影响脚本中的print打印内容显示。\n\n例如：[ERROR:ssl_client_socket_impl.cc(968)] handshake failed; returned -1, SSL error code 1, net_error -101\n\n这个错误信息是由于 SSL 握手失败导致的，宝鸡Webhis系统由本地启动，通过VPN访问远程服务器，SSL证书问题等并不需要着重考虑。\n\n故使用以下两项设置，以强制关闭诸如此类的警告打印：\n\n- 设置 Chrome 的日志级别，3表示只记录ERROR级别的日志：\n\n```python\noptions.add_argument('--log-level=3')\n```\n\n- 禁用了 Chrome 的日志记录功能。这可以使得 Chrome 在运行时更加安静，不会输出不必要的日志信息：\n\n```python\noptions.add_experimental_option('excludeSwitches', ['enable-logging'])\n```\n\n------\n\n- 该设置禁用了 Chrome 的自动化控制提示。在使用 Selenium 控制 Chrome 时，浏览器顶部的 \"Chrome正在受到自动软件的控制\" 这个提示将不会出现：\n\n```python\noptions.add_experimental_option(\"excludeSwitches\", [\"enable-automation\"])\n```\n\n------\n\n- 该设置禁用了 Chrome 的自动化扩展。这可以防止 Chrome 在启动时加载不必要的扩展，从而提高启动速度：\n\n```python\noptions.add_experimental_option(\"useAutomationExtension\", 'False')\n```\n\n------\n\n- 这个设置约束了 Chrome 的本地数据目录。这意味着 Chrome 将会在这个目录下存储用户的个人信息，如浏览历史、书签等。这个选项可以在多次运行 Selenium 时保持相同的浏览环境：\n\n```python\noptions.add_argument(\"--user-data-dir=\" + str(pathlib.Path.home()) + r\"\\AppData\\Local\\Google\\Chrome\\seleniumTest\")\n```\n\n------\n\n- 创建 WebDriver 对象, 指明使用chrome浏览器驱动，并进行以上options的设置：\n\n```python\ndriver = webdriver.Chrome(service=Service(r'C:\\Program Files\\Google\\Chrome\\Application\\chromedriver.exe'), options=options)\n```\n\n------\n\n- 调项目环境URL，启动浏览器自动化脚本控制：\n\n```python\ndriver.get(url=\"http://10.227.16.12/login\")\ndriver.maximize_window()\ntime.sleep(3)  # 强制停止5秒，等待浏览器加载页面\n```\n\n------\n\n## 登录-函数模块\n\n项目系统登录页面有主页面和子页面之分，主页面输入登录账户密码，子页面选择登录人的角色及登录地点。\n\n登录函数：\n\n```python\ndef login(driver, username, password, xpath_role, xpath_location):  # login(用户名, 密码, 角色, 登录地点)\n```\n\n登录主页面：\n\n```python\nprint(\"脚本已进入 [登录菜单] \")\n\"\"\"系统登录首页\"\"\"\ndriver.find_element(by=By.ID, value='login_username').send_keys(username)  # 用户名\ndriver.find_element(by=By.ID, value='login_password').send_keys(password)  # 密码\ndriver.find_element(by=By.ID, value='nextBtn').click()\ndriver.implicitly_wait(5)\n```\n\n{% asset_img 登录主页面.png  %}\n\n登录子页面：\n\n```python\n\"\"\"登录详细选项页\"\"\"\nprint(\"脚本已进入 [登录子菜单] \")\n# 角色下拉框选值\nitem = driver.find_element(by=By.ID, value='entryForm_roleMstrId')\nwebdriver.ActionChains(driver).move_to_element(item).click(item).perform()\ndriver.find_element(by=By.XPATH, value=xpath_role).click()  # 选择角色\ndriver.implicitly_wait(5)\n\n# 科室下拉框选值\nitem = driver.find_element(by=By.ID, value='entryForm_locationMstrId')\nwebdriver.ActionChains(driver).move_to_element(item).click(item).perform()\ndriver.find_element(by=By.XPATH, value=xpath_location).click()  # 选择科室\ndriver.implicitly_wait(5)\n\n# 点击登录跳转\ndriver.find_element(by=By.ID, value='loginBtn').send_keys(Keys.ENTER)\ndriver.implicitly_wait(5)\n\n```\n\n{% asset_img 登录子页面.png  %}\n\n------\n\n## 门诊多医嘱录入-函数模块 [重]\n\n### 整体结构概述\n\n医嘱录入的过程本身就是顺序执行到底的，所以这部分脚本代码也保持顺序执行的逻辑。本意就是想要设计一个能够自主任意的录入多次多种医嘱的脚本，所以设计了 函数嵌套的方式，以实现循环执行录入医嘱的函数，通过终端输入的方式，自主决定录入不同数量的医嘱、不同种类的医嘱。\n\n当然，编译器终端输入以实现可控制性的方法固然是最原始最笨的办法，因为在脚本执行的过程中，driver调用的浏览器窗口设定为最大化maxmize_window；而每次自定义选择医嘱时，又需要切出浏览器，在终端存值，会很影响感官。\n\n- 我能设想到的最理想的是，用前端方法设计一个大小合适且可拖动调整的小窗，同步编译器终端的功能，可通过小窗输入输出终端内容，并将该窗口置于可视桌面最前端，这样既能看到浏览器自动化运行的过程，又能快捷终端输入输出，也不会很影响视觉。这想法只能说以我当前能力是无法实现的了，以后如果有机会，可以拓展到其他工作项目的自动化脚本里去。\n\n多医嘱录入函数的框架大致如下：\n\n```python\ndef outpatient_orders(driver, patient_msg):\n    ...  # 脚本进入医生看诊页面的代码执行\n    def orders_entry_main():\n        def loop_entry(entry):\n            match entry:\n                case '1': pickshell医嘱\n                case '2': 检验类医嘱\n                case '3': 检查类医嘱\n                case _: 提示输入错误\n        while True:\n            entry = input()\n            loop_entry(entry)\n            if entry == '0':\n                break\n    orders_entry_main()\noutpatient_orders(driver, patient_msg)\n```\n\n函数嵌套方法：\n\n- loop_entry()函数传参entry，通过match...case方法，读取entry的值，进而进行不同的case操作，以实现参数控制代码执行范围，自定义选择开立的医嘱类型\n- orders_entry_main()函数通过while True无限循环调用loop_entry()函数，entry通过终端键盘input输入的方法传参给loop_entry()，输入字符'0'时跳出循环\n- outpatient_orders()函数传参patient_msg，脚本进入到医生看诊页面后，选中对应挂号患者patient_msg，以为指定患者开立医嘱执行嵌套内的函数\n\n------\n\n### 脚本进入医生看诊页面\n\n{% asset_img 医生看诊页面.png  %}\n\n① 展开大类主菜单，并进入门诊医生站对应的大类菜单：\n\n```python\nitem = driver.find_element(by=By.XPATH, value=\"//*[@class='kt-global-header-common-trigger']\")  # 展开大类菜单\nwebdriver.ActionChains(driver).move_to_element(item).click(item).perform()\ntime.sleep(1)\n\ndriver.find_element(by=By.XPATH, value=\"//*[@id='root']//*[@class='ant-menu-submenu-title']//*[text()='门诊医生站']\")  # 大类菜单\ntime.sleep(1)\n```\n\n② 进入子类菜单，并进入医生看诊页面：\n\n```python\nitem = driver.find_element(by=By.XPATH, value=\"//*[@id='root']//*[@class='ant-menu-item ant-menu-item-selected']\")  # 子类菜单(门诊医生站)\nwebdriver.ActionChains(driver).move_to_element(item).click(item).perform()\ntime.sleep(1)\n\nitem = driver.find_element(by=By.XPATH, value=\"//*[@class='ant-tabs-nav-list']//*[text()='医生看诊']\")  # 进入\"医生看诊\"页面\nwebdriver.ActionChains(driver).move_to_element(item).click(item).perform()\nprint(\"脚本已切换到 [门诊医生站] 页面\")\ntime.sleep(1)\n```\n\n③ 选中患者，进入门诊医生站待录入医嘱：\n\n```python\nitem = driver.find_element(by=By.XPATH, value=\"//button[@class='ant-btn ant-btn-link ant-btn-icon-only']\")  # 患者列表刷新\nwebdriver.ActionChains(driver).move_to_element(item).click().perform()\ndriver.implicitly_wait(5)\ndriver.find_element(by=By.XPATH, value=patient_msg).click()  # 选中患者列表对应挂号患者\nprint(\"已选中 门诊挂号患者[ %s ]\" % patient_msg)\ntime.sleep(5)  # 强制等待页面加载, 待患者信息、门诊医生站功能加载\n```\n\n------\n\n### pickshell医嘱录入功能的实现\n\n{% asset_img pickshell输入医嘱.png  %}\n\n如上图，以 medicine传参医嘱完整全称 定位到pickshell输入框。部分医嘱例如葡萄糖注射液，列表会显示名称带有“葡萄糖注射液”的所有医嘱，会出现不同浓度、不同规格、不同厂商等多种葡萄糖注射液医嘱，此处并不做特殊情况的考虑，均定位到列表内第一条医嘱并点击。\n\n```python\nmedicine = input(\"请输入所要开立的pickshell药品完整名称: \")\n\nitem = driver.find_element(by=By.XPATH, value=\"//*[@class='kt-datapicker kt-datapicker-singleRow']//*[@placeholder='请输入']\")\nwebdriver.ActionChains(driver).move_to_element(item).click().send_keys(medicine).perform()\ntime.sleep(3)  # 强制等待给检索医嘱列表的加载时间\n\n# 定位并选择目录列表第一条医嘱\ndriver.find_element(By.XPATH, '//tr[@data-row-key=\"0\" and contains(@class, \"ant-table-row ant-table-row-level-0 kt-table-row-oddeven kt-row-selected-order-picker\")]').click()\ntime.sleep(2)\n```\n\n------\n\n{% asset_img 医嘱重复弹窗.png  %}\n\n如上图，医嘱落入医生站时有多个校验，医嘱重复校验弹窗就是其一。当该患者的医嘱列表存在相同医嘱，会出现并需要判断点击。故在脚本代码中使用try...except...方法同步进行校验。\n\n```python\n\"\"\"患者当前医嘱列表重复开立弹窗判断\"\"\"\ntry:\n\twait = WebDriverWait(driver, 10)\n\twait.until(EC.presence_of_element_located((By.XPATH, \"//*[text()='已经开立，是否继续？']\")))\n\n\tconfirm_button = driver.find_element(by=By.XPATH, value=\"//*[text()='确定']\")\n\tconfirm_button.click()\nexcept:\n\tpass\n```\n\n------\n\n{% asset_img 医嘱详细信息录入.png  %}\n\n医嘱落入医生站后，则需要对其医嘱的信息进行手动的填写了，过程都是类似的，但是这部分内容一直存在历史bug，前端开发在此处放置的下拉框会出现异常跳转、光标回弹的问题。**撰写此处脚本的时候，着实是见识到了水货开发的实力**。。。当然脚本代码也用了最原始最简单的方法避免这些bug：time.sleep()设定强制等待、点击其他空白可定位位置以防止原本sendkeys的值消失、在前端光标自动回弹后再重复定位下一个元素重新存值。\n\n上述所说的前端bug问题具体为：光标定位到“剂量”框并存值后，切到下一个“用法”框时，光标会自动跳转回“剂量”框去；有时脚本在执行过程中，已向“用法”框存值后，切到其他输入框时，原存值会莫名消失等（此问题非必现，大多运行时正常，故脚本内并未做相关问题的解决方案；如果执行过程中复现此问题，只能重新录入或快速手动输入了）。。。\n\n- “数量”输入框\n\n```python\n\"\"\"----------数量----------\"\"\"\nitem = driver.find_element(by=By.XPATH, value=\"//*[@id='orderQtyId1']\")\nwebdriver.ActionChains(driver).move_to_element(item).send_keys(\"3\").perform()  # '数量'固定存值'3'\ndriver.implicitly_wait(3)\ntime.sleep(1)\n```\n\n- “剂量”输入框\n\n```python\n\"\"\"----------剂量----------\"\"\"\n# '剂量'框存在未知异常，无法定位元素\n# 又因前端约束 医嘱落入列表后光标自动定位到'数量'框，故使用ActionChains方法模拟TAB操作跳到'用法'框\nactions = ActionChains(driver)\nactions.send_keys(Keys.TAB, Keys.TAB).perform()\nactions.send_keys(\"1\").perform()\ndriver.implicitly_wait(5)\ntime.sleep(3)\n```\n\n- “用法”输入框\n\n```python\n\"\"\"----------用法----------\"\"\"\nitem = driver.find_element(by=By.XPATH, value=\"//*[@class='kt-editable-cell tabIndex4']\")\nwebdriver.ActionChains(driver).move_to_element(item).click().perform()\ntime.sleep(3)\n\n# 采用上述处理'剂量'框异常的方法后，又有未知原因 click定位到'用法'框后，光标会重新回到'剂量'框(前端代码问题)\n# 故使用两次click定位'用法'框方法，来避免光标异常定位问题，经测试此方法有效\nitem = driver.find_element(by=By.XPATH, value=\"//*[@class='kt-editable-cell tabIndex4']\")\nwebdriver.ActionChains(driver).move_to_element(item).click().perform()\ntime.sleep(1)\n\nitem = driver.find_element(by=By.XPATH, value=\"//*[@class='kt-editable-cell tabIndex4']\")\nwebdriver.ActionChains(driver).move_to_element(item).send_keys(\"口服\").perform()\ntime.sleep(1)\nwebdriver.ActionChains(driver).move_to_element(item).send_keys(Keys.ENTER).perform()\n\n# 未知原因 用法框send_key后仍会再弹出下拉框，故设计为传参后立刻点击一处不可编辑区别，强制退出该输入框\ntime.sleep(1)\ndriver.find_element(by=By.XPATH, value=\"//*[@class='kt-global-header-common-logo-icon']\").click()\ndriver.implicitly_wait(5)\ntime.sleep(3)\n```\n\n- “频次”输入框\n\n```python\n\"\"\"----------频次----------\"\"\"\nitem = driver.find_element(by=By.XPATH, value=\"//*[@class='kt-editable-cell tabIndex5']\")\nwebdriver.ActionChains(driver).move_to_element(item).click().perform()\ndriver.implicitly_wait(5)\n\nitem = driver.find_element(by=By.XPATH, value=\"//*[@class='kt-editable-cell tabIndex5']\")\nwebdriver.ActionChains(driver).move_to_element(item).send_keys(\"qd8\").perform()\ntime.sleep(1)\nwebdriver.ActionChains(driver).move_to_element(item).send_keys(Keys.ENTER).perform()\n\n# 未知原因 频次框send_key后仍会再弹出下拉框，故设计为传参后立刻点击一处不可编辑区别，强制退出该输入框\ntime.sleep(1)\ndriver.find_element(by=By.XPATH, value=\"//*[@class='kt-global-header-common-logo-icon']\").click()\ndriver.implicitly_wait(5)\ntime.sleep(3)\n```\n\n- “周期”输入框\n\n在录入数量、剂量、频次后，系统会自动换算出“周期”所需的值，脚本在此处为测试能否正常传值，所以也采取传入固定值的方式。使用send_keys全选CTRL + A以清除“周期”内原有值的方法未生效，换成for循环连续4次进行BACKSPACE操作代替。\n\n```python\n\"\"\"----------周期----------\"\"\"\nitem = driver.find_element(by=By.XPATH, value=\"//*[@class='kt-editable-cell tabIndex6']\")\nwebdriver.ActionChains(driver).move_to_element(item).click().perform()\ntime.sleep(1)\n\nitem = driver.find_element(by=By.XPATH, value=\"//*[@class='kt-editable-cell tabIndex6']\")\nfor _ in range(4):\nwebdriver.ActionChains(driver).move_to_element(item).send_keys(Keys.BACKSPACE).perform()\ntime.sleep(1)\n\nitem = driver.find_element(by=By.XPATH, value=\"//*[@class='kt-editable-cell tabIndex6']\")\nwebdriver.ActionChains(driver).move_to_element(item).send_keys(\"3\").perform()\ntime.sleep(3)\n```\n\n- 医嘱保存\n\n```python\n\"\"\"医嘱保存\"\"\"\ndriver.find_element(by=By.XPATH, value=\"//*[@class='diagnosisAnYang_secondLineItem_RITqA diagnosisAnYang_iconCursor_Jv_RO']//*[text()='保存']\").click()\n```\n\n------\n\n{% asset_img 医嘱保存重复校验.png  %}\n\n不光在开立医嘱时有医嘱重复校验，在最后保存医嘱列表时也会弹窗类似重复的校验。针对此类弹窗，采取相同方法，try...except...当定位到“强制保存”的文本，则点击此文本对应按钮，以确认关闭该校验弹窗。\n\n```python\n\"\"\"患者医嘱重复预警弹窗判断\"\"\"\ntry:\n    confirm_button = driver.find_element(by=By.XPATH, value=\"//*[@class='ant-modal-body']//button[text()='强制保存']\")\n    webdriver.ActionChains(driver).move_to_element(confirm_button).click().perform()\n    driver.implicitly_wait(3)\n    time.sleep(1)\nexcept:\n\tpass\n```\n\n------\n\n{% asset_img 医嘱保存成功校验.png  %}\n\n上述所有录入医嘱的操作执行完毕后，要对所有医嘱进行保存才可退出，点击保存后需要物理等待程序加载、数据库存值，保存成功会有“医嘱保存成功”弹窗。\n\n针对该弹窗的定位抓取，终端print打印脚本执行结果是我认为有必要的，所以增加了此脚本代码形式的校验。\n\n```python\n\"\"\"医嘱保存成功弹窗校验\"\"\"\ntry:\n    item = driver.find_element(By.XPATH, \"//*[text()='医嘱保存成功']\")\n    webdriver.ActionChains(driver).move_to_element(item).perform()\n    driver.implicitly_wait(5)\n    print(\"--- ATTENTION: 医嘱保存成功! ---\")\nexcept NoSuchElementException:\n    print(\"--- ATTENTION: 函数正常运行 但未成功保存医嘱，注意网络延迟并重试! ---\")\n```\n\n------\n\n**pickshell医嘱开立 部分完整脚本运行截图：**\n\n{% asset_img pickshell运行系统截图.png  %}\n\n{% asset_img pickshell运行终端截图.png  %}\n\n------\n\n### 检验类医嘱录入功能的实现\n\n{% asset_img 检验类医嘱开立方法.png  %}\n\n检验医嘱开立在功能上可以通过详细检验组分类，选择性显示不同类别的检验医嘱，从而勾选所需要的。但是这本就对于需变动脚本不便，自然也不必要使用此方式。索性直接用inspection_id传参项目代码，既具有唯一性，又可以跳过勾选多个复选框之一时麻烦的定位等问题。所以本脚本在执行检验类医嘱的过程只分为：打开页面 -> 输入inspection_id -> 勾选列表第一个复选框 -> 点击确定。就能简洁且顺利的搞定此部分。\n\n- 进入“检验”类医嘱开立弹窗\n\n```python\n\"\"\"按钮开立检验类医嘱\"\"\"\nprint(\"正在进入检验类医嘱开立弹窗...\")\nitem = driver.find_element(by=By.XPATH, value=\"//*[@class='diagnosisAnYang_secondLine_BsP7f']//*[text()='检验']\")\nwebdriver.ActionChains(driver).move_to_element(item).click().perform()\ntime.sleep(3)\n```\n\n- 终端传参inspection_id项目代码\n\n```python\n# 搜索框搜索 项目代码 以唯一性元素 定位所需项目\ninspection_id = input(\"请输入所要开立的检验类医嘱-项目代码: \")\nitem = driver.find_element(by=By.XPATH, value=\"//*[@class='labReqApplicationDialog_container_J2E8u']//input[contains(@placeholder,'请输入项目描述/项目代码')]\")\nwebdriver.ActionChains(driver).move_to_element(item).click().send_keys(inspection_id).send_keys(Keys.ENTER).perform()\ndriver.implicitly_wait(5)\ntime.sleep(2)\n\n```\n\n- 勾选列表下第一个复选框，点击确定按钮并保存医嘱\n\n```python\nitem = driver.find_element(by=By.XPATH, value=\"//*[@class='ant-table-body']//*[@class='ant-table-row ant-table-row-level-0']//input[1]\")\nwebdriver.ActionChains(driver).move_to_element(item).click().perform()\ndriver.implicitly_wait(5)\ntime.sleep(2)\n\nitem = driver.find_element(by=By.XPATH, value=\"//*[@class='kt-dialog-footer kt-portal-footer-container']//button[text()='确定']\")\nwebdriver.ActionChains(driver).move_to_element(item).click().perform()\ndriver.implicitly_wait(5)\ntime.sleep(2)\n\n\"\"\"医嘱保存\"\"\"\ndriver.find_element(by=By.XPATH, value=\"//*[@class='diagnosisAnYang_secondLineItem_RITqA diagnosisAnYang_iconCursor_Jv_RO']//*[text()='保存']\").click()\ntime.sleep(2)\n```\n\n- 医嘱保存成功校验\n\n效果同pickshell的医嘱保存成功校验\n\n```python\n\"\"\"医嘱保存成功弹窗校验\"\"\"\ntry:\nwait = WebDriverWait(driver, 10)\nwait.until(EC.presence_of_element_located((By.XPATH, \"//*[text()='医嘱保存成功']\")))\n\nitem = driver.find_element(By.XPATH, \"//*[text()='医嘱保存成功']\")\nwebdriver.ActionChains(driver).move_to_element(item).perform()\ndriver.implicitly_wait(5)\ntime.sleep(2)\nprint(\"--- ATTENTION: 医嘱保存成功! ---\")\nexcept NoSuchElementException:\nprint(\"--- ATTENTION: 函数正常运行 但未成功保存医嘱，注意网络延迟并重试! ---\")\n```\n\n------\n\n**检验类医嘱开立 部分完整脚本运行截图：**\n\n{% asset_img 检验类医嘱运行系统截图.png  %}\n\n{% asset_img 检验类医嘱运行终端截图.png  %}\n\n------\n\n### 检查类医嘱录入功能的实现\n\n{% asset_img 检查类医嘱开立方法.png  %}\n\n检查医嘱的脚本代码开立方法大体和检验医嘱一致，通过examination_id传参项目代码，勾选对应项目以实现开立。只不过针对检查类医嘱，会有选择检查部位的情况需要考虑，故再增加一个判断校验，当发现所开立的医嘱需要再录入部位，则默认勾选并带入部位列表下第一个值。所以本脚本在执行检查类医嘱的过程分为：打开页面 -> 输入examination_id -> 勾选列表第一个复选框 -> 判断该项目是否需要录入部位（需要则默认勾选第一个部位；不需要则跳过） -> 点击确定。\n\n- 进入“检查”类医嘱开立弹窗\n\n```python\n\"\"\"按钮开立检查类医嘱\"\"\"\nprint(\"正在进入检查类医嘱开立弹窗...\")\nitem = driver.find_element(by=By.XPATH, value=\"//*[@class='diagnosisAnYang_secondLine_BsP7f']//*[text()='检查']\")\nwebdriver.ActionChains(driver).move_to_element(item).click().perform()\ntime.sleep(3)\ndriver.implicitly_wait(10)\n```\n\n- 录入“检查目的”\n\n```python\nitem = driver.find_element(by=By.XPATH, value=\"//*[@class='ant-modal-body']//*[@class='ant-select-selector']\")\nwebdriver.ActionChains(driver).move_to_element(item).click().send_keys(\"协助诊断\").send_keys(Keys.ENTER).perform()\ndriver.implicitly_wait(5)\ntime.sleep(1)\n```\n\n- 终端传参examination_id项目代码 并勾选\n\n```python\n# 搜索框搜索 项目代码 以唯一性元素 定位所需项目\nexamination_id = input(\"请输入所要开立的检查类医嘱-项目代码: \")\nitem = driver.find_element(by=By.XPATH, value=\"//*[@class='ant-input-affix-wrapper']\")\nwebdriver.ActionChains(driver).move_to_element(item).click().send_keys(examination_id).perform()\ntime.sleep(1)\n\nitem = driver.find_element(by=By.XPATH, value=\"//*[@class='ant-table-body']//*[@class='ant-table-row ant-table-row-level-0']//input[1]\")\nwebdriver.ActionChains(driver).move_to_element(item).click().perform()\ndriver.implicitly_wait(4)\ntime.sleep(2)\n```\n\n- 所开立检查项目是否需要录入部位的判断 及部位的录入\n\n```python\n\"\"\"检查医嘱是否存在部位待选择情况判断\"\"\"\ntry:\n    driver.find_element(by=By.XPATH, value=\"//*[@class='ant-input-affix-wrapper']//*[contains(@placeholder,'请输入部位名称')]\")\n\n    print(\"该检查类医嘱有部位维护, 需要选择部位才能开立! \")\n    # 脚本仅勾选第一个部位, 不打算做多种多个部位勾选的细分代码\n    item = driver.find_element(by=By.XPATH, value=\"//*[@class='ant-checkbox-group examReqmultiApplicationDialog_group_SOSLw']//input[1]\")\n    webdriver.ActionChains(driver).move_to_element(item).click().perform()\n    driver.implicitly_wait(3)\n    time.sleep(1)\nexcept:\n    pass\n```\n\n- 点击确定 落入医嘱\n\n```python\nitem = driver.find_element(by=By.XPATH, value=\"//*[@class='kt-dialog-footer kt-portal-footer-container']//button[contains(text(),'确定')]\")\nwebdriver.ActionChains(driver).move_to_element(item).click().perform()\ndriver.implicitly_wait(4)\ntime.sleep(2)\n```\n\n- 医嘱重复开立弹窗校验\n\n```python\n\"\"\"当前患者该医嘱已开立弹窗校验\"\"\"\ntry:\n    wait = WebDriverWait(driver, 10)\n    wait.until(EC.presence_of_element_located((By.XPATH, \"//*[@class='ant-modal-content']//*[contains(text(),'已经开立，是否继续？')]\")))\n\n    confirm_button = driver.find_element(by=By.XPATH, value=\"//*[@class='kt-dialog-confirm-footer']//button[contains(text(),'确定')]\")\n    webdriver.ActionChains(driver).move_to_element(confirm_button).click().perform()\n    print(\"--- ATTENTION: 检查项目成功落入医嘱列表 ---\")\nexcept:\n    pass\n```\n\n- 医嘱保存及保存成功校验\n\n```python\n\"\"\"医嘱保存\"\"\"\ndriver.find_element(by=By.XPATH, value=\"//*[@class='diagnosisAnYang_secondLineItem_RITqA diagnosisAnYang_iconCursor_Jv_RO']//*[text()='保存']\").click()\ntime.sleep(2)\n\n\"\"\"医嘱保存成功弹窗校验\"\"\"\ntry:\n    wait = WebDriverWait(driver, 10)\n    wait.until(EC.presence_of_element_located((By.XPATH, \"//*[text()='医嘱保存成功']\")))\n\n    item = driver.find_element(By.XPATH, \"//*[text()='医嘱保存成功']\")\n    webdriver.ActionChains(driver).move_to_element(item).perform()\n    driver.implicitly_wait(5)\n    time.sleep(2)\n    print(\"--- ATTENTION: 医嘱保存成功! ---\")\nexcept NoSuchElementException:\n    print(\"--- ATTENTION: 函数正常运行 但未成功保存医嘱，注意网络延迟并重试! ---\")\n```\n\n------\n\n**检查类医嘱开立 部分完整脚本运行截图：**\n\n{% asset_img 检查类医嘱运行系统截图.png  %}\n\n{% asset_img 检查类医嘱运行终端截图.png  %}\n\n------\n\n**以上就是基于python 3.10.10 和 selenium 4 版本，结合康博嘉宝鸡项目Webhis门诊医生站系统制作的 UI自动化测试脚本。此项目属于是我的第一份工作的第一个项目，功能性还是比较简单和单一的，四百行的代码量也并不多，代码内容结构也都是比较单一固定的，只能说这个项目于我巩固selenium的使用，恢复对python的学习起到了很大的帮助吧，还望以后的职业生涯再接再厉咯，这个md应该就写至此为止了！**\n","slug":"Python-Selenium脚本","published":1,"updated":"2024-09-26T11:29:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm1rz0oex000918qlb6i2btt5","content":"<p><strong>python + selenium UI自动化测试脚本原创</strong></p>\n<span id=\"more\"></span>\n\n<h1 id=\"Driver的封装\"><a href=\"#Driver的封装\" class=\"headerlink\" title=\"Driver的封装\"></a>Driver的封装</h1><p>针对Webhis-baoji的UI自动化脚本，由于其本地URL是始终固定不变的，所需调用的driver也是不变的，故欲打算采用“单例设计模式”。</p>\n<h2 id=\"单例设计模式\"><a href=\"#单例设计模式\" class=\"headerlink\" title=\"单例设计模式\"></a>单例设计模式</h2><p>单例（Singleton）模式的定义：指一个类只有一个实例，且该类能自行创建这个实例的一种模式。例如，Windows 中只能打开一个任务管理器，这样可以避免因打开多个任务管理器窗口而造成内存资源的浪费，或出现各个窗口显示内容的不一致等错误。</p>\n<p>在计算机系统中，还有 Windows 的回收站、操作系统中的文件系统、多线程中的线程池、显卡的驱动程序对象、打印机的后台处理服务、应用程序的日志对象、数据库的连接池、网站的计数器、Web 应用的配置对象、应用程序中的对话框、系统中的缓存等常常被设计成单例。</p>\n<p>单例模式是设计模式中最简单的模式之一。通常，普通类的构造函数是公有的，外部类可以通过“new 构造函数()”来生成多个实例。但是，如果将类的构造函数设为私有的，外部类就无法调用该构造函数，也就无法生成多个实例。这时该类自身必须定义一个静态私有实例，并向外提供一个静态的公有函数用于创建或获取该静态私有实例。</p>\n<p>单例模式有 3 个特点：</p>\n<ul>\n<li>单例类只有一个实例对象</li>\n<li>该单例对象必须由单例类自行创建</li>\n<li>单例类对外提供一个访问该单例的全局访问点</li>\n</ul>\n<hr>\n<h2 id=\"UI-WEBHIS目录结构\"><a href=\"#UI-WEBHIS目录结构\" class=\"headerlink\" title=\"UI-WEBHIS目录结构\"></a>UI-WEBHIS目录结构</h2><p>本章主在展示driver类的封装，仅以挂号功能作为展示及验证。</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webhis-baoji(主目录)/</span><br><span class=\"line\">│</span><br><span class=\"line\">├── tool(工具子目录)/</span><br><span class=\"line\">│   └── driver.py(driver的封装)</span><br><span class=\"line\">│   └── function.py(函数的调用)</span><br><span class=\"line\">│</span><br><span class=\"line\">└── script(脚本子目录-功能)/\t# 以下为当前已实现功能脚本代码</span><br><span class=\"line\"><span class=\"code\">    └── login.py(登录-功能)</span></span><br><span class=\"line\"><span class=\"code\">    └── registered.py(门诊急挂号-功能)</span></span><br><span class=\"line\"><span class=\"code\">    └── orders_entry.py(门诊医嘱录入-功能)</span></span><br><span class=\"line\"><span class=\"code\">    └── &gt;&gt;&gt;...&lt;&lt;&lt;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"driver-py\"><a href=\"#driver-py\" class=\"headerlink\" title=\"driver.py\"></a>driver.py</h2><p>所需导包：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.chrome.service <span class=\"keyword\">import</span> Service</span><br><span class=\"line\"><span class=\"keyword\">import</span> pathlib</span><br></pre></td></tr></table></figure>\n\n<p>封装：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;Webhis-Baoji Chrome浏览器驱动 配置及调用&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;-----多个py文件共同调用同一个webhis-driver时, 使用以下方法-----&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DriverSingleton</span>:</span><br><span class=\"line\">    _instance = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">getInstance</span>():</span><br><span class=\"line\">        <span class=\"keyword\">if</span> DriverSingleton._instance == <span class=\"literal\">None</span>:</span><br><span class=\"line\">            options = webdriver.ChromeOptions()</span><br><span class=\"line\">            options.add_experimental_option(<span class=\"string\">&#x27;excludeSwitches&#x27;</span>, [<span class=\"string\">&#x27;enable-logging&#x27;</span>])</span><br><span class=\"line\">            options.add_experimental_option(<span class=\"string\">&quot;excludeSwitches&quot;</span>, [<span class=\"string\">&quot;enable-automation&quot;</span>])</span><br><span class=\"line\">            options.add_experimental_option(<span class=\"string\">&quot;useAutomationExtension&quot;</span>, <span class=\"string\">&#x27;False&#x27;</span>)</span><br><span class=\"line\">            options.add_argument(<span class=\"string\">&quot;--user-data-dir=&quot;</span> + <span class=\"built_in\">str</span>(pathlib.Path.home()) + <span class=\"string\">r&quot;\\AppData\\Local\\Google\\Chrome\\seleniumTest&quot;</span>)</span><br><span class=\"line\">            DriverSingleton._instance = webdriver.Chrome(service=Service(<span class=\"string\">r&#x27;C:\\Program Files\\Google\\Chrome\\Application\\chromedriver.exe&#x27;</span>), options=options)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> DriverSingleton._instance</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;-----单个py文件单独调用webhis-driver时, 使用以下方法-----&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">options = webdriver.ChromeOptions()</span></span><br><span class=\"line\"><span class=\"string\">options.add_experimental_option(&#x27;excludeSwitches&#x27;, [&#x27;enable-logging&#x27;])</span></span><br><span class=\"line\"><span class=\"string\">options.add_experimental_option(&quot;excludeSwitches&quot;, [&quot;enable-automation&quot;])</span></span><br><span class=\"line\"><span class=\"string\">options.add_experimental_option(&quot;useAutomationExtension&quot;, &#x27;False&#x27;)</span></span><br><span class=\"line\"><span class=\"string\">options.add_argument(&quot;--user-data-dir=&quot; + str(pathlib.Path.home()) + r&quot;\\AppData\\Local\\Google\\Chrome\\seleniumTest&quot;)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># 创建 WebDriver 对象, 指明使用chrome浏览器驱动</span></span><br><span class=\"line\"><span class=\"string\">driver = webdriver.Chrome(service=Service(r&#x27;C:\\Program Files\\Google\\Chrome\\Application\\chromedriver.exe&#x27;), options=options)</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>在这个类中，_instance是一个类变量，用于存储DriverSingleton的实例。getInstance是一个静态方法，用于获取DriverSingleton的实例。</p>\n<ul>\n<li>如果_instance为None，则创建一个新的webdriver.Chrome实例并将其存储在_instance中。</li>\n</ul>\n<p>(webdriver.Chrome实例使用了一些特定的选项，例如禁用日志记录，禁用自动化，禁用自动化扩展，并设置用户数据目录)</p>\n<ul>\n<li>如果_instance不为None，则直接返回_instance。这就保证了无论何时调用getInstance方法，都会返回同一个webdriver.Chrome实例。</li>\n</ul>\n<p>这种设计模式在需要确保类只有一个实例，并且需要全局访问点的情况下非常有用。在这个情况下，webdriver.Chrome实例在整个应用程序中都使用同一个浏览器实例。</p>\n<hr>\n<h2 id=\"function-py\"><a href=\"#function-py\" class=\"headerlink\" title=\"function.py\"></a>function.py</h2><p>所需导包：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\">sys.path.append(<span class=\"string\">&#x27;C:\\webhispython\\Webhis-test\\webhis-baoji&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> inspect</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver <span class=\"keyword\">import</span> Keys</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.common.by <span class=\"keyword\">import</span> By</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.common.action_chains <span class=\"keyword\">import</span> ActionChains</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.support.ui <span class=\"keyword\">import</span> WebDriverWait</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.support <span class=\"keyword\">import</span> expected_conditions <span class=\"keyword\">as</span> EC</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.common.exceptions <span class=\"keyword\">import</span> NoSuchElementException</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"登录-函数模块\"><a href=\"#登录-函数模块\" class=\"headerlink\" title=\"登录-函数模块\"></a>登录-函数模块</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;---登录 模块---&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># login(driver， 用户名, 密码, 登录地点, 登录科室)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">login</span>(<span class=\"params\">driver, username, password, xpath_role, xpath_location</span>):  <span class=\"comment\"># login(用户名, 密码, 角色, 登录地点)</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">5</span>)  <span class=\"comment\"># 停止5秒，等待浏览器加载页面</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;系统登录首页&quot;&quot;&quot;</span></span><br><span class=\"line\">    driver.find_element(by=By.ID, value=<span class=\"string\">&#x27;login_username&#x27;</span>).send_keys(username)  <span class=\"comment\"># 用户名</span></span><br><span class=\"line\">    driver.find_element(by=By.ID, value=<span class=\"string\">&#x27;login_password&#x27;</span>).send_keys(password)  <span class=\"comment\"># 密码</span></span><br><span class=\"line\">    driver.find_element(by=By.ID, value=<span class=\"string\">&#x27;nextBtn&#x27;</span>).click()</span><br><span class=\"line\">    driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;登录详细选项页&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"comment\"># 角色下拉框选值</span></span><br><span class=\"line\">    item = driver.find_element(by=By.ID, value=<span class=\"string\">&#x27;entryForm_roleMstrId&#x27;</span>)</span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class=\"line\">    driver.find_element(by=By.XPATH, value=xpath_role).click()  <span class=\"comment\"># 选择角色</span></span><br><span class=\"line\">    driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 科室下拉框选值</span></span><br><span class=\"line\">    item = driver.find_element(by=By.ID, value=<span class=\"string\">&#x27;entryForm_locationMstrId&#x27;</span>)</span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class=\"line\">    driver.find_element(by=By.XPATH, value=xpath_location).click()  <span class=\"comment\"># 选择科室</span></span><br><span class=\"line\">    driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 点击登录跳转</span></span><br><span class=\"line\">    driver.find_element(by=By.ID, value=<span class=\"string\">&#x27;loginBtn&#x27;</span>).send_keys(Keys.ENTER)</span><br><span class=\"line\">    driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    time.sleep(<span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        function_name = inspect.currentframe().f_code.co_name</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;函数 <span class=\"subst\">&#123;function_name&#125;</span> 执行完成&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h3 id=\"门诊急挂号-函数模块\"><a href=\"#门诊急挂号-函数模块\" class=\"headerlink\" title=\"门诊急挂号-函数模块\"></a>门诊急挂号-函数模块</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;---门急诊挂号 模块---&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># registration(driver, 患者门诊病案号, 挂号资源代码)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">registration</span>(<span class=\"params\">driver, record_number, registration_resources_code</span>):  <span class=\"comment\"># 门急诊挂号</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">3</span>)  <span class=\"comment\"># 停止5秒，等待浏览器加载页面</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;进入门急诊挂号页面&quot;&quot;&quot;</span></span><br><span class=\"line\">    item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-global-header-common-trigger&#x27;]&quot;</span>)  <span class=\"comment\"># 展开大类菜单</span></span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@id=&#x27;root&#x27;]//*[@class=&#x27;ant-menu-submenu-title&#x27;]//*[text()=&#x27;门诊医生站&#x27;]&quot;</span>)  <span class=\"comment\"># 大类菜单</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@id=&#x27;root&#x27;]//*[@class=&#x27;ant-menu-item ant-menu-item-selected&#x27;]&quot;</span>)  <span class=\"comment\"># 子类菜单(门诊医生站)</span></span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;ant-tabs-nav-list&#x27;]//*[text()=&#x27;门诊急挂号&#x27;]&quot;</span>)  <span class=\"comment\"># 进入&quot;门急诊挂号&quot;页面</span></span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-global-header-common-trigger&#x27;]&quot;</span>)  <span class=\"comment\"># 缩回大类菜单</span></span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 显式等待, 至&quot;门急诊挂号&quot;ID加载后再执行</span></span><br><span class=\"line\">    wait = WebDriverWait(driver, <span class=\"number\">10</span>)</span><br><span class=\"line\">    wait.until(EC.presence_of_element_located((By.ID, <span class=\"string\">&#x27;rc-tabs-0-tab-5603808&#x27;</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;WPB选择患者&quot;&quot;&quot;</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">    item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//input[contains(@placeholder,&#x27;请输入姓名/手机号/病案号&#x27;)]&quot;</span>)</span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class=\"line\">    <span class=\"comment\"># 输入所需患者门诊病案号, 唯一身份对应信息</span></span><br><span class=\"line\">    driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//input[contains(@placeholder,&#x27;请输入姓名/手机号/病案号&#x27;)]&quot;</span>).send_keys(record_number)</span><br><span class=\"line\">    driver.implicitly_wait(<span class=\"number\">10</span>)  <span class=\"comment\"># 待WPB搜索框加载并检索出send的患者数据</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 定位第一条患者并点击选中</span></span><br><span class=\"line\">    item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;ant-table ant-table-layout-fixed ant-table-fixed-header&#x27;]//*[@class=&#x27;ant-table-tbody&#x27;]/tr[2]&quot;</span>)</span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class=\"line\">    time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;选择挂号资源&quot;&quot;&quot;</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">    item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@id=&#x27;rc-tabs-0-panel-5603808&#x27;]/div/div/div/div/div/div/div[1]/form/div/div[95]/div/div/div/span/div/div/div[2]/input&quot;</span>)</span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class=\"line\">    <span class=\"comment\"># 输入所需挂号资源代码, 唯一代码对应信息</span></span><br><span class=\"line\">    driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@id=&#x27;rc-tabs-0-panel-5603808&#x27;]/div/div/div/div/div/div/div[1]/form/div/div[95]/div/div/div/span/div/div/div[2]/input&quot;</span>).send_keys(registration_resources_code)</span><br><span class=\"line\">    driver.implicitly_wait(<span class=\"number\">5</span>)  <span class=\"comment\"># 待资源列表加载并检索出send的资源数据</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 定位第一条资源并点击选中</span></span><br><span class=\"line\">    driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//tr[@data-row-key=&#x27;0&#x27; and contains(@class, &#x27;ant-table-row-selected&#x27;)]&quot;</span>).click()</span><br><span class=\"line\">    driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;账户支付&quot;&quot;&quot;</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">    item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;regnRegistration_btnGroup_aOve9&#x27;]//*[contains(text(),&#x27;账户支付&#x27;)]&quot;</span>)</span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class=\"line\">    driver.implicitly_wait(<span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        driver.find_element(By.XPATH, <span class=\"string\">&quot;//*[text()=&#x27;挂号成功！&#x27;]&quot;</span>)</span><br><span class=\"line\">        driver.implicitly_wait(<span class=\"number\">20</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;--- ATTENTION: 患者挂号成功! ---&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> NoSuchElementException:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;--- ATTENTION: 函数正常运行 但未完成挂号, 注意网络延迟并重试! ---&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    time.sleep(<span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        function_name = inspect.currentframe().f_code.co_name</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;函数 <span class=\"subst\">&#123;function_name&#125;</span> 执行完成&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h3 id=\"门诊医嘱录入-函数模块\"><a href=\"#门诊医嘱录入-函数模块\" class=\"headerlink\" title=\"门诊医嘱录入-函数模块\"></a>门诊医嘱录入-函数模块</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;---门诊医嘱录入 模块---&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># outpatient_orders(drivr， 已有挂号患者， pickshell药品， 数量， 剂量， 用法， 频次, 周期)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">outpatient_orders</span>(<span class=\"params\">driver, patient_msg, order_insert, quantity, dosage, usage, frequency, cycle</span>):</span><br><span class=\"line\">    time.sleep(<span class=\"number\">5</span>)  <span class=\"comment\"># 停止5秒，等待浏览器加载页面</span></span><br><span class=\"line\"></span><br><span class=\"line\">    item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-global-header-common-trigger&#x27;]&quot;</span>)  <span class=\"comment\"># 展开大类菜单</span></span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@id=&#x27;root&#x27;]//*[@class=&#x27;ant-menu-submenu-title&#x27;]//*[text()=&#x27;门诊医生站&#x27;]&quot;</span>)  <span class=\"comment\"># 大类菜单</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@id=&#x27;root&#x27;]//*[@class=&#x27;ant-menu-item ant-menu-item-selected&#x27;]&quot;</span>)  <span class=\"comment\"># 子类菜单(门诊医生站)</span></span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;ant-tabs-nav-list&#x27;]//*[text()=&#x27;医生看诊&#x27;]&quot;</span>)  <span class=\"comment\"># 进入&quot;医生看诊&quot;页面</span></span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-global-header-common-trigger&#x27;]&quot;</span>)  <span class=\"comment\"># 缩回大类菜单</span></span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//button[@class=&#x27;ant-btn ant-btn-link ant-btn-icon-only&#x27;]&quot;</span>)  <span class=\"comment\"># 患者列表刷新</span></span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).click().perform()</span><br><span class=\"line\">    driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\">    driver.find_element(by=By.XPATH, value=patient_msg).click()  <span class=\"comment\"># 选中患者列表对应挂号患者</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 显式等待, 医嘱pickshell加载</span></span><br><span class=\"line\">    wait = WebDriverWait(driver, <span class=\"number\">10</span>)</span><br><span class=\"line\">    wait.until(EC.presence_of_element_located((By.XPATH,  <span class=\"string\">&quot;//*[@class=&#x27;kt-datapicker kt-datapicker-singleRow&#x27;]//*[@placeholder=&#x27;请输入&#x27;]&quot;</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 定位并点击医嘱pickshell -&gt; 传参, 输入医嘱名称</span></span><br><span class=\"line\">    item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-datapicker kt-datapicker-singleRow&#x27;]//*[@placeholder=&#x27;请输入&#x27;]&quot;</span>)</span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).click().send_keys(order_insert).perform()</span><br><span class=\"line\">    time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 选中列表第一条并点击</span></span><br><span class=\"line\">    driver.find_element(By.XPATH, <span class=\"string\">&#x27;//tr[@data-row-key=&quot;0&quot; and contains(@class, &quot;ant-table-row ant-table-row-level-0 kt-table-row-oddeven kt-row-selected-order-picker&quot;)]&#x27;</span>).click()</span><br><span class=\"line\">    time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;患者当前医嘱列表重复开立弹窗判断&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        wait = WebDriverWait(driver, <span class=\"number\">3</span>)</span><br><span class=\"line\">        wait.until(EC.presence_of_element_located((By.XPATH, <span class=\"string\">&quot;//*[text()=&#x27;已经开立，是否继续？&#x27;]&quot;</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">        confirm_button = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[text()=&#x27;确定&#x27;]&quot;</span>)</span><br><span class=\"line\">        confirm_button.click()</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;---该医嘱可为此患者开立---&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;----------数量----------&quot;&quot;&quot;</span></span><br><span class=\"line\">    item = driver.find_element(by=By.ID, value=<span class=\"string\">&quot;orderQtyId1&quot;</span>)</span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).send_keys(quantity).perform()</span><br><span class=\"line\">    driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;----------剂量----------&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"comment\"># &#x27;剂量&#x27;框存在未知异常，无法定位元素</span></span><br><span class=\"line\">    <span class=\"comment\"># 又因前端约束 医嘱落入列表后光标自动定位到&#x27;数量&#x27;框，故使用ActionChains方法模拟TAB操作跳到&#x27;用法&#x27;框</span></span><br><span class=\"line\">    actions = ActionChains(driver)</span><br><span class=\"line\">    actions.send_keys(Keys.TAB, Keys.TAB).perform()</span><br><span class=\"line\">    actions.send_keys(dosage).perform()</span><br><span class=\"line\">    driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;----------用法----------&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"comment\"># //*[@class=&#x27;kt-editable-cell tabIndex4&#x27;]//input</span></span><br><span class=\"line\">    item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-editable-cell tabIndex4&#x27;]&quot;</span>)</span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).click().perform()</span><br><span class=\"line\">    time.sleep(<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 采用上述处理&#x27;剂量&#x27;框异常的方法后，又有未知原因 click定位到&#x27;用法&#x27;框后，光标会重新回到&#x27;剂量&#x27;框</span></span><br><span class=\"line\">    <span class=\"comment\"># 故使用两次click定位&#x27;用法&#x27;框方法，来避免光标异常定位问题，经测试此方法有效</span></span><br><span class=\"line\">    item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-editable-cell tabIndex4&#x27;]&quot;</span>)</span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).click().perform()</span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-editable-cell tabIndex4&#x27;]&quot;</span>)</span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).send_keys(usage).perform()</span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).send_keys(Keys.ENTER).perform()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 未知原因 用法框send_key后仍会再弹出下拉框，故设计为传参后立刻点击一处不可编辑区别，强制退出该输入框</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">    driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-global-header-common-logo-icon&#x27;]&quot;</span>).click()</span><br><span class=\"line\">    driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;----------频次----------&quot;&quot;&quot;</span></span><br><span class=\"line\">    item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-editable-cell tabIndex5&#x27;]&quot;</span>)</span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).click().perform()</span><br><span class=\"line\">    driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-editable-cell tabIndex5&#x27;]&quot;</span>)</span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).send_keys(frequency).perform()</span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).send_keys(Keys.ENTER).perform()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 未知原因 频次框send_key后仍会再弹出下拉框，故设计为传参后立刻点击一处不可编辑区别，强制退出该输入框</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">    driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-global-header-common-logo-icon&#x27;]&quot;</span>).click()</span><br><span class=\"line\">    driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;----------周期----------&quot;&quot;&quot;</span></span><br><span class=\"line\">    item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-editable-cell tabIndex6&#x27;]&quot;</span>)</span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).click().perform()</span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-editable-cell tabIndex6&#x27;]&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4</span>):</span><br><span class=\"line\">        webdriver.ActionChains(driver).move_to_element(item).send_keys(Keys.BACKSPACE).perform()</span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-editable-cell tabIndex6&#x27;]&quot;</span>)</span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).send_keys(cycle).perform()</span><br><span class=\"line\">    time.sleep(<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;医嘱保存&quot;&quot;&quot;</span></span><br><span class=\"line\">    driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;diagnosisAnYang_secondLineItem_RITqA diagnosisAnYang_iconCursor_Jv_RO&#x27;]//*[text()=&#x27;保存&#x27;]&quot;</span>).click()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;患者医嘱重复预警弹窗判断&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        wait = WebDriverWait(driver, <span class=\"number\">3</span>)</span><br><span class=\"line\">        wait.until(EC.presence_of_element_located((By.XPATH, <span class=\"string\">&quot;//*[@class=&#x27;ant-modal&#x27;]//*[text()=&#x27;医嘱重复报警&#x27;]&quot;</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">        confirm_button = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[text()=&#x27;强制保存&#x27;]&quot;</span>)</span><br><span class=\"line\">        webdriver.ActionChains(driver).move_to_element(confirm_button).click().perform()</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;---该医嘱可为此患者开立---&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;医嘱保存成功弹窗校验&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        item = driver.find_element(By.XPATH, <span class=\"string\">&quot;//*[text()=&#x27;医嘱保存成功&#x27;]&quot;</span>)</span><br><span class=\"line\">        webdriver.ActionChains(driver).move_to_element(item).perform()</span><br><span class=\"line\">        driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;--- ATTENTION: 医嘱保存成功! ---&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> NoSuchElementException:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;--- ATTENTION: 函数正常运行 但未成功保存医嘱，注意网络延迟并重试! ---&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    time.sleep(<span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        function_name = inspect.currentframe().f_code.co_name</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;函数 <span class=\"subst\">&#123;function_name&#125;</span> 执行完成&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h3 id=\"WPB选择患者-函数模块\"><a href=\"#WPB选择患者-函数模块\" class=\"headerlink\" title=\"WPB选择患者-函数模块\"></a>WPB选择患者-函数模块</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;---WPB选择患者 模块---&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># wpb_select(driver, 患者门诊病案号)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">wpb_select</span>(<span class=\"params\">driver, record_number</span>):</span><br><span class=\"line\">    time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//input[contains(@placeholder,&#x27;请输入姓名/手机号/病案号&#x27;)]&quot;</span>)</span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class=\"line\">    <span class=\"comment\"># 输入所需患者门诊病案号, 唯一身份对应信息</span></span><br><span class=\"line\">    driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//input[contains(@placeholder,&#x27;请输入姓名/手机号/病案号&#x27;)]&quot;</span>).send_keys(record_number)</span><br><span class=\"line\">    driver.implicitly_wait(<span class=\"number\">10</span>)  <span class=\"comment\"># 待WPB搜索框加载并检索出send的患者数据</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 定位第一条患者并点击选中</span></span><br><span class=\"line\">    item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;ant-table ant-table-layout-fixed ant-table-fixed-header&#x27;]//*[@class=&#x27;ant-table-tbody&#x27;]/tr[2]&quot;</span>)</span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class=\"line\">    driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    time.sleep(<span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        function_name = inspect.currentframe().f_code.co_name</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;函数 <span class=\"subst\">&#123;function_name&#125;</span> 执行完成&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"Webhis-门诊急挂号-流程测试脚本\"><a href=\"#Webhis-门诊急挂号-流程测试脚本\" class=\"headerlink\" title=\"Webhis-门诊急挂号-流程测试脚本\"></a>Webhis-门诊急挂号-流程测试脚本</h1><img src=\"/posts/e4f344ea/Outpatient_registration.png\" class=\"\">\n\n<h2 id=\"registration-py\"><a href=\"#registration-py\" class=\"headerlink\" title=\"registration.py\"></a>registration.py</h2><h3 id=\"所需导包\"><a href=\"#所需导包\" class=\"headerlink\" title=\"所需导包\"></a>所需导包</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\">sys.path.append(<span class=\"string\">&#x27;C:\\webhispython\\Webhis-test\\webhis-baoji&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> tool.driver <span class=\"keyword\">import</span> DriverSingleton  <span class=\"comment\"># 从tool目录driver.py下，调用公用driver驱动</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> tool.function <span class=\"keyword\">import</span> login, registration  <span class=\"comment\"># 从tool目录function.py下，调用login()和registration()函数</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"主函数\"><a href=\"#主函数\" class=\"headerlink\" title=\"主函数\"></a>主函数</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">driver = DriverSingleton.getInstance()  <span class=\"comment\"># 从driver.py下调用DriverSingleton.getInstance()方法以打开同一个driver实例</span></span><br><span class=\"line\">driver.get(url=<span class=\"string\">&quot;http://10.227.16.12/login&quot;</span>)</span><br><span class=\"line\">driver.maximize_window()</span><br><span class=\"line\"><span class=\"comment\"># time.sleep(5)  # 停止5秒，等待浏览器加载页面</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    login(driver, <span class=\"string\">&#x27;RZX&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&quot;//*[text()=&#x27;门急诊医生&#x27;]&quot;</span>, <span class=\"string\">&quot;//*[text()=&#x27;神经内科二科门诊&#x27;]&quot;</span>)  <span class=\"comment\"># 用户名, 密码, 登录地点, 登录科室</span></span><br><span class=\"line\">    registration(driver, <span class=\"string\">&#x27;0000000034&#x27;</span>, <span class=\"string\">&#x27;ZZHRZX&#x27;</span>)  <span class=\"comment\"># &#x27;测试01&#x27;门诊病案号&#x27;0000000034&#x27;, &#x27;专家号-RZX&#x27;挂号资源代码&#x27;ZZHRZX&#x27;</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Success!&quot;</span>)</span><br><span class=\"line\">    driver.quit()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>调用 driver.py 中 DriverSingleton 方法下的浏览器驱动 ，作为 driver 被脚本调用</li>\n<li>主函数走 function.py 中的 login() 函数进行登录</li>\n<li>再走 function.py 中的 registration() 函数进行门诊挂号</li>\n</ol>\n<p>登录函数 login() 传参： 用户名username， 密码password，登录角色xpath_role，登录地点xpath_location</p>\n<p>挂号函数 registration() 传参： 门诊患者病案号record_number， 挂号资源代码registration_resources_code</p>\n<hr>\n<h1 id=\"Webhis-门诊单个医嘱录入-流程测试脚本\"><a href=\"#Webhis-门诊单个医嘱录入-流程测试脚本\" class=\"headerlink\" title=\"Webhis-门诊单个医嘱录入-流程测试脚本\"></a>Webhis-门诊单个医嘱录入-流程测试脚本</h1><img src=\"/posts/e4f344ea/Outpatient_doctor_station.png\" class=\"\">\n\n<h2 id=\"orders-entry-py\"><a href=\"#orders-entry-py\" class=\"headerlink\" title=\"orders_entry.py\"></a>orders_entry.py</h2><h3 id=\"所需导包-1\"><a href=\"#所需导包-1\" class=\"headerlink\" title=\"所需导包\"></a>所需导包</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\">sys.path.append(<span class=\"string\">&#x27;C:\\webhispython\\Webhis-test\\webhis-baoji&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> tool.driver <span class=\"keyword\">import</span> DriverSingleton  <span class=\"comment\"># 从tool目录driver.py下，调用公用driver驱动</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> tool.function <span class=\"keyword\">import</span> login, outpatient_orders  <span class=\"comment\"># 从tool目录function.py下，调用login()和outpatient_orders()函数</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"主函数-1\"><a href=\"#主函数-1\" class=\"headerlink\" title=\"主函数\"></a>主函数</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">driver = DriverSingleton.getInstance()  <span class=\"comment\"># 从driver.py下调用DriverSingleton.getInstance()方法以打开同一个driver实例</span></span><br><span class=\"line\">driver.get(url=<span class=\"string\">&quot;http://10.227.16.12/login&quot;</span>)</span><br><span class=\"line\">driver.maximize_window()</span><br><span class=\"line\">time.sleep(<span class=\"number\">5</span>)  <span class=\"comment\"># 停止5秒，等待浏览器加载页面</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># driver， 用户名, 密码, 登录地点, 登录科室</span></span><br><span class=\"line\">    login(driver, <span class=\"string\">&#x27;RZX&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&quot;//*[text()=&#x27;门急诊医生&#x27;]&quot;</span>, <span class=\"string\">&quot;//*[text()=&#x27;神经内科二科门诊&#x27;]&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># drivr， 已有挂号患者， pickshell药品， 数量， 剂量， 用法， 频次， 周期</span></span><br><span class=\"line\">    outpatient_orders(driver, <span class=\"string\">&quot;//*[text()=&#x27;测试01 13:54 知名专家号&#x27;]&quot;</span>, <span class=\"string\">&quot;布洛芬缓释胶囊&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;10&quot;</span>, <span class=\"string\">&quot;口服&quot;</span>, <span class=\"string\">&quot;qd8&quot;</span>, <span class=\"string\">&quot;3&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    time.sleep(<span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Success!&quot;</span>)</span><br><span class=\"line\">    driver.quit()</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>调用 driver.py 中 DriverSingleton 方法下的浏览器驱动 ，作为 driver 被脚本调用</li>\n<li>主函数走 function.py 中的 login() 函数进行登录</li>\n<li>再走 function.py 中的 outpatient_orders() 函数进行医嘱录入</li>\n</ol>\n<p>登录函数 login() 传参：driver，用户名username，密码password，登录角色xpath_role，登录地点xpath_location</p>\n<p>医嘱录入函数 outpatient_orders() 传参：driver，已有挂号患者patient_msg，pickshell药品order_insert，数量quantity，剂量dosage，用法，频次frequency，周期cycle</p>\n<hr>\n<h1 id=\"Webhis-门诊自定义多医嘱录入-流程测试脚本详解\"><a href=\"#Webhis-门诊自定义多医嘱录入-流程测试脚本详解\" class=\"headerlink\" title=\"Webhis-门诊自定义多医嘱录入-流程测试脚本详解\"></a>Webhis-门诊自定义多医嘱录入-流程测试脚本详解</h1><h2 id=\"前情摘要\"><a href=\"#前情摘要\" class=\"headerlink\" title=\"前情摘要\"></a>前情摘要</h2><p>​\t\t该脚本利用登录、挂号、医嘱等函数，selenium、ActionChains、webdriver等将前面所展示的内容做了一个整合，以实现从编译器终端录入多种医嘱的效果，代码量将近四百行，多以调用函数的方式运行，总耗时大概三周的闲暇时间搞定。</p>\n<p>​\t\t由于 宝鸡项目Web端 门诊医生站开立医嘱 会存在很多特殊情况，不同的医嘱类型、不同的维护、不同的页面参数，系统参数都会导致Web前端页面的效果不同，会出现不同的弹窗等，针对多种情况去做脚本的判断部分没有意义，故此脚本为UI自动化测试脚本的终章。</p>\n<p>​\t\t以下详解部分，也将更详细的切分脚本的代码，附上更多的效果图，以便更好的理解其实现的流程及原理。</p>\n<hr>\n<h2 id=\"所需导包-2\"><a href=\"#所需导包-2\" class=\"headerlink\" title=\"所需导包\"></a>所需导包</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\">sys.path.append(<span class=\"string\">&#x27;C:\\webhispython\\Webhis-test\\webhis-baoji&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> pathlib</span><br><span class=\"line\"><span class=\"keyword\">import</span> inspect</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver <span class=\"keyword\">import</span> Keys</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.common.by <span class=\"keyword\">import</span> By</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.common.action_chains <span class=\"keyword\">import</span> ActionChains</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.support.ui <span class=\"keyword\">import</span> WebDriverWait</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.support <span class=\"keyword\">import</span> expected_conditions <span class=\"keyword\">as</span> EC</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.common.exceptions <span class=\"keyword\">import</span> NoSuchElementException</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.chrome.service <span class=\"keyword\">import</span> Service</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"driver的调用及设置\"><a href=\"#driver的调用及设置\" class=\"headerlink\" title=\"driver的调用及设置\"></a>driver的调用及设置</h2><ul>\n<li>对新调用的 Google 浏览器的启动参数进行设置：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">options = webdriver.ChromeOptions()</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>使用Cursor的编译器执行脚本，脚本运行过程中，终端会时不时弹出一些ERROR信息，很影响脚本中的print打印内容显示。</p>\n<p>例如：[ERROR:ssl_client_socket_impl.cc(968)] handshake failed; returned -1, SSL error code 1, net_error -101</p>\n<p>这个错误信息是由于 SSL 握手失败导致的，宝鸡Webhis系统由本地启动，通过VPN访问远程服务器，SSL证书问题等并不需要着重考虑。</p>\n<p>故使用以下两项设置，以强制关闭诸如此类的警告打印：</p>\n<ul>\n<li>设置 Chrome 的日志级别，3表示只记录ERROR级别的日志：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">options.add_argument(<span class=\"string\">&#x27;--log-level=3&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>禁用了 Chrome 的日志记录功能。这可以使得 Chrome 在运行时更加安静，不会输出不必要的日志信息：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">options.add_experimental_option(<span class=\"string\">&#x27;excludeSwitches&#x27;</span>, [<span class=\"string\">&#x27;enable-logging&#x27;</span>])</span><br></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li>该设置禁用了 Chrome 的自动化控制提示。在使用 Selenium 控制 Chrome 时，浏览器顶部的 “Chrome正在受到自动软件的控制” 这个提示将不会出现：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">options.add_experimental_option(<span class=\"string\">&quot;excludeSwitches&quot;</span>, [<span class=\"string\">&quot;enable-automation&quot;</span>])</span><br></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li>该设置禁用了 Chrome 的自动化扩展。这可以防止 Chrome 在启动时加载不必要的扩展，从而提高启动速度：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">options.add_experimental_option(<span class=\"string\">&quot;useAutomationExtension&quot;</span>, <span class=\"string\">&#x27;False&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li>这个设置约束了 Chrome 的本地数据目录。这意味着 Chrome 将会在这个目录下存储用户的个人信息，如浏览历史、书签等。这个选项可以在多次运行 Selenium 时保持相同的浏览环境：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">options.add_argument(<span class=\"string\">&quot;--user-data-dir=&quot;</span> + <span class=\"built_in\">str</span>(pathlib.Path.home()) + <span class=\"string\">r&quot;\\AppData\\Local\\Google\\Chrome\\seleniumTest&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li>创建 WebDriver 对象, 指明使用chrome浏览器驱动，并进行以上options的设置：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">driver = webdriver.Chrome(service=Service(<span class=\"string\">r&#x27;C:\\Program Files\\Google\\Chrome\\Application\\chromedriver.exe&#x27;</span>), options=options)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li>调项目环境URL，启动浏览器自动化脚本控制：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">driver.get(url=<span class=\"string\">&quot;http://10.227.16.12/login&quot;</span>)</span><br><span class=\"line\">driver.maximize_window()</span><br><span class=\"line\">time.sleep(<span class=\"number\">3</span>)  <span class=\"comment\"># 强制停止5秒，等待浏览器加载页面</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"登录-函数模块-1\"><a href=\"#登录-函数模块-1\" class=\"headerlink\" title=\"登录-函数模块\"></a>登录-函数模块</h2><p>项目系统登录页面有主页面和子页面之分，主页面输入登录账户密码，子页面选择登录人的角色及登录地点。</p>\n<p>登录函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">login</span>(<span class=\"params\">driver, username, password, xpath_role, xpath_location</span>):  <span class=\"comment\"># login(用户名, 密码, 角色, 登录地点)</span></span><br></pre></td></tr></table></figure>\n\n<p>登录主页面：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;脚本已进入 [登录菜单] &quot;</span>)</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;系统登录首页&quot;&quot;&quot;</span></span><br><span class=\"line\">driver.find_element(by=By.ID, value=<span class=\"string\">&#x27;login_username&#x27;</span>).send_keys(username)  <span class=\"comment\"># 用户名</span></span><br><span class=\"line\">driver.find_element(by=By.ID, value=<span class=\"string\">&#x27;login_password&#x27;</span>).send_keys(password)  <span class=\"comment\"># 密码</span></span><br><span class=\"line\">driver.find_element(by=By.ID, value=<span class=\"string\">&#x27;nextBtn&#x27;</span>).click()</span><br><span class=\"line\">driver.implicitly_wait(<span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure>\n\n<img src=\"/posts/e4f344ea/%E7%99%BB%E5%BD%95%E4%B8%BB%E9%A1%B5%E9%9D%A2.png\" class=\"\">\n\n<p>登录子页面：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;登录详细选项页&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;脚本已进入 [登录子菜单] &quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 角色下拉框选值</span></span><br><span class=\"line\">item = driver.find_element(by=By.ID, value=<span class=\"string\">&#x27;entryForm_roleMstrId&#x27;</span>)</span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class=\"line\">driver.find_element(by=By.XPATH, value=xpath_role).click()  <span class=\"comment\"># 选择角色</span></span><br><span class=\"line\">driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 科室下拉框选值</span></span><br><span class=\"line\">item = driver.find_element(by=By.ID, value=<span class=\"string\">&#x27;entryForm_locationMstrId&#x27;</span>)</span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class=\"line\">driver.find_element(by=By.XPATH, value=xpath_location).click()  <span class=\"comment\"># 选择科室</span></span><br><span class=\"line\">driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 点击登录跳转</span></span><br><span class=\"line\">driver.find_element(by=By.ID, value=<span class=\"string\">&#x27;loginBtn&#x27;</span>).send_keys(Keys.ENTER)</span><br><span class=\"line\">driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<img src=\"/posts/e4f344ea/%E7%99%BB%E5%BD%95%E5%AD%90%E9%A1%B5%E9%9D%A2.png\" class=\"\">\n\n<hr>\n<h2 id=\"门诊多医嘱录入-函数模块-重\"><a href=\"#门诊多医嘱录入-函数模块-重\" class=\"headerlink\" title=\"门诊多医嘱录入-函数模块 [重]\"></a>门诊多医嘱录入-函数模块 [重]</h2><h3 id=\"整体结构概述\"><a href=\"#整体结构概述\" class=\"headerlink\" title=\"整体结构概述\"></a>整体结构概述</h3><p>医嘱录入的过程本身就是顺序执行到底的，所以这部分脚本代码也保持顺序执行的逻辑。本意就是想要设计一个能够自主任意的录入多次多种医嘱的脚本，所以设计了 函数嵌套的方式，以实现循环执行录入医嘱的函数，通过终端输入的方式，自主决定录入不同数量的医嘱、不同种类的医嘱。</p>\n<p>当然，编译器终端输入以实现可控制性的方法固然是最原始最笨的办法，因为在脚本执行的过程中，driver调用的浏览器窗口设定为最大化maxmize_window；而每次自定义选择医嘱时，又需要切出浏览器，在终端存值，会很影响感官。</p>\n<ul>\n<li>我能设想到的最理想的是，用前端方法设计一个大小合适且可拖动调整的小窗，同步编译器终端的功能，可通过小窗输入输出终端内容，并将该窗口置于可视桌面最前端，这样既能看到浏览器自动化运行的过程，又能快捷终端输入输出，也不会很影响视觉。这想法只能说以我当前能力是无法实现的了，以后如果有机会，可以拓展到其他工作项目的自动化脚本里去。</li>\n</ul>\n<p>多医嘱录入函数的框架大致如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">outpatient_orders</span>(<span class=\"params\">driver, patient_msg</span>):</span><br><span class=\"line\">    ...  <span class=\"comment\"># 脚本进入医生看诊页面的代码执行</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">orders_entry_main</span>():</span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">loop_entry</span>(<span class=\"params\">entry</span>):</span><br><span class=\"line\">            <span class=\"keyword\">match</span> entry:</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;1&#x27;</span>: pickshell医嘱</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;2&#x27;</span>: 检验类医嘱</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;3&#x27;</span>: 检查类医嘱</span><br><span class=\"line\">                <span class=\"keyword\">case</span> _: 提示输入错误</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            entry = <span class=\"built_in\">input</span>()</span><br><span class=\"line\">            loop_entry(entry)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> entry == <span class=\"string\">&#x27;0&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">    orders_entry_main()</span><br><span class=\"line\">outpatient_orders(driver, patient_msg)</span><br></pre></td></tr></table></figure>\n\n<p>函数嵌套方法：</p>\n<ul>\n<li>loop_entry()函数传参entry，通过match…case方法，读取entry的值，进而进行不同的case操作，以实现参数控制代码执行范围，自定义选择开立的医嘱类型</li>\n<li>orders_entry_main()函数通过while True无限循环调用loop_entry()函数，entry通过终端键盘input输入的方法传参给loop_entry()，输入字符’0’时跳出循环</li>\n<li>outpatient_orders()函数传参patient_msg，脚本进入到医生看诊页面后，选中对应挂号患者patient_msg，以为指定患者开立医嘱执行嵌套内的函数</li>\n</ul>\n<hr>\n<h3 id=\"脚本进入医生看诊页面\"><a href=\"#脚本进入医生看诊页面\" class=\"headerlink\" title=\"脚本进入医生看诊页面\"></a>脚本进入医生看诊页面</h3><img src=\"/posts/e4f344ea/%E5%8C%BB%E7%94%9F%E7%9C%8B%E8%AF%8A%E9%A1%B5%E9%9D%A2.png\" class=\"\">\n\n<p>① 展开大类主菜单，并进入门诊医生站对应的大类菜单：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-global-header-common-trigger&#x27;]&quot;</span>)  <span class=\"comment\"># 展开大类菜单</span></span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class=\"line\">time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@id=&#x27;root&#x27;]//*[@class=&#x27;ant-menu-submenu-title&#x27;]//*[text()=&#x27;门诊医生站&#x27;]&quot;</span>)  <span class=\"comment\"># 大类菜单</span></span><br><span class=\"line\">time.sleep(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<p>② 进入子类菜单，并进入医生看诊页面：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@id=&#x27;root&#x27;]//*[@class=&#x27;ant-menu-item ant-menu-item-selected&#x27;]&quot;</span>)  <span class=\"comment\"># 子类菜单(门诊医生站)</span></span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class=\"line\">time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;ant-tabs-nav-list&#x27;]//*[text()=&#x27;医生看诊&#x27;]&quot;</span>)  <span class=\"comment\"># 进入&quot;医生看诊&quot;页面</span></span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;脚本已切换到 [门诊医生站] 页面&quot;</span>)</span><br><span class=\"line\">time.sleep(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<p>③ 选中患者，进入门诊医生站待录入医嘱：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//button[@class=&#x27;ant-btn ant-btn-link ant-btn-icon-only&#x27;]&quot;</span>)  <span class=\"comment\"># 患者列表刷新</span></span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).click().perform()</span><br><span class=\"line\">driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\">driver.find_element(by=By.XPATH, value=patient_msg).click()  <span class=\"comment\"># 选中患者列表对应挂号患者</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;已选中 门诊挂号患者[ %s ]&quot;</span> % patient_msg)</span><br><span class=\"line\">time.sleep(<span class=\"number\">5</span>)  <span class=\"comment\"># 强制等待页面加载, 待患者信息、门诊医生站功能加载</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"pickshell医嘱录入功能的实现\"><a href=\"#pickshell医嘱录入功能的实现\" class=\"headerlink\" title=\"pickshell医嘱录入功能的实现\"></a>pickshell医嘱录入功能的实现</h3><img src=\"/posts/e4f344ea/pickshell%E8%BE%93%E5%85%A5%E5%8C%BB%E5%98%B1.png\" class=\"\">\n\n<p>如上图，以 medicine传参医嘱完整全称 定位到pickshell输入框。部分医嘱例如葡萄糖注射液，列表会显示名称带有“葡萄糖注射液”的所有医嘱，会出现不同浓度、不同规格、不同厂商等多种葡萄糖注射液医嘱，此处并不做特殊情况的考虑，均定位到列表内第一条医嘱并点击。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">medicine = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入所要开立的pickshell药品完整名称: &quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-datapicker kt-datapicker-singleRow&#x27;]//*[@placeholder=&#x27;请输入&#x27;]&quot;</span>)</span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).click().send_keys(medicine).perform()</span><br><span class=\"line\">time.sleep(<span class=\"number\">3</span>)  <span class=\"comment\"># 强制等待给检索医嘱列表的加载时间</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定位并选择目录列表第一条医嘱</span></span><br><span class=\"line\">driver.find_element(By.XPATH, <span class=\"string\">&#x27;//tr[@data-row-key=&quot;0&quot; and contains(@class, &quot;ant-table-row ant-table-row-level-0 kt-table-row-oddeven kt-row-selected-order-picker&quot;)]&#x27;</span>).click()</span><br><span class=\"line\">time.sleep(<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<img src=\"/posts/e4f344ea/%E5%8C%BB%E5%98%B1%E9%87%8D%E5%A4%8D%E5%BC%B9%E7%AA%97.png\" class=\"\">\n\n<p>如上图，医嘱落入医生站时有多个校验，医嘱重复校验弹窗就是其一。当该患者的医嘱列表存在相同医嘱，会出现并需要判断点击。故在脚本代码中使用try…except…方法同步进行校验。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;患者当前医嘱列表重复开立弹窗判断&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">\twait = WebDriverWait(driver, <span class=\"number\">10</span>)</span><br><span class=\"line\">\twait.until(EC.presence_of_element_located((By.XPATH, <span class=\"string\">&quot;//*[text()=&#x27;已经开立，是否继续？&#x27;]&quot;</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">\tconfirm_button = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[text()=&#x27;确定&#x27;]&quot;</span>)</span><br><span class=\"line\">\tconfirm_button.click()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<img src=\"/posts/e4f344ea/%E5%8C%BB%E5%98%B1%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF%E5%BD%95%E5%85%A5.png\" class=\"\">\n\n<p>医嘱落入医生站后，则需要对其医嘱的信息进行手动的填写了，过程都是类似的，但是这部分内容一直存在历史bug，前端开发在此处放置的下拉框会出现异常跳转、光标回弹的问题。<strong>撰写此处脚本的时候，着实是见识到了水货开发的实力</strong>。。。当然脚本代码也用了最原始最简单的方法避免这些bug：time.sleep()设定强制等待、点击其他空白可定位位置以防止原本sendkeys的值消失、在前端光标自动回弹后再重复定位下一个元素重新存值。</p>\n<p>上述所说的前端bug问题具体为：光标定位到“剂量”框并存值后，切到下一个“用法”框时，光标会自动跳转回“剂量”框去；有时脚本在执行过程中，已向“用法”框存值后，切到其他输入框时，原存值会莫名消失等（此问题非必现，大多运行时正常，故脚本内并未做相关问题的解决方案；如果执行过程中复现此问题，只能重新录入或快速手动输入了）。。。</p>\n<ul>\n<li>“数量”输入框</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;----------数量----------&quot;&quot;&quot;</span></span><br><span class=\"line\">item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@id=&#x27;orderQtyId1&#x27;]&quot;</span>)</span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).send_keys(<span class=\"string\">&quot;3&quot;</span>).perform()  <span class=\"comment\"># &#x27;数量&#x27;固定存值&#x27;3&#x27;</span></span><br><span class=\"line\">driver.implicitly_wait(<span class=\"number\">3</span>)</span><br><span class=\"line\">time.sleep(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>“剂量”输入框</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;----------剂量----------&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># &#x27;剂量&#x27;框存在未知异常，无法定位元素</span></span><br><span class=\"line\"><span class=\"comment\"># 又因前端约束 医嘱落入列表后光标自动定位到&#x27;数量&#x27;框，故使用ActionChains方法模拟TAB操作跳到&#x27;用法&#x27;框</span></span><br><span class=\"line\">actions = ActionChains(driver)</span><br><span class=\"line\">actions.send_keys(Keys.TAB, Keys.TAB).perform()</span><br><span class=\"line\">actions.send_keys(<span class=\"string\">&quot;1&quot;</span>).perform()</span><br><span class=\"line\">driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\">time.sleep(<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>“用法”输入框</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;----------用法----------&quot;&quot;&quot;</span></span><br><span class=\"line\">item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-editable-cell tabIndex4&#x27;]&quot;</span>)</span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).click().perform()</span><br><span class=\"line\">time.sleep(<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 采用上述处理&#x27;剂量&#x27;框异常的方法后，又有未知原因 click定位到&#x27;用法&#x27;框后，光标会重新回到&#x27;剂量&#x27;框(前端代码问题)</span></span><br><span class=\"line\"><span class=\"comment\"># 故使用两次click定位&#x27;用法&#x27;框方法，来避免光标异常定位问题，经测试此方法有效</span></span><br><span class=\"line\">item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-editable-cell tabIndex4&#x27;]&quot;</span>)</span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).click().perform()</span><br><span class=\"line\">time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-editable-cell tabIndex4&#x27;]&quot;</span>)</span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).send_keys(<span class=\"string\">&quot;口服&quot;</span>).perform()</span><br><span class=\"line\">time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).send_keys(Keys.ENTER).perform()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 未知原因 用法框send_key后仍会再弹出下拉框，故设计为传参后立刻点击一处不可编辑区别，强制退出该输入框</span></span><br><span class=\"line\">time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-global-header-common-logo-icon&#x27;]&quot;</span>).click()</span><br><span class=\"line\">driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\">time.sleep(<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>“频次”输入框</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;----------频次----------&quot;&quot;&quot;</span></span><br><span class=\"line\">item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-editable-cell tabIndex5&#x27;]&quot;</span>)</span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).click().perform()</span><br><span class=\"line\">driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-editable-cell tabIndex5&#x27;]&quot;</span>)</span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).send_keys(<span class=\"string\">&quot;qd8&quot;</span>).perform()</span><br><span class=\"line\">time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).send_keys(Keys.ENTER).perform()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 未知原因 频次框send_key后仍会再弹出下拉框，故设计为传参后立刻点击一处不可编辑区别，强制退出该输入框</span></span><br><span class=\"line\">time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-global-header-common-logo-icon&#x27;]&quot;</span>).click()</span><br><span class=\"line\">driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\">time.sleep(<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>“周期”输入框</li>\n</ul>\n<p>在录入数量、剂量、频次后，系统会自动换算出“周期”所需的值，脚本在此处为测试能否正常传值，所以也采取传入固定值的方式。使用send_keys全选CTRL + A以清除“周期”内原有值的方法未生效，换成for循环连续4次进行BACKSPACE操作代替。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;----------周期----------&quot;&quot;&quot;</span></span><br><span class=\"line\">item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-editable-cell tabIndex6&#x27;]&quot;</span>)</span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).click().perform()</span><br><span class=\"line\">time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-editable-cell tabIndex6&#x27;]&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4</span>):</span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).send_keys(Keys.BACKSPACE).perform()</span><br><span class=\"line\">time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-editable-cell tabIndex6&#x27;]&quot;</span>)</span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).send_keys(<span class=\"string\">&quot;3&quot;</span>).perform()</span><br><span class=\"line\">time.sleep(<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>医嘱保存</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;医嘱保存&quot;&quot;&quot;</span></span><br><span class=\"line\">driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;diagnosisAnYang_secondLineItem_RITqA diagnosisAnYang_iconCursor_Jv_RO&#x27;]//*[text()=&#x27;保存&#x27;]&quot;</span>).click()</span><br></pre></td></tr></table></figure>\n\n<hr>\n<img src=\"/posts/e4f344ea/%E5%8C%BB%E5%98%B1%E4%BF%9D%E5%AD%98%E9%87%8D%E5%A4%8D%E6%A0%A1%E9%AA%8C.png\" class=\"\">\n\n<p>不光在开立医嘱时有医嘱重复校验，在最后保存医嘱列表时也会弹窗类似重复的校验。针对此类弹窗，采取相同方法，try…except…当定位到“强制保存”的文本，则点击此文本对应按钮，以确认关闭该校验弹窗。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;患者医嘱重复预警弹窗判断&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    confirm_button = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;ant-modal-body&#x27;]//button[text()=&#x27;强制保存&#x27;]&quot;</span>)</span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(confirm_button).click().perform()</span><br><span class=\"line\">    driver.implicitly_wait(<span class=\"number\">3</span>)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<img src=\"/posts/e4f344ea/%E5%8C%BB%E5%98%B1%E4%BF%9D%E5%AD%98%E6%88%90%E5%8A%9F%E6%A0%A1%E9%AA%8C.png\" class=\"\">\n\n<p>上述所有录入医嘱的操作执行完毕后，要对所有医嘱进行保存才可退出，点击保存后需要物理等待程序加载、数据库存值，保存成功会有“医嘱保存成功”弹窗。</p>\n<p>针对该弹窗的定位抓取，终端print打印脚本执行结果是我认为有必要的，所以增加了此脚本代码形式的校验。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;医嘱保存成功弹窗校验&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    item = driver.find_element(By.XPATH, <span class=\"string\">&quot;//*[text()=&#x27;医嘱保存成功&#x27;]&quot;</span>)</span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).perform()</span><br><span class=\"line\">    driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;--- ATTENTION: 医嘱保存成功! ---&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> NoSuchElementException:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;--- ATTENTION: 函数正常运行 但未成功保存医嘱，注意网络延迟并重试! ---&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><strong>pickshell医嘱开立 部分完整脚本运行截图：</strong></p>\n<img src=\"/posts/e4f344ea/pickshell%E8%BF%90%E8%A1%8C%E7%B3%BB%E7%BB%9F%E6%88%AA%E5%9B%BE.png\" class=\"\">\n\n<img src=\"/posts/e4f344ea/pickshell%E8%BF%90%E8%A1%8C%E7%BB%88%E7%AB%AF%E6%88%AA%E5%9B%BE.png\" class=\"\">\n\n<hr>\n<h3 id=\"检验类医嘱录入功能的实现\"><a href=\"#检验类医嘱录入功能的实现\" class=\"headerlink\" title=\"检验类医嘱录入功能的实现\"></a>检验类医嘱录入功能的实现</h3><img src=\"/posts/e4f344ea/%E6%A3%80%E9%AA%8C%E7%B1%BB%E5%8C%BB%E5%98%B1%E5%BC%80%E7%AB%8B%E6%96%B9%E6%B3%95.png\" class=\"\">\n\n<p>检验医嘱开立在功能上可以通过详细检验组分类，选择性显示不同类别的检验医嘱，从而勾选所需要的。但是这本就对于需变动脚本不便，自然也不必要使用此方式。索性直接用inspection_id传参项目代码，既具有唯一性，又可以跳过勾选多个复选框之一时麻烦的定位等问题。所以本脚本在执行检验类医嘱的过程只分为：打开页面 -&gt; 输入inspection_id -&gt; 勾选列表第一个复选框 -&gt; 点击确定。就能简洁且顺利的搞定此部分。</p>\n<ul>\n<li>进入“检验”类医嘱开立弹窗</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;按钮开立检验类医嘱&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;正在进入检验类医嘱开立弹窗...&quot;</span>)</span><br><span class=\"line\">item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;diagnosisAnYang_secondLine_BsP7f&#x27;]//*[text()=&#x27;检验&#x27;]&quot;</span>)</span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).click().perform()</span><br><span class=\"line\">time.sleep(<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>终端传参inspection_id项目代码</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 搜索框搜索 项目代码 以唯一性元素 定位所需项目</span></span><br><span class=\"line\">inspection_id = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入所要开立的检验类医嘱-项目代码: &quot;</span>)</span><br><span class=\"line\">item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;labReqApplicationDialog_container_J2E8u&#x27;]//input[contains(@placeholder,&#x27;请输入项目描述/项目代码&#x27;)]&quot;</span>)</span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).click().send_keys(inspection_id).send_keys(Keys.ENTER).perform()</span><br><span class=\"line\">driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\">time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>勾选列表下第一个复选框，点击确定按钮并保存医嘱</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;ant-table-body&#x27;]//*[@class=&#x27;ant-table-row ant-table-row-level-0&#x27;]//input[1]&quot;</span>)</span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).click().perform()</span><br><span class=\"line\">driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\">time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-dialog-footer kt-portal-footer-container&#x27;]//button[text()=&#x27;确定&#x27;]&quot;</span>)</span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).click().perform()</span><br><span class=\"line\">driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\">time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;医嘱保存&quot;&quot;&quot;</span></span><br><span class=\"line\">driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;diagnosisAnYang_secondLineItem_RITqA diagnosisAnYang_iconCursor_Jv_RO&#x27;]//*[text()=&#x27;保存&#x27;]&quot;</span>).click()</span><br><span class=\"line\">time.sleep(<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>医嘱保存成功校验</li>\n</ul>\n<p>效果同pickshell的医嘱保存成功校验</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;医嘱保存成功弹窗校验&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">wait = WebDriverWait(driver, <span class=\"number\">10</span>)</span><br><span class=\"line\">wait.until(EC.presence_of_element_located((By.XPATH, <span class=\"string\">&quot;//*[text()=&#x27;医嘱保存成功&#x27;]&quot;</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">item = driver.find_element(By.XPATH, <span class=\"string\">&quot;//*[text()=&#x27;医嘱保存成功&#x27;]&quot;</span>)</span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).perform()</span><br><span class=\"line\">driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\">time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;--- ATTENTION: 医嘱保存成功! ---&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> NoSuchElementException:</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;--- ATTENTION: 函数正常运行 但未成功保存医嘱，注意网络延迟并重试! ---&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><strong>检验类医嘱开立 部分完整脚本运行截图：</strong></p>\n<img src=\"/posts/e4f344ea/%E6%A3%80%E9%AA%8C%E7%B1%BB%E5%8C%BB%E5%98%B1%E8%BF%90%E8%A1%8C%E7%B3%BB%E7%BB%9F%E6%88%AA%E5%9B%BE.png\" class=\"\">\n\n<img src=\"/posts/e4f344ea/%E6%A3%80%E9%AA%8C%E7%B1%BB%E5%8C%BB%E5%98%B1%E8%BF%90%E8%A1%8C%E7%BB%88%E7%AB%AF%E6%88%AA%E5%9B%BE.png\" class=\"\">\n\n<hr>\n<h3 id=\"检查类医嘱录入功能的实现\"><a href=\"#检查类医嘱录入功能的实现\" class=\"headerlink\" title=\"检查类医嘱录入功能的实现\"></a>检查类医嘱录入功能的实现</h3><img src=\"/posts/e4f344ea/%E6%A3%80%E6%9F%A5%E7%B1%BB%E5%8C%BB%E5%98%B1%E5%BC%80%E7%AB%8B%E6%96%B9%E6%B3%95.png\" class=\"\">\n\n<p>检查医嘱的脚本代码开立方法大体和检验医嘱一致，通过examination_id传参项目代码，勾选对应项目以实现开立。只不过针对检查类医嘱，会有选择检查部位的情况需要考虑，故再增加一个判断校验，当发现所开立的医嘱需要再录入部位，则默认勾选并带入部位列表下第一个值。所以本脚本在执行检查类医嘱的过程分为：打开页面 -&gt; 输入examination_id -&gt; 勾选列表第一个复选框 -&gt; 判断该项目是否需要录入部位（需要则默认勾选第一个部位；不需要则跳过） -&gt; 点击确定。</p>\n<ul>\n<li>进入“检查”类医嘱开立弹窗</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;按钮开立检查类医嘱&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;正在进入检查类医嘱开立弹窗...&quot;</span>)</span><br><span class=\"line\">item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;diagnosisAnYang_secondLine_BsP7f&#x27;]//*[text()=&#x27;检查&#x27;]&quot;</span>)</span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).click().perform()</span><br><span class=\"line\">time.sleep(<span class=\"number\">3</span>)</span><br><span class=\"line\">driver.implicitly_wait(<span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>录入“检查目的”</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;ant-modal-body&#x27;]//*[@class=&#x27;ant-select-selector&#x27;]&quot;</span>)</span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).click().send_keys(<span class=\"string\">&quot;协助诊断&quot;</span>).send_keys(Keys.ENTER).perform()</span><br><span class=\"line\">driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\">time.sleep(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>终端传参examination_id项目代码 并勾选</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 搜索框搜索 项目代码 以唯一性元素 定位所需项目</span></span><br><span class=\"line\">examination_id = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入所要开立的检查类医嘱-项目代码: &quot;</span>)</span><br><span class=\"line\">item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;ant-input-affix-wrapper&#x27;]&quot;</span>)</span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).click().send_keys(examination_id).perform()</span><br><span class=\"line\">time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;ant-table-body&#x27;]//*[@class=&#x27;ant-table-row ant-table-row-level-0&#x27;]//input[1]&quot;</span>)</span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).click().perform()</span><br><span class=\"line\">driver.implicitly_wait(<span class=\"number\">4</span>)</span><br><span class=\"line\">time.sleep(<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>所开立检查项目是否需要录入部位的判断 及部位的录入</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;检查医嘱是否存在部位待选择情况判断&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;ant-input-affix-wrapper&#x27;]//*[contains(@placeholder,&#x27;请输入部位名称&#x27;)]&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;该检查类医嘱有部位维护, 需要选择部位才能开立! &quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 脚本仅勾选第一个部位, 不打算做多种多个部位勾选的细分代码</span></span><br><span class=\"line\">    item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;ant-checkbox-group examReqmultiApplicationDialog_group_SOSLw&#x27;]//input[1]&quot;</span>)</span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).click().perform()</span><br><span class=\"line\">    driver.implicitly_wait(<span class=\"number\">3</span>)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>点击确定 落入医嘱</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-dialog-footer kt-portal-footer-container&#x27;]//button[contains(text(),&#x27;确定&#x27;)]&quot;</span>)</span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).click().perform()</span><br><span class=\"line\">driver.implicitly_wait(<span class=\"number\">4</span>)</span><br><span class=\"line\">time.sleep(<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>医嘱重复开立弹窗校验</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;当前患者该医嘱已开立弹窗校验&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    wait = WebDriverWait(driver, <span class=\"number\">10</span>)</span><br><span class=\"line\">    wait.until(EC.presence_of_element_located((By.XPATH, <span class=\"string\">&quot;//*[@class=&#x27;ant-modal-content&#x27;]//*[contains(text(),&#x27;已经开立，是否继续？&#x27;)]&quot;</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">    confirm_button = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-dialog-confirm-footer&#x27;]//button[contains(text(),&#x27;确定&#x27;)]&quot;</span>)</span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(confirm_button).click().perform()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;--- ATTENTION: 检查项目成功落入医嘱列表 ---&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>医嘱保存及保存成功校验</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;医嘱保存&quot;&quot;&quot;</span></span><br><span class=\"line\">driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;diagnosisAnYang_secondLineItem_RITqA diagnosisAnYang_iconCursor_Jv_RO&#x27;]//*[text()=&#x27;保存&#x27;]&quot;</span>).click()</span><br><span class=\"line\">time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;医嘱保存成功弹窗校验&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    wait = WebDriverWait(driver, <span class=\"number\">10</span>)</span><br><span class=\"line\">    wait.until(EC.presence_of_element_located((By.XPATH, <span class=\"string\">&quot;//*[text()=&#x27;医嘱保存成功&#x27;]&quot;</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">    item = driver.find_element(By.XPATH, <span class=\"string\">&quot;//*[text()=&#x27;医嘱保存成功&#x27;]&quot;</span>)</span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).perform()</span><br><span class=\"line\">    driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;--- ATTENTION: 医嘱保存成功! ---&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> NoSuchElementException:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;--- ATTENTION: 函数正常运行 但未成功保存医嘱，注意网络延迟并重试! ---&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><strong>检查类医嘱开立 部分完整脚本运行截图：</strong></p>\n<img src=\"/posts/e4f344ea/%E6%A3%80%E6%9F%A5%E7%B1%BB%E5%8C%BB%E5%98%B1%E8%BF%90%E8%A1%8C%E7%B3%BB%E7%BB%9F%E6%88%AA%E5%9B%BE.png\" class=\"\">\n\n<img src=\"/posts/e4f344ea/%E6%A3%80%E6%9F%A5%E7%B1%BB%E5%8C%BB%E5%98%B1%E8%BF%90%E8%A1%8C%E7%BB%88%E7%AB%AF%E6%88%AA%E5%9B%BE.png\" class=\"\">\n\n<hr>\n<p><strong>以上就是基于python 3.10.10 和 selenium 4 版本，结合康博嘉宝鸡项目Webhis门诊医生站系统制作的 UI自动化测试脚本。此项目属于是我的第一份工作的第一个项目，功能性还是比较简单和单一的，四百行的代码量也并不多，代码内容结构也都是比较单一固定的，只能说这个项目于我巩固selenium的使用，恢复对python的学习起到了很大的帮助吧，还望以后的职业生涯再接再厉咯，这个md应该就写至此为止了！</strong></p>\n","site":{"data":{}},"length":37227,"excerpt":"<p><strong>python + selenium UI自动化测试脚本原创</strong></p>","more":"<h1 id=\"Driver的封装\"><a href=\"#Driver的封装\" class=\"headerlink\" title=\"Driver的封装\"></a>Driver的封装</h1><p>针对Webhis-baoji的UI自动化脚本，由于其本地URL是始终固定不变的，所需调用的driver也是不变的，故欲打算采用“单例设计模式”。</p>\n<h2 id=\"单例设计模式\"><a href=\"#单例设计模式\" class=\"headerlink\" title=\"单例设计模式\"></a>单例设计模式</h2><p>单例（Singleton）模式的定义：指一个类只有一个实例，且该类能自行创建这个实例的一种模式。例如，Windows 中只能打开一个任务管理器，这样可以避免因打开多个任务管理器窗口而造成内存资源的浪费，或出现各个窗口显示内容的不一致等错误。</p>\n<p>在计算机系统中，还有 Windows 的回收站、操作系统中的文件系统、多线程中的线程池、显卡的驱动程序对象、打印机的后台处理服务、应用程序的日志对象、数据库的连接池、网站的计数器、Web 应用的配置对象、应用程序中的对话框、系统中的缓存等常常被设计成单例。</p>\n<p>单例模式是设计模式中最简单的模式之一。通常，普通类的构造函数是公有的，外部类可以通过“new 构造函数()”来生成多个实例。但是，如果将类的构造函数设为私有的，外部类就无法调用该构造函数，也就无法生成多个实例。这时该类自身必须定义一个静态私有实例，并向外提供一个静态的公有函数用于创建或获取该静态私有实例。</p>\n<p>单例模式有 3 个特点：</p>\n<ul>\n<li>单例类只有一个实例对象</li>\n<li>该单例对象必须由单例类自行创建</li>\n<li>单例类对外提供一个访问该单例的全局访问点</li>\n</ul>\n<hr>\n<h2 id=\"UI-WEBHIS目录结构\"><a href=\"#UI-WEBHIS目录结构\" class=\"headerlink\" title=\"UI-WEBHIS目录结构\"></a>UI-WEBHIS目录结构</h2><p>本章主在展示driver类的封装，仅以挂号功能作为展示及验证。</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webhis-baoji(主目录)/</span><br><span class=\"line\">│</span><br><span class=\"line\">├── tool(工具子目录)/</span><br><span class=\"line\">│   └── driver.py(driver的封装)</span><br><span class=\"line\">│   └── function.py(函数的调用)</span><br><span class=\"line\">│</span><br><span class=\"line\">└── script(脚本子目录-功能)/\t# 以下为当前已实现功能脚本代码</span><br><span class=\"line\"><span class=\"code\">    └── login.py(登录-功能)</span></span><br><span class=\"line\"><span class=\"code\">    └── registered.py(门诊急挂号-功能)</span></span><br><span class=\"line\"><span class=\"code\">    └── orders_entry.py(门诊医嘱录入-功能)</span></span><br><span class=\"line\"><span class=\"code\">    └── &gt;&gt;&gt;...&lt;&lt;&lt;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"driver-py\"><a href=\"#driver-py\" class=\"headerlink\" title=\"driver.py\"></a>driver.py</h2><p>所需导包：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.chrome.service <span class=\"keyword\">import</span> Service</span><br><span class=\"line\"><span class=\"keyword\">import</span> pathlib</span><br></pre></td></tr></table></figure>\n\n<p>封装：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;Webhis-Baoji Chrome浏览器驱动 配置及调用&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;-----多个py文件共同调用同一个webhis-driver时, 使用以下方法-----&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DriverSingleton</span>:</span><br><span class=\"line\">    _instance = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">getInstance</span>():</span><br><span class=\"line\">        <span class=\"keyword\">if</span> DriverSingleton._instance == <span class=\"literal\">None</span>:</span><br><span class=\"line\">            options = webdriver.ChromeOptions()</span><br><span class=\"line\">            options.add_experimental_option(<span class=\"string\">&#x27;excludeSwitches&#x27;</span>, [<span class=\"string\">&#x27;enable-logging&#x27;</span>])</span><br><span class=\"line\">            options.add_experimental_option(<span class=\"string\">&quot;excludeSwitches&quot;</span>, [<span class=\"string\">&quot;enable-automation&quot;</span>])</span><br><span class=\"line\">            options.add_experimental_option(<span class=\"string\">&quot;useAutomationExtension&quot;</span>, <span class=\"string\">&#x27;False&#x27;</span>)</span><br><span class=\"line\">            options.add_argument(<span class=\"string\">&quot;--user-data-dir=&quot;</span> + <span class=\"built_in\">str</span>(pathlib.Path.home()) + <span class=\"string\">r&quot;\\AppData\\Local\\Google\\Chrome\\seleniumTest&quot;</span>)</span><br><span class=\"line\">            DriverSingleton._instance = webdriver.Chrome(service=Service(<span class=\"string\">r&#x27;C:\\Program Files\\Google\\Chrome\\Application\\chromedriver.exe&#x27;</span>), options=options)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> DriverSingleton._instance</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;-----单个py文件单独调用webhis-driver时, 使用以下方法-----&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">options = webdriver.ChromeOptions()</span></span><br><span class=\"line\"><span class=\"string\">options.add_experimental_option(&#x27;excludeSwitches&#x27;, [&#x27;enable-logging&#x27;])</span></span><br><span class=\"line\"><span class=\"string\">options.add_experimental_option(&quot;excludeSwitches&quot;, [&quot;enable-automation&quot;])</span></span><br><span class=\"line\"><span class=\"string\">options.add_experimental_option(&quot;useAutomationExtension&quot;, &#x27;False&#x27;)</span></span><br><span class=\"line\"><span class=\"string\">options.add_argument(&quot;--user-data-dir=&quot; + str(pathlib.Path.home()) + r&quot;\\AppData\\Local\\Google\\Chrome\\seleniumTest&quot;)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># 创建 WebDriver 对象, 指明使用chrome浏览器驱动</span></span><br><span class=\"line\"><span class=\"string\">driver = webdriver.Chrome(service=Service(r&#x27;C:\\Program Files\\Google\\Chrome\\Application\\chromedriver.exe&#x27;), options=options)</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>在这个类中，_instance是一个类变量，用于存储DriverSingleton的实例。getInstance是一个静态方法，用于获取DriverSingleton的实例。</p>\n<ul>\n<li>如果_instance为None，则创建一个新的webdriver.Chrome实例并将其存储在_instance中。</li>\n</ul>\n<p>(webdriver.Chrome实例使用了一些特定的选项，例如禁用日志记录，禁用自动化，禁用自动化扩展，并设置用户数据目录)</p>\n<ul>\n<li>如果_instance不为None，则直接返回_instance。这就保证了无论何时调用getInstance方法，都会返回同一个webdriver.Chrome实例。</li>\n</ul>\n<p>这种设计模式在需要确保类只有一个实例，并且需要全局访问点的情况下非常有用。在这个情况下，webdriver.Chrome实例在整个应用程序中都使用同一个浏览器实例。</p>\n<hr>\n<h2 id=\"function-py\"><a href=\"#function-py\" class=\"headerlink\" title=\"function.py\"></a>function.py</h2><p>所需导包：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\">sys.path.append(<span class=\"string\">&#x27;C:\\webhispython\\Webhis-test\\webhis-baoji&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> inspect</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver <span class=\"keyword\">import</span> Keys</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.common.by <span class=\"keyword\">import</span> By</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.common.action_chains <span class=\"keyword\">import</span> ActionChains</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.support.ui <span class=\"keyword\">import</span> WebDriverWait</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.support <span class=\"keyword\">import</span> expected_conditions <span class=\"keyword\">as</span> EC</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.common.exceptions <span class=\"keyword\">import</span> NoSuchElementException</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"登录-函数模块\"><a href=\"#登录-函数模块\" class=\"headerlink\" title=\"登录-函数模块\"></a>登录-函数模块</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;---登录 模块---&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># login(driver， 用户名, 密码, 登录地点, 登录科室)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">login</span>(<span class=\"params\">driver, username, password, xpath_role, xpath_location</span>):  <span class=\"comment\"># login(用户名, 密码, 角色, 登录地点)</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">5</span>)  <span class=\"comment\"># 停止5秒，等待浏览器加载页面</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;系统登录首页&quot;&quot;&quot;</span></span><br><span class=\"line\">    driver.find_element(by=By.ID, value=<span class=\"string\">&#x27;login_username&#x27;</span>).send_keys(username)  <span class=\"comment\"># 用户名</span></span><br><span class=\"line\">    driver.find_element(by=By.ID, value=<span class=\"string\">&#x27;login_password&#x27;</span>).send_keys(password)  <span class=\"comment\"># 密码</span></span><br><span class=\"line\">    driver.find_element(by=By.ID, value=<span class=\"string\">&#x27;nextBtn&#x27;</span>).click()</span><br><span class=\"line\">    driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;登录详细选项页&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"comment\"># 角色下拉框选值</span></span><br><span class=\"line\">    item = driver.find_element(by=By.ID, value=<span class=\"string\">&#x27;entryForm_roleMstrId&#x27;</span>)</span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class=\"line\">    driver.find_element(by=By.XPATH, value=xpath_role).click()  <span class=\"comment\"># 选择角色</span></span><br><span class=\"line\">    driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 科室下拉框选值</span></span><br><span class=\"line\">    item = driver.find_element(by=By.ID, value=<span class=\"string\">&#x27;entryForm_locationMstrId&#x27;</span>)</span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class=\"line\">    driver.find_element(by=By.XPATH, value=xpath_location).click()  <span class=\"comment\"># 选择科室</span></span><br><span class=\"line\">    driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 点击登录跳转</span></span><br><span class=\"line\">    driver.find_element(by=By.ID, value=<span class=\"string\">&#x27;loginBtn&#x27;</span>).send_keys(Keys.ENTER)</span><br><span class=\"line\">    driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    time.sleep(<span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        function_name = inspect.currentframe().f_code.co_name</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;函数 <span class=\"subst\">&#123;function_name&#125;</span> 执行完成&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h3 id=\"门诊急挂号-函数模块\"><a href=\"#门诊急挂号-函数模块\" class=\"headerlink\" title=\"门诊急挂号-函数模块\"></a>门诊急挂号-函数模块</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;---门急诊挂号 模块---&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># registration(driver, 患者门诊病案号, 挂号资源代码)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">registration</span>(<span class=\"params\">driver, record_number, registration_resources_code</span>):  <span class=\"comment\"># 门急诊挂号</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">3</span>)  <span class=\"comment\"># 停止5秒，等待浏览器加载页面</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;进入门急诊挂号页面&quot;&quot;&quot;</span></span><br><span class=\"line\">    item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-global-header-common-trigger&#x27;]&quot;</span>)  <span class=\"comment\"># 展开大类菜单</span></span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@id=&#x27;root&#x27;]//*[@class=&#x27;ant-menu-submenu-title&#x27;]//*[text()=&#x27;门诊医生站&#x27;]&quot;</span>)  <span class=\"comment\"># 大类菜单</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@id=&#x27;root&#x27;]//*[@class=&#x27;ant-menu-item ant-menu-item-selected&#x27;]&quot;</span>)  <span class=\"comment\"># 子类菜单(门诊医生站)</span></span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;ant-tabs-nav-list&#x27;]//*[text()=&#x27;门诊急挂号&#x27;]&quot;</span>)  <span class=\"comment\"># 进入&quot;门急诊挂号&quot;页面</span></span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-global-header-common-trigger&#x27;]&quot;</span>)  <span class=\"comment\"># 缩回大类菜单</span></span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 显式等待, 至&quot;门急诊挂号&quot;ID加载后再执行</span></span><br><span class=\"line\">    wait = WebDriverWait(driver, <span class=\"number\">10</span>)</span><br><span class=\"line\">    wait.until(EC.presence_of_element_located((By.ID, <span class=\"string\">&#x27;rc-tabs-0-tab-5603808&#x27;</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;WPB选择患者&quot;&quot;&quot;</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">    item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//input[contains(@placeholder,&#x27;请输入姓名/手机号/病案号&#x27;)]&quot;</span>)</span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class=\"line\">    <span class=\"comment\"># 输入所需患者门诊病案号, 唯一身份对应信息</span></span><br><span class=\"line\">    driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//input[contains(@placeholder,&#x27;请输入姓名/手机号/病案号&#x27;)]&quot;</span>).send_keys(record_number)</span><br><span class=\"line\">    driver.implicitly_wait(<span class=\"number\">10</span>)  <span class=\"comment\"># 待WPB搜索框加载并检索出send的患者数据</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 定位第一条患者并点击选中</span></span><br><span class=\"line\">    item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;ant-table ant-table-layout-fixed ant-table-fixed-header&#x27;]//*[@class=&#x27;ant-table-tbody&#x27;]/tr[2]&quot;</span>)</span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class=\"line\">    time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;选择挂号资源&quot;&quot;&quot;</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">    item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@id=&#x27;rc-tabs-0-panel-5603808&#x27;]/div/div/div/div/div/div/div[1]/form/div/div[95]/div/div/div/span/div/div/div[2]/input&quot;</span>)</span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class=\"line\">    <span class=\"comment\"># 输入所需挂号资源代码, 唯一代码对应信息</span></span><br><span class=\"line\">    driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@id=&#x27;rc-tabs-0-panel-5603808&#x27;]/div/div/div/div/div/div/div[1]/form/div/div[95]/div/div/div/span/div/div/div[2]/input&quot;</span>).send_keys(registration_resources_code)</span><br><span class=\"line\">    driver.implicitly_wait(<span class=\"number\">5</span>)  <span class=\"comment\"># 待资源列表加载并检索出send的资源数据</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 定位第一条资源并点击选中</span></span><br><span class=\"line\">    driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//tr[@data-row-key=&#x27;0&#x27; and contains(@class, &#x27;ant-table-row-selected&#x27;)]&quot;</span>).click()</span><br><span class=\"line\">    driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;账户支付&quot;&quot;&quot;</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">    item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;regnRegistration_btnGroup_aOve9&#x27;]//*[contains(text(),&#x27;账户支付&#x27;)]&quot;</span>)</span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class=\"line\">    driver.implicitly_wait(<span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        driver.find_element(By.XPATH, <span class=\"string\">&quot;//*[text()=&#x27;挂号成功！&#x27;]&quot;</span>)</span><br><span class=\"line\">        driver.implicitly_wait(<span class=\"number\">20</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;--- ATTENTION: 患者挂号成功! ---&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> NoSuchElementException:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;--- ATTENTION: 函数正常运行 但未完成挂号, 注意网络延迟并重试! ---&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    time.sleep(<span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        function_name = inspect.currentframe().f_code.co_name</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;函数 <span class=\"subst\">&#123;function_name&#125;</span> 执行完成&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h3 id=\"门诊医嘱录入-函数模块\"><a href=\"#门诊医嘱录入-函数模块\" class=\"headerlink\" title=\"门诊医嘱录入-函数模块\"></a>门诊医嘱录入-函数模块</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;---门诊医嘱录入 模块---&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># outpatient_orders(drivr， 已有挂号患者， pickshell药品， 数量， 剂量， 用法， 频次, 周期)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">outpatient_orders</span>(<span class=\"params\">driver, patient_msg, order_insert, quantity, dosage, usage, frequency, cycle</span>):</span><br><span class=\"line\">    time.sleep(<span class=\"number\">5</span>)  <span class=\"comment\"># 停止5秒，等待浏览器加载页面</span></span><br><span class=\"line\"></span><br><span class=\"line\">    item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-global-header-common-trigger&#x27;]&quot;</span>)  <span class=\"comment\"># 展开大类菜单</span></span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@id=&#x27;root&#x27;]//*[@class=&#x27;ant-menu-submenu-title&#x27;]//*[text()=&#x27;门诊医生站&#x27;]&quot;</span>)  <span class=\"comment\"># 大类菜单</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@id=&#x27;root&#x27;]//*[@class=&#x27;ant-menu-item ant-menu-item-selected&#x27;]&quot;</span>)  <span class=\"comment\"># 子类菜单(门诊医生站)</span></span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;ant-tabs-nav-list&#x27;]//*[text()=&#x27;医生看诊&#x27;]&quot;</span>)  <span class=\"comment\"># 进入&quot;医生看诊&quot;页面</span></span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-global-header-common-trigger&#x27;]&quot;</span>)  <span class=\"comment\"># 缩回大类菜单</span></span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//button[@class=&#x27;ant-btn ant-btn-link ant-btn-icon-only&#x27;]&quot;</span>)  <span class=\"comment\"># 患者列表刷新</span></span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).click().perform()</span><br><span class=\"line\">    driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\">    driver.find_element(by=By.XPATH, value=patient_msg).click()  <span class=\"comment\"># 选中患者列表对应挂号患者</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 显式等待, 医嘱pickshell加载</span></span><br><span class=\"line\">    wait = WebDriverWait(driver, <span class=\"number\">10</span>)</span><br><span class=\"line\">    wait.until(EC.presence_of_element_located((By.XPATH,  <span class=\"string\">&quot;//*[@class=&#x27;kt-datapicker kt-datapicker-singleRow&#x27;]//*[@placeholder=&#x27;请输入&#x27;]&quot;</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 定位并点击医嘱pickshell -&gt; 传参, 输入医嘱名称</span></span><br><span class=\"line\">    item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-datapicker kt-datapicker-singleRow&#x27;]//*[@placeholder=&#x27;请输入&#x27;]&quot;</span>)</span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).click().send_keys(order_insert).perform()</span><br><span class=\"line\">    time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 选中列表第一条并点击</span></span><br><span class=\"line\">    driver.find_element(By.XPATH, <span class=\"string\">&#x27;//tr[@data-row-key=&quot;0&quot; and contains(@class, &quot;ant-table-row ant-table-row-level-0 kt-table-row-oddeven kt-row-selected-order-picker&quot;)]&#x27;</span>).click()</span><br><span class=\"line\">    time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;患者当前医嘱列表重复开立弹窗判断&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        wait = WebDriverWait(driver, <span class=\"number\">3</span>)</span><br><span class=\"line\">        wait.until(EC.presence_of_element_located((By.XPATH, <span class=\"string\">&quot;//*[text()=&#x27;已经开立，是否继续？&#x27;]&quot;</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">        confirm_button = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[text()=&#x27;确定&#x27;]&quot;</span>)</span><br><span class=\"line\">        confirm_button.click()</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;---该医嘱可为此患者开立---&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;----------数量----------&quot;&quot;&quot;</span></span><br><span class=\"line\">    item = driver.find_element(by=By.ID, value=<span class=\"string\">&quot;orderQtyId1&quot;</span>)</span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).send_keys(quantity).perform()</span><br><span class=\"line\">    driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;----------剂量----------&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"comment\"># &#x27;剂量&#x27;框存在未知异常，无法定位元素</span></span><br><span class=\"line\">    <span class=\"comment\"># 又因前端约束 医嘱落入列表后光标自动定位到&#x27;数量&#x27;框，故使用ActionChains方法模拟TAB操作跳到&#x27;用法&#x27;框</span></span><br><span class=\"line\">    actions = ActionChains(driver)</span><br><span class=\"line\">    actions.send_keys(Keys.TAB, Keys.TAB).perform()</span><br><span class=\"line\">    actions.send_keys(dosage).perform()</span><br><span class=\"line\">    driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;----------用法----------&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"comment\"># //*[@class=&#x27;kt-editable-cell tabIndex4&#x27;]//input</span></span><br><span class=\"line\">    item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-editable-cell tabIndex4&#x27;]&quot;</span>)</span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).click().perform()</span><br><span class=\"line\">    time.sleep(<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 采用上述处理&#x27;剂量&#x27;框异常的方法后，又有未知原因 click定位到&#x27;用法&#x27;框后，光标会重新回到&#x27;剂量&#x27;框</span></span><br><span class=\"line\">    <span class=\"comment\"># 故使用两次click定位&#x27;用法&#x27;框方法，来避免光标异常定位问题，经测试此方法有效</span></span><br><span class=\"line\">    item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-editable-cell tabIndex4&#x27;]&quot;</span>)</span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).click().perform()</span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-editable-cell tabIndex4&#x27;]&quot;</span>)</span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).send_keys(usage).perform()</span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).send_keys(Keys.ENTER).perform()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 未知原因 用法框send_key后仍会再弹出下拉框，故设计为传参后立刻点击一处不可编辑区别，强制退出该输入框</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">    driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-global-header-common-logo-icon&#x27;]&quot;</span>).click()</span><br><span class=\"line\">    driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;----------频次----------&quot;&quot;&quot;</span></span><br><span class=\"line\">    item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-editable-cell tabIndex5&#x27;]&quot;</span>)</span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).click().perform()</span><br><span class=\"line\">    driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-editable-cell tabIndex5&#x27;]&quot;</span>)</span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).send_keys(frequency).perform()</span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).send_keys(Keys.ENTER).perform()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 未知原因 频次框send_key后仍会再弹出下拉框，故设计为传参后立刻点击一处不可编辑区别，强制退出该输入框</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">    driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-global-header-common-logo-icon&#x27;]&quot;</span>).click()</span><br><span class=\"line\">    driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;----------周期----------&quot;&quot;&quot;</span></span><br><span class=\"line\">    item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-editable-cell tabIndex6&#x27;]&quot;</span>)</span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).click().perform()</span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-editable-cell tabIndex6&#x27;]&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4</span>):</span><br><span class=\"line\">        webdriver.ActionChains(driver).move_to_element(item).send_keys(Keys.BACKSPACE).perform()</span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-editable-cell tabIndex6&#x27;]&quot;</span>)</span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).send_keys(cycle).perform()</span><br><span class=\"line\">    time.sleep(<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;医嘱保存&quot;&quot;&quot;</span></span><br><span class=\"line\">    driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;diagnosisAnYang_secondLineItem_RITqA diagnosisAnYang_iconCursor_Jv_RO&#x27;]//*[text()=&#x27;保存&#x27;]&quot;</span>).click()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;患者医嘱重复预警弹窗判断&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        wait = WebDriverWait(driver, <span class=\"number\">3</span>)</span><br><span class=\"line\">        wait.until(EC.presence_of_element_located((By.XPATH, <span class=\"string\">&quot;//*[@class=&#x27;ant-modal&#x27;]//*[text()=&#x27;医嘱重复报警&#x27;]&quot;</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">        confirm_button = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[text()=&#x27;强制保存&#x27;]&quot;</span>)</span><br><span class=\"line\">        webdriver.ActionChains(driver).move_to_element(confirm_button).click().perform()</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;---该医嘱可为此患者开立---&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;医嘱保存成功弹窗校验&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        item = driver.find_element(By.XPATH, <span class=\"string\">&quot;//*[text()=&#x27;医嘱保存成功&#x27;]&quot;</span>)</span><br><span class=\"line\">        webdriver.ActionChains(driver).move_to_element(item).perform()</span><br><span class=\"line\">        driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;--- ATTENTION: 医嘱保存成功! ---&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> NoSuchElementException:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;--- ATTENTION: 函数正常运行 但未成功保存医嘱，注意网络延迟并重试! ---&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    time.sleep(<span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        function_name = inspect.currentframe().f_code.co_name</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;函数 <span class=\"subst\">&#123;function_name&#125;</span> 执行完成&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h3 id=\"WPB选择患者-函数模块\"><a href=\"#WPB选择患者-函数模块\" class=\"headerlink\" title=\"WPB选择患者-函数模块\"></a>WPB选择患者-函数模块</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;---WPB选择患者 模块---&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># wpb_select(driver, 患者门诊病案号)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">wpb_select</span>(<span class=\"params\">driver, record_number</span>):</span><br><span class=\"line\">    time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//input[contains(@placeholder,&#x27;请输入姓名/手机号/病案号&#x27;)]&quot;</span>)</span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class=\"line\">    <span class=\"comment\"># 输入所需患者门诊病案号, 唯一身份对应信息</span></span><br><span class=\"line\">    driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//input[contains(@placeholder,&#x27;请输入姓名/手机号/病案号&#x27;)]&quot;</span>).send_keys(record_number)</span><br><span class=\"line\">    driver.implicitly_wait(<span class=\"number\">10</span>)  <span class=\"comment\"># 待WPB搜索框加载并检索出send的患者数据</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 定位第一条患者并点击选中</span></span><br><span class=\"line\">    item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;ant-table ant-table-layout-fixed ant-table-fixed-header&#x27;]//*[@class=&#x27;ant-table-tbody&#x27;]/tr[2]&quot;</span>)</span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class=\"line\">    driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    time.sleep(<span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        function_name = inspect.currentframe().f_code.co_name</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;函数 <span class=\"subst\">&#123;function_name&#125;</span> 执行完成&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h1 id=\"Webhis-门诊急挂号-流程测试脚本\"><a href=\"#Webhis-门诊急挂号-流程测试脚本\" class=\"headerlink\" title=\"Webhis-门诊急挂号-流程测试脚本\"></a>Webhis-门诊急挂号-流程测试脚本</h1><img src=\"/posts/e4f344ea/Outpatient_registration.png\" class=\"\">\n\n<h2 id=\"registration-py\"><a href=\"#registration-py\" class=\"headerlink\" title=\"registration.py\"></a>registration.py</h2><h3 id=\"所需导包\"><a href=\"#所需导包\" class=\"headerlink\" title=\"所需导包\"></a>所需导包</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\">sys.path.append(<span class=\"string\">&#x27;C:\\webhispython\\Webhis-test\\webhis-baoji&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> tool.driver <span class=\"keyword\">import</span> DriverSingleton  <span class=\"comment\"># 从tool目录driver.py下，调用公用driver驱动</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> tool.function <span class=\"keyword\">import</span> login, registration  <span class=\"comment\"># 从tool目录function.py下，调用login()和registration()函数</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"主函数\"><a href=\"#主函数\" class=\"headerlink\" title=\"主函数\"></a>主函数</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">driver = DriverSingleton.getInstance()  <span class=\"comment\"># 从driver.py下调用DriverSingleton.getInstance()方法以打开同一个driver实例</span></span><br><span class=\"line\">driver.get(url=<span class=\"string\">&quot;http://10.227.16.12/login&quot;</span>)</span><br><span class=\"line\">driver.maximize_window()</span><br><span class=\"line\"><span class=\"comment\"># time.sleep(5)  # 停止5秒，等待浏览器加载页面</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    login(driver, <span class=\"string\">&#x27;RZX&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&quot;//*[text()=&#x27;门急诊医生&#x27;]&quot;</span>, <span class=\"string\">&quot;//*[text()=&#x27;神经内科二科门诊&#x27;]&quot;</span>)  <span class=\"comment\"># 用户名, 密码, 登录地点, 登录科室</span></span><br><span class=\"line\">    registration(driver, <span class=\"string\">&#x27;0000000034&#x27;</span>, <span class=\"string\">&#x27;ZZHRZX&#x27;</span>)  <span class=\"comment\"># &#x27;测试01&#x27;门诊病案号&#x27;0000000034&#x27;, &#x27;专家号-RZX&#x27;挂号资源代码&#x27;ZZHRZX&#x27;</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Success!&quot;</span>)</span><br><span class=\"line\">    driver.quit()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>调用 driver.py 中 DriverSingleton 方法下的浏览器驱动 ，作为 driver 被脚本调用</li>\n<li>主函数走 function.py 中的 login() 函数进行登录</li>\n<li>再走 function.py 中的 registration() 函数进行门诊挂号</li>\n</ol>\n<p>登录函数 login() 传参： 用户名username， 密码password，登录角色xpath_role，登录地点xpath_location</p>\n<p>挂号函数 registration() 传参： 门诊患者病案号record_number， 挂号资源代码registration_resources_code</p>\n<hr>\n<h1 id=\"Webhis-门诊单个医嘱录入-流程测试脚本\"><a href=\"#Webhis-门诊单个医嘱录入-流程测试脚本\" class=\"headerlink\" title=\"Webhis-门诊单个医嘱录入-流程测试脚本\"></a>Webhis-门诊单个医嘱录入-流程测试脚本</h1><img src=\"/posts/e4f344ea/Outpatient_doctor_station.png\" class=\"\">\n\n<h2 id=\"orders-entry-py\"><a href=\"#orders-entry-py\" class=\"headerlink\" title=\"orders_entry.py\"></a>orders_entry.py</h2><h3 id=\"所需导包-1\"><a href=\"#所需导包-1\" class=\"headerlink\" title=\"所需导包\"></a>所需导包</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\">sys.path.append(<span class=\"string\">&#x27;C:\\webhispython\\Webhis-test\\webhis-baoji&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> tool.driver <span class=\"keyword\">import</span> DriverSingleton  <span class=\"comment\"># 从tool目录driver.py下，调用公用driver驱动</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> tool.function <span class=\"keyword\">import</span> login, outpatient_orders  <span class=\"comment\"># 从tool目录function.py下，调用login()和outpatient_orders()函数</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"主函数-1\"><a href=\"#主函数-1\" class=\"headerlink\" title=\"主函数\"></a>主函数</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">driver = DriverSingleton.getInstance()  <span class=\"comment\"># 从driver.py下调用DriverSingleton.getInstance()方法以打开同一个driver实例</span></span><br><span class=\"line\">driver.get(url=<span class=\"string\">&quot;http://10.227.16.12/login&quot;</span>)</span><br><span class=\"line\">driver.maximize_window()</span><br><span class=\"line\">time.sleep(<span class=\"number\">5</span>)  <span class=\"comment\"># 停止5秒，等待浏览器加载页面</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># driver， 用户名, 密码, 登录地点, 登录科室</span></span><br><span class=\"line\">    login(driver, <span class=\"string\">&#x27;RZX&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&quot;//*[text()=&#x27;门急诊医生&#x27;]&quot;</span>, <span class=\"string\">&quot;//*[text()=&#x27;神经内科二科门诊&#x27;]&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># drivr， 已有挂号患者， pickshell药品， 数量， 剂量， 用法， 频次， 周期</span></span><br><span class=\"line\">    outpatient_orders(driver, <span class=\"string\">&quot;//*[text()=&#x27;测试01 13:54 知名专家号&#x27;]&quot;</span>, <span class=\"string\">&quot;布洛芬缓释胶囊&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;10&quot;</span>, <span class=\"string\">&quot;口服&quot;</span>, <span class=\"string\">&quot;qd8&quot;</span>, <span class=\"string\">&quot;3&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    time.sleep(<span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Success!&quot;</span>)</span><br><span class=\"line\">    driver.quit()</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>调用 driver.py 中 DriverSingleton 方法下的浏览器驱动 ，作为 driver 被脚本调用</li>\n<li>主函数走 function.py 中的 login() 函数进行登录</li>\n<li>再走 function.py 中的 outpatient_orders() 函数进行医嘱录入</li>\n</ol>\n<p>登录函数 login() 传参：driver，用户名username，密码password，登录角色xpath_role，登录地点xpath_location</p>\n<p>医嘱录入函数 outpatient_orders() 传参：driver，已有挂号患者patient_msg，pickshell药品order_insert，数量quantity，剂量dosage，用法，频次frequency，周期cycle</p>\n<hr>\n<h1 id=\"Webhis-门诊自定义多医嘱录入-流程测试脚本详解\"><a href=\"#Webhis-门诊自定义多医嘱录入-流程测试脚本详解\" class=\"headerlink\" title=\"Webhis-门诊自定义多医嘱录入-流程测试脚本详解\"></a>Webhis-门诊自定义多医嘱录入-流程测试脚本详解</h1><h2 id=\"前情摘要\"><a href=\"#前情摘要\" class=\"headerlink\" title=\"前情摘要\"></a>前情摘要</h2><p>​\t\t该脚本利用登录、挂号、医嘱等函数，selenium、ActionChains、webdriver等将前面所展示的内容做了一个整合，以实现从编译器终端录入多种医嘱的效果，代码量将近四百行，多以调用函数的方式运行，总耗时大概三周的闲暇时间搞定。</p>\n<p>​\t\t由于 宝鸡项目Web端 门诊医生站开立医嘱 会存在很多特殊情况，不同的医嘱类型、不同的维护、不同的页面参数，系统参数都会导致Web前端页面的效果不同，会出现不同的弹窗等，针对多种情况去做脚本的判断部分没有意义，故此脚本为UI自动化测试脚本的终章。</p>\n<p>​\t\t以下详解部分，也将更详细的切分脚本的代码，附上更多的效果图，以便更好的理解其实现的流程及原理。</p>\n<hr>\n<h2 id=\"所需导包-2\"><a href=\"#所需导包-2\" class=\"headerlink\" title=\"所需导包\"></a>所需导包</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\">sys.path.append(<span class=\"string\">&#x27;C:\\webhispython\\Webhis-test\\webhis-baoji&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> pathlib</span><br><span class=\"line\"><span class=\"keyword\">import</span> inspect</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver <span class=\"keyword\">import</span> Keys</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.common.by <span class=\"keyword\">import</span> By</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.common.action_chains <span class=\"keyword\">import</span> ActionChains</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.support.ui <span class=\"keyword\">import</span> WebDriverWait</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.support <span class=\"keyword\">import</span> expected_conditions <span class=\"keyword\">as</span> EC</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.common.exceptions <span class=\"keyword\">import</span> NoSuchElementException</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.chrome.service <span class=\"keyword\">import</span> Service</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"driver的调用及设置\"><a href=\"#driver的调用及设置\" class=\"headerlink\" title=\"driver的调用及设置\"></a>driver的调用及设置</h2><ul>\n<li>对新调用的 Google 浏览器的启动参数进行设置：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">options = webdriver.ChromeOptions()</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>使用Cursor的编译器执行脚本，脚本运行过程中，终端会时不时弹出一些ERROR信息，很影响脚本中的print打印内容显示。</p>\n<p>例如：[ERROR:ssl_client_socket_impl.cc(968)] handshake failed; returned -1, SSL error code 1, net_error -101</p>\n<p>这个错误信息是由于 SSL 握手失败导致的，宝鸡Webhis系统由本地启动，通过VPN访问远程服务器，SSL证书问题等并不需要着重考虑。</p>\n<p>故使用以下两项设置，以强制关闭诸如此类的警告打印：</p>\n<ul>\n<li>设置 Chrome 的日志级别，3表示只记录ERROR级别的日志：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">options.add_argument(<span class=\"string\">&#x27;--log-level=3&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>禁用了 Chrome 的日志记录功能。这可以使得 Chrome 在运行时更加安静，不会输出不必要的日志信息：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">options.add_experimental_option(<span class=\"string\">&#x27;excludeSwitches&#x27;</span>, [<span class=\"string\">&#x27;enable-logging&#x27;</span>])</span><br></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li>该设置禁用了 Chrome 的自动化控制提示。在使用 Selenium 控制 Chrome 时，浏览器顶部的 “Chrome正在受到自动软件的控制” 这个提示将不会出现：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">options.add_experimental_option(<span class=\"string\">&quot;excludeSwitches&quot;</span>, [<span class=\"string\">&quot;enable-automation&quot;</span>])</span><br></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li>该设置禁用了 Chrome 的自动化扩展。这可以防止 Chrome 在启动时加载不必要的扩展，从而提高启动速度：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">options.add_experimental_option(<span class=\"string\">&quot;useAutomationExtension&quot;</span>, <span class=\"string\">&#x27;False&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li>这个设置约束了 Chrome 的本地数据目录。这意味着 Chrome 将会在这个目录下存储用户的个人信息，如浏览历史、书签等。这个选项可以在多次运行 Selenium 时保持相同的浏览环境：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">options.add_argument(<span class=\"string\">&quot;--user-data-dir=&quot;</span> + <span class=\"built_in\">str</span>(pathlib.Path.home()) + <span class=\"string\">r&quot;\\AppData\\Local\\Google\\Chrome\\seleniumTest&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li>创建 WebDriver 对象, 指明使用chrome浏览器驱动，并进行以上options的设置：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">driver = webdriver.Chrome(service=Service(<span class=\"string\">r&#x27;C:\\Program Files\\Google\\Chrome\\Application\\chromedriver.exe&#x27;</span>), options=options)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li>调项目环境URL，启动浏览器自动化脚本控制：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">driver.get(url=<span class=\"string\">&quot;http://10.227.16.12/login&quot;</span>)</span><br><span class=\"line\">driver.maximize_window()</span><br><span class=\"line\">time.sleep(<span class=\"number\">3</span>)  <span class=\"comment\"># 强制停止5秒，等待浏览器加载页面</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"登录-函数模块-1\"><a href=\"#登录-函数模块-1\" class=\"headerlink\" title=\"登录-函数模块\"></a>登录-函数模块</h2><p>项目系统登录页面有主页面和子页面之分，主页面输入登录账户密码，子页面选择登录人的角色及登录地点。</p>\n<p>登录函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">login</span>(<span class=\"params\">driver, username, password, xpath_role, xpath_location</span>):  <span class=\"comment\"># login(用户名, 密码, 角色, 登录地点)</span></span><br></pre></td></tr></table></figure>\n\n<p>登录主页面：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;脚本已进入 [登录菜单] &quot;</span>)</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;系统登录首页&quot;&quot;&quot;</span></span><br><span class=\"line\">driver.find_element(by=By.ID, value=<span class=\"string\">&#x27;login_username&#x27;</span>).send_keys(username)  <span class=\"comment\"># 用户名</span></span><br><span class=\"line\">driver.find_element(by=By.ID, value=<span class=\"string\">&#x27;login_password&#x27;</span>).send_keys(password)  <span class=\"comment\"># 密码</span></span><br><span class=\"line\">driver.find_element(by=By.ID, value=<span class=\"string\">&#x27;nextBtn&#x27;</span>).click()</span><br><span class=\"line\">driver.implicitly_wait(<span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure>\n\n<img src=\"/posts/e4f344ea/%E7%99%BB%E5%BD%95%E4%B8%BB%E9%A1%B5%E9%9D%A2.png\" class=\"\">\n\n<p>登录子页面：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;登录详细选项页&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;脚本已进入 [登录子菜单] &quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 角色下拉框选值</span></span><br><span class=\"line\">item = driver.find_element(by=By.ID, value=<span class=\"string\">&#x27;entryForm_roleMstrId&#x27;</span>)</span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class=\"line\">driver.find_element(by=By.XPATH, value=xpath_role).click()  <span class=\"comment\"># 选择角色</span></span><br><span class=\"line\">driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 科室下拉框选值</span></span><br><span class=\"line\">item = driver.find_element(by=By.ID, value=<span class=\"string\">&#x27;entryForm_locationMstrId&#x27;</span>)</span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class=\"line\">driver.find_element(by=By.XPATH, value=xpath_location).click()  <span class=\"comment\"># 选择科室</span></span><br><span class=\"line\">driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 点击登录跳转</span></span><br><span class=\"line\">driver.find_element(by=By.ID, value=<span class=\"string\">&#x27;loginBtn&#x27;</span>).send_keys(Keys.ENTER)</span><br><span class=\"line\">driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<img src=\"/posts/e4f344ea/%E7%99%BB%E5%BD%95%E5%AD%90%E9%A1%B5%E9%9D%A2.png\" class=\"\">\n\n<hr>\n<h2 id=\"门诊多医嘱录入-函数模块-重\"><a href=\"#门诊多医嘱录入-函数模块-重\" class=\"headerlink\" title=\"门诊多医嘱录入-函数模块 [重]\"></a>门诊多医嘱录入-函数模块 [重]</h2><h3 id=\"整体结构概述\"><a href=\"#整体结构概述\" class=\"headerlink\" title=\"整体结构概述\"></a>整体结构概述</h3><p>医嘱录入的过程本身就是顺序执行到底的，所以这部分脚本代码也保持顺序执行的逻辑。本意就是想要设计一个能够自主任意的录入多次多种医嘱的脚本，所以设计了 函数嵌套的方式，以实现循环执行录入医嘱的函数，通过终端输入的方式，自主决定录入不同数量的医嘱、不同种类的医嘱。</p>\n<p>当然，编译器终端输入以实现可控制性的方法固然是最原始最笨的办法，因为在脚本执行的过程中，driver调用的浏览器窗口设定为最大化maxmize_window；而每次自定义选择医嘱时，又需要切出浏览器，在终端存值，会很影响感官。</p>\n<ul>\n<li>我能设想到的最理想的是，用前端方法设计一个大小合适且可拖动调整的小窗，同步编译器终端的功能，可通过小窗输入输出终端内容，并将该窗口置于可视桌面最前端，这样既能看到浏览器自动化运行的过程，又能快捷终端输入输出，也不会很影响视觉。这想法只能说以我当前能力是无法实现的了，以后如果有机会，可以拓展到其他工作项目的自动化脚本里去。</li>\n</ul>\n<p>多医嘱录入函数的框架大致如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">outpatient_orders</span>(<span class=\"params\">driver, patient_msg</span>):</span><br><span class=\"line\">    ...  <span class=\"comment\"># 脚本进入医生看诊页面的代码执行</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">orders_entry_main</span>():</span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">loop_entry</span>(<span class=\"params\">entry</span>):</span><br><span class=\"line\">            <span class=\"keyword\">match</span> entry:</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;1&#x27;</span>: pickshell医嘱</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;2&#x27;</span>: 检验类医嘱</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;3&#x27;</span>: 检查类医嘱</span><br><span class=\"line\">                <span class=\"keyword\">case</span> _: 提示输入错误</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            entry = <span class=\"built_in\">input</span>()</span><br><span class=\"line\">            loop_entry(entry)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> entry == <span class=\"string\">&#x27;0&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">    orders_entry_main()</span><br><span class=\"line\">outpatient_orders(driver, patient_msg)</span><br></pre></td></tr></table></figure>\n\n<p>函数嵌套方法：</p>\n<ul>\n<li>loop_entry()函数传参entry，通过match…case方法，读取entry的值，进而进行不同的case操作，以实现参数控制代码执行范围，自定义选择开立的医嘱类型</li>\n<li>orders_entry_main()函数通过while True无限循环调用loop_entry()函数，entry通过终端键盘input输入的方法传参给loop_entry()，输入字符’0’时跳出循环</li>\n<li>outpatient_orders()函数传参patient_msg，脚本进入到医生看诊页面后，选中对应挂号患者patient_msg，以为指定患者开立医嘱执行嵌套内的函数</li>\n</ul>\n<hr>\n<h3 id=\"脚本进入医生看诊页面\"><a href=\"#脚本进入医生看诊页面\" class=\"headerlink\" title=\"脚本进入医生看诊页面\"></a>脚本进入医生看诊页面</h3><img src=\"/posts/e4f344ea/%E5%8C%BB%E7%94%9F%E7%9C%8B%E8%AF%8A%E9%A1%B5%E9%9D%A2.png\" class=\"\">\n\n<p>① 展开大类主菜单，并进入门诊医生站对应的大类菜单：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-global-header-common-trigger&#x27;]&quot;</span>)  <span class=\"comment\"># 展开大类菜单</span></span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class=\"line\">time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@id=&#x27;root&#x27;]//*[@class=&#x27;ant-menu-submenu-title&#x27;]//*[text()=&#x27;门诊医生站&#x27;]&quot;</span>)  <span class=\"comment\"># 大类菜单</span></span><br><span class=\"line\">time.sleep(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<p>② 进入子类菜单，并进入医生看诊页面：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@id=&#x27;root&#x27;]//*[@class=&#x27;ant-menu-item ant-menu-item-selected&#x27;]&quot;</span>)  <span class=\"comment\"># 子类菜单(门诊医生站)</span></span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class=\"line\">time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;ant-tabs-nav-list&#x27;]//*[text()=&#x27;医生看诊&#x27;]&quot;</span>)  <span class=\"comment\"># 进入&quot;医生看诊&quot;页面</span></span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;脚本已切换到 [门诊医生站] 页面&quot;</span>)</span><br><span class=\"line\">time.sleep(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<p>③ 选中患者，进入门诊医生站待录入医嘱：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//button[@class=&#x27;ant-btn ant-btn-link ant-btn-icon-only&#x27;]&quot;</span>)  <span class=\"comment\"># 患者列表刷新</span></span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).click().perform()</span><br><span class=\"line\">driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\">driver.find_element(by=By.XPATH, value=patient_msg).click()  <span class=\"comment\"># 选中患者列表对应挂号患者</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;已选中 门诊挂号患者[ %s ]&quot;</span> % patient_msg)</span><br><span class=\"line\">time.sleep(<span class=\"number\">5</span>)  <span class=\"comment\"># 强制等待页面加载, 待患者信息、门诊医生站功能加载</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"pickshell医嘱录入功能的实现\"><a href=\"#pickshell医嘱录入功能的实现\" class=\"headerlink\" title=\"pickshell医嘱录入功能的实现\"></a>pickshell医嘱录入功能的实现</h3><img src=\"/posts/e4f344ea/pickshell%E8%BE%93%E5%85%A5%E5%8C%BB%E5%98%B1.png\" class=\"\">\n\n<p>如上图，以 medicine传参医嘱完整全称 定位到pickshell输入框。部分医嘱例如葡萄糖注射液，列表会显示名称带有“葡萄糖注射液”的所有医嘱，会出现不同浓度、不同规格、不同厂商等多种葡萄糖注射液医嘱，此处并不做特殊情况的考虑，均定位到列表内第一条医嘱并点击。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">medicine = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入所要开立的pickshell药品完整名称: &quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-datapicker kt-datapicker-singleRow&#x27;]//*[@placeholder=&#x27;请输入&#x27;]&quot;</span>)</span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).click().send_keys(medicine).perform()</span><br><span class=\"line\">time.sleep(<span class=\"number\">3</span>)  <span class=\"comment\"># 强制等待给检索医嘱列表的加载时间</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定位并选择目录列表第一条医嘱</span></span><br><span class=\"line\">driver.find_element(By.XPATH, <span class=\"string\">&#x27;//tr[@data-row-key=&quot;0&quot; and contains(@class, &quot;ant-table-row ant-table-row-level-0 kt-table-row-oddeven kt-row-selected-order-picker&quot;)]&#x27;</span>).click()</span><br><span class=\"line\">time.sleep(<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<img src=\"/posts/e4f344ea/%E5%8C%BB%E5%98%B1%E9%87%8D%E5%A4%8D%E5%BC%B9%E7%AA%97.png\" class=\"\">\n\n<p>如上图，医嘱落入医生站时有多个校验，医嘱重复校验弹窗就是其一。当该患者的医嘱列表存在相同医嘱，会出现并需要判断点击。故在脚本代码中使用try…except…方法同步进行校验。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;患者当前医嘱列表重复开立弹窗判断&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">\twait = WebDriverWait(driver, <span class=\"number\">10</span>)</span><br><span class=\"line\">\twait.until(EC.presence_of_element_located((By.XPATH, <span class=\"string\">&quot;//*[text()=&#x27;已经开立，是否继续？&#x27;]&quot;</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">\tconfirm_button = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[text()=&#x27;确定&#x27;]&quot;</span>)</span><br><span class=\"line\">\tconfirm_button.click()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<img src=\"/posts/e4f344ea/%E5%8C%BB%E5%98%B1%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF%E5%BD%95%E5%85%A5.png\" class=\"\">\n\n<p>医嘱落入医生站后，则需要对其医嘱的信息进行手动的填写了，过程都是类似的，但是这部分内容一直存在历史bug，前端开发在此处放置的下拉框会出现异常跳转、光标回弹的问题。<strong>撰写此处脚本的时候，着实是见识到了水货开发的实力</strong>。。。当然脚本代码也用了最原始最简单的方法避免这些bug：time.sleep()设定强制等待、点击其他空白可定位位置以防止原本sendkeys的值消失、在前端光标自动回弹后再重复定位下一个元素重新存值。</p>\n<p>上述所说的前端bug问题具体为：光标定位到“剂量”框并存值后，切到下一个“用法”框时，光标会自动跳转回“剂量”框去；有时脚本在执行过程中，已向“用法”框存值后，切到其他输入框时，原存值会莫名消失等（此问题非必现，大多运行时正常，故脚本内并未做相关问题的解决方案；如果执行过程中复现此问题，只能重新录入或快速手动输入了）。。。</p>\n<ul>\n<li>“数量”输入框</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;----------数量----------&quot;&quot;&quot;</span></span><br><span class=\"line\">item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@id=&#x27;orderQtyId1&#x27;]&quot;</span>)</span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).send_keys(<span class=\"string\">&quot;3&quot;</span>).perform()  <span class=\"comment\"># &#x27;数量&#x27;固定存值&#x27;3&#x27;</span></span><br><span class=\"line\">driver.implicitly_wait(<span class=\"number\">3</span>)</span><br><span class=\"line\">time.sleep(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>“剂量”输入框</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;----------剂量----------&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># &#x27;剂量&#x27;框存在未知异常，无法定位元素</span></span><br><span class=\"line\"><span class=\"comment\"># 又因前端约束 医嘱落入列表后光标自动定位到&#x27;数量&#x27;框，故使用ActionChains方法模拟TAB操作跳到&#x27;用法&#x27;框</span></span><br><span class=\"line\">actions = ActionChains(driver)</span><br><span class=\"line\">actions.send_keys(Keys.TAB, Keys.TAB).perform()</span><br><span class=\"line\">actions.send_keys(<span class=\"string\">&quot;1&quot;</span>).perform()</span><br><span class=\"line\">driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\">time.sleep(<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>“用法”输入框</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;----------用法----------&quot;&quot;&quot;</span></span><br><span class=\"line\">item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-editable-cell tabIndex4&#x27;]&quot;</span>)</span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).click().perform()</span><br><span class=\"line\">time.sleep(<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 采用上述处理&#x27;剂量&#x27;框异常的方法后，又有未知原因 click定位到&#x27;用法&#x27;框后，光标会重新回到&#x27;剂量&#x27;框(前端代码问题)</span></span><br><span class=\"line\"><span class=\"comment\"># 故使用两次click定位&#x27;用法&#x27;框方法，来避免光标异常定位问题，经测试此方法有效</span></span><br><span class=\"line\">item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-editable-cell tabIndex4&#x27;]&quot;</span>)</span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).click().perform()</span><br><span class=\"line\">time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-editable-cell tabIndex4&#x27;]&quot;</span>)</span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).send_keys(<span class=\"string\">&quot;口服&quot;</span>).perform()</span><br><span class=\"line\">time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).send_keys(Keys.ENTER).perform()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 未知原因 用法框send_key后仍会再弹出下拉框，故设计为传参后立刻点击一处不可编辑区别，强制退出该输入框</span></span><br><span class=\"line\">time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-global-header-common-logo-icon&#x27;]&quot;</span>).click()</span><br><span class=\"line\">driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\">time.sleep(<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>“频次”输入框</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;----------频次----------&quot;&quot;&quot;</span></span><br><span class=\"line\">item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-editable-cell tabIndex5&#x27;]&quot;</span>)</span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).click().perform()</span><br><span class=\"line\">driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-editable-cell tabIndex5&#x27;]&quot;</span>)</span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).send_keys(<span class=\"string\">&quot;qd8&quot;</span>).perform()</span><br><span class=\"line\">time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).send_keys(Keys.ENTER).perform()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 未知原因 频次框send_key后仍会再弹出下拉框，故设计为传参后立刻点击一处不可编辑区别，强制退出该输入框</span></span><br><span class=\"line\">time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-global-header-common-logo-icon&#x27;]&quot;</span>).click()</span><br><span class=\"line\">driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\">time.sleep(<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>“周期”输入框</li>\n</ul>\n<p>在录入数量、剂量、频次后，系统会自动换算出“周期”所需的值，脚本在此处为测试能否正常传值，所以也采取传入固定值的方式。使用send_keys全选CTRL + A以清除“周期”内原有值的方法未生效，换成for循环连续4次进行BACKSPACE操作代替。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;----------周期----------&quot;&quot;&quot;</span></span><br><span class=\"line\">item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-editable-cell tabIndex6&#x27;]&quot;</span>)</span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).click().perform()</span><br><span class=\"line\">time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-editable-cell tabIndex6&#x27;]&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4</span>):</span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).send_keys(Keys.BACKSPACE).perform()</span><br><span class=\"line\">time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-editable-cell tabIndex6&#x27;]&quot;</span>)</span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).send_keys(<span class=\"string\">&quot;3&quot;</span>).perform()</span><br><span class=\"line\">time.sleep(<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>医嘱保存</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;医嘱保存&quot;&quot;&quot;</span></span><br><span class=\"line\">driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;diagnosisAnYang_secondLineItem_RITqA diagnosisAnYang_iconCursor_Jv_RO&#x27;]//*[text()=&#x27;保存&#x27;]&quot;</span>).click()</span><br></pre></td></tr></table></figure>\n\n<hr>\n<img src=\"/posts/e4f344ea/%E5%8C%BB%E5%98%B1%E4%BF%9D%E5%AD%98%E9%87%8D%E5%A4%8D%E6%A0%A1%E9%AA%8C.png\" class=\"\">\n\n<p>不光在开立医嘱时有医嘱重复校验，在最后保存医嘱列表时也会弹窗类似重复的校验。针对此类弹窗，采取相同方法，try…except…当定位到“强制保存”的文本，则点击此文本对应按钮，以确认关闭该校验弹窗。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;患者医嘱重复预警弹窗判断&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    confirm_button = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;ant-modal-body&#x27;]//button[text()=&#x27;强制保存&#x27;]&quot;</span>)</span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(confirm_button).click().perform()</span><br><span class=\"line\">    driver.implicitly_wait(<span class=\"number\">3</span>)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<img src=\"/posts/e4f344ea/%E5%8C%BB%E5%98%B1%E4%BF%9D%E5%AD%98%E6%88%90%E5%8A%9F%E6%A0%A1%E9%AA%8C.png\" class=\"\">\n\n<p>上述所有录入医嘱的操作执行完毕后，要对所有医嘱进行保存才可退出，点击保存后需要物理等待程序加载、数据库存值，保存成功会有“医嘱保存成功”弹窗。</p>\n<p>针对该弹窗的定位抓取，终端print打印脚本执行结果是我认为有必要的，所以增加了此脚本代码形式的校验。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;医嘱保存成功弹窗校验&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    item = driver.find_element(By.XPATH, <span class=\"string\">&quot;//*[text()=&#x27;医嘱保存成功&#x27;]&quot;</span>)</span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).perform()</span><br><span class=\"line\">    driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;--- ATTENTION: 医嘱保存成功! ---&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> NoSuchElementException:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;--- ATTENTION: 函数正常运行 但未成功保存医嘱，注意网络延迟并重试! ---&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><strong>pickshell医嘱开立 部分完整脚本运行截图：</strong></p>\n<img src=\"/posts/e4f344ea/pickshell%E8%BF%90%E8%A1%8C%E7%B3%BB%E7%BB%9F%E6%88%AA%E5%9B%BE.png\" class=\"\">\n\n<img src=\"/posts/e4f344ea/pickshell%E8%BF%90%E8%A1%8C%E7%BB%88%E7%AB%AF%E6%88%AA%E5%9B%BE.png\" class=\"\">\n\n<hr>\n<h3 id=\"检验类医嘱录入功能的实现\"><a href=\"#检验类医嘱录入功能的实现\" class=\"headerlink\" title=\"检验类医嘱录入功能的实现\"></a>检验类医嘱录入功能的实现</h3><img src=\"/posts/e4f344ea/%E6%A3%80%E9%AA%8C%E7%B1%BB%E5%8C%BB%E5%98%B1%E5%BC%80%E7%AB%8B%E6%96%B9%E6%B3%95.png\" class=\"\">\n\n<p>检验医嘱开立在功能上可以通过详细检验组分类，选择性显示不同类别的检验医嘱，从而勾选所需要的。但是这本就对于需变动脚本不便，自然也不必要使用此方式。索性直接用inspection_id传参项目代码，既具有唯一性，又可以跳过勾选多个复选框之一时麻烦的定位等问题。所以本脚本在执行检验类医嘱的过程只分为：打开页面 -&gt; 输入inspection_id -&gt; 勾选列表第一个复选框 -&gt; 点击确定。就能简洁且顺利的搞定此部分。</p>\n<ul>\n<li>进入“检验”类医嘱开立弹窗</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;按钮开立检验类医嘱&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;正在进入检验类医嘱开立弹窗...&quot;</span>)</span><br><span class=\"line\">item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;diagnosisAnYang_secondLine_BsP7f&#x27;]//*[text()=&#x27;检验&#x27;]&quot;</span>)</span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).click().perform()</span><br><span class=\"line\">time.sleep(<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>终端传参inspection_id项目代码</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 搜索框搜索 项目代码 以唯一性元素 定位所需项目</span></span><br><span class=\"line\">inspection_id = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入所要开立的检验类医嘱-项目代码: &quot;</span>)</span><br><span class=\"line\">item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;labReqApplicationDialog_container_J2E8u&#x27;]//input[contains(@placeholder,&#x27;请输入项目描述/项目代码&#x27;)]&quot;</span>)</span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).click().send_keys(inspection_id).send_keys(Keys.ENTER).perform()</span><br><span class=\"line\">driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\">time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>勾选列表下第一个复选框，点击确定按钮并保存医嘱</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;ant-table-body&#x27;]//*[@class=&#x27;ant-table-row ant-table-row-level-0&#x27;]//input[1]&quot;</span>)</span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).click().perform()</span><br><span class=\"line\">driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\">time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-dialog-footer kt-portal-footer-container&#x27;]//button[text()=&#x27;确定&#x27;]&quot;</span>)</span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).click().perform()</span><br><span class=\"line\">driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\">time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;医嘱保存&quot;&quot;&quot;</span></span><br><span class=\"line\">driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;diagnosisAnYang_secondLineItem_RITqA diagnosisAnYang_iconCursor_Jv_RO&#x27;]//*[text()=&#x27;保存&#x27;]&quot;</span>).click()</span><br><span class=\"line\">time.sleep(<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>医嘱保存成功校验</li>\n</ul>\n<p>效果同pickshell的医嘱保存成功校验</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;医嘱保存成功弹窗校验&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">wait = WebDriverWait(driver, <span class=\"number\">10</span>)</span><br><span class=\"line\">wait.until(EC.presence_of_element_located((By.XPATH, <span class=\"string\">&quot;//*[text()=&#x27;医嘱保存成功&#x27;]&quot;</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">item = driver.find_element(By.XPATH, <span class=\"string\">&quot;//*[text()=&#x27;医嘱保存成功&#x27;]&quot;</span>)</span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).perform()</span><br><span class=\"line\">driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\">time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;--- ATTENTION: 医嘱保存成功! ---&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> NoSuchElementException:</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;--- ATTENTION: 函数正常运行 但未成功保存医嘱，注意网络延迟并重试! ---&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><strong>检验类医嘱开立 部分完整脚本运行截图：</strong></p>\n<img src=\"/posts/e4f344ea/%E6%A3%80%E9%AA%8C%E7%B1%BB%E5%8C%BB%E5%98%B1%E8%BF%90%E8%A1%8C%E7%B3%BB%E7%BB%9F%E6%88%AA%E5%9B%BE.png\" class=\"\">\n\n<img src=\"/posts/e4f344ea/%E6%A3%80%E9%AA%8C%E7%B1%BB%E5%8C%BB%E5%98%B1%E8%BF%90%E8%A1%8C%E7%BB%88%E7%AB%AF%E6%88%AA%E5%9B%BE.png\" class=\"\">\n\n<hr>\n<h3 id=\"检查类医嘱录入功能的实现\"><a href=\"#检查类医嘱录入功能的实现\" class=\"headerlink\" title=\"检查类医嘱录入功能的实现\"></a>检查类医嘱录入功能的实现</h3><img src=\"/posts/e4f344ea/%E6%A3%80%E6%9F%A5%E7%B1%BB%E5%8C%BB%E5%98%B1%E5%BC%80%E7%AB%8B%E6%96%B9%E6%B3%95.png\" class=\"\">\n\n<p>检查医嘱的脚本代码开立方法大体和检验医嘱一致，通过examination_id传参项目代码，勾选对应项目以实现开立。只不过针对检查类医嘱，会有选择检查部位的情况需要考虑，故再增加一个判断校验，当发现所开立的医嘱需要再录入部位，则默认勾选并带入部位列表下第一个值。所以本脚本在执行检查类医嘱的过程分为：打开页面 -&gt; 输入examination_id -&gt; 勾选列表第一个复选框 -&gt; 判断该项目是否需要录入部位（需要则默认勾选第一个部位；不需要则跳过） -&gt; 点击确定。</p>\n<ul>\n<li>进入“检查”类医嘱开立弹窗</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;按钮开立检查类医嘱&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;正在进入检查类医嘱开立弹窗...&quot;</span>)</span><br><span class=\"line\">item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;diagnosisAnYang_secondLine_BsP7f&#x27;]//*[text()=&#x27;检查&#x27;]&quot;</span>)</span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).click().perform()</span><br><span class=\"line\">time.sleep(<span class=\"number\">3</span>)</span><br><span class=\"line\">driver.implicitly_wait(<span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>录入“检查目的”</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;ant-modal-body&#x27;]//*[@class=&#x27;ant-select-selector&#x27;]&quot;</span>)</span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).click().send_keys(<span class=\"string\">&quot;协助诊断&quot;</span>).send_keys(Keys.ENTER).perform()</span><br><span class=\"line\">driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\">time.sleep(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>终端传参examination_id项目代码 并勾选</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 搜索框搜索 项目代码 以唯一性元素 定位所需项目</span></span><br><span class=\"line\">examination_id = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入所要开立的检查类医嘱-项目代码: &quot;</span>)</span><br><span class=\"line\">item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;ant-input-affix-wrapper&#x27;]&quot;</span>)</span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).click().send_keys(examination_id).perform()</span><br><span class=\"line\">time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;ant-table-body&#x27;]//*[@class=&#x27;ant-table-row ant-table-row-level-0&#x27;]//input[1]&quot;</span>)</span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).click().perform()</span><br><span class=\"line\">driver.implicitly_wait(<span class=\"number\">4</span>)</span><br><span class=\"line\">time.sleep(<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>所开立检查项目是否需要录入部位的判断 及部位的录入</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;检查医嘱是否存在部位待选择情况判断&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;ant-input-affix-wrapper&#x27;]//*[contains(@placeholder,&#x27;请输入部位名称&#x27;)]&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;该检查类医嘱有部位维护, 需要选择部位才能开立! &quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 脚本仅勾选第一个部位, 不打算做多种多个部位勾选的细分代码</span></span><br><span class=\"line\">    item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;ant-checkbox-group examReqmultiApplicationDialog_group_SOSLw&#x27;]//input[1]&quot;</span>)</span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).click().perform()</span><br><span class=\"line\">    driver.implicitly_wait(<span class=\"number\">3</span>)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>点击确定 落入医嘱</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">item = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-dialog-footer kt-portal-footer-container&#x27;]//button[contains(text(),&#x27;确定&#x27;)]&quot;</span>)</span><br><span class=\"line\">webdriver.ActionChains(driver).move_to_element(item).click().perform()</span><br><span class=\"line\">driver.implicitly_wait(<span class=\"number\">4</span>)</span><br><span class=\"line\">time.sleep(<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>医嘱重复开立弹窗校验</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;当前患者该医嘱已开立弹窗校验&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    wait = WebDriverWait(driver, <span class=\"number\">10</span>)</span><br><span class=\"line\">    wait.until(EC.presence_of_element_located((By.XPATH, <span class=\"string\">&quot;//*[@class=&#x27;ant-modal-content&#x27;]//*[contains(text(),&#x27;已经开立，是否继续？&#x27;)]&quot;</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">    confirm_button = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;kt-dialog-confirm-footer&#x27;]//button[contains(text(),&#x27;确定&#x27;)]&quot;</span>)</span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(confirm_button).click().perform()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;--- ATTENTION: 检查项目成功落入医嘱列表 ---&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>医嘱保存及保存成功校验</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;医嘱保存&quot;&quot;&quot;</span></span><br><span class=\"line\">driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[@class=&#x27;diagnosisAnYang_secondLineItem_RITqA diagnosisAnYang_iconCursor_Jv_RO&#x27;]//*[text()=&#x27;保存&#x27;]&quot;</span>).click()</span><br><span class=\"line\">time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;医嘱保存成功弹窗校验&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    wait = WebDriverWait(driver, <span class=\"number\">10</span>)</span><br><span class=\"line\">    wait.until(EC.presence_of_element_located((By.XPATH, <span class=\"string\">&quot;//*[text()=&#x27;医嘱保存成功&#x27;]&quot;</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">    item = driver.find_element(By.XPATH, <span class=\"string\">&quot;//*[text()=&#x27;医嘱保存成功&#x27;]&quot;</span>)</span><br><span class=\"line\">    webdriver.ActionChains(driver).move_to_element(item).perform()</span><br><span class=\"line\">    driver.implicitly_wait(<span class=\"number\">5</span>)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;--- ATTENTION: 医嘱保存成功! ---&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> NoSuchElementException:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;--- ATTENTION: 函数正常运行 但未成功保存医嘱，注意网络延迟并重试! ---&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><strong>检查类医嘱开立 部分完整脚本运行截图：</strong></p>\n<img src=\"/posts/e4f344ea/%E6%A3%80%E6%9F%A5%E7%B1%BB%E5%8C%BB%E5%98%B1%E8%BF%90%E8%A1%8C%E7%B3%BB%E7%BB%9F%E6%88%AA%E5%9B%BE.png\" class=\"\">\n\n<img src=\"/posts/e4f344ea/%E6%A3%80%E6%9F%A5%E7%B1%BB%E5%8C%BB%E5%98%B1%E8%BF%90%E8%A1%8C%E7%BB%88%E7%AB%AF%E6%88%AA%E5%9B%BE.png\" class=\"\">\n\n<hr>\n<p><strong>以上就是基于python 3.10.10 和 selenium 4 版本，结合康博嘉宝鸡项目Webhis门诊医生站系统制作的 UI自动化测试脚本。此项目属于是我的第一份工作的第一个项目，功能性还是比较简单和单一的，四百行的代码量也并不多，代码内容结构也都是比较单一固定的，只能说这个项目于我巩固selenium的使用，恢复对python的学习起到了很大的帮助吧，还望以后的职业生涯再接再厉咯，这个md应该就写至此为止了！</strong></p>"},{"title":"Python数据分析与挖掘","abbrlink":"c1c7733e","date":"2022-06-15T08:08:58.000Z","_content":"\n**数据挖掘与分析部分模块的实例及原理应用**\n\n<!--more-->\n\n# Numpy学习\n\n| 姓名 | 语文 | 英语 | 数学 |\n| :--: | :--: | :--: | :--: |\n| 张飞 |  66  |  65  |  30  |\n| 关羽 |  95  |  85  |  98  |\n| 赵云 |  93  |  92  |  96  |\n| 黄忠 |  90  |  88  |  77  |\n| 典韦 |  80  |  90  |  90  |\n\n## 题目具体要求\n\n1、使用 Numpy 统计团队中成员的语文、英语、数学的平均成绩、最小成绩、最大成绩、方差、标准差。\n\n2、把这些人的总成绩排序，得出名次进行成绩输出。\n\n\n\n## **Numpy基本原理**\n\nNumpy 是 Python 语言的一个第三方库，其支持大量高维度[数组](https://so.csdn.net/so/search?q=数组&spm=1001.2101.3001.7020)与矩阵运算。此外，NumPy 也针对数组运算提供大量的数学函数。Numpy 中定义的最重要的对象是称为 `ndarray` 的 N 维数组类型。 它描述相同类型的元素[集合](https://so.csdn.net/so/search?q=集合&spm=1001.2101.3001.7020)。 可以使用基于零的索引访问集合中的项目。\n\n## 实现代码\n\n```python\nimport numpy as np\n\npersontype = np.dtype({'names': ['name', 'age', 'chinese', 'math', 'english', 'total'], 'formats': ['S32', 'i', 'i', 'i', 'i', 'i']})\npeoples = np.array([(\"zhang fei\", 18, 66, 30, 65, 0), (\"guan yu\", 19, 95, 98, 85, 0), (\"zhao yun\", 20, 93, 96, 92, 0), (\"huang zhong\", 21, 90, 77, 88, 0)], dtype=persontype)\n\nages = peoples[:]['age']\nchineses = peoples[:]['chinese']\nmaths = peoples[:]['math']\nenglishs = peoples[:]['english']\ntotal = peoples[:]['total']\n\nprint(\"各项平均值\")\nprint(\"年龄：\", np.mean(ages))\nprint(\"语文：\", np.mean(chineses))\nprint(\"数学：\", np.mean(maths))\nprint(\"英语：\", np.mean(englishs))\n\nprint(\"-\" * 10)\n\nprint(\"各项最大值\") \nprint(\"年龄：\", np.amax(ages))\nprint(\"语文：\", np.amax(chineses))\nprint(\"数学：\", np.amax(maths))\nprint(\"英语：\", np.amax(englishs))\n\nprint(\"-\" * 10)\n\nprint(\"各项最小值\")\nprint(\"年龄：\", np.amin(ages))\nprint(\"语文：\", np.amin(chineses))\nprint(\"数学：\", np.amin(maths))\nprint(\"英语：\", np.amin(englishs))\n\nprint(\"-\" * 10)\n\nprint(\"各项标准差\")\nprint(\"年龄：\", np.std(ages))\nprint(\"语文：\", np.std(chineses))\nprint(\"数学：\", np.std(maths))\nprint(\"英语：\", np.std(englishs))\n\nprint(\"-\" * 10)\n\nprint(\"各项方差\")\nprint(\"年龄：\", np.var(ages))\nprint(\"语文：\", np.var(chineses))\nprint(\"数学：\", np.var(maths))\nprint(\"英语：\", np.var(englishs))\n\nprint(\"-\" * 10)\n\nprint(\"总成绩排序\")\npeoples[:]['total'] = chineses + maths + englishs\nrank = sorted(peoples, key=lambda t: t[4], reverse=True)\nfor i in rank:\n    print(i)\n```\n\n## 输出结果\n\n```markdown\n各项平均值\n年龄： 19.5\n语文： 86.0\n数学： 75.25\n英语： 82.5\n\n各项最大值\n年龄： 21\n语文： 95\n数学： 98\n英语： 92\n\n各项最小值\n年龄： 18\n语文： 66\n数学： 30\n英语： 65\n\n各项标准差\n年龄： 1.118033988749895\n语文： 11.683321445547923\n数学： 27.380421837510102\n英语： 10.404326023342406\n\n各项方差\n年龄： 1.25\n语文： 136.5\n数学： 749.6875\n英语： 108.25\n\n总成绩排序\n(b'zhao yun', 20, 93, 96, 92, 281)\n(b'huang zhong', 21, 90, 77, 88, 255)\n(b'guan yu', 19, 95, 98, 85, 278)\n(b'zhang fei', 18, 66, 30, 65, 161)\n```\n\n------\n\n# Pandas学习\n\n学习数据结构：Series 和 DataFrame\n\nSeries 是个定长的字典序列。说是定长是因为在存储的时候，相当于两个 ndarray，这也是和字典结构最大的不同。因为在字典的结构里，元素的个数是不固定的。\n\nSeries 有两个基本属性：index 和 values。在 Series 结构中，index 默认是 0,1,2,……递增的整数序列，当然也可以自己来指定索引，比如 index=[‘a’, ‘b’, ‘c’, ‘d’]。\n\nDataFrame 类型数据结构类似数据库表，它包括了行索引和列索引，可以将 DataFrame 看成是由相同索引的 Series 组成的字典类型。\n\n(二)  Pandas数据清洗\n\n1.删除 DataFrame 中的不必要的列或行；\n\n2.重命名列名 columns，让列表名更容易识别；\n\n3.去重复的值数据采集可能存在重复的行；\n\n4.格式问题；\n\n5.查找空值。\n\n------\n\n# Kaggle竞赛-Titanic乘客生存预测\n\n决策树与AdaBoost实验\n\n##  **目标任务**\n\n（1） 学习决策树、AdaBoost的原理，特性；\n\n（2） 学习使用Python编写决策树和AdaBoost分类器；\n\n（3） 学习使用sklearn训练决策树和AdaBoost，熟悉数据挖掘的一般流程.\n\n------\n\n## **实验数据**\n\nKaggle数据挖掘竞赛平台之Titanic 乘客生存预测。问题描述：泰坦尼克海难是著名的十大灾难之一，究竟多少人遇难，各方统计的结果不一。Kaggle数据挖掘竞赛平台的数据集数据集格式为 csv，一共有两个文件：train.csv 是训练数据集，包含特征信息和存活与否的标签；test.csv: 测试数据集，只包含特征信息。\n\n在训练集中，包括了以下字段，它们具体为：\n\n| 字段        | 描述                     |\n| :---------- | ------------------------ |\n| PassengerId | 乘客编号                 |\n| Survived    | 是否幸存                 |\n| Pclass      | 船票等级                 |\n| Name        | 乘客姓名                 |\n| Sex         | 乘客性别                 |\n| SibSp       | 亲戚数量（兄妹、配偶数） |\n| Parch       | 亲戚数量（父母、子女数） |\n| Ticket      | 船票号码                 |\n| Fare        | 船票价格                 |\n| Cabin       | 船舱                     |\n| Embarked    | 登陆港口                 |\n\n------\n\n## **生存预测的关键流程**\n\n要对训练集中乘客的生存进行预测，这个过程可以划分为两个重要的阶段：\n\n准备阶段：首先需要对训练集、测试集的数据进行探索，分析数据质量，并对数据进行清洗，然后通过特征选择对数据进行降维，方便后续分类运算；\n\n分类阶段：首先通过训练集的特征矩阵、分类结果得到分类器，然后将分类器应用于测试集。然后对分类器的准确性进行分析，并对模型进行可视化。\n\n## **实验过程**\n\n### 实验导入模块\n\n```python\nimport xgboost as xgb\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import cross_val_score\nimport pandas as pd\nimport numpy as np\nimport csv\n\n```\n\n\n\n### **数据探索**\n\n-  info():了解数据表的基本情况，包括行数、列数、每列的数据类型、数据完整度；\n\n-  describe():了解数据表的统计情况，包括总数、平均值、标准差、最小值、最大值等；\n\n-  describe(include=[‘O’]):查看字符串类型（非数字）的整体情况；\n\n-  head():查看前几行数据（默认是前 5 行）；\n\n-  tail():查看后几行数据（默认是最后 5 行）。\n\n\n具体代码如下：\n\n```python\nimport pandas as pd\n# 数据加载\ntrain_data = pd.read_csv('Titanic.train.csv')\ntest_data = pd.read_csv('Titanic.test.csv')\n\n# 数据探索\nprint(train_data.info())\nprint('-' * 30)\nprint(train_data.describe())\nprint('-' * 30)\nprint(train_data.describe(include=['O']))  # include后面是大写的O字母\nprint('-' * 30)\n```\n\n数据读取结果：\n\n```markdown\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 891 entries, 0 to 890\nData columns (total 12 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   PassengerId  891 non-null    int64  \n 1   Survived     891 non-null    int64  \n 2   Pclass       891 non-null    int64  \n 3   Name         891 non-null    object \n 4   Sex          891 non-null    object \n 5   Age          714 non-null    float64\n 6   SibSp        891 non-null    int64  \n 7   Parch        891 non-null    int64  \n 8   Ticket       891 non-null    object \n 9   Fare         891 non-null    float64\n 10  Cabin        204 non-null    object \n 11  Embarked     891 non-null    object \ndtypes: float64(2), int64(5), object(5)\nmemory usage: 83.7+ KB\nNone\n```\n\n\n\n### **数据清洗**\n\n通过数据探索，我们发现 Age、Fare 和 Cabin 这三个字段的数据有所缺失。其中 Age 为年龄字段，是数值型，我们可以通过平均值进行补齐；Fare 为船票价格，是数值型，我们也可以通过其他人购买船票的平均值进行补齐。具体实现的代码如下：\n\n```python\n# 使用平均年龄来填充年龄中的nan值\ntrain_data['Age'].fillna(train_data['Age'].mean(), inplace=True)\ntest_data['Age'].fillna(test_data['Age'].mean(), inplace=True)\n\n# 使用票价的均值填充票价中的nan值\ntrain_data['Fare'].fillna(train_data['Fare'].mean(), inplace=True)\ntest_data['Fare'].fillna(test_data['Fare'].mean(), inplace=True)\nprint(train_data['Embarked'].value_counts())\n\n# 使用登录最多的港口来填充登录港口的nan值\ntrain_data['Embarked'].fillna('S', inplace=True)\ntest_data['Embarked'].fillna('S', inplace=True)\n```\n\n### **特征选择**\n\n特征选择是分类器的关键。特征选择不同，得到的分类器也不同。那么该选择哪些特征做生存的预测呢？\n\n通过数据探索发现，PassengerId 为乘客编号，对分类没有作用，可以放弃；Name 为乘客姓名，对分类没有作用，可以放弃；Cabin 字段缺失值太多，可以放弃；Ticket 字段为船票号码，杂乱无章且无规律，可以放弃。其余的字段包括：Pclass、Sex、Age、SibSp、Parch 和 Fare，这些属性分别表示了乘客的船票等级、性别、年龄、亲戚数量以及船票价格，可能会和乘客的生存预测分类有关系。具体是什么关系，我们可以交给分类器来处理。因此先将 Pclass、Sex、Age 等这些其余的字段作特征，放到特征向量 features 里。\n\n代码如下：\n\n```python\n# 模块3：特征选择\nfeatures = ['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']\ntrain_features = train_data[features]\ntrain_labels = train_data['Survived']\ntest_features = test_data[features]\nfrom sklearn.feature_extraction import DictVectorizer\ndvec = DictVectorizer(sparse=False)\ntrain_features = dvec.fit_transform(train_features.to_dict(orient='record'))\nprint(dvec.feature_names_)\n```\n\n数据读取结果：\n\n```\nS    644\nC    168\nQ     77\nU      2\nName: Embarked, dtype: int64\n```\n\n\n\n### **分类模型及模型的评价**\n\n1） 使用 sklearn 中的决策树模型。使用 ID3 算法使用DecisionTreeClassifier 时，设置 criterion=‘entropy’，然后使用 fit 进行训练，将特征值矩阵和分类标识结果作为参数传入，得到决策树分类器。\n\n2） 使用 sklearn 中的集成学习模型Adaboost()\n\n3） 采用 K 折交叉验证准确率。sklearn 的 model_selection 模型选择中提供了 cross_val_score 函数。\n\nØ K 折交叉验证的原理：\n\n拿出大部分样本进行训练，少量的用于分类器的验证。K 折交叉验证，就是做 K 次交叉验证，每次选取 K 分之一的数据作为验证，其余作为训练。轮流 K 次，取平均值。\n\n代码如下：\n\n```python\n# 决策树弱分类器\ndt_stump = DecisionTreeClassifier(max_depth=7, min_samples_leaf=5)\ndt_stump.fit(train_features, train_labels)\nprint(u'决策树弱分类器准确率为 %.4lf' % np.mean(cross_val_score(dt_stump, train_features, train_labels, cv=10)))\n# 决策树分类器\ndt = DecisionTreeClassifier()\ndt.fit(train_features, train_labels)\nprint(u'决策树分类器准确率为 %.4lf' % np.mean(cross_val_score(dt, train_features, train_labels, cv=10)))\n\n# AdaBoost分类器\nada = AdaBoostClassifier()\nada.fit(train_features, train_labels)\nprint(u'AdaBoost 分类器准确率为 %.4lf' %\nnp.mean(cross_val_score(ada, train_features, train_labels, cv=15)))\n\n# XGBoost分类器\nxgb = xgb.XGBClassifier(max_depth=8, min_child_weight=3)\nxgb.fit(train_features, train_labels)\nprint(u'XGBoost 分类器准确率为 %.4lf' %\nnp.mean(cross_val_score(ada, train_features, train_labels, cv=15)))\n```\n\n### 各个分类器准确率\n\n```markdown\n决策树弱分类器准确率为 0.8228\n决策树分类器准确率为 0.7778\nAdaBoost 分类器准确率为 0.8183\nXGBoost 分类器准确率为 0.8183\n```\n\n------\n\n# 银行客户违约信用分析\n\n对银行客户基本信息数据集进行分析，提取不同信息进行特征分析和预测，通过多种分类器算法预测客户违约行为\n\n```python\nimport pandas as pd\nimport xlwt\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.feature_extraction import DictVectorizer\nfrom sklearn.tree import DecisionTreeClassifier\nimport numpy as np\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import AdaBoostClassifier\nimport xgboost as xgb\nfrom xgboost import XGBClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import MultinomialNB#多项式朴素贝叶斯分类器\nfrom sklearn.svm import LinearSVC\nfrom sklearn.naive_bayes import BernoulliNB\n```\n\n## 数据集读取转换csv文件预处理\n\n```python\n# datafile = 'data.xls'\nresultfile = 'data.csv'\ndata = pd.read_excel('data.xls')\ndata.to_csv(resultfile)\n## excel转成csv表头中文乱码\n```\n\n## 数据探索\n\n```py\ndatafile = 'data.csv'\ndata = pd.read_csv(datafile)\nprint(data.info())\ndata1 = data.describe()\ndata1.to_excel('data_dexcribe.xls')\n```\n\n{% asset_img 1.png  %}\n\n```py\nimport matplotlib.pyplot as plt\nweiyue = pd.value_counts(data['违约'])[1]\nnot_weiyue = pd.value_counts(data['违约'])[0]\n\n# 绘图\nfig = plt.figure(figsize = (8, 5))  # 设置画布大小\nplt.rcParams['font.sans-serif'] = ['KaiTi']\nplt.bar(x=range(2), height=[weiyue, not_weiyue,], width=0.4, alpha=0.8, color='skyblue')\nplt.xticks([index for index in range(2)], ['1', '0'])\nplt.xlabel('是否违约')\nplt.ylabel('客户人数')\nplt.title('客户是否违约柱状图')\nplt.show()\nplt.close()\n## 输出可见违约：未违约大概2:5\n```\n\n{% asset_img 2.png  %}\n\n```py\n# 绘制 是否违约客户 与 年龄 的分布\nimport seaborn as sns\n## 提取年龄\nage = data['年龄'].dropna()\nage = age.astype('int64')\n## 绘制客户年龄分布箱型图\nfig = plt.figure()\nfig, axes = plt.subplots(1, 3, figsize=(10, 5))\nsns.distplot(data[\"年龄\"], ax = axes[0], axlabel='所有客户年龄分布')\nsns.distplot(data.loc[data[\"违约\"]==0][\"年龄\"], ax = axes[1], axlabel = '非违约客户年龄分布')\nsns.distplot(data.loc[data[\"违约\"]==1][\"年龄\"], ax = axes[2], axlabel = '违约客户年龄分布')\nplt.show()\nplt.close()\n```\n\n{% asset_img 3.png  %}\n\n```python\n## 客户年龄中存在300岁，需要数据清洗删除异常值，用年龄均值填充\n# plt.title('客户是否违约柱状图')\n# plt.show()\n# plt.close()\n# 均值填充年龄\ndata['年龄'].fillna(data['年龄'].mean(), inplace=True)\n# 删除年龄大于80的数据\ndata.drop(data[(data['年龄'] > 80)].index.tolist(), inplace=True)\nprint(data[\"年龄\"].describe())\n# 将性别数据分别用female=1，male=0表示\ndata.loc[data[\"性别\"] == \"male\", \"性别\"] = 0\ndata.loc[data[\"性别\"] == \"female\", \"性别\"] = 1\n```\n\n性别特性处理：\n\n```markdown\ncount    699.000000\nmean      34.863308\nstd        7.967906\nmin       20.000000\n25%       29.000000\n50%       34.000000\n75%       40.000000\nmax       56.000000\nName: 年龄, dtype: float64\n```\n\n```py\n# 计算相关性矩阵\ndata_corr = data\ndt_corr = data_corr.corr(method = 'pearson')\nprint('相关性矩阵为：\\n', dt_corr)\n\n# 绘制热力图\nimport seaborn as sns\nplt.subplots(figsize=(10, 10))\nsns.heatmap(dt_corr, annot=True, vmax=1, square=True, cmap='Blues')\nplt.show()\nplt.close()\n```\n\n{% asset_img 4.png  %}\n\n```python\nfrom sklearn.feature_extraction import DictVectorizer\n# 通过分析选择合适的特征用于预测\nfeatures = ['年龄', '教育', '工龄', '地址', '负债率', '信用卡负债', '收入']\nfeatures_train = data[features]\ntrain_label = data['违约']\ndev = DictVectorizer(sparse=False)\n# 转化成字典型\nfeatures_train = dev.fit_transform(features_train.to_dict(orient='record'))\n```\n\n```python\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(features_train,train_label,test_size=0.3, random_state=23,shuffle=True)\n```\n\n```py\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.metrics import confusion_matrix, classification_report\nimport sklearn.metrics as metrics\n#import sklearn.metrics.roc\ndef Confusion_matrix(model):\n    print(confusion_matrix(y_test, model.predict(X_test)))  # 混淆矩阵\n    print(classification_report(y_test, model.predict(X_test)))  # 分类报告\n```\n\n```python\nimport itertools\n# 混淆矩阵可视化\ndef plot_confusion_matrix(cm, classes, normalize = False, title = 'Confusion matrix\"', cmap = plt.cm.Blues) :\n    plt.figure()\n    plt.imshow(cm, interpolation = 'nearest', cmap = cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation = 0)\n    plt.yticks(tick_marks, classes)\n \n    thresh = cm.max() / 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])) :\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment = 'center',\n                 color = 'white' if cm[i, j] > thresh else 'black')\n \n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n    plt.show()\n```\n\n## 不同分类器处理结果呈现\n\n### 决策树与决策树弱分类器\n\n```py\n#决策树分类器\ndt = DecisionTreeClassifier(max_depth=3,min_samples_leaf=1)\ndt.fit(features_train, train_label)\n\n#决策树弱分类器\ndt_stump =DecisionTreeClassifier()\ndt_stump.fit(features_train,train_label)\n\n# 决策树分类器\ndt.fit(X_train, y_train)\npredict_y = dt.predict(X_test)\n\ncm1 = confusion_matrix(y_test, predict_y)\nclass_names = ['违约', '未违约']\n# 显示混淆矩阵\nplot_confusion_matrix(cm1, classes=class_names, title='决策树分类')\n\nConfusion_matrix(dt)\n```\n\n```py\n# 决策树分类器\ndt.fit(X_train, y_train)\npredict_y = dt.predict(X_test)\n\ncm1 = confusion_matrix(y_test, predict_y)\nclass_names = ['违约', '未违约']\n# 显示混淆矩阵\nplot_confusion_matrix(cm1, classes=class_names, title='决策树分类')\n\nConfusion_matrix(dt)\n```\n\n决策树分类器 混淆矩阵：\n\n{% asset_img 5.png   %}\n\n决策树分类器 分类报告：\n\n{% asset_img 6.png   %}\n\n```py\n# 决策树弱分类器\n#dt_stump = DecisionTreeClassifier()\ndt_stump.fit(X_train, y_train)\npredict_y = dt_stump.predict(X_test)\n#score_y = dt_stump.decision_function(X_test)\ncm1 = confusion_matrix(y_test, predict_y)\nclass_names = ['违约', '未违约']\n# 显示混淆矩阵\nplot_confusion_matrix(cm1, classes=class_names, title='决策树弱分类')\n\nConfusion_matrix(dt_stump)\n```\n\n决策树弱分类器 混淆矩阵：\n\n{% asset_img 7.png   %}\n\n决策树弱分类器 分类报告：\n\n{% asset_img 8.png   %}\n\n### AdaBoost\n\n```py\n#AdaBoost分类器 基分类器提升（循环）次数,随机种子设置,\nada = AdaBoostClassifier(n_estimators = 10,random_state = 10,learning_rate=1.1)\nada.fit(features_train,train_label)\n\nada.fit(X_train, y_train)\npredict_y = ada.predict(X_test)\n\ncm2 = confusion_matrix(y_test, predict_y)\n\nclass_names = ['违约', '未违约']\n# 显示混淆矩阵\nplot_confusion_matrix(cm2, classes=class_names, title='AdaBoost分类器')\n\nConfusion_matrix(ada)\n```\n\nAdaBoost分类器 混淆矩阵：\n\n{% asset_img 9.png   %}\n\nAdaBoost分类器 分类报告：\n\n{% asset_img 10.png   %}\n\n### XGBoost\n\n```py\n#XGBoost分类器\n#xgb = XGBClassifier(n_estimators = 350, learning_rate=0.2)\nxgb = XGBClassifier()\nxgb.fit(features_train,train_label)\n\nxgb.fit(X_train, y_train)\npredict_y = xgb.predict(X_test)\n#score_y = dt_stump.decision_function(X_test)\ncm3 = confusion_matrix(y_test, predict_y)\nclass_names = ['违约', '未违约']\n# 显示混淆矩阵\nplot_confusion_matrix(cm3, classes=class_names, title='XGBoost分类器')\n\nConfusion_matrix(xgb)\n```\n\nXGBoost分类器 混淆矩阵：\n\n{% asset_img 11.png   %}\n\nXGBoost分类器 分类报告：\n\n{% asset_img 12.png   %}\n\n### 逻辑回归\n\n```python\n# 逻辑回归分类器\nlog = LogisticRegression()\nlog.fit(features_train, train_label)\n\n# 逻辑回归分类器\nlog = LogisticRegression()\nlog.fit(X_train, y_train)\npredict_y = log.predict(X_test)\nscore_y = log.decision_function(X_test)\ncm = confusion_matrix(y_test, predict_y)\nclass_names = ['违约', '未违约']\n# 显示混淆矩阵\nplot_confusion_matrix(cm, classes=class_names, title='逻辑回归')\n\nConfusion_matrix(log)\n```\n\n逻辑回归 混淆矩阵：\n\n{% asset_img 13.png   %}\n\n逻辑回归 分类报告：\n\n{% asset_img 14.png   %}\n\n### 朴素贝叶斯\n\n```python\n# 多项朴素贝叶斯分类器\nmul = MultinomialNB()\n#mul.fit(features_train, train_label)\nmul.fit(X_train, y_train)\n\n#mul.fit(X_train, y_train)\npredict_y = mul.predict(X_test)\n#score_y = mul.decision_function(X_test)\ncm4 = confusion_matrix(y_test, predict_y)\nclass_names = ['违约', '未违约']\n# 显示混淆矩阵\nplot_confusion_matrix(cm4, classes=class_names, title='多项朴素贝叶斯')\n\nConfusion_matrix(mul)\n```\n\n朴素贝叶斯 混淆矩阵：\n\n{% asset_img 15.png   %}\n\n朴素贝叶斯 分类报告：\n\n{% asset_img 16.png   %}\n\n## 结果整合\n\n{% asset_img 17.png   %}\n\n------\n\n# GMM聚类\n\nEM算法处理王者荣耀英雄属性数据集\n\n## 使用EM算法工具完成聚类分析算法\n\n实验目的： 学习使用EM算法工具完成聚类分析算法\n\n```python\n#实验使用的工具包\n# -*- coding: utf-8 -*-\nimport pandas as pd\nimport csv\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.mixture import GaussianMixture\nfrom sklearn.preprocessing import StandardScaler\n \n```\n\n### 数据读取\n\n任务一：数据加载，避免中文乱码问题完成\n\n```python\n#数据读取,请填写相应的代码！\ndata_ori = pd.read_csv('heros.csv', encoding='gb18030')\nfeatures = [u'最大生命',u'生命成长',u'初始生命',u'最大法力', u'法力成长',u'初始法力',u'最高物攻',u'物攻成长',u'初始物攻',u'最大物防',u'物防成长',u'初始物防', u'最大每5秒回血', u'每5秒回血成长', u'初始每5秒回血', u'最大每5秒回蓝', u'每5秒回蓝成长', u'初始每5秒回蓝', u'最大攻速', u'攻击范围']\ndata = data_ori[features]\n\n# 对英雄属性之间的关系进行可视化分析\n# 设置 plt 正确显示中文\nplt.rcParams['font.sans-serif']=['SimHei'] # 用来正常显示中文标签\nplt.rcParams['axes.unicode_minus']=False # 用来正常显示负号\n```\n\n### 数据探索\n\n任务二：编写计算特征之间相似度的代码\n\n用热力图呈现 features_mean 字段之间的相关性 \n\n```python\n#填写相应代码！！\ncorr = data[features].corr()\nprint(corr)\n             最大生命      生命成长      初始生命      最大法力      法力成长      初始法力      最高物攻  \\\n最大生命     1.000000  0.977408  0.761300 -0.220133 -0.207130 -0.260449 -0.246412   \n生命成长     0.977408  1.000000  0.658106 -0.224112 -0.212271 -0.260464 -0.268377   \n初始生命     0.761300  0.658106  1.000000 -0.189349 -0.178674 -0.222314 -0.140356   \n最大法力    -0.220133 -0.224112 -0.189349  1.000000  0.998958  0.988178 -0.180428   \n法力成长    -0.207130 -0.212271 -0.178674  0.998958  1.000000  0.980154 -0.175029   \n初始法力    -0.260449 -0.260464 -0.222314  0.988178  0.980154  1.000000 -0.195800   \n最高物攻    -0.246412 -0.268377 -0.140356 -0.180428 -0.175029 -0.195800  1.000000   \n物攻成长    -0.230507 -0.248988 -0.121609 -0.197617 -0.191883 -0.213851  0.986098   \n初始物攻    -0.195840 -0.223728 -0.161278  0.003153  0.003966  0.000371  0.536409   \n最大物防     0.862472  0.879106  0.529737 -0.210425 -0.200722 -0.239802 -0.227352   \n物防成长     0.832795  0.847654  0.528719 -0.226732 -0.217018 -0.255893 -0.182300   \n初始物防     0.746460  0.764736  0.403032 -0.106082 -0.098780 -0.128992 -0.316263   \n最大每5秒回血  0.951013  0.943635  0.688104 -0.224234 -0.212305 -0.260875 -0.290216   \n每5秒回血成长  0.967369  0.972436  0.647438 -0.190258 -0.177943 -0.228721 -0.246922   \n初始每5秒回血  0.829468  0.798746  0.701547 -0.268561 -0.258510 -0.298217 -0.346468   \n最大每5秒回蓝 -0.286851 -0.297569 -0.224674  0.872025  0.853143  0.922108 -0.193140   \n每5秒回蓝成长 -0.207165 -0.212225 -0.179819  0.996253  0.997483  0.976856 -0.179123   \n初始每5秒回蓝 -0.279098 -0.292439 -0.199537  0.450477  0.415945  0.559600 -0.145060   \n\n             物攻成长      初始物攻      最大物防      物防成长      初始物防   最大每5秒回血   每5秒回血成长  \\\n最大生命    -0.230507 -0.195840  0.862472  0.832795  0.746460  0.951013  0.967369   \n生命成长    -0.248988 -0.223728  0.879106  0.847654  0.764736  0.943635  0.972436   \n初始生命    -0.121609 -0.161278  0.529737  0.528719  0.403032  0.688104  0.647438   \n最大法力    -0.197617  0.003153 -0.210425 -0.226732 -0.106082 -0.224234 -0.190258   \n法力成长    -0.191883  0.003966 -0.200722 -0.217018 -0.098780 -0.212305 -0.177943   \n初始法力    -0.213851  0.000371 -0.239802 -0.255893 -0.128992 -0.260875 -0.228721   \n最高物攻     0.986098  0.536409 -0.227352 -0.182300 -0.316263 -0.290216 -0.246922   \n物攻成长     1.000000  0.388718 -0.218394 -0.170773 -0.317801 -0.276067 -0.231988   \n初始物攻     0.388718  1.000000 -0.151566 -0.143719 -0.139327 -0.207319 -0.191102   \n最大物防    -0.218394 -0.151566  1.000000  0.983223  0.808768  0.864672  0.883474   \n物防成长    -0.170773 -0.143719  0.983223  1.000000  0.687920  0.836301  0.849445   \n初始物防    -0.317801 -0.139327  0.808768  0.687920  1.000000  0.743957  0.776385   \n最大每5秒回血 -0.276067 -0.207319  0.864672  0.836301  0.743957  1.000000  0.983556   \n每5秒回血成长 -0.231988 -0.191102  0.883474  0.849445  0.776385  0.983556  1.000000   \n初始每5秒回血 -0.335171 -0.219081  0.746610  0.731842  0.611008  0.937169  0.858750   \n最大每5秒回蓝 -0.226294  0.078473 -0.269346 -0.282500 -0.160954 -0.267749 -0.247764   \n每5秒回蓝成长 -0.196605  0.005237 -0.202790 -0.217446 -0.105629 -0.202148 -0.169121   \n初始每5秒回蓝 -0.184345  0.132174 -0.253111 -0.260324 -0.168099 -0.250934 -0.251700   \n\n          初始每5秒回血   最大每5秒回蓝   每5秒回蓝成长   初始每5秒回蓝  \n最大生命     0.829468 -0.286851 -0.207165 -0.279098  \n生命成长     0.798746 -0.297569 -0.212225 -0.292439  \n初始生命     0.701547 -0.224674 -0.179819 -0.199537  \n最大法力    -0.268561  0.872025  0.996253  0.450477  \n法力成长    -0.258510  0.853143  0.997483  0.415945  \n初始法力    -0.298217  0.922108  0.976856  0.559600  \n最高物攻    -0.346468 -0.193140 -0.179123 -0.145060  \n物攻成长    -0.335171 -0.226294 -0.196605 -0.184345  \n初始物攻    -0.219081  0.078473  0.005237  0.132174  \n最大物防     0.746610 -0.269346 -0.202790 -0.253111  \n物防成长     0.731842 -0.282500 -0.217446 -0.260324  \n初始物防     0.611008 -0.160954 -0.105629 -0.168099  \n最大每5秒回血  0.937169 -0.267749 -0.202148 -0.250934  \n每5秒回血成长  0.858750 -0.247764 -0.169121 -0.251700  \n初始每5秒回血  1.000000 -0.280945 -0.246737 -0.225670  \n最大每5秒回蓝 -0.280945  1.000000  0.856248  0.827604  \n每5秒回蓝成长 -0.246737  0.856248  1.000000  0.418679  \n初始每5秒回蓝 -0.225670  0.827604  0.418679  1.000000  \n```\n\n\n\n```python\n#热力图可视化！！\nplt.figure(figsize=(14,14))\n# annot=True 显示每个方格的数据\nsns.heatmap(corr, annot=True)\nplt.show()\n```\n\n{% asset_img GMM.png %}\n\n从图中可以看出“最大生命”，“生命成长”，“初始生命”这三个属性的相关性大，我们只 需保留一个属性即可。 features_remain数组保留了特征选择的属性，这样将原本的20个属性降维到了13个属性。 相关性大cong的属性保留一个，因此可以对属性进行降维\n\n```python\n#将原本的20个属性降维到13个属性。请填写代码！\nfeatures = [u'最大生命',u'生命成长',u'初始生命',u'最大法力', u'法力成长',u'初始法力',u'最高物攻',u'物攻成长',u'初始物攻',u'最大物防',u'物防成长',u'初始物防', u'最大每5秒回血', u'每5秒回血成长', u'初始每5秒回血', u'最大每5秒回蓝', u'每5秒回蓝成长', u'初始每5秒回蓝', u'最大攻速', u'攻击范围']\ndata = data_ori[features]\n```\n\n### 数据清洗\n\n任务三： “最大攻速”这个属性值是百分数，不适合做矩阵运算，需要将百分数转化成小数。 “攻击范围”这个字段的取值为远程或者近战，也不适合矩阵运算； \n\n解决办法：将取值做个映射，用1代表远程，0代表近战。 \n\n示例：map({'远程':1,'近战':0})\n\n```python\ndata[u'最大攻速'] = data[u'最大攻速'].apply(lambda x:float(x.strip('%'))/100)\ndata[u'攻击范围'] = data[u'攻击范围'].map({'远程':1,'近战':0})\n<ipython-input-73-cb0648147d53>:2: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  data[u'最大攻速'] = data[u'最大攻速'].apply(lambda x:float(x.strip('%'))/100)\n<ipython-input-73-cb0648147d53>:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  data[u'攻击范围'] = data[u'攻击范围'].map({'远程':1,'近战':0})\n```\n\n采用 Z-Score 规范化数据，保证每个特征维度的数据均值为 0，方差为 1\n\n```python\nss = StandardScaler()\ndata = ss.fit_transform(data)\n```\n\n构造GMM聚类模型，GaussianMixture()\n\n```python\ngmm = GaussianMixture(n_components=30)\n\n# 训练数据\ngmm.fit(data)\n\nprediction = gmm.predict(data)\nprint(prediction)\n[13 24 11 10  2 25 20 11  7 24 18 14 10  0  1 18 13  7  2 12 22 12 12 12\n 12 12 12 21 16 26 24  9  9 16 26  9 16  6  4 15  9 16 16  9 16 15 14  4\n 24 16 28  5  2  3  3 13 29  5 23  2 29 19 17 13  8  5 27  5 21]\n \n # 将分组结果输出到 CSV 文件中\ndata_ori.insert(0, '分组', prediction)\ndata_ori.to_csv('.hero_out.csv', index=False, sep=',')\n\nfrom sklearn.metrics import calinski_harabasz_score\nprint(calinski_harabasz_score(data, prediction))\n```\n\n------\n\n# 航空公司客户价值分析\n\n{% asset_img 航空.png  %}\n\n------\n\n# 比特币价格预测\n\n比特币价格走势预测\n\n```python\n# -*- coding: utf-8 -*-\n# 比特币走势预测，使用时间序列ARMA\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom statsmodels.tsa.arima_model import ARMA\nimport warnings\nfrom itertools import product\nfrom datetime import datetime\nwarnings.filterwarnings('ignore')\n```\n\n```python\n# 数据加载\ndf = pd.read_csv('./bitcoin_2012-01-01_to_2018-10-31.csv')\n# 将时间作为df的索\ndf.Timestamp = pd.to_datetime(df.Timestamp)\ndf.index = df.Timestamp\n# 数据探索\nprint(df.head(10))\n```\n\n```python\n数据探索部分打印内容：\n            Timestamp      Open      High       Low     Close  Volume_(BTC)  \\\nTimestamp                                                                     \n2011-12-31 2011-12-31  4.465000  4.482500  4.465000  4.482500     23.829470   \n2012-01-01 2012-01-01  4.806667  4.806667  4.806667  4.806667      7.200667   \n2012-01-02 2012-01-02  5.000000  5.000000  5.000000  5.000000     19.048000   \n2012-01-03 2012-01-03  5.252500  5.252500  5.252500  5.252500     11.004660   \n2012-01-04 2012-01-04  5.200000  5.223333  5.200000  5.223333     11.914807   \n2012-01-05 2012-01-05  6.281429  6.286190  6.281429  6.286190      4.514373   \n2012-01-06 2012-01-06  6.435000  6.445000  6.435000  6.445000      2.420196   \n2012-01-07 2012-01-07  6.800000  6.800000  6.800000  6.800000      0.295858   \n2012-01-08 2012-01-08  6.950000  6.950000  6.950000  6.950000      2.500000   \n2012-01-09 2012-01-09  6.584167  6.584167  6.581667  6.581667      1.857481   \n\n            Volume_(Currency)  Weighted_Price  \nTimestamp                                      \n2011-12-31         106.330084        4.471603  \n2012-01-01          35.259720        4.806667  \n2012-01-02          95.240000        5.000000  \n2012-01-03          58.100651        5.252500  \n2012-01-04          63.119578        5.208159  \n2012-01-05          27.987370        6.284127  \n2012-01-06          15.914658        6.438999  \n2012-01-07           2.011834        6.800000  \n2012-01-08          17.300000        6.950000  \n2012-01-09          12.306798        6.582770  \n```\n\n```python\n# 按照月，季度，年来统计\ndf_month = df.resample('M').mean()\ndf_Q = df.resample('Q-DEC').mean()\ndf_year = df.resample('A-DEC').mean()\n# 按照天，月，季度，年来显示比特币的走势\nfig = plt.figure(figsize=[15, 7])\nplt.rcParams['font.sans-serif']=['SimHei'] #用来正常显示中文标签\nplt.suptitle('比特币金额（美金）', fontsize=20)\nplt.subplot(221)\n\nplt.plot(df.Weighted_Price, '-', label='按天')\nplt.legend()\nplt.subplot(222)\n\nplt.plot(df.Weighted_Price, '-', label='按月')\nplt.legend()\nplt.subplot(223)\n\nplt.plot(df.Weighted_Price, '-', label='按季度')\nplt.legend()\nplt.subplot(224)\n\nplt.plot(df.Weighted_Price, '-', label='按年')\nplt.legend()\nplt.show()\n\n```\n\n按照天、月、季度、年来统计显示比特币的走势：\n\n{% asset_img bit1.png    %}\n\n```python\n# 设置参数范围\nps = range(0, 3)\nqs = range(0, 3)\nparameters = product(ps, qs)\nparameters_list = list(parameters)\n# 寻找最优ARMA模型参数，即best_aic最小\nresults = []\nbest_aic = float(\"inf\") # 正无穷\nfor param in parameters_list:\n    try:\n        model = ARMA(df_month.Weighted_Price,order=(param[0], param[1])).fit()\n    except ValueError:\n        print('参数错误:', param)\n        continue\n    aic = model.aic\n    if aic < best_aic:\n        best_model = model\n        best_aic = aic\n        best_param = param\n    results.append([param, model.aic])\n# 输出最优模型\nresult_table = pd.DataFrame(results)\nresult_table.columns = ['parameters', 'aic']\nprint('最优模型:', best_model.summary())\n# 比特币预测\ndf_month2 = df_month[['Weighted_Price']]\ndate_list = [datetime(2018, 11, 30), datetime(2018, 12, 31), datetime(2019, 1, 31),\n             datetime(2019, 2, 28), datetime(2019, 3, 31),\n             datetime(2019, 4, 30), datetime(2019, 5, 31), datetime(2019, 6, 30)]\nfuture = pd.DataFrame(index=date_list, columns=df_month.columns)\ndf_month2 = pd.concat([df_month2, future])\ndf_month2['forecast'] = best_model.predict(start=0, end=91)\n# 比特币预测结果显示\nplt.figure(figsize=(20,7))\ndf_month2.Weighted_Price.plot(label='实际金额')\ndf_month2.forecast.plot(color='r', ls='--', label='预测金额')\nplt.legend()\nplt.title('比特币金额(月)')\nplt.xlabel('时间')\nplt.ylabel('美金')\nplt.show()\n```\n\n{% asset_img bit2.png   %}\n\n比特币预测结果：\n\n{% asset_img bit3.png   %}\n","source":"_posts/Python数据分析与挖掘.md","raw":"---\ntitle: Python数据分析与挖掘\ntags: 5\nabbrlink: c1c7733e\ndate: 2022-06-15 16:08:58\n---\n\n**数据挖掘与分析部分模块的实例及原理应用**\n\n<!--more-->\n\n# Numpy学习\n\n| 姓名 | 语文 | 英语 | 数学 |\n| :--: | :--: | :--: | :--: |\n| 张飞 |  66  |  65  |  30  |\n| 关羽 |  95  |  85  |  98  |\n| 赵云 |  93  |  92  |  96  |\n| 黄忠 |  90  |  88  |  77  |\n| 典韦 |  80  |  90  |  90  |\n\n## 题目具体要求\n\n1、使用 Numpy 统计团队中成员的语文、英语、数学的平均成绩、最小成绩、最大成绩、方差、标准差。\n\n2、把这些人的总成绩排序，得出名次进行成绩输出。\n\n\n\n## **Numpy基本原理**\n\nNumpy 是 Python 语言的一个第三方库，其支持大量高维度[数组](https://so.csdn.net/so/search?q=数组&spm=1001.2101.3001.7020)与矩阵运算。此外，NumPy 也针对数组运算提供大量的数学函数。Numpy 中定义的最重要的对象是称为 `ndarray` 的 N 维数组类型。 它描述相同类型的元素[集合](https://so.csdn.net/so/search?q=集合&spm=1001.2101.3001.7020)。 可以使用基于零的索引访问集合中的项目。\n\n## 实现代码\n\n```python\nimport numpy as np\n\npersontype = np.dtype({'names': ['name', 'age', 'chinese', 'math', 'english', 'total'], 'formats': ['S32', 'i', 'i', 'i', 'i', 'i']})\npeoples = np.array([(\"zhang fei\", 18, 66, 30, 65, 0), (\"guan yu\", 19, 95, 98, 85, 0), (\"zhao yun\", 20, 93, 96, 92, 0), (\"huang zhong\", 21, 90, 77, 88, 0)], dtype=persontype)\n\nages = peoples[:]['age']\nchineses = peoples[:]['chinese']\nmaths = peoples[:]['math']\nenglishs = peoples[:]['english']\ntotal = peoples[:]['total']\n\nprint(\"各项平均值\")\nprint(\"年龄：\", np.mean(ages))\nprint(\"语文：\", np.mean(chineses))\nprint(\"数学：\", np.mean(maths))\nprint(\"英语：\", np.mean(englishs))\n\nprint(\"-\" * 10)\n\nprint(\"各项最大值\") \nprint(\"年龄：\", np.amax(ages))\nprint(\"语文：\", np.amax(chineses))\nprint(\"数学：\", np.amax(maths))\nprint(\"英语：\", np.amax(englishs))\n\nprint(\"-\" * 10)\n\nprint(\"各项最小值\")\nprint(\"年龄：\", np.amin(ages))\nprint(\"语文：\", np.amin(chineses))\nprint(\"数学：\", np.amin(maths))\nprint(\"英语：\", np.amin(englishs))\n\nprint(\"-\" * 10)\n\nprint(\"各项标准差\")\nprint(\"年龄：\", np.std(ages))\nprint(\"语文：\", np.std(chineses))\nprint(\"数学：\", np.std(maths))\nprint(\"英语：\", np.std(englishs))\n\nprint(\"-\" * 10)\n\nprint(\"各项方差\")\nprint(\"年龄：\", np.var(ages))\nprint(\"语文：\", np.var(chineses))\nprint(\"数学：\", np.var(maths))\nprint(\"英语：\", np.var(englishs))\n\nprint(\"-\" * 10)\n\nprint(\"总成绩排序\")\npeoples[:]['total'] = chineses + maths + englishs\nrank = sorted(peoples, key=lambda t: t[4], reverse=True)\nfor i in rank:\n    print(i)\n```\n\n## 输出结果\n\n```markdown\n各项平均值\n年龄： 19.5\n语文： 86.0\n数学： 75.25\n英语： 82.5\n\n各项最大值\n年龄： 21\n语文： 95\n数学： 98\n英语： 92\n\n各项最小值\n年龄： 18\n语文： 66\n数学： 30\n英语： 65\n\n各项标准差\n年龄： 1.118033988749895\n语文： 11.683321445547923\n数学： 27.380421837510102\n英语： 10.404326023342406\n\n各项方差\n年龄： 1.25\n语文： 136.5\n数学： 749.6875\n英语： 108.25\n\n总成绩排序\n(b'zhao yun', 20, 93, 96, 92, 281)\n(b'huang zhong', 21, 90, 77, 88, 255)\n(b'guan yu', 19, 95, 98, 85, 278)\n(b'zhang fei', 18, 66, 30, 65, 161)\n```\n\n------\n\n# Pandas学习\n\n学习数据结构：Series 和 DataFrame\n\nSeries 是个定长的字典序列。说是定长是因为在存储的时候，相当于两个 ndarray，这也是和字典结构最大的不同。因为在字典的结构里，元素的个数是不固定的。\n\nSeries 有两个基本属性：index 和 values。在 Series 结构中，index 默认是 0,1,2,……递增的整数序列，当然也可以自己来指定索引，比如 index=[‘a’, ‘b’, ‘c’, ‘d’]。\n\nDataFrame 类型数据结构类似数据库表，它包括了行索引和列索引，可以将 DataFrame 看成是由相同索引的 Series 组成的字典类型。\n\n(二)  Pandas数据清洗\n\n1.删除 DataFrame 中的不必要的列或行；\n\n2.重命名列名 columns，让列表名更容易识别；\n\n3.去重复的值数据采集可能存在重复的行；\n\n4.格式问题；\n\n5.查找空值。\n\n------\n\n# Kaggle竞赛-Titanic乘客生存预测\n\n决策树与AdaBoost实验\n\n##  **目标任务**\n\n（1） 学习决策树、AdaBoost的原理，特性；\n\n（2） 学习使用Python编写决策树和AdaBoost分类器；\n\n（3） 学习使用sklearn训练决策树和AdaBoost，熟悉数据挖掘的一般流程.\n\n------\n\n## **实验数据**\n\nKaggle数据挖掘竞赛平台之Titanic 乘客生存预测。问题描述：泰坦尼克海难是著名的十大灾难之一，究竟多少人遇难，各方统计的结果不一。Kaggle数据挖掘竞赛平台的数据集数据集格式为 csv，一共有两个文件：train.csv 是训练数据集，包含特征信息和存活与否的标签；test.csv: 测试数据集，只包含特征信息。\n\n在训练集中，包括了以下字段，它们具体为：\n\n| 字段        | 描述                     |\n| :---------- | ------------------------ |\n| PassengerId | 乘客编号                 |\n| Survived    | 是否幸存                 |\n| Pclass      | 船票等级                 |\n| Name        | 乘客姓名                 |\n| Sex         | 乘客性别                 |\n| SibSp       | 亲戚数量（兄妹、配偶数） |\n| Parch       | 亲戚数量（父母、子女数） |\n| Ticket      | 船票号码                 |\n| Fare        | 船票价格                 |\n| Cabin       | 船舱                     |\n| Embarked    | 登陆港口                 |\n\n------\n\n## **生存预测的关键流程**\n\n要对训练集中乘客的生存进行预测，这个过程可以划分为两个重要的阶段：\n\n准备阶段：首先需要对训练集、测试集的数据进行探索，分析数据质量，并对数据进行清洗，然后通过特征选择对数据进行降维，方便后续分类运算；\n\n分类阶段：首先通过训练集的特征矩阵、分类结果得到分类器，然后将分类器应用于测试集。然后对分类器的准确性进行分析，并对模型进行可视化。\n\n## **实验过程**\n\n### 实验导入模块\n\n```python\nimport xgboost as xgb\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import cross_val_score\nimport pandas as pd\nimport numpy as np\nimport csv\n\n```\n\n\n\n### **数据探索**\n\n-  info():了解数据表的基本情况，包括行数、列数、每列的数据类型、数据完整度；\n\n-  describe():了解数据表的统计情况，包括总数、平均值、标准差、最小值、最大值等；\n\n-  describe(include=[‘O’]):查看字符串类型（非数字）的整体情况；\n\n-  head():查看前几行数据（默认是前 5 行）；\n\n-  tail():查看后几行数据（默认是最后 5 行）。\n\n\n具体代码如下：\n\n```python\nimport pandas as pd\n# 数据加载\ntrain_data = pd.read_csv('Titanic.train.csv')\ntest_data = pd.read_csv('Titanic.test.csv')\n\n# 数据探索\nprint(train_data.info())\nprint('-' * 30)\nprint(train_data.describe())\nprint('-' * 30)\nprint(train_data.describe(include=['O']))  # include后面是大写的O字母\nprint('-' * 30)\n```\n\n数据读取结果：\n\n```markdown\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 891 entries, 0 to 890\nData columns (total 12 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   PassengerId  891 non-null    int64  \n 1   Survived     891 non-null    int64  \n 2   Pclass       891 non-null    int64  \n 3   Name         891 non-null    object \n 4   Sex          891 non-null    object \n 5   Age          714 non-null    float64\n 6   SibSp        891 non-null    int64  \n 7   Parch        891 non-null    int64  \n 8   Ticket       891 non-null    object \n 9   Fare         891 non-null    float64\n 10  Cabin        204 non-null    object \n 11  Embarked     891 non-null    object \ndtypes: float64(2), int64(5), object(5)\nmemory usage: 83.7+ KB\nNone\n```\n\n\n\n### **数据清洗**\n\n通过数据探索，我们发现 Age、Fare 和 Cabin 这三个字段的数据有所缺失。其中 Age 为年龄字段，是数值型，我们可以通过平均值进行补齐；Fare 为船票价格，是数值型，我们也可以通过其他人购买船票的平均值进行补齐。具体实现的代码如下：\n\n```python\n# 使用平均年龄来填充年龄中的nan值\ntrain_data['Age'].fillna(train_data['Age'].mean(), inplace=True)\ntest_data['Age'].fillna(test_data['Age'].mean(), inplace=True)\n\n# 使用票价的均值填充票价中的nan值\ntrain_data['Fare'].fillna(train_data['Fare'].mean(), inplace=True)\ntest_data['Fare'].fillna(test_data['Fare'].mean(), inplace=True)\nprint(train_data['Embarked'].value_counts())\n\n# 使用登录最多的港口来填充登录港口的nan值\ntrain_data['Embarked'].fillna('S', inplace=True)\ntest_data['Embarked'].fillna('S', inplace=True)\n```\n\n### **特征选择**\n\n特征选择是分类器的关键。特征选择不同，得到的分类器也不同。那么该选择哪些特征做生存的预测呢？\n\n通过数据探索发现，PassengerId 为乘客编号，对分类没有作用，可以放弃；Name 为乘客姓名，对分类没有作用，可以放弃；Cabin 字段缺失值太多，可以放弃；Ticket 字段为船票号码，杂乱无章且无规律，可以放弃。其余的字段包括：Pclass、Sex、Age、SibSp、Parch 和 Fare，这些属性分别表示了乘客的船票等级、性别、年龄、亲戚数量以及船票价格，可能会和乘客的生存预测分类有关系。具体是什么关系，我们可以交给分类器来处理。因此先将 Pclass、Sex、Age 等这些其余的字段作特征，放到特征向量 features 里。\n\n代码如下：\n\n```python\n# 模块3：特征选择\nfeatures = ['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']\ntrain_features = train_data[features]\ntrain_labels = train_data['Survived']\ntest_features = test_data[features]\nfrom sklearn.feature_extraction import DictVectorizer\ndvec = DictVectorizer(sparse=False)\ntrain_features = dvec.fit_transform(train_features.to_dict(orient='record'))\nprint(dvec.feature_names_)\n```\n\n数据读取结果：\n\n```\nS    644\nC    168\nQ     77\nU      2\nName: Embarked, dtype: int64\n```\n\n\n\n### **分类模型及模型的评价**\n\n1） 使用 sklearn 中的决策树模型。使用 ID3 算法使用DecisionTreeClassifier 时，设置 criterion=‘entropy’，然后使用 fit 进行训练，将特征值矩阵和分类标识结果作为参数传入，得到决策树分类器。\n\n2） 使用 sklearn 中的集成学习模型Adaboost()\n\n3） 采用 K 折交叉验证准确率。sklearn 的 model_selection 模型选择中提供了 cross_val_score 函数。\n\nØ K 折交叉验证的原理：\n\n拿出大部分样本进行训练，少量的用于分类器的验证。K 折交叉验证，就是做 K 次交叉验证，每次选取 K 分之一的数据作为验证，其余作为训练。轮流 K 次，取平均值。\n\n代码如下：\n\n```python\n# 决策树弱分类器\ndt_stump = DecisionTreeClassifier(max_depth=7, min_samples_leaf=5)\ndt_stump.fit(train_features, train_labels)\nprint(u'决策树弱分类器准确率为 %.4lf' % np.mean(cross_val_score(dt_stump, train_features, train_labels, cv=10)))\n# 决策树分类器\ndt = DecisionTreeClassifier()\ndt.fit(train_features, train_labels)\nprint(u'决策树分类器准确率为 %.4lf' % np.mean(cross_val_score(dt, train_features, train_labels, cv=10)))\n\n# AdaBoost分类器\nada = AdaBoostClassifier()\nada.fit(train_features, train_labels)\nprint(u'AdaBoost 分类器准确率为 %.4lf' %\nnp.mean(cross_val_score(ada, train_features, train_labels, cv=15)))\n\n# XGBoost分类器\nxgb = xgb.XGBClassifier(max_depth=8, min_child_weight=3)\nxgb.fit(train_features, train_labels)\nprint(u'XGBoost 分类器准确率为 %.4lf' %\nnp.mean(cross_val_score(ada, train_features, train_labels, cv=15)))\n```\n\n### 各个分类器准确率\n\n```markdown\n决策树弱分类器准确率为 0.8228\n决策树分类器准确率为 0.7778\nAdaBoost 分类器准确率为 0.8183\nXGBoost 分类器准确率为 0.8183\n```\n\n------\n\n# 银行客户违约信用分析\n\n对银行客户基本信息数据集进行分析，提取不同信息进行特征分析和预测，通过多种分类器算法预测客户违约行为\n\n```python\nimport pandas as pd\nimport xlwt\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.feature_extraction import DictVectorizer\nfrom sklearn.tree import DecisionTreeClassifier\nimport numpy as np\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import AdaBoostClassifier\nimport xgboost as xgb\nfrom xgboost import XGBClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import MultinomialNB#多项式朴素贝叶斯分类器\nfrom sklearn.svm import LinearSVC\nfrom sklearn.naive_bayes import BernoulliNB\n```\n\n## 数据集读取转换csv文件预处理\n\n```python\n# datafile = 'data.xls'\nresultfile = 'data.csv'\ndata = pd.read_excel('data.xls')\ndata.to_csv(resultfile)\n## excel转成csv表头中文乱码\n```\n\n## 数据探索\n\n```py\ndatafile = 'data.csv'\ndata = pd.read_csv(datafile)\nprint(data.info())\ndata1 = data.describe()\ndata1.to_excel('data_dexcribe.xls')\n```\n\n{% asset_img 1.png  %}\n\n```py\nimport matplotlib.pyplot as plt\nweiyue = pd.value_counts(data['违约'])[1]\nnot_weiyue = pd.value_counts(data['违约'])[0]\n\n# 绘图\nfig = plt.figure(figsize = (8, 5))  # 设置画布大小\nplt.rcParams['font.sans-serif'] = ['KaiTi']\nplt.bar(x=range(2), height=[weiyue, not_weiyue,], width=0.4, alpha=0.8, color='skyblue')\nplt.xticks([index for index in range(2)], ['1', '0'])\nplt.xlabel('是否违约')\nplt.ylabel('客户人数')\nplt.title('客户是否违约柱状图')\nplt.show()\nplt.close()\n## 输出可见违约：未违约大概2:5\n```\n\n{% asset_img 2.png  %}\n\n```py\n# 绘制 是否违约客户 与 年龄 的分布\nimport seaborn as sns\n## 提取年龄\nage = data['年龄'].dropna()\nage = age.astype('int64')\n## 绘制客户年龄分布箱型图\nfig = plt.figure()\nfig, axes = plt.subplots(1, 3, figsize=(10, 5))\nsns.distplot(data[\"年龄\"], ax = axes[0], axlabel='所有客户年龄分布')\nsns.distplot(data.loc[data[\"违约\"]==0][\"年龄\"], ax = axes[1], axlabel = '非违约客户年龄分布')\nsns.distplot(data.loc[data[\"违约\"]==1][\"年龄\"], ax = axes[2], axlabel = '违约客户年龄分布')\nplt.show()\nplt.close()\n```\n\n{% asset_img 3.png  %}\n\n```python\n## 客户年龄中存在300岁，需要数据清洗删除异常值，用年龄均值填充\n# plt.title('客户是否违约柱状图')\n# plt.show()\n# plt.close()\n# 均值填充年龄\ndata['年龄'].fillna(data['年龄'].mean(), inplace=True)\n# 删除年龄大于80的数据\ndata.drop(data[(data['年龄'] > 80)].index.tolist(), inplace=True)\nprint(data[\"年龄\"].describe())\n# 将性别数据分别用female=1，male=0表示\ndata.loc[data[\"性别\"] == \"male\", \"性别\"] = 0\ndata.loc[data[\"性别\"] == \"female\", \"性别\"] = 1\n```\n\n性别特性处理：\n\n```markdown\ncount    699.000000\nmean      34.863308\nstd        7.967906\nmin       20.000000\n25%       29.000000\n50%       34.000000\n75%       40.000000\nmax       56.000000\nName: 年龄, dtype: float64\n```\n\n```py\n# 计算相关性矩阵\ndata_corr = data\ndt_corr = data_corr.corr(method = 'pearson')\nprint('相关性矩阵为：\\n', dt_corr)\n\n# 绘制热力图\nimport seaborn as sns\nplt.subplots(figsize=(10, 10))\nsns.heatmap(dt_corr, annot=True, vmax=1, square=True, cmap='Blues')\nplt.show()\nplt.close()\n```\n\n{% asset_img 4.png  %}\n\n```python\nfrom sklearn.feature_extraction import DictVectorizer\n# 通过分析选择合适的特征用于预测\nfeatures = ['年龄', '教育', '工龄', '地址', '负债率', '信用卡负债', '收入']\nfeatures_train = data[features]\ntrain_label = data['违约']\ndev = DictVectorizer(sparse=False)\n# 转化成字典型\nfeatures_train = dev.fit_transform(features_train.to_dict(orient='record'))\n```\n\n```python\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(features_train,train_label,test_size=0.3, random_state=23,shuffle=True)\n```\n\n```py\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.metrics import confusion_matrix, classification_report\nimport sklearn.metrics as metrics\n#import sklearn.metrics.roc\ndef Confusion_matrix(model):\n    print(confusion_matrix(y_test, model.predict(X_test)))  # 混淆矩阵\n    print(classification_report(y_test, model.predict(X_test)))  # 分类报告\n```\n\n```python\nimport itertools\n# 混淆矩阵可视化\ndef plot_confusion_matrix(cm, classes, normalize = False, title = 'Confusion matrix\"', cmap = plt.cm.Blues) :\n    plt.figure()\n    plt.imshow(cm, interpolation = 'nearest', cmap = cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation = 0)\n    plt.yticks(tick_marks, classes)\n \n    thresh = cm.max() / 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])) :\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment = 'center',\n                 color = 'white' if cm[i, j] > thresh else 'black')\n \n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n    plt.show()\n```\n\n## 不同分类器处理结果呈现\n\n### 决策树与决策树弱分类器\n\n```py\n#决策树分类器\ndt = DecisionTreeClassifier(max_depth=3,min_samples_leaf=1)\ndt.fit(features_train, train_label)\n\n#决策树弱分类器\ndt_stump =DecisionTreeClassifier()\ndt_stump.fit(features_train,train_label)\n\n# 决策树分类器\ndt.fit(X_train, y_train)\npredict_y = dt.predict(X_test)\n\ncm1 = confusion_matrix(y_test, predict_y)\nclass_names = ['违约', '未违约']\n# 显示混淆矩阵\nplot_confusion_matrix(cm1, classes=class_names, title='决策树分类')\n\nConfusion_matrix(dt)\n```\n\n```py\n# 决策树分类器\ndt.fit(X_train, y_train)\npredict_y = dt.predict(X_test)\n\ncm1 = confusion_matrix(y_test, predict_y)\nclass_names = ['违约', '未违约']\n# 显示混淆矩阵\nplot_confusion_matrix(cm1, classes=class_names, title='决策树分类')\n\nConfusion_matrix(dt)\n```\n\n决策树分类器 混淆矩阵：\n\n{% asset_img 5.png   %}\n\n决策树分类器 分类报告：\n\n{% asset_img 6.png   %}\n\n```py\n# 决策树弱分类器\n#dt_stump = DecisionTreeClassifier()\ndt_stump.fit(X_train, y_train)\npredict_y = dt_stump.predict(X_test)\n#score_y = dt_stump.decision_function(X_test)\ncm1 = confusion_matrix(y_test, predict_y)\nclass_names = ['违约', '未违约']\n# 显示混淆矩阵\nplot_confusion_matrix(cm1, classes=class_names, title='决策树弱分类')\n\nConfusion_matrix(dt_stump)\n```\n\n决策树弱分类器 混淆矩阵：\n\n{% asset_img 7.png   %}\n\n决策树弱分类器 分类报告：\n\n{% asset_img 8.png   %}\n\n### AdaBoost\n\n```py\n#AdaBoost分类器 基分类器提升（循环）次数,随机种子设置,\nada = AdaBoostClassifier(n_estimators = 10,random_state = 10,learning_rate=1.1)\nada.fit(features_train,train_label)\n\nada.fit(X_train, y_train)\npredict_y = ada.predict(X_test)\n\ncm2 = confusion_matrix(y_test, predict_y)\n\nclass_names = ['违约', '未违约']\n# 显示混淆矩阵\nplot_confusion_matrix(cm2, classes=class_names, title='AdaBoost分类器')\n\nConfusion_matrix(ada)\n```\n\nAdaBoost分类器 混淆矩阵：\n\n{% asset_img 9.png   %}\n\nAdaBoost分类器 分类报告：\n\n{% asset_img 10.png   %}\n\n### XGBoost\n\n```py\n#XGBoost分类器\n#xgb = XGBClassifier(n_estimators = 350, learning_rate=0.2)\nxgb = XGBClassifier()\nxgb.fit(features_train,train_label)\n\nxgb.fit(X_train, y_train)\npredict_y = xgb.predict(X_test)\n#score_y = dt_stump.decision_function(X_test)\ncm3 = confusion_matrix(y_test, predict_y)\nclass_names = ['违约', '未违约']\n# 显示混淆矩阵\nplot_confusion_matrix(cm3, classes=class_names, title='XGBoost分类器')\n\nConfusion_matrix(xgb)\n```\n\nXGBoost分类器 混淆矩阵：\n\n{% asset_img 11.png   %}\n\nXGBoost分类器 分类报告：\n\n{% asset_img 12.png   %}\n\n### 逻辑回归\n\n```python\n# 逻辑回归分类器\nlog = LogisticRegression()\nlog.fit(features_train, train_label)\n\n# 逻辑回归分类器\nlog = LogisticRegression()\nlog.fit(X_train, y_train)\npredict_y = log.predict(X_test)\nscore_y = log.decision_function(X_test)\ncm = confusion_matrix(y_test, predict_y)\nclass_names = ['违约', '未违约']\n# 显示混淆矩阵\nplot_confusion_matrix(cm, classes=class_names, title='逻辑回归')\n\nConfusion_matrix(log)\n```\n\n逻辑回归 混淆矩阵：\n\n{% asset_img 13.png   %}\n\n逻辑回归 分类报告：\n\n{% asset_img 14.png   %}\n\n### 朴素贝叶斯\n\n```python\n# 多项朴素贝叶斯分类器\nmul = MultinomialNB()\n#mul.fit(features_train, train_label)\nmul.fit(X_train, y_train)\n\n#mul.fit(X_train, y_train)\npredict_y = mul.predict(X_test)\n#score_y = mul.decision_function(X_test)\ncm4 = confusion_matrix(y_test, predict_y)\nclass_names = ['违约', '未违约']\n# 显示混淆矩阵\nplot_confusion_matrix(cm4, classes=class_names, title='多项朴素贝叶斯')\n\nConfusion_matrix(mul)\n```\n\n朴素贝叶斯 混淆矩阵：\n\n{% asset_img 15.png   %}\n\n朴素贝叶斯 分类报告：\n\n{% asset_img 16.png   %}\n\n## 结果整合\n\n{% asset_img 17.png   %}\n\n------\n\n# GMM聚类\n\nEM算法处理王者荣耀英雄属性数据集\n\n## 使用EM算法工具完成聚类分析算法\n\n实验目的： 学习使用EM算法工具完成聚类分析算法\n\n```python\n#实验使用的工具包\n# -*- coding: utf-8 -*-\nimport pandas as pd\nimport csv\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.mixture import GaussianMixture\nfrom sklearn.preprocessing import StandardScaler\n \n```\n\n### 数据读取\n\n任务一：数据加载，避免中文乱码问题完成\n\n```python\n#数据读取,请填写相应的代码！\ndata_ori = pd.read_csv('heros.csv', encoding='gb18030')\nfeatures = [u'最大生命',u'生命成长',u'初始生命',u'最大法力', u'法力成长',u'初始法力',u'最高物攻',u'物攻成长',u'初始物攻',u'最大物防',u'物防成长',u'初始物防', u'最大每5秒回血', u'每5秒回血成长', u'初始每5秒回血', u'最大每5秒回蓝', u'每5秒回蓝成长', u'初始每5秒回蓝', u'最大攻速', u'攻击范围']\ndata = data_ori[features]\n\n# 对英雄属性之间的关系进行可视化分析\n# 设置 plt 正确显示中文\nplt.rcParams['font.sans-serif']=['SimHei'] # 用来正常显示中文标签\nplt.rcParams['axes.unicode_minus']=False # 用来正常显示负号\n```\n\n### 数据探索\n\n任务二：编写计算特征之间相似度的代码\n\n用热力图呈现 features_mean 字段之间的相关性 \n\n```python\n#填写相应代码！！\ncorr = data[features].corr()\nprint(corr)\n             最大生命      生命成长      初始生命      最大法力      法力成长      初始法力      最高物攻  \\\n最大生命     1.000000  0.977408  0.761300 -0.220133 -0.207130 -0.260449 -0.246412   \n生命成长     0.977408  1.000000  0.658106 -0.224112 -0.212271 -0.260464 -0.268377   \n初始生命     0.761300  0.658106  1.000000 -0.189349 -0.178674 -0.222314 -0.140356   \n最大法力    -0.220133 -0.224112 -0.189349  1.000000  0.998958  0.988178 -0.180428   \n法力成长    -0.207130 -0.212271 -0.178674  0.998958  1.000000  0.980154 -0.175029   \n初始法力    -0.260449 -0.260464 -0.222314  0.988178  0.980154  1.000000 -0.195800   \n最高物攻    -0.246412 -0.268377 -0.140356 -0.180428 -0.175029 -0.195800  1.000000   \n物攻成长    -0.230507 -0.248988 -0.121609 -0.197617 -0.191883 -0.213851  0.986098   \n初始物攻    -0.195840 -0.223728 -0.161278  0.003153  0.003966  0.000371  0.536409   \n最大物防     0.862472  0.879106  0.529737 -0.210425 -0.200722 -0.239802 -0.227352   \n物防成长     0.832795  0.847654  0.528719 -0.226732 -0.217018 -0.255893 -0.182300   \n初始物防     0.746460  0.764736  0.403032 -0.106082 -0.098780 -0.128992 -0.316263   \n最大每5秒回血  0.951013  0.943635  0.688104 -0.224234 -0.212305 -0.260875 -0.290216   \n每5秒回血成长  0.967369  0.972436  0.647438 -0.190258 -0.177943 -0.228721 -0.246922   \n初始每5秒回血  0.829468  0.798746  0.701547 -0.268561 -0.258510 -0.298217 -0.346468   \n最大每5秒回蓝 -0.286851 -0.297569 -0.224674  0.872025  0.853143  0.922108 -0.193140   \n每5秒回蓝成长 -0.207165 -0.212225 -0.179819  0.996253  0.997483  0.976856 -0.179123   \n初始每5秒回蓝 -0.279098 -0.292439 -0.199537  0.450477  0.415945  0.559600 -0.145060   \n\n             物攻成长      初始物攻      最大物防      物防成长      初始物防   最大每5秒回血   每5秒回血成长  \\\n最大生命    -0.230507 -0.195840  0.862472  0.832795  0.746460  0.951013  0.967369   \n生命成长    -0.248988 -0.223728  0.879106  0.847654  0.764736  0.943635  0.972436   \n初始生命    -0.121609 -0.161278  0.529737  0.528719  0.403032  0.688104  0.647438   \n最大法力    -0.197617  0.003153 -0.210425 -0.226732 -0.106082 -0.224234 -0.190258   \n法力成长    -0.191883  0.003966 -0.200722 -0.217018 -0.098780 -0.212305 -0.177943   \n初始法力    -0.213851  0.000371 -0.239802 -0.255893 -0.128992 -0.260875 -0.228721   \n最高物攻     0.986098  0.536409 -0.227352 -0.182300 -0.316263 -0.290216 -0.246922   \n物攻成长     1.000000  0.388718 -0.218394 -0.170773 -0.317801 -0.276067 -0.231988   \n初始物攻     0.388718  1.000000 -0.151566 -0.143719 -0.139327 -0.207319 -0.191102   \n最大物防    -0.218394 -0.151566  1.000000  0.983223  0.808768  0.864672  0.883474   \n物防成长    -0.170773 -0.143719  0.983223  1.000000  0.687920  0.836301  0.849445   \n初始物防    -0.317801 -0.139327  0.808768  0.687920  1.000000  0.743957  0.776385   \n最大每5秒回血 -0.276067 -0.207319  0.864672  0.836301  0.743957  1.000000  0.983556   \n每5秒回血成长 -0.231988 -0.191102  0.883474  0.849445  0.776385  0.983556  1.000000   \n初始每5秒回血 -0.335171 -0.219081  0.746610  0.731842  0.611008  0.937169  0.858750   \n最大每5秒回蓝 -0.226294  0.078473 -0.269346 -0.282500 -0.160954 -0.267749 -0.247764   \n每5秒回蓝成长 -0.196605  0.005237 -0.202790 -0.217446 -0.105629 -0.202148 -0.169121   \n初始每5秒回蓝 -0.184345  0.132174 -0.253111 -0.260324 -0.168099 -0.250934 -0.251700   \n\n          初始每5秒回血   最大每5秒回蓝   每5秒回蓝成长   初始每5秒回蓝  \n最大生命     0.829468 -0.286851 -0.207165 -0.279098  \n生命成长     0.798746 -0.297569 -0.212225 -0.292439  \n初始生命     0.701547 -0.224674 -0.179819 -0.199537  \n最大法力    -0.268561  0.872025  0.996253  0.450477  \n法力成长    -0.258510  0.853143  0.997483  0.415945  \n初始法力    -0.298217  0.922108  0.976856  0.559600  \n最高物攻    -0.346468 -0.193140 -0.179123 -0.145060  \n物攻成长    -0.335171 -0.226294 -0.196605 -0.184345  \n初始物攻    -0.219081  0.078473  0.005237  0.132174  \n最大物防     0.746610 -0.269346 -0.202790 -0.253111  \n物防成长     0.731842 -0.282500 -0.217446 -0.260324  \n初始物防     0.611008 -0.160954 -0.105629 -0.168099  \n最大每5秒回血  0.937169 -0.267749 -0.202148 -0.250934  \n每5秒回血成长  0.858750 -0.247764 -0.169121 -0.251700  \n初始每5秒回血  1.000000 -0.280945 -0.246737 -0.225670  \n最大每5秒回蓝 -0.280945  1.000000  0.856248  0.827604  \n每5秒回蓝成长 -0.246737  0.856248  1.000000  0.418679  \n初始每5秒回蓝 -0.225670  0.827604  0.418679  1.000000  \n```\n\n\n\n```python\n#热力图可视化！！\nplt.figure(figsize=(14,14))\n# annot=True 显示每个方格的数据\nsns.heatmap(corr, annot=True)\nplt.show()\n```\n\n{% asset_img GMM.png %}\n\n从图中可以看出“最大生命”，“生命成长”，“初始生命”这三个属性的相关性大，我们只 需保留一个属性即可。 features_remain数组保留了特征选择的属性，这样将原本的20个属性降维到了13个属性。 相关性大cong的属性保留一个，因此可以对属性进行降维\n\n```python\n#将原本的20个属性降维到13个属性。请填写代码！\nfeatures = [u'最大生命',u'生命成长',u'初始生命',u'最大法力', u'法力成长',u'初始法力',u'最高物攻',u'物攻成长',u'初始物攻',u'最大物防',u'物防成长',u'初始物防', u'最大每5秒回血', u'每5秒回血成长', u'初始每5秒回血', u'最大每5秒回蓝', u'每5秒回蓝成长', u'初始每5秒回蓝', u'最大攻速', u'攻击范围']\ndata = data_ori[features]\n```\n\n### 数据清洗\n\n任务三： “最大攻速”这个属性值是百分数，不适合做矩阵运算，需要将百分数转化成小数。 “攻击范围”这个字段的取值为远程或者近战，也不适合矩阵运算； \n\n解决办法：将取值做个映射，用1代表远程，0代表近战。 \n\n示例：map({'远程':1,'近战':0})\n\n```python\ndata[u'最大攻速'] = data[u'最大攻速'].apply(lambda x:float(x.strip('%'))/100)\ndata[u'攻击范围'] = data[u'攻击范围'].map({'远程':1,'近战':0})\n<ipython-input-73-cb0648147d53>:2: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  data[u'最大攻速'] = data[u'最大攻速'].apply(lambda x:float(x.strip('%'))/100)\n<ipython-input-73-cb0648147d53>:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  data[u'攻击范围'] = data[u'攻击范围'].map({'远程':1,'近战':0})\n```\n\n采用 Z-Score 规范化数据，保证每个特征维度的数据均值为 0，方差为 1\n\n```python\nss = StandardScaler()\ndata = ss.fit_transform(data)\n```\n\n构造GMM聚类模型，GaussianMixture()\n\n```python\ngmm = GaussianMixture(n_components=30)\n\n# 训练数据\ngmm.fit(data)\n\nprediction = gmm.predict(data)\nprint(prediction)\n[13 24 11 10  2 25 20 11  7 24 18 14 10  0  1 18 13  7  2 12 22 12 12 12\n 12 12 12 21 16 26 24  9  9 16 26  9 16  6  4 15  9 16 16  9 16 15 14  4\n 24 16 28  5  2  3  3 13 29  5 23  2 29 19 17 13  8  5 27  5 21]\n \n # 将分组结果输出到 CSV 文件中\ndata_ori.insert(0, '分组', prediction)\ndata_ori.to_csv('.hero_out.csv', index=False, sep=',')\n\nfrom sklearn.metrics import calinski_harabasz_score\nprint(calinski_harabasz_score(data, prediction))\n```\n\n------\n\n# 航空公司客户价值分析\n\n{% asset_img 航空.png  %}\n\n------\n\n# 比特币价格预测\n\n比特币价格走势预测\n\n```python\n# -*- coding: utf-8 -*-\n# 比特币走势预测，使用时间序列ARMA\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom statsmodels.tsa.arima_model import ARMA\nimport warnings\nfrom itertools import product\nfrom datetime import datetime\nwarnings.filterwarnings('ignore')\n```\n\n```python\n# 数据加载\ndf = pd.read_csv('./bitcoin_2012-01-01_to_2018-10-31.csv')\n# 将时间作为df的索\ndf.Timestamp = pd.to_datetime(df.Timestamp)\ndf.index = df.Timestamp\n# 数据探索\nprint(df.head(10))\n```\n\n```python\n数据探索部分打印内容：\n            Timestamp      Open      High       Low     Close  Volume_(BTC)  \\\nTimestamp                                                                     \n2011-12-31 2011-12-31  4.465000  4.482500  4.465000  4.482500     23.829470   \n2012-01-01 2012-01-01  4.806667  4.806667  4.806667  4.806667      7.200667   \n2012-01-02 2012-01-02  5.000000  5.000000  5.000000  5.000000     19.048000   \n2012-01-03 2012-01-03  5.252500  5.252500  5.252500  5.252500     11.004660   \n2012-01-04 2012-01-04  5.200000  5.223333  5.200000  5.223333     11.914807   \n2012-01-05 2012-01-05  6.281429  6.286190  6.281429  6.286190      4.514373   \n2012-01-06 2012-01-06  6.435000  6.445000  6.435000  6.445000      2.420196   \n2012-01-07 2012-01-07  6.800000  6.800000  6.800000  6.800000      0.295858   \n2012-01-08 2012-01-08  6.950000  6.950000  6.950000  6.950000      2.500000   \n2012-01-09 2012-01-09  6.584167  6.584167  6.581667  6.581667      1.857481   \n\n            Volume_(Currency)  Weighted_Price  \nTimestamp                                      \n2011-12-31         106.330084        4.471603  \n2012-01-01          35.259720        4.806667  \n2012-01-02          95.240000        5.000000  \n2012-01-03          58.100651        5.252500  \n2012-01-04          63.119578        5.208159  \n2012-01-05          27.987370        6.284127  \n2012-01-06          15.914658        6.438999  \n2012-01-07           2.011834        6.800000  \n2012-01-08          17.300000        6.950000  \n2012-01-09          12.306798        6.582770  \n```\n\n```python\n# 按照月，季度，年来统计\ndf_month = df.resample('M').mean()\ndf_Q = df.resample('Q-DEC').mean()\ndf_year = df.resample('A-DEC').mean()\n# 按照天，月，季度，年来显示比特币的走势\nfig = plt.figure(figsize=[15, 7])\nplt.rcParams['font.sans-serif']=['SimHei'] #用来正常显示中文标签\nplt.suptitle('比特币金额（美金）', fontsize=20)\nplt.subplot(221)\n\nplt.plot(df.Weighted_Price, '-', label='按天')\nplt.legend()\nplt.subplot(222)\n\nplt.plot(df.Weighted_Price, '-', label='按月')\nplt.legend()\nplt.subplot(223)\n\nplt.plot(df.Weighted_Price, '-', label='按季度')\nplt.legend()\nplt.subplot(224)\n\nplt.plot(df.Weighted_Price, '-', label='按年')\nplt.legend()\nplt.show()\n\n```\n\n按照天、月、季度、年来统计显示比特币的走势：\n\n{% asset_img bit1.png    %}\n\n```python\n# 设置参数范围\nps = range(0, 3)\nqs = range(0, 3)\nparameters = product(ps, qs)\nparameters_list = list(parameters)\n# 寻找最优ARMA模型参数，即best_aic最小\nresults = []\nbest_aic = float(\"inf\") # 正无穷\nfor param in parameters_list:\n    try:\n        model = ARMA(df_month.Weighted_Price,order=(param[0], param[1])).fit()\n    except ValueError:\n        print('参数错误:', param)\n        continue\n    aic = model.aic\n    if aic < best_aic:\n        best_model = model\n        best_aic = aic\n        best_param = param\n    results.append([param, model.aic])\n# 输出最优模型\nresult_table = pd.DataFrame(results)\nresult_table.columns = ['parameters', 'aic']\nprint('最优模型:', best_model.summary())\n# 比特币预测\ndf_month2 = df_month[['Weighted_Price']]\ndate_list = [datetime(2018, 11, 30), datetime(2018, 12, 31), datetime(2019, 1, 31),\n             datetime(2019, 2, 28), datetime(2019, 3, 31),\n             datetime(2019, 4, 30), datetime(2019, 5, 31), datetime(2019, 6, 30)]\nfuture = pd.DataFrame(index=date_list, columns=df_month.columns)\ndf_month2 = pd.concat([df_month2, future])\ndf_month2['forecast'] = best_model.predict(start=0, end=91)\n# 比特币预测结果显示\nplt.figure(figsize=(20,7))\ndf_month2.Weighted_Price.plot(label='实际金额')\ndf_month2.forecast.plot(color='r', ls='--', label='预测金额')\nplt.legend()\nplt.title('比特币金额(月)')\nplt.xlabel('时间')\nplt.ylabel('美金')\nplt.show()\n```\n\n{% asset_img bit2.png   %}\n\n比特币预测结果：\n\n{% asset_img bit3.png   %}\n","slug":"Python数据分析与挖掘","published":1,"updated":"2024-09-26T11:27:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm1rz0oey000c18qlbptccny4","content":"<p><strong>数据挖掘与分析部分模块的实例及原理应用</strong></p>\n<span id=\"more\"></span>\n\n<h1 id=\"Numpy学习\"><a href=\"#Numpy学习\" class=\"headerlink\" title=\"Numpy学习\"></a>Numpy学习</h1><table>\n<thead>\n<tr>\n<th align=\"center\">姓名</th>\n<th align=\"center\">语文</th>\n<th align=\"center\">英语</th>\n<th align=\"center\">数学</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">张飞</td>\n<td align=\"center\">66</td>\n<td align=\"center\">65</td>\n<td align=\"center\">30</td>\n</tr>\n<tr>\n<td align=\"center\">关羽</td>\n<td align=\"center\">95</td>\n<td align=\"center\">85</td>\n<td align=\"center\">98</td>\n</tr>\n<tr>\n<td align=\"center\">赵云</td>\n<td align=\"center\">93</td>\n<td align=\"center\">92</td>\n<td align=\"center\">96</td>\n</tr>\n<tr>\n<td align=\"center\">黄忠</td>\n<td align=\"center\">90</td>\n<td align=\"center\">88</td>\n<td align=\"center\">77</td>\n</tr>\n<tr>\n<td align=\"center\">典韦</td>\n<td align=\"center\">80</td>\n<td align=\"center\">90</td>\n<td align=\"center\">90</td>\n</tr>\n</tbody></table>\n<h2 id=\"题目具体要求\"><a href=\"#题目具体要求\" class=\"headerlink\" title=\"题目具体要求\"></a>题目具体要求</h2><p>1、使用 Numpy 统计团队中成员的语文、英语、数学的平均成绩、最小成绩、最大成绩、方差、标准差。</p>\n<p>2、把这些人的总成绩排序，得出名次进行成绩输出。</p>\n<h2 id=\"Numpy基本原理\"><a href=\"#Numpy基本原理\" class=\"headerlink\" title=\"Numpy基本原理\"></a><strong>Numpy基本原理</strong></h2><p>Numpy 是 Python 语言的一个第三方库，其支持大量高维度<a href=\"https://so.csdn.net/so/search?q=%E6%95%B0%E7%BB%84&spm=1001.2101.3001.7020\">数组</a>与矩阵运算。此外，NumPy 也针对数组运算提供大量的数学函数。Numpy 中定义的最重要的对象是称为 <code>ndarray</code> 的 N 维数组类型。 它描述相同类型的元素<a href=\"https://so.csdn.net/so/search?q=%E9%9B%86%E5%90%88&spm=1001.2101.3001.7020\">集合</a>。 可以使用基于零的索引访问集合中的项目。</p>\n<h2 id=\"实现代码\"><a href=\"#实现代码\" class=\"headerlink\" title=\"实现代码\"></a>实现代码</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\">persontype = np.dtype(&#123;<span class=\"string\">&#x27;names&#x27;</span>: [<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;age&#x27;</span>, <span class=\"string\">&#x27;chinese&#x27;</span>, <span class=\"string\">&#x27;math&#x27;</span>, <span class=\"string\">&#x27;english&#x27;</span>, <span class=\"string\">&#x27;total&#x27;</span>], <span class=\"string\">&#x27;formats&#x27;</span>: [<span class=\"string\">&#x27;S32&#x27;</span>, <span class=\"string\">&#x27;i&#x27;</span>, <span class=\"string\">&#x27;i&#x27;</span>, <span class=\"string\">&#x27;i&#x27;</span>, <span class=\"string\">&#x27;i&#x27;</span>, <span class=\"string\">&#x27;i&#x27;</span>]&#125;)</span><br><span class=\"line\">peoples = np.array([(<span class=\"string\">&quot;zhang fei&quot;</span>, <span class=\"number\">18</span>, <span class=\"number\">66</span>, <span class=\"number\">30</span>, <span class=\"number\">65</span>, <span class=\"number\">0</span>), (<span class=\"string\">&quot;guan yu&quot;</span>, <span class=\"number\">19</span>, <span class=\"number\">95</span>, <span class=\"number\">98</span>, <span class=\"number\">85</span>, <span class=\"number\">0</span>), (<span class=\"string\">&quot;zhao yun&quot;</span>, <span class=\"number\">20</span>, <span class=\"number\">93</span>, <span class=\"number\">96</span>, <span class=\"number\">92</span>, <span class=\"number\">0</span>), (<span class=\"string\">&quot;huang zhong&quot;</span>, <span class=\"number\">21</span>, <span class=\"number\">90</span>, <span class=\"number\">77</span>, <span class=\"number\">88</span>, <span class=\"number\">0</span>)], dtype=persontype)</span><br><span class=\"line\"></span><br><span class=\"line\">ages = peoples[:][<span class=\"string\">&#x27;age&#x27;</span>]</span><br><span class=\"line\">chineses = peoples[:][<span class=\"string\">&#x27;chinese&#x27;</span>]</span><br><span class=\"line\">maths = peoples[:][<span class=\"string\">&#x27;math&#x27;</span>]</span><br><span class=\"line\">englishs = peoples[:][<span class=\"string\">&#x27;english&#x27;</span>]</span><br><span class=\"line\">total = peoples[:][<span class=\"string\">&#x27;total&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;各项平均值&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;年龄：&quot;</span>, np.mean(ages))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;语文：&quot;</span>, np.mean(chineses))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;数学：&quot;</span>, np.mean(maths))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;英语：&quot;</span>, np.mean(englishs))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;-&quot;</span> * <span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;各项最大值&quot;</span>) </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;年龄：&quot;</span>, np.amax(ages))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;语文：&quot;</span>, np.amax(chineses))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;数学：&quot;</span>, np.amax(maths))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;英语：&quot;</span>, np.amax(englishs))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;-&quot;</span> * <span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;各项最小值&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;年龄：&quot;</span>, np.amin(ages))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;语文：&quot;</span>, np.amin(chineses))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;数学：&quot;</span>, np.amin(maths))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;英语：&quot;</span>, np.amin(englishs))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;-&quot;</span> * <span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;各项标准差&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;年龄：&quot;</span>, np.std(ages))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;语文：&quot;</span>, np.std(chineses))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;数学：&quot;</span>, np.std(maths))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;英语：&quot;</span>, np.std(englishs))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;-&quot;</span> * <span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;各项方差&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;年龄：&quot;</span>, np.var(ages))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;语文：&quot;</span>, np.var(chineses))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;数学：&quot;</span>, np.var(maths))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;英语：&quot;</span>, np.var(englishs))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;-&quot;</span> * <span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;总成绩排序&quot;</span>)</span><br><span class=\"line\">peoples[:][<span class=\"string\">&#x27;total&#x27;</span>] = chineses + maths + englishs</span><br><span class=\"line\">rank = <span class=\"built_in\">sorted</span>(peoples, key=<span class=\"keyword\">lambda</span> t: t[<span class=\"number\">4</span>], reverse=<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> rank:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(i)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输出结果\"><a href=\"#输出结果\" class=\"headerlink\" title=\"输出结果\"></a>输出结果</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">各项平均值</span><br><span class=\"line\">年龄： 19.5</span><br><span class=\"line\">语文： 86.0</span><br><span class=\"line\">数学： 75.25</span><br><span class=\"line\">英语： 82.5</span><br><span class=\"line\"></span><br><span class=\"line\">各项最大值</span><br><span class=\"line\">年龄： 21</span><br><span class=\"line\">语文： 95</span><br><span class=\"line\">数学： 98</span><br><span class=\"line\">英语： 92</span><br><span class=\"line\"></span><br><span class=\"line\">各项最小值</span><br><span class=\"line\">年龄： 18</span><br><span class=\"line\">语文： 66</span><br><span class=\"line\">数学： 30</span><br><span class=\"line\">英语： 65</span><br><span class=\"line\"></span><br><span class=\"line\">各项标准差</span><br><span class=\"line\">年龄： 1.118033988749895</span><br><span class=\"line\">语文： 11.683321445547923</span><br><span class=\"line\">数学： 27.380421837510102</span><br><span class=\"line\">英语： 10.404326023342406</span><br><span class=\"line\"></span><br><span class=\"line\">各项方差</span><br><span class=\"line\">年龄： 1.25</span><br><span class=\"line\">语文： 136.5</span><br><span class=\"line\">数学： 749.6875</span><br><span class=\"line\">英语： 108.25</span><br><span class=\"line\"></span><br><span class=\"line\">总成绩排序</span><br><span class=\"line\">(b&#x27;zhao yun&#x27;, 20, 93, 96, 92, 281)</span><br><span class=\"line\">(b&#x27;huang zhong&#x27;, 21, 90, 77, 88, 255)</span><br><span class=\"line\">(b&#x27;guan yu&#x27;, 19, 95, 98, 85, 278)</span><br><span class=\"line\">(b&#x27;zhang fei&#x27;, 18, 66, 30, 65, 161)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"Pandas学习\"><a href=\"#Pandas学习\" class=\"headerlink\" title=\"Pandas学习\"></a>Pandas学习</h1><p>学习数据结构：Series 和 DataFrame</p>\n<p>Series 是个定长的字典序列。说是定长是因为在存储的时候，相当于两个 ndarray，这也是和字典结构最大的不同。因为在字典的结构里，元素的个数是不固定的。</p>\n<p>Series 有两个基本属性：index 和 values。在 Series 结构中，index 默认是 0,1,2,……递增的整数序列，当然也可以自己来指定索引，比如 index&#x3D;[‘a’, ‘b’, ‘c’, ‘d’]。</p>\n<p>DataFrame 类型数据结构类似数据库表，它包括了行索引和列索引，可以将 DataFrame 看成是由相同索引的 Series 组成的字典类型。</p>\n<p>(二)  Pandas数据清洗</p>\n<p>1.删除 DataFrame 中的不必要的列或行；</p>\n<p>2.重命名列名 columns，让列表名更容易识别；</p>\n<p>3.去重复的值数据采集可能存在重复的行；</p>\n<p>4.格式问题；</p>\n<p>5.查找空值。</p>\n<hr>\n<h1 id=\"Kaggle竞赛-Titanic乘客生存预测\"><a href=\"#Kaggle竞赛-Titanic乘客生存预测\" class=\"headerlink\" title=\"Kaggle竞赛-Titanic乘客生存预测\"></a>Kaggle竞赛-Titanic乘客生存预测</h1><p>决策树与AdaBoost实验</p>\n<h2 id=\"目标任务\"><a href=\"#目标任务\" class=\"headerlink\" title=\"目标任务\"></a><strong>目标任务</strong></h2><p>（1） 学习决策树、AdaBoost的原理，特性；</p>\n<p>（2） 学习使用Python编写决策树和AdaBoost分类器；</p>\n<p>（3） 学习使用sklearn训练决策树和AdaBoost，熟悉数据挖掘的一般流程.</p>\n<hr>\n<h2 id=\"实验数据\"><a href=\"#实验数据\" class=\"headerlink\" title=\"实验数据\"></a><strong>实验数据</strong></h2><p>Kaggle数据挖掘竞赛平台之Titanic 乘客生存预测。问题描述：泰坦尼克海难是著名的十大灾难之一，究竟多少人遇难，各方统计的结果不一。Kaggle数据挖掘竞赛平台的数据集数据集格式为 csv，一共有两个文件：train.csv 是训练数据集，包含特征信息和存活与否的标签；test.csv: 测试数据集，只包含特征信息。</p>\n<p>在训练集中，包括了以下字段，它们具体为：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">字段</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">PassengerId</td>\n<td>乘客编号</td>\n</tr>\n<tr>\n<td align=\"left\">Survived</td>\n<td>是否幸存</td>\n</tr>\n<tr>\n<td align=\"left\">Pclass</td>\n<td>船票等级</td>\n</tr>\n<tr>\n<td align=\"left\">Name</td>\n<td>乘客姓名</td>\n</tr>\n<tr>\n<td align=\"left\">Sex</td>\n<td>乘客性别</td>\n</tr>\n<tr>\n<td align=\"left\">SibSp</td>\n<td>亲戚数量（兄妹、配偶数）</td>\n</tr>\n<tr>\n<td align=\"left\">Parch</td>\n<td>亲戚数量（父母、子女数）</td>\n</tr>\n<tr>\n<td align=\"left\">Ticket</td>\n<td>船票号码</td>\n</tr>\n<tr>\n<td align=\"left\">Fare</td>\n<td>船票价格</td>\n</tr>\n<tr>\n<td align=\"left\">Cabin</td>\n<td>船舱</td>\n</tr>\n<tr>\n<td align=\"left\">Embarked</td>\n<td>登陆港口</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"生存预测的关键流程\"><a href=\"#生存预测的关键流程\" class=\"headerlink\" title=\"生存预测的关键流程\"></a><strong>生存预测的关键流程</strong></h2><p>要对训练集中乘客的生存进行预测，这个过程可以划分为两个重要的阶段：</p>\n<p>准备阶段：首先需要对训练集、测试集的数据进行探索，分析数据质量，并对数据进行清洗，然后通过特征选择对数据进行降维，方便后续分类运算；</p>\n<p>分类阶段：首先通过训练集的特征矩阵、分类结果得到分类器，然后将分类器应用于测试集。然后对分类器的准确性进行分析，并对模型进行可视化。</p>\n<h2 id=\"实验过程\"><a href=\"#实验过程\" class=\"headerlink\" title=\"实验过程\"></a><strong>实验过程</strong></h2><h3 id=\"实验导入模块\"><a href=\"#实验导入模块\" class=\"headerlink\" title=\"实验导入模块\"></a>实验导入模块</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> xgboost <span class=\"keyword\">as</span> xgb</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.linear_model <span class=\"keyword\">import</span> LogisticRegression</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> train_test_split</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.ensemble <span class=\"keyword\">import</span> RandomForestRegressor</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.tree <span class=\"keyword\">import</span> DecisionTreeClassifier</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.ensemble <span class=\"keyword\">import</span> RandomForestClassifier</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.ensemble <span class=\"keyword\">import</span> AdaBoostClassifier</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.metrics <span class=\"keyword\">import</span> accuracy_score</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> cross_val_score</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> csv</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"数据探索\"><a href=\"#数据探索\" class=\"headerlink\" title=\"数据探索\"></a><strong>数据探索</strong></h3><ul>\n<li><p>info():了解数据表的基本情况，包括行数、列数、每列的数据类型、数据完整度；</p>\n</li>\n<li><p>describe():了解数据表的统计情况，包括总数、平均值、标准差、最小值、最大值等；</p>\n</li>\n<li><p>describe(include&#x3D;[‘O’]):查看字符串类型（非数字）的整体情况；</p>\n</li>\n<li><p>head():查看前几行数据（默认是前 5 行）；</p>\n</li>\n<li><p>tail():查看后几行数据（默认是最后 5 行）。</p>\n</li>\n</ul>\n<p>具体代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"comment\"># 数据加载</span></span><br><span class=\"line\">train_data = pd.read_csv(<span class=\"string\">&#x27;Titanic.train.csv&#x27;</span>)</span><br><span class=\"line\">test_data = pd.read_csv(<span class=\"string\">&#x27;Titanic.test.csv&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 数据探索</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(train_data.info())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;-&#x27;</span> * <span class=\"number\">30</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(train_data.describe())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;-&#x27;</span> * <span class=\"number\">30</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(train_data.describe(include=[<span class=\"string\">&#x27;O&#x27;</span>]))  <span class=\"comment\"># include后面是大写的O字母</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;-&#x27;</span> * <span class=\"number\">30</span>)</span><br></pre></td></tr></table></figure>\n\n<p>数据读取结果：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">class</span> &#x27;<span class=\"attr\">pandas.core.frame.DataFrame</span>&#x27;&gt;</span></span></span><br><span class=\"line\">RangeIndex: 891 entries, 0 to 890</span><br><span class=\"line\">Data columns (total 12 columns):</span><br><span class=\"line\"> #   Column       Non-Null Count  Dtype  </span><br><span class=\"line\">---  ------       --------------  -----  </span><br><span class=\"line\"> 0   PassengerId  891 non-null    int64  </span><br><span class=\"line\"> 1   Survived     891 non-null    int64  </span><br><span class=\"line\"> 2   Pclass       891 non-null    int64  </span><br><span class=\"line\"> 3   Name         891 non-null    object </span><br><span class=\"line\"> 4   Sex          891 non-null    object </span><br><span class=\"line\"> 5   Age          714 non-null    float64</span><br><span class=\"line\"> 6   SibSp        891 non-null    int64  </span><br><span class=\"line\"> 7   Parch        891 non-null    int64  </span><br><span class=\"line\"> 8   Ticket       891 non-null    object </span><br><span class=\"line\"> 9   Fare         891 non-null    float64</span><br><span class=\"line\"> 10  Cabin        204 non-null    object </span><br><span class=\"line\"> 11  Embarked     891 non-null    object </span><br><span class=\"line\">dtypes: float64(2), int64(5), object(5)</span><br><span class=\"line\">memory usage: 83.7+ KB</span><br><span class=\"line\">None</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"数据清洗\"><a href=\"#数据清洗\" class=\"headerlink\" title=\"数据清洗\"></a><strong>数据清洗</strong></h3><p>通过数据探索，我们发现 Age、Fare 和 Cabin 这三个字段的数据有所缺失。其中 Age 为年龄字段，是数值型，我们可以通过平均值进行补齐；Fare 为船票价格，是数值型，我们也可以通过其他人购买船票的平均值进行补齐。具体实现的代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用平均年龄来填充年龄中的nan值</span></span><br><span class=\"line\">train_data[<span class=\"string\">&#x27;Age&#x27;</span>].fillna(train_data[<span class=\"string\">&#x27;Age&#x27;</span>].mean(), inplace=<span class=\"literal\">True</span>)</span><br><span class=\"line\">test_data[<span class=\"string\">&#x27;Age&#x27;</span>].fillna(test_data[<span class=\"string\">&#x27;Age&#x27;</span>].mean(), inplace=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用票价的均值填充票价中的nan值</span></span><br><span class=\"line\">train_data[<span class=\"string\">&#x27;Fare&#x27;</span>].fillna(train_data[<span class=\"string\">&#x27;Fare&#x27;</span>].mean(), inplace=<span class=\"literal\">True</span>)</span><br><span class=\"line\">test_data[<span class=\"string\">&#x27;Fare&#x27;</span>].fillna(test_data[<span class=\"string\">&#x27;Fare&#x27;</span>].mean(), inplace=<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(train_data[<span class=\"string\">&#x27;Embarked&#x27;</span>].value_counts())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用登录最多的港口来填充登录港口的nan值</span></span><br><span class=\"line\">train_data[<span class=\"string\">&#x27;Embarked&#x27;</span>].fillna(<span class=\"string\">&#x27;S&#x27;</span>, inplace=<span class=\"literal\">True</span>)</span><br><span class=\"line\">test_data[<span class=\"string\">&#x27;Embarked&#x27;</span>].fillna(<span class=\"string\">&#x27;S&#x27;</span>, inplace=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"特征选择\"><a href=\"#特征选择\" class=\"headerlink\" title=\"特征选择\"></a><strong>特征选择</strong></h3><p>特征选择是分类器的关键。特征选择不同，得到的分类器也不同。那么该选择哪些特征做生存的预测呢？</p>\n<p>通过数据探索发现，PassengerId 为乘客编号，对分类没有作用，可以放弃；Name 为乘客姓名，对分类没有作用，可以放弃；Cabin 字段缺失值太多，可以放弃；Ticket 字段为船票号码，杂乱无章且无规律，可以放弃。其余的字段包括：Pclass、Sex、Age、SibSp、Parch 和 Fare，这些属性分别表示了乘客的船票等级、性别、年龄、亲戚数量以及船票价格，可能会和乘客的生存预测分类有关系。具体是什么关系，我们可以交给分类器来处理。因此先将 Pclass、Sex、Age 等这些其余的字段作特征，放到特征向量 features 里。</p>\n<p>代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 模块3：特征选择</span></span><br><span class=\"line\">features = [<span class=\"string\">&#x27;Pclass&#x27;</span>, <span class=\"string\">&#x27;Sex&#x27;</span>, <span class=\"string\">&#x27;Age&#x27;</span>, <span class=\"string\">&#x27;SibSp&#x27;</span>, <span class=\"string\">&#x27;Parch&#x27;</span>, <span class=\"string\">&#x27;Fare&#x27;</span>, <span class=\"string\">&#x27;Embarked&#x27;</span>]</span><br><span class=\"line\">train_features = train_data[features]</span><br><span class=\"line\">train_labels = train_data[<span class=\"string\">&#x27;Survived&#x27;</span>]</span><br><span class=\"line\">test_features = test_data[features]</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.feature_extraction <span class=\"keyword\">import</span> DictVectorizer</span><br><span class=\"line\">dvec = DictVectorizer(sparse=<span class=\"literal\">False</span>)</span><br><span class=\"line\">train_features = dvec.fit_transform(train_features.to_dict(orient=<span class=\"string\">&#x27;record&#x27;</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dvec.feature_names_)</span><br></pre></td></tr></table></figure>\n\n<p>数据读取结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">S    644</span><br><span class=\"line\">C    168</span><br><span class=\"line\">Q     77</span><br><span class=\"line\">U      2</span><br><span class=\"line\">Name: Embarked, dtype: int64</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"分类模型及模型的评价\"><a href=\"#分类模型及模型的评价\" class=\"headerlink\" title=\"分类模型及模型的评价\"></a><strong>分类模型及模型的评价</strong></h3><p>1） 使用 sklearn 中的决策树模型。使用 ID3 算法使用DecisionTreeClassifier 时，设置 criterion&#x3D;‘entropy’，然后使用 fit 进行训练，将特征值矩阵和分类标识结果作为参数传入，得到决策树分类器。</p>\n<p>2） 使用 sklearn 中的集成学习模型Adaboost()</p>\n<p>3） 采用 K 折交叉验证准确率。sklearn 的 model_selection 模型选择中提供了 cross_val_score 函数。</p>\n<p>Ø K 折交叉验证的原理：</p>\n<p>拿出大部分样本进行训练，少量的用于分类器的验证。K 折交叉验证，就是做 K 次交叉验证，每次选取 K 分之一的数据作为验证，其余作为训练。轮流 K 次，取平均值。</p>\n<p>代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 决策树弱分类器</span></span><br><span class=\"line\">dt_stump = DecisionTreeClassifier(max_depth=<span class=\"number\">7</span>, min_samples_leaf=<span class=\"number\">5</span>)</span><br><span class=\"line\">dt_stump.fit(train_features, train_labels)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">u&#x27;决策树弱分类器准确率为 %.4lf&#x27;</span> % np.mean(cross_val_score(dt_stump, train_features, train_labels, cv=<span class=\"number\">10</span>)))</span><br><span class=\"line\"><span class=\"comment\"># 决策树分类器</span></span><br><span class=\"line\">dt = DecisionTreeClassifier()</span><br><span class=\"line\">dt.fit(train_features, train_labels)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">u&#x27;决策树分类器准确率为 %.4lf&#x27;</span> % np.mean(cross_val_score(dt, train_features, train_labels, cv=<span class=\"number\">10</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># AdaBoost分类器</span></span><br><span class=\"line\">ada = AdaBoostClassifier()</span><br><span class=\"line\">ada.fit(train_features, train_labels)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">u&#x27;AdaBoost 分类器准确率为 %.4lf&#x27;</span> %</span><br><span class=\"line\">np.mean(cross_val_score(ada, train_features, train_labels, cv=<span class=\"number\">15</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># XGBoost分类器</span></span><br><span class=\"line\">xgb = xgb.XGBClassifier(max_depth=<span class=\"number\">8</span>, min_child_weight=<span class=\"number\">3</span>)</span><br><span class=\"line\">xgb.fit(train_features, train_labels)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">u&#x27;XGBoost 分类器准确率为 %.4lf&#x27;</span> %</span><br><span class=\"line\">np.mean(cross_val_score(ada, train_features, train_labels, cv=<span class=\"number\">15</span>)))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"各个分类器准确率\"><a href=\"#各个分类器准确率\" class=\"headerlink\" title=\"各个分类器准确率\"></a>各个分类器准确率</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">决策树弱分类器准确率为 0.8228</span><br><span class=\"line\">决策树分类器准确率为 0.7778</span><br><span class=\"line\">AdaBoost 分类器准确率为 0.8183</span><br><span class=\"line\">XGBoost 分类器准确率为 0.8183</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"银行客户违约信用分析\"><a href=\"#银行客户违约信用分析\" class=\"headerlink\" title=\"银行客户违约信用分析\"></a>银行客户违约信用分析</h1><p>对银行客户基本信息数据集进行分析，提取不同信息进行特征分析和预测，通过多种分类器算法预测客户违约行为</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> xlwt</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.feature_extraction <span class=\"keyword\">import</span> DictVectorizer</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.tree <span class=\"keyword\">import</span> DecisionTreeClassifier</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> cross_val_score</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.ensemble <span class=\"keyword\">import</span> AdaBoostClassifier</span><br><span class=\"line\"><span class=\"keyword\">import</span> xgboost <span class=\"keyword\">as</span> xgb</span><br><span class=\"line\"><span class=\"keyword\">from</span> xgboost <span class=\"keyword\">import</span> XGBClassifier</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.linear_model <span class=\"keyword\">import</span> LogisticRegression</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.naive_bayes <span class=\"keyword\">import</span> MultinomialNB<span class=\"comment\">#多项式朴素贝叶斯分类器</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.svm <span class=\"keyword\">import</span> LinearSVC</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.naive_bayes <span class=\"keyword\">import</span> BernoulliNB</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数据集读取转换csv文件预处理\"><a href=\"#数据集读取转换csv文件预处理\" class=\"headerlink\" title=\"数据集读取转换csv文件预处理\"></a>数据集读取转换csv文件预处理</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># datafile = &#x27;data.xls&#x27;</span></span><br><span class=\"line\">resultfile = <span class=\"string\">&#x27;data.csv&#x27;</span></span><br><span class=\"line\">data = pd.read_excel(<span class=\"string\">&#x27;data.xls&#x27;</span>)</span><br><span class=\"line\">data.to_csv(resultfile)</span><br><span class=\"line\"><span class=\"comment\">## excel转成csv表头中文乱码</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数据探索-1\"><a href=\"#数据探索-1\" class=\"headerlink\" title=\"数据探索\"></a>数据探索</h2><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">datafile = <span class=\"string\">&#x27;data.csv&#x27;</span></span><br><span class=\"line\">data = pd.read_csv(datafile)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(data.info())</span><br><span class=\"line\">data1 = data.describe()</span><br><span class=\"line\">data1.to_excel(<span class=\"string\">&#x27;data_dexcribe.xls&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<img src=\"/posts/c1c7733e/1.png\" class=\"\">\n\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\">weiyue = pd.value_counts(data[<span class=\"string\">&#x27;违约&#x27;</span>])[<span class=\"number\">1</span>]</span><br><span class=\"line\">not_weiyue = pd.value_counts(data[<span class=\"string\">&#x27;违约&#x27;</span>])[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 绘图</span></span><br><span class=\"line\">fig = plt.figure(figsize = (<span class=\"number\">8</span>, <span class=\"number\">5</span>))  <span class=\"comment\"># 设置画布大小</span></span><br><span class=\"line\">plt.rcParams[<span class=\"string\">&#x27;font.sans-serif&#x27;</span>] = [<span class=\"string\">&#x27;KaiTi&#x27;</span>]</span><br><span class=\"line\">plt.bar(x=<span class=\"built_in\">range</span>(<span class=\"number\">2</span>), height=[weiyue, not_weiyue,], width=<span class=\"number\">0.4</span>, alpha=<span class=\"number\">0.8</span>, color=<span class=\"string\">&#x27;skyblue&#x27;</span>)</span><br><span class=\"line\">plt.xticks([index <span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>)], [<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;0&#x27;</span>])</span><br><span class=\"line\">plt.xlabel(<span class=\"string\">&#x27;是否违约&#x27;</span>)</span><br><span class=\"line\">plt.ylabel(<span class=\"string\">&#x27;客户人数&#x27;</span>)</span><br><span class=\"line\">plt.title(<span class=\"string\">&#x27;客户是否违约柱状图&#x27;</span>)</span><br><span class=\"line\">plt.show()</span><br><span class=\"line\">plt.close()</span><br><span class=\"line\"><span class=\"comment\">## 输出可见违约：未违约大概2:5</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/posts/c1c7733e/2.png\" class=\"\">\n\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 绘制 是否违约客户 与 年龄 的分布</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"><span class=\"comment\">## 提取年龄</span></span><br><span class=\"line\">age = data[<span class=\"string\">&#x27;年龄&#x27;</span>].dropna()</span><br><span class=\"line\">age = age.astype(<span class=\"string\">&#x27;int64&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">## 绘制客户年龄分布箱型图</span></span><br><span class=\"line\">fig = plt.figure()</span><br><span class=\"line\">fig, axes = plt.subplots(<span class=\"number\">1</span>, <span class=\"number\">3</span>, figsize=(<span class=\"number\">10</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\">sns.distplot(data[<span class=\"string\">&quot;年龄&quot;</span>], ax = axes[<span class=\"number\">0</span>], axlabel=<span class=\"string\">&#x27;所有客户年龄分布&#x27;</span>)</span><br><span class=\"line\">sns.distplot(data.loc[data[<span class=\"string\">&quot;违约&quot;</span>]==<span class=\"number\">0</span>][<span class=\"string\">&quot;年龄&quot;</span>], ax = axes[<span class=\"number\">1</span>], axlabel = <span class=\"string\">&#x27;非违约客户年龄分布&#x27;</span>)</span><br><span class=\"line\">sns.distplot(data.loc[data[<span class=\"string\">&quot;违约&quot;</span>]==<span class=\"number\">1</span>][<span class=\"string\">&quot;年龄&quot;</span>], ax = axes[<span class=\"number\">2</span>], axlabel = <span class=\"string\">&#x27;违约客户年龄分布&#x27;</span>)</span><br><span class=\"line\">plt.show()</span><br><span class=\"line\">plt.close()</span><br></pre></td></tr></table></figure>\n\n<img src=\"/posts/c1c7733e/3.png\" class=\"\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 客户年龄中存在300岁，需要数据清洗删除异常值，用年龄均值填充</span></span><br><span class=\"line\"><span class=\"comment\"># plt.title(&#x27;客户是否违约柱状图&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\"># plt.show()</span></span><br><span class=\"line\"><span class=\"comment\"># plt.close()</span></span><br><span class=\"line\"><span class=\"comment\"># 均值填充年龄</span></span><br><span class=\"line\">data[<span class=\"string\">&#x27;年龄&#x27;</span>].fillna(data[<span class=\"string\">&#x27;年龄&#x27;</span>].mean(), inplace=<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"comment\"># 删除年龄大于80的数据</span></span><br><span class=\"line\">data.drop(data[(data[<span class=\"string\">&#x27;年龄&#x27;</span>] &gt; <span class=\"number\">80</span>)].index.tolist(), inplace=<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(data[<span class=\"string\">&quot;年龄&quot;</span>].describe())</span><br><span class=\"line\"><span class=\"comment\"># 将性别数据分别用female=1，male=0表示</span></span><br><span class=\"line\">data.loc[data[<span class=\"string\">&quot;性别&quot;</span>] == <span class=\"string\">&quot;male&quot;</span>, <span class=\"string\">&quot;性别&quot;</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">data.loc[data[<span class=\"string\">&quot;性别&quot;</span>] == <span class=\"string\">&quot;female&quot;</span>, <span class=\"string\">&quot;性别&quot;</span>] = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>性别特性处理：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">count    699.000000</span><br><span class=\"line\">mean      34.863308</span><br><span class=\"line\">std        7.967906</span><br><span class=\"line\">min       20.000000</span><br><span class=\"line\">25%       29.000000</span><br><span class=\"line\">50%       34.000000</span><br><span class=\"line\">75%       40.000000</span><br><span class=\"line\">max       56.000000</span><br><span class=\"line\">Name: 年龄, dtype: float64</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 计算相关性矩阵</span></span><br><span class=\"line\">data_corr = data</span><br><span class=\"line\">dt_corr = data_corr.corr(method = <span class=\"string\">&#x27;pearson&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;相关性矩阵为：\\n&#x27;</span>, dt_corr)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 绘制热力图</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\">plt.subplots(figsize=(<span class=\"number\">10</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\">sns.heatmap(dt_corr, annot=<span class=\"literal\">True</span>, vmax=<span class=\"number\">1</span>, square=<span class=\"literal\">True</span>, cmap=<span class=\"string\">&#x27;Blues&#x27;</span>)</span><br><span class=\"line\">plt.show()</span><br><span class=\"line\">plt.close()</span><br></pre></td></tr></table></figure>\n\n<img src=\"/posts/c1c7733e/4.png\" class=\"\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sklearn.feature_extraction <span class=\"keyword\">import</span> DictVectorizer</span><br><span class=\"line\"><span class=\"comment\"># 通过分析选择合适的特征用于预测</span></span><br><span class=\"line\">features = [<span class=\"string\">&#x27;年龄&#x27;</span>, <span class=\"string\">&#x27;教育&#x27;</span>, <span class=\"string\">&#x27;工龄&#x27;</span>, <span class=\"string\">&#x27;地址&#x27;</span>, <span class=\"string\">&#x27;负债率&#x27;</span>, <span class=\"string\">&#x27;信用卡负债&#x27;</span>, <span class=\"string\">&#x27;收入&#x27;</span>]</span><br><span class=\"line\">features_train = data[features]</span><br><span class=\"line\">train_label = data[<span class=\"string\">&#x27;违约&#x27;</span>]</span><br><span class=\"line\">dev = DictVectorizer(sparse=<span class=\"literal\">False</span>)</span><br><span class=\"line\"><span class=\"comment\"># 转化成字典型</span></span><br><span class=\"line\">features_train = dev.fit_transform(features_train.to_dict(orient=<span class=\"string\">&#x27;record&#x27;</span>))</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> train_test_split</span><br><span class=\"line\">X_train, X_test, y_train, y_test = train_test_split(features_train,train_label,test_size=<span class=\"number\">0.3</span>, random_state=<span class=\"number\">23</span>,shuffle=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sklearn.neural_network <span class=\"keyword\">import</span> MLPClassifier</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.metrics <span class=\"keyword\">import</span> confusion_matrix, classification_report</span><br><span class=\"line\"><span class=\"keyword\">import</span> sklearn.metrics <span class=\"keyword\">as</span> metrics</span><br><span class=\"line\"><span class=\"comment\">#import sklearn.metrics.roc</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Confusion_matrix</span>(<span class=\"params\">model</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(confusion_matrix(y_test, model.predict(X_test)))  <span class=\"comment\"># 混淆矩阵</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(classification_report(y_test, model.predict(X_test)))  <span class=\"comment\"># 分类报告</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> itertools</span><br><span class=\"line\"><span class=\"comment\"># 混淆矩阵可视化</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">plot_confusion_matrix</span>(<span class=\"params\">cm, classes, normalize = <span class=\"literal\">False</span>, title = <span class=\"string\">&#x27;Confusion matrix&quot;&#x27;</span>, cmap = plt.cm.Blues</span>) :</span><br><span class=\"line\">    plt.figure()</span><br><span class=\"line\">    plt.imshow(cm, interpolation = <span class=\"string\">&#x27;nearest&#x27;</span>, cmap = cmap)</span><br><span class=\"line\">    plt.title(title)</span><br><span class=\"line\">    plt.colorbar()</span><br><span class=\"line\">    tick_marks = np.arange(<span class=\"built_in\">len</span>(classes))</span><br><span class=\"line\">    plt.xticks(tick_marks, classes, rotation = <span class=\"number\">0</span>)</span><br><span class=\"line\">    plt.yticks(tick_marks, classes)</span><br><span class=\"line\"> </span><br><span class=\"line\">    thresh = cm.<span class=\"built_in\">max</span>() / <span class=\"number\">2.</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, j <span class=\"keyword\">in</span> itertools.product(<span class=\"built_in\">range</span>(cm.shape[<span class=\"number\">0</span>]), <span class=\"built_in\">range</span>(cm.shape[<span class=\"number\">1</span>])) :</span><br><span class=\"line\">        plt.text(j, i, cm[i, j],</span><br><span class=\"line\">                 horizontalalignment = <span class=\"string\">&#x27;center&#x27;</span>,</span><br><span class=\"line\">                 color = <span class=\"string\">&#x27;white&#x27;</span> <span class=\"keyword\">if</span> cm[i, j] &gt; thresh <span class=\"keyword\">else</span> <span class=\"string\">&#x27;black&#x27;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">    plt.tight_layout()</span><br><span class=\"line\">    plt.ylabel(<span class=\"string\">&#x27;True label&#x27;</span>)</span><br><span class=\"line\">    plt.xlabel(<span class=\"string\">&#x27;Predicted label&#x27;</span>)</span><br><span class=\"line\">    plt.show()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"不同分类器处理结果呈现\"><a href=\"#不同分类器处理结果呈现\" class=\"headerlink\" title=\"不同分类器处理结果呈现\"></a>不同分类器处理结果呈现</h2><h3 id=\"决策树与决策树弱分类器\"><a href=\"#决策树与决策树弱分类器\" class=\"headerlink\" title=\"决策树与决策树弱分类器\"></a>决策树与决策树弱分类器</h3><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#决策树分类器</span></span><br><span class=\"line\">dt = DecisionTreeClassifier(max_depth=<span class=\"number\">3</span>,min_samples_leaf=<span class=\"number\">1</span>)</span><br><span class=\"line\">dt.fit(features_train, train_label)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#决策树弱分类器</span></span><br><span class=\"line\">dt_stump =DecisionTreeClassifier()</span><br><span class=\"line\">dt_stump.fit(features_train,train_label)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 决策树分类器</span></span><br><span class=\"line\">dt.fit(X_train, y_train)</span><br><span class=\"line\">predict_y = dt.predict(X_test)</span><br><span class=\"line\"></span><br><span class=\"line\">cm1 = confusion_matrix(y_test, predict_y)</span><br><span class=\"line\">class_names = [<span class=\"string\">&#x27;违约&#x27;</span>, <span class=\"string\">&#x27;未违约&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 显示混淆矩阵</span></span><br><span class=\"line\">plot_confusion_matrix(cm1, classes=class_names, title=<span class=\"string\">&#x27;决策树分类&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Confusion_matrix(dt)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 决策树分类器</span></span><br><span class=\"line\">dt.fit(X_train, y_train)</span><br><span class=\"line\">predict_y = dt.predict(X_test)</span><br><span class=\"line\"></span><br><span class=\"line\">cm1 = confusion_matrix(y_test, predict_y)</span><br><span class=\"line\">class_names = [<span class=\"string\">&#x27;违约&#x27;</span>, <span class=\"string\">&#x27;未违约&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 显示混淆矩阵</span></span><br><span class=\"line\">plot_confusion_matrix(cm1, classes=class_names, title=<span class=\"string\">&#x27;决策树分类&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Confusion_matrix(dt)</span><br></pre></td></tr></table></figure>\n\n<p>决策树分类器 混淆矩阵：</p>\n<img src=\"/posts/c1c7733e/5.png\" class=\"\">\n\n<p>决策树分类器 分类报告：</p>\n<img src=\"/posts/c1c7733e/6.png\" class=\"\">\n\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 决策树弱分类器</span></span><br><span class=\"line\"><span class=\"comment\">#dt_stump = DecisionTreeClassifier()</span></span><br><span class=\"line\">dt_stump.fit(X_train, y_train)</span><br><span class=\"line\">predict_y = dt_stump.predict(X_test)</span><br><span class=\"line\"><span class=\"comment\">#score_y = dt_stump.decision_function(X_test)</span></span><br><span class=\"line\">cm1 = confusion_matrix(y_test, predict_y)</span><br><span class=\"line\">class_names = [<span class=\"string\">&#x27;违约&#x27;</span>, <span class=\"string\">&#x27;未违约&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 显示混淆矩阵</span></span><br><span class=\"line\">plot_confusion_matrix(cm1, classes=class_names, title=<span class=\"string\">&#x27;决策树弱分类&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Confusion_matrix(dt_stump)</span><br></pre></td></tr></table></figure>\n\n<p>决策树弱分类器 混淆矩阵：</p>\n<img src=\"/posts/c1c7733e/7.png\" class=\"\">\n\n<p>决策树弱分类器 分类报告：</p>\n<img src=\"/posts/c1c7733e/8.png\" class=\"\">\n\n<h3 id=\"AdaBoost\"><a href=\"#AdaBoost\" class=\"headerlink\" title=\"AdaBoost\"></a>AdaBoost</h3><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#AdaBoost分类器 基分类器提升（循环）次数,随机种子设置,</span></span><br><span class=\"line\">ada = AdaBoostClassifier(n_estimators = <span class=\"number\">10</span>,random_state = <span class=\"number\">10</span>,learning_rate=<span class=\"number\">1.1</span>)</span><br><span class=\"line\">ada.fit(features_train,train_label)</span><br><span class=\"line\"></span><br><span class=\"line\">ada.fit(X_train, y_train)</span><br><span class=\"line\">predict_y = ada.predict(X_test)</span><br><span class=\"line\"></span><br><span class=\"line\">cm2 = confusion_matrix(y_test, predict_y)</span><br><span class=\"line\"></span><br><span class=\"line\">class_names = [<span class=\"string\">&#x27;违约&#x27;</span>, <span class=\"string\">&#x27;未违约&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 显示混淆矩阵</span></span><br><span class=\"line\">plot_confusion_matrix(cm2, classes=class_names, title=<span class=\"string\">&#x27;AdaBoost分类器&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Confusion_matrix(ada)</span><br></pre></td></tr></table></figure>\n\n<p>AdaBoost分类器 混淆矩阵：</p>\n<img src=\"/posts/c1c7733e/9.png\" class=\"\">\n\n<p>AdaBoost分类器 分类报告：</p>\n<img src=\"/posts/c1c7733e/10.png\" class=\"\">\n\n<h3 id=\"XGBoost\"><a href=\"#XGBoost\" class=\"headerlink\" title=\"XGBoost\"></a>XGBoost</h3><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#XGBoost分类器</span></span><br><span class=\"line\"><span class=\"comment\">#xgb = XGBClassifier(n_estimators = 350, learning_rate=0.2)</span></span><br><span class=\"line\">xgb = XGBClassifier()</span><br><span class=\"line\">xgb.fit(features_train,train_label)</span><br><span class=\"line\"></span><br><span class=\"line\">xgb.fit(X_train, y_train)</span><br><span class=\"line\">predict_y = xgb.predict(X_test)</span><br><span class=\"line\"><span class=\"comment\">#score_y = dt_stump.decision_function(X_test)</span></span><br><span class=\"line\">cm3 = confusion_matrix(y_test, predict_y)</span><br><span class=\"line\">class_names = [<span class=\"string\">&#x27;违约&#x27;</span>, <span class=\"string\">&#x27;未违约&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 显示混淆矩阵</span></span><br><span class=\"line\">plot_confusion_matrix(cm3, classes=class_names, title=<span class=\"string\">&#x27;XGBoost分类器&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Confusion_matrix(xgb)</span><br></pre></td></tr></table></figure>\n\n<p>XGBoost分类器 混淆矩阵：</p>\n<img src=\"/posts/c1c7733e/11.png\" class=\"\">\n\n<p>XGBoost分类器 分类报告：</p>\n<img src=\"/posts/c1c7733e/12.png\" class=\"\">\n\n<h3 id=\"逻辑回归\"><a href=\"#逻辑回归\" class=\"headerlink\" title=\"逻辑回归\"></a>逻辑回归</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 逻辑回归分类器</span></span><br><span class=\"line\">log = LogisticRegression()</span><br><span class=\"line\">log.fit(features_train, train_label)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 逻辑回归分类器</span></span><br><span class=\"line\">log = LogisticRegression()</span><br><span class=\"line\">log.fit(X_train, y_train)</span><br><span class=\"line\">predict_y = log.predict(X_test)</span><br><span class=\"line\">score_y = log.decision_function(X_test)</span><br><span class=\"line\">cm = confusion_matrix(y_test, predict_y)</span><br><span class=\"line\">class_names = [<span class=\"string\">&#x27;违约&#x27;</span>, <span class=\"string\">&#x27;未违约&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 显示混淆矩阵</span></span><br><span class=\"line\">plot_confusion_matrix(cm, classes=class_names, title=<span class=\"string\">&#x27;逻辑回归&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Confusion_matrix(log)</span><br></pre></td></tr></table></figure>\n\n<p>逻辑回归 混淆矩阵：</p>\n<img src=\"/posts/c1c7733e/13.png\" class=\"\">\n\n<p>逻辑回归 分类报告：</p>\n<img src=\"/posts/c1c7733e/14.png\" class=\"\">\n\n<h3 id=\"朴素贝叶斯\"><a href=\"#朴素贝叶斯\" class=\"headerlink\" title=\"朴素贝叶斯\"></a>朴素贝叶斯</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 多项朴素贝叶斯分类器</span></span><br><span class=\"line\">mul = MultinomialNB()</span><br><span class=\"line\"><span class=\"comment\">#mul.fit(features_train, train_label)</span></span><br><span class=\"line\">mul.fit(X_train, y_train)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#mul.fit(X_train, y_train)</span></span><br><span class=\"line\">predict_y = mul.predict(X_test)</span><br><span class=\"line\"><span class=\"comment\">#score_y = mul.decision_function(X_test)</span></span><br><span class=\"line\">cm4 = confusion_matrix(y_test, predict_y)</span><br><span class=\"line\">class_names = [<span class=\"string\">&#x27;违约&#x27;</span>, <span class=\"string\">&#x27;未违约&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 显示混淆矩阵</span></span><br><span class=\"line\">plot_confusion_matrix(cm4, classes=class_names, title=<span class=\"string\">&#x27;多项朴素贝叶斯&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Confusion_matrix(mul)</span><br></pre></td></tr></table></figure>\n\n<p>朴素贝叶斯 混淆矩阵：</p>\n<img src=\"/posts/c1c7733e/15.png\" class=\"\">\n\n<p>朴素贝叶斯 分类报告：</p>\n<img src=\"/posts/c1c7733e/16.png\" class=\"\">\n\n<h2 id=\"结果整合\"><a href=\"#结果整合\" class=\"headerlink\" title=\"结果整合\"></a>结果整合</h2><img src=\"/posts/c1c7733e/17.png\" class=\"\">\n\n<hr>\n<h1 id=\"GMM聚类\"><a href=\"#GMM聚类\" class=\"headerlink\" title=\"GMM聚类\"></a>GMM聚类</h1><p>EM算法处理王者荣耀英雄属性数据集</p>\n<h2 id=\"使用EM算法工具完成聚类分析算法\"><a href=\"#使用EM算法工具完成聚类分析算法\" class=\"headerlink\" title=\"使用EM算法工具完成聚类分析算法\"></a>使用EM算法工具完成聚类分析算法</h2><p>实验目的： 学习使用EM算法工具完成聚类分析算法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#实验使用的工具包</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> csv</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.mixture <span class=\"keyword\">import</span> GaussianMixture</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.preprocessing <span class=\"keyword\">import</span> StandardScaler</span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数据读取\"><a href=\"#数据读取\" class=\"headerlink\" title=\"数据读取\"></a>数据读取</h3><p>任务一：数据加载，避免中文乱码问题完成</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#数据读取,请填写相应的代码！</span></span><br><span class=\"line\">data_ori = pd.read_csv(<span class=\"string\">&#x27;heros.csv&#x27;</span>, encoding=<span class=\"string\">&#x27;gb18030&#x27;</span>)</span><br><span class=\"line\">features = [<span class=\"string\">u&#x27;最大生命&#x27;</span>,<span class=\"string\">u&#x27;生命成长&#x27;</span>,<span class=\"string\">u&#x27;初始生命&#x27;</span>,<span class=\"string\">u&#x27;最大法力&#x27;</span>, <span class=\"string\">u&#x27;法力成长&#x27;</span>,<span class=\"string\">u&#x27;初始法力&#x27;</span>,<span class=\"string\">u&#x27;最高物攻&#x27;</span>,<span class=\"string\">u&#x27;物攻成长&#x27;</span>,<span class=\"string\">u&#x27;初始物攻&#x27;</span>,<span class=\"string\">u&#x27;最大物防&#x27;</span>,<span class=\"string\">u&#x27;物防成长&#x27;</span>,<span class=\"string\">u&#x27;初始物防&#x27;</span>, <span class=\"string\">u&#x27;最大每5秒回血&#x27;</span>, <span class=\"string\">u&#x27;每5秒回血成长&#x27;</span>, <span class=\"string\">u&#x27;初始每5秒回血&#x27;</span>, <span class=\"string\">u&#x27;最大每5秒回蓝&#x27;</span>, <span class=\"string\">u&#x27;每5秒回蓝成长&#x27;</span>, <span class=\"string\">u&#x27;初始每5秒回蓝&#x27;</span>, <span class=\"string\">u&#x27;最大攻速&#x27;</span>, <span class=\"string\">u&#x27;攻击范围&#x27;</span>]</span><br><span class=\"line\">data = data_ori[features]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 对英雄属性之间的关系进行可视化分析</span></span><br><span class=\"line\"><span class=\"comment\"># 设置 plt 正确显示中文</span></span><br><span class=\"line\">plt.rcParams[<span class=\"string\">&#x27;font.sans-serif&#x27;</span>]=[<span class=\"string\">&#x27;SimHei&#x27;</span>] <span class=\"comment\"># 用来正常显示中文标签</span></span><br><span class=\"line\">plt.rcParams[<span class=\"string\">&#x27;axes.unicode_minus&#x27;</span>]=<span class=\"literal\">False</span> <span class=\"comment\"># 用来正常显示负号</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数据探索-2\"><a href=\"#数据探索-2\" class=\"headerlink\" title=\"数据探索\"></a>数据探索</h3><p>任务二：编写计算特征之间相似度的代码</p>\n<p>用热力图呈现 features_mean 字段之间的相关性 </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#填写相应代码！！</span></span><br><span class=\"line\">corr = data[features].corr()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(corr)</span><br><span class=\"line\">             最大生命      生命成长      初始生命      最大法力      法力成长      初始法力      最高物攻  \\</span><br><span class=\"line\">最大生命     <span class=\"number\">1.000000</span>  <span class=\"number\">0.977408</span>  <span class=\"number\">0.761300</span> -<span class=\"number\">0.220133</span> -<span class=\"number\">0.207130</span> -<span class=\"number\">0.260449</span> -<span class=\"number\">0.246412</span>   </span><br><span class=\"line\">生命成长     <span class=\"number\">0.977408</span>  <span class=\"number\">1.000000</span>  <span class=\"number\">0.658106</span> -<span class=\"number\">0.224112</span> -<span class=\"number\">0.212271</span> -<span class=\"number\">0.260464</span> -<span class=\"number\">0.268377</span>   </span><br><span class=\"line\">初始生命     <span class=\"number\">0.761300</span>  <span class=\"number\">0.658106</span>  <span class=\"number\">1.000000</span> -<span class=\"number\">0.189349</span> -<span class=\"number\">0.178674</span> -<span class=\"number\">0.222314</span> -<span class=\"number\">0.140356</span>   </span><br><span class=\"line\">最大法力    -<span class=\"number\">0.220133</span> -<span class=\"number\">0.224112</span> -<span class=\"number\">0.189349</span>  <span class=\"number\">1.000000</span>  <span class=\"number\">0.998958</span>  <span class=\"number\">0.988178</span> -<span class=\"number\">0.180428</span>   </span><br><span class=\"line\">法力成长    -<span class=\"number\">0.207130</span> -<span class=\"number\">0.212271</span> -<span class=\"number\">0.178674</span>  <span class=\"number\">0.998958</span>  <span class=\"number\">1.000000</span>  <span class=\"number\">0.980154</span> -<span class=\"number\">0.175029</span>   </span><br><span class=\"line\">初始法力    -<span class=\"number\">0.260449</span> -<span class=\"number\">0.260464</span> -<span class=\"number\">0.222314</span>  <span class=\"number\">0.988178</span>  <span class=\"number\">0.980154</span>  <span class=\"number\">1.000000</span> -<span class=\"number\">0.195800</span>   </span><br><span class=\"line\">最高物攻    -<span class=\"number\">0.246412</span> -<span class=\"number\">0.268377</span> -<span class=\"number\">0.140356</span> -<span class=\"number\">0.180428</span> -<span class=\"number\">0.175029</span> -<span class=\"number\">0.195800</span>  <span class=\"number\">1.000000</span>   </span><br><span class=\"line\">物攻成长    -<span class=\"number\">0.230507</span> -<span class=\"number\">0.248988</span> -<span class=\"number\">0.121609</span> -<span class=\"number\">0.197617</span> -<span class=\"number\">0.191883</span> -<span class=\"number\">0.213851</span>  <span class=\"number\">0.986098</span>   </span><br><span class=\"line\">初始物攻    -<span class=\"number\">0.195840</span> -<span class=\"number\">0.223728</span> -<span class=\"number\">0.161278</span>  <span class=\"number\">0.003153</span>  <span class=\"number\">0.003966</span>  <span class=\"number\">0.000371</span>  <span class=\"number\">0.536409</span>   </span><br><span class=\"line\">最大物防     <span class=\"number\">0.862472</span>  <span class=\"number\">0.879106</span>  <span class=\"number\">0.529737</span> -<span class=\"number\">0.210425</span> -<span class=\"number\">0.200722</span> -<span class=\"number\">0.239802</span> -<span class=\"number\">0.227352</span>   </span><br><span class=\"line\">物防成长     <span class=\"number\">0.832795</span>  <span class=\"number\">0.847654</span>  <span class=\"number\">0.528719</span> -<span class=\"number\">0.226732</span> -<span class=\"number\">0.217018</span> -<span class=\"number\">0.255893</span> -<span class=\"number\">0.182300</span>   </span><br><span class=\"line\">初始物防     <span class=\"number\">0.746460</span>  <span class=\"number\">0.764736</span>  <span class=\"number\">0.403032</span> -<span class=\"number\">0.106082</span> -<span class=\"number\">0.098780</span> -<span class=\"number\">0.128992</span> -<span class=\"number\">0.316263</span>   </span><br><span class=\"line\">最大每<span class=\"number\">5</span>秒回血  <span class=\"number\">0.951013</span>  <span class=\"number\">0.943635</span>  <span class=\"number\">0.688104</span> -<span class=\"number\">0.224234</span> -<span class=\"number\">0.212305</span> -<span class=\"number\">0.260875</span> -<span class=\"number\">0.290216</span>   </span><br><span class=\"line\">每<span class=\"number\">5</span>秒回血成长  <span class=\"number\">0.967369</span>  <span class=\"number\">0.972436</span>  <span class=\"number\">0.647438</span> -<span class=\"number\">0.190258</span> -<span class=\"number\">0.177943</span> -<span class=\"number\">0.228721</span> -<span class=\"number\">0.246922</span>   </span><br><span class=\"line\">初始每<span class=\"number\">5</span>秒回血  <span class=\"number\">0.829468</span>  <span class=\"number\">0.798746</span>  <span class=\"number\">0.701547</span> -<span class=\"number\">0.268561</span> -<span class=\"number\">0.258510</span> -<span class=\"number\">0.298217</span> -<span class=\"number\">0.346468</span>   </span><br><span class=\"line\">最大每<span class=\"number\">5</span>秒回蓝 -<span class=\"number\">0.286851</span> -<span class=\"number\">0.297569</span> -<span class=\"number\">0.224674</span>  <span class=\"number\">0.872025</span>  <span class=\"number\">0.853143</span>  <span class=\"number\">0.922108</span> -<span class=\"number\">0.193140</span>   </span><br><span class=\"line\">每<span class=\"number\">5</span>秒回蓝成长 -<span class=\"number\">0.207165</span> -<span class=\"number\">0.212225</span> -<span class=\"number\">0.179819</span>  <span class=\"number\">0.996253</span>  <span class=\"number\">0.997483</span>  <span class=\"number\">0.976856</span> -<span class=\"number\">0.179123</span>   </span><br><span class=\"line\">初始每<span class=\"number\">5</span>秒回蓝 -<span class=\"number\">0.279098</span> -<span class=\"number\">0.292439</span> -<span class=\"number\">0.199537</span>  <span class=\"number\">0.450477</span>  <span class=\"number\">0.415945</span>  <span class=\"number\">0.559600</span> -<span class=\"number\">0.145060</span>   </span><br><span class=\"line\"></span><br><span class=\"line\">             物攻成长      初始物攻      最大物防      物防成长      初始物防   最大每<span class=\"number\">5</span>秒回血   每<span class=\"number\">5</span>秒回血成长  \\</span><br><span class=\"line\">最大生命    -<span class=\"number\">0.230507</span> -<span class=\"number\">0.195840</span>  <span class=\"number\">0.862472</span>  <span class=\"number\">0.832795</span>  <span class=\"number\">0.746460</span>  <span class=\"number\">0.951013</span>  <span class=\"number\">0.967369</span>   </span><br><span class=\"line\">生命成长    -<span class=\"number\">0.248988</span> -<span class=\"number\">0.223728</span>  <span class=\"number\">0.879106</span>  <span class=\"number\">0.847654</span>  <span class=\"number\">0.764736</span>  <span class=\"number\">0.943635</span>  <span class=\"number\">0.972436</span>   </span><br><span class=\"line\">初始生命    -<span class=\"number\">0.121609</span> -<span class=\"number\">0.161278</span>  <span class=\"number\">0.529737</span>  <span class=\"number\">0.528719</span>  <span class=\"number\">0.403032</span>  <span class=\"number\">0.688104</span>  <span class=\"number\">0.647438</span>   </span><br><span class=\"line\">最大法力    -<span class=\"number\">0.197617</span>  <span class=\"number\">0.003153</span> -<span class=\"number\">0.210425</span> -<span class=\"number\">0.226732</span> -<span class=\"number\">0.106082</span> -<span class=\"number\">0.224234</span> -<span class=\"number\">0.190258</span>   </span><br><span class=\"line\">法力成长    -<span class=\"number\">0.191883</span>  <span class=\"number\">0.003966</span> -<span class=\"number\">0.200722</span> -<span class=\"number\">0.217018</span> -<span class=\"number\">0.098780</span> -<span class=\"number\">0.212305</span> -<span class=\"number\">0.177943</span>   </span><br><span class=\"line\">初始法力    -<span class=\"number\">0.213851</span>  <span class=\"number\">0.000371</span> -<span class=\"number\">0.239802</span> -<span class=\"number\">0.255893</span> -<span class=\"number\">0.128992</span> -<span class=\"number\">0.260875</span> -<span class=\"number\">0.228721</span>   </span><br><span class=\"line\">最高物攻     <span class=\"number\">0.986098</span>  <span class=\"number\">0.536409</span> -<span class=\"number\">0.227352</span> -<span class=\"number\">0.182300</span> -<span class=\"number\">0.316263</span> -<span class=\"number\">0.290216</span> -<span class=\"number\">0.246922</span>   </span><br><span class=\"line\">物攻成长     <span class=\"number\">1.000000</span>  <span class=\"number\">0.388718</span> -<span class=\"number\">0.218394</span> -<span class=\"number\">0.170773</span> -<span class=\"number\">0.317801</span> -<span class=\"number\">0.276067</span> -<span class=\"number\">0.231988</span>   </span><br><span class=\"line\">初始物攻     <span class=\"number\">0.388718</span>  <span class=\"number\">1.000000</span> -<span class=\"number\">0.151566</span> -<span class=\"number\">0.143719</span> -<span class=\"number\">0.139327</span> -<span class=\"number\">0.207319</span> -<span class=\"number\">0.191102</span>   </span><br><span class=\"line\">最大物防    -<span class=\"number\">0.218394</span> -<span class=\"number\">0.151566</span>  <span class=\"number\">1.000000</span>  <span class=\"number\">0.983223</span>  <span class=\"number\">0.808768</span>  <span class=\"number\">0.864672</span>  <span class=\"number\">0.883474</span>   </span><br><span class=\"line\">物防成长    -<span class=\"number\">0.170773</span> -<span class=\"number\">0.143719</span>  <span class=\"number\">0.983223</span>  <span class=\"number\">1.000000</span>  <span class=\"number\">0.687920</span>  <span class=\"number\">0.836301</span>  <span class=\"number\">0.849445</span>   </span><br><span class=\"line\">初始物防    -<span class=\"number\">0.317801</span> -<span class=\"number\">0.139327</span>  <span class=\"number\">0.808768</span>  <span class=\"number\">0.687920</span>  <span class=\"number\">1.000000</span>  <span class=\"number\">0.743957</span>  <span class=\"number\">0.776385</span>   </span><br><span class=\"line\">最大每<span class=\"number\">5</span>秒回血 -<span class=\"number\">0.276067</span> -<span class=\"number\">0.207319</span>  <span class=\"number\">0.864672</span>  <span class=\"number\">0.836301</span>  <span class=\"number\">0.743957</span>  <span class=\"number\">1.000000</span>  <span class=\"number\">0.983556</span>   </span><br><span class=\"line\">每<span class=\"number\">5</span>秒回血成长 -<span class=\"number\">0.231988</span> -<span class=\"number\">0.191102</span>  <span class=\"number\">0.883474</span>  <span class=\"number\">0.849445</span>  <span class=\"number\">0.776385</span>  <span class=\"number\">0.983556</span>  <span class=\"number\">1.000000</span>   </span><br><span class=\"line\">初始每<span class=\"number\">5</span>秒回血 -<span class=\"number\">0.335171</span> -<span class=\"number\">0.219081</span>  <span class=\"number\">0.746610</span>  <span class=\"number\">0.731842</span>  <span class=\"number\">0.611008</span>  <span class=\"number\">0.937169</span>  <span class=\"number\">0.858750</span>   </span><br><span class=\"line\">最大每<span class=\"number\">5</span>秒回蓝 -<span class=\"number\">0.226294</span>  <span class=\"number\">0.078473</span> -<span class=\"number\">0.269346</span> -<span class=\"number\">0.282500</span> -<span class=\"number\">0.160954</span> -<span class=\"number\">0.267749</span> -<span class=\"number\">0.247764</span>   </span><br><span class=\"line\">每<span class=\"number\">5</span>秒回蓝成长 -<span class=\"number\">0.196605</span>  <span class=\"number\">0.005237</span> -<span class=\"number\">0.202790</span> -<span class=\"number\">0.217446</span> -<span class=\"number\">0.105629</span> -<span class=\"number\">0.202148</span> -<span class=\"number\">0.169121</span>   </span><br><span class=\"line\">初始每<span class=\"number\">5</span>秒回蓝 -<span class=\"number\">0.184345</span>  <span class=\"number\">0.132174</span> -<span class=\"number\">0.253111</span> -<span class=\"number\">0.260324</span> -<span class=\"number\">0.168099</span> -<span class=\"number\">0.250934</span> -<span class=\"number\">0.251700</span>   </span><br><span class=\"line\"></span><br><span class=\"line\">          初始每<span class=\"number\">5</span>秒回血   最大每<span class=\"number\">5</span>秒回蓝   每<span class=\"number\">5</span>秒回蓝成长   初始每<span class=\"number\">5</span>秒回蓝  </span><br><span class=\"line\">最大生命     <span class=\"number\">0.829468</span> -<span class=\"number\">0.286851</span> -<span class=\"number\">0.207165</span> -<span class=\"number\">0.279098</span>  </span><br><span class=\"line\">生命成长     <span class=\"number\">0.798746</span> -<span class=\"number\">0.297569</span> -<span class=\"number\">0.212225</span> -<span class=\"number\">0.292439</span>  </span><br><span class=\"line\">初始生命     <span class=\"number\">0.701547</span> -<span class=\"number\">0.224674</span> -<span class=\"number\">0.179819</span> -<span class=\"number\">0.199537</span>  </span><br><span class=\"line\">最大法力    -<span class=\"number\">0.268561</span>  <span class=\"number\">0.872025</span>  <span class=\"number\">0.996253</span>  <span class=\"number\">0.450477</span>  </span><br><span class=\"line\">法力成长    -<span class=\"number\">0.258510</span>  <span class=\"number\">0.853143</span>  <span class=\"number\">0.997483</span>  <span class=\"number\">0.415945</span>  </span><br><span class=\"line\">初始法力    -<span class=\"number\">0.298217</span>  <span class=\"number\">0.922108</span>  <span class=\"number\">0.976856</span>  <span class=\"number\">0.559600</span>  </span><br><span class=\"line\">最高物攻    -<span class=\"number\">0.346468</span> -<span class=\"number\">0.193140</span> -<span class=\"number\">0.179123</span> -<span class=\"number\">0.145060</span>  </span><br><span class=\"line\">物攻成长    -<span class=\"number\">0.335171</span> -<span class=\"number\">0.226294</span> -<span class=\"number\">0.196605</span> -<span class=\"number\">0.184345</span>  </span><br><span class=\"line\">初始物攻    -<span class=\"number\">0.219081</span>  <span class=\"number\">0.078473</span>  <span class=\"number\">0.005237</span>  <span class=\"number\">0.132174</span>  </span><br><span class=\"line\">最大物防     <span class=\"number\">0.746610</span> -<span class=\"number\">0.269346</span> -<span class=\"number\">0.202790</span> -<span class=\"number\">0.253111</span>  </span><br><span class=\"line\">物防成长     <span class=\"number\">0.731842</span> -<span class=\"number\">0.282500</span> -<span class=\"number\">0.217446</span> -<span class=\"number\">0.260324</span>  </span><br><span class=\"line\">初始物防     <span class=\"number\">0.611008</span> -<span class=\"number\">0.160954</span> -<span class=\"number\">0.105629</span> -<span class=\"number\">0.168099</span>  </span><br><span class=\"line\">最大每<span class=\"number\">5</span>秒回血  <span class=\"number\">0.937169</span> -<span class=\"number\">0.267749</span> -<span class=\"number\">0.202148</span> -<span class=\"number\">0.250934</span>  </span><br><span class=\"line\">每<span class=\"number\">5</span>秒回血成长  <span class=\"number\">0.858750</span> -<span class=\"number\">0.247764</span> -<span class=\"number\">0.169121</span> -<span class=\"number\">0.251700</span>  </span><br><span class=\"line\">初始每<span class=\"number\">5</span>秒回血  <span class=\"number\">1.000000</span> -<span class=\"number\">0.280945</span> -<span class=\"number\">0.246737</span> -<span class=\"number\">0.225670</span>  </span><br><span class=\"line\">最大每<span class=\"number\">5</span>秒回蓝 -<span class=\"number\">0.280945</span>  <span class=\"number\">1.000000</span>  <span class=\"number\">0.856248</span>  <span class=\"number\">0.827604</span>  </span><br><span class=\"line\">每<span class=\"number\">5</span>秒回蓝成长 -<span class=\"number\">0.246737</span>  <span class=\"number\">0.856248</span>  <span class=\"number\">1.000000</span>  <span class=\"number\">0.418679</span>  </span><br><span class=\"line\">初始每<span class=\"number\">5</span>秒回蓝 -<span class=\"number\">0.225670</span>  <span class=\"number\">0.827604</span>  <span class=\"number\">0.418679</span>  <span class=\"number\">1.000000</span>  </span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#热力图可视化！！</span></span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">14</span>,<span class=\"number\">14</span>))</span><br><span class=\"line\"><span class=\"comment\"># annot=True 显示每个方格的数据</span></span><br><span class=\"line\">sns.heatmap(corr, annot=<span class=\"literal\">True</span>)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n<img src=\"/posts/c1c7733e/GMM.png\" class=\"\">\n\n<p>从图中可以看出“最大生命”，“生命成长”，“初始生命”这三个属性的相关性大，我们只 需保留一个属性即可。 features_remain数组保留了特征选择的属性，这样将原本的20个属性降维到了13个属性。 相关性大cong的属性保留一个，因此可以对属性进行降维</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#将原本的20个属性降维到13个属性。请填写代码！</span></span><br><span class=\"line\">features = [<span class=\"string\">u&#x27;最大生命&#x27;</span>,<span class=\"string\">u&#x27;生命成长&#x27;</span>,<span class=\"string\">u&#x27;初始生命&#x27;</span>,<span class=\"string\">u&#x27;最大法力&#x27;</span>, <span class=\"string\">u&#x27;法力成长&#x27;</span>,<span class=\"string\">u&#x27;初始法力&#x27;</span>,<span class=\"string\">u&#x27;最高物攻&#x27;</span>,<span class=\"string\">u&#x27;物攻成长&#x27;</span>,<span class=\"string\">u&#x27;初始物攻&#x27;</span>,<span class=\"string\">u&#x27;最大物防&#x27;</span>,<span class=\"string\">u&#x27;物防成长&#x27;</span>,<span class=\"string\">u&#x27;初始物防&#x27;</span>, <span class=\"string\">u&#x27;最大每5秒回血&#x27;</span>, <span class=\"string\">u&#x27;每5秒回血成长&#x27;</span>, <span class=\"string\">u&#x27;初始每5秒回血&#x27;</span>, <span class=\"string\">u&#x27;最大每5秒回蓝&#x27;</span>, <span class=\"string\">u&#x27;每5秒回蓝成长&#x27;</span>, <span class=\"string\">u&#x27;初始每5秒回蓝&#x27;</span>, <span class=\"string\">u&#x27;最大攻速&#x27;</span>, <span class=\"string\">u&#x27;攻击范围&#x27;</span>]</span><br><span class=\"line\">data = data_ori[features]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数据清洗-1\"><a href=\"#数据清洗-1\" class=\"headerlink\" title=\"数据清洗\"></a>数据清洗</h3><p>任务三： “最大攻速”这个属性值是百分数，不适合做矩阵运算，需要将百分数转化成小数。 “攻击范围”这个字段的取值为远程或者近战，也不适合矩阵运算； </p>\n<p>解决办法：将取值做个映射，用1代表远程，0代表近战。 </p>\n<p>示例：map({‘远程’:1,’近战’:0})</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data[<span class=\"string\">u&#x27;最大攻速&#x27;</span>] = data[<span class=\"string\">u&#x27;最大攻速&#x27;</span>].apply(<span class=\"keyword\">lambda</span> x:<span class=\"built_in\">float</span>(x.strip(<span class=\"string\">&#x27;%&#x27;</span>))/<span class=\"number\">100</span>)</span><br><span class=\"line\">data[<span class=\"string\">u&#x27;攻击范围&#x27;</span>] = data[<span class=\"string\">u&#x27;攻击范围&#x27;</span>].<span class=\"built_in\">map</span>(&#123;<span class=\"string\">&#x27;远程&#x27;</span>:<span class=\"number\">1</span>,<span class=\"string\">&#x27;近战&#x27;</span>:<span class=\"number\">0</span>&#125;)</span><br><span class=\"line\">&lt;ipython-<span class=\"built_in\">input</span>-<span class=\"number\">73</span>-cb0648147d53&gt;:<span class=\"number\">2</span>: SettingWithCopyWarning: </span><br><span class=\"line\">A value <span class=\"keyword\">is</span> trying to be <span class=\"built_in\">set</span> on a copy of a <span class=\"built_in\">slice</span> <span class=\"keyword\">from</span> a DataFrame.</span><br><span class=\"line\">Try using .loc[row_indexer,col_indexer] = value instead</span><br><span class=\"line\"></span><br><span class=\"line\">See the caveats <span class=\"keyword\">in</span> the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html<span class=\"comment\">#returning-a-view-versus-a-copy</span></span><br><span class=\"line\">  data[<span class=\"string\">u&#x27;最大攻速&#x27;</span>] = data[<span class=\"string\">u&#x27;最大攻速&#x27;</span>].apply(<span class=\"keyword\">lambda</span> x:<span class=\"built_in\">float</span>(x.strip(<span class=\"string\">&#x27;%&#x27;</span>))/<span class=\"number\">100</span>)</span><br><span class=\"line\">&lt;ipython-<span class=\"built_in\">input</span>-<span class=\"number\">73</span>-cb0648147d53&gt;:<span class=\"number\">3</span>: SettingWithCopyWarning: </span><br><span class=\"line\">A value <span class=\"keyword\">is</span> trying to be <span class=\"built_in\">set</span> on a copy of a <span class=\"built_in\">slice</span> <span class=\"keyword\">from</span> a DataFrame.</span><br><span class=\"line\">Try using .loc[row_indexer,col_indexer] = value instead</span><br><span class=\"line\"></span><br><span class=\"line\">See the caveats <span class=\"keyword\">in</span> the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html<span class=\"comment\">#returning-a-view-versus-a-copy</span></span><br><span class=\"line\">  data[<span class=\"string\">u&#x27;攻击范围&#x27;</span>] = data[<span class=\"string\">u&#x27;攻击范围&#x27;</span>].<span class=\"built_in\">map</span>(&#123;<span class=\"string\">&#x27;远程&#x27;</span>:<span class=\"number\">1</span>,<span class=\"string\">&#x27;近战&#x27;</span>:<span class=\"number\">0</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>采用 Z-Score 规范化数据，保证每个特征维度的数据均值为 0，方差为 1</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ss = StandardScaler()</span><br><span class=\"line\">data = ss.fit_transform(data)</span><br></pre></td></tr></table></figure>\n\n<p>构造GMM聚类模型，GaussianMixture()</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gmm = GaussianMixture(n_components=<span class=\"number\">30</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 训练数据</span></span><br><span class=\"line\">gmm.fit(data)</span><br><span class=\"line\"></span><br><span class=\"line\">prediction = gmm.predict(data)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(prediction)</span><br><span class=\"line\">[<span class=\"number\">13</span> <span class=\"number\">24</span> <span class=\"number\">11</span> <span class=\"number\">10</span>  <span class=\"number\">2</span> <span class=\"number\">25</span> <span class=\"number\">20</span> <span class=\"number\">11</span>  <span class=\"number\">7</span> <span class=\"number\">24</span> <span class=\"number\">18</span> <span class=\"number\">14</span> <span class=\"number\">10</span>  <span class=\"number\">0</span>  <span class=\"number\">1</span> <span class=\"number\">18</span> <span class=\"number\">13</span>  <span class=\"number\">7</span>  <span class=\"number\">2</span> <span class=\"number\">12</span> <span class=\"number\">22</span> <span class=\"number\">12</span> <span class=\"number\">12</span> <span class=\"number\">12</span></span><br><span class=\"line\"> <span class=\"number\">12</span> <span class=\"number\">12</span> <span class=\"number\">12</span> <span class=\"number\">21</span> <span class=\"number\">16</span> <span class=\"number\">26</span> <span class=\"number\">24</span>  <span class=\"number\">9</span>  <span class=\"number\">9</span> <span class=\"number\">16</span> <span class=\"number\">26</span>  <span class=\"number\">9</span> <span class=\"number\">16</span>  <span class=\"number\">6</span>  <span class=\"number\">4</span> <span class=\"number\">15</span>  <span class=\"number\">9</span> <span class=\"number\">16</span> <span class=\"number\">16</span>  <span class=\"number\">9</span> <span class=\"number\">16</span> <span class=\"number\">15</span> <span class=\"number\">14</span>  <span class=\"number\">4</span></span><br><span class=\"line\"> <span class=\"number\">24</span> <span class=\"number\">16</span> <span class=\"number\">28</span>  <span class=\"number\">5</span>  <span class=\"number\">2</span>  <span class=\"number\">3</span>  <span class=\"number\">3</span> <span class=\"number\">13</span> <span class=\"number\">29</span>  <span class=\"number\">5</span> <span class=\"number\">23</span>  <span class=\"number\">2</span> <span class=\"number\">29</span> <span class=\"number\">19</span> <span class=\"number\">17</span> <span class=\"number\">13</span>  <span class=\"number\">8</span>  <span class=\"number\">5</span> <span class=\"number\">27</span>  <span class=\"number\">5</span> <span class=\"number\">21</span>]</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\"># 将分组结果输出到 CSV 文件中</span></span><br><span class=\"line\">data_ori.insert(<span class=\"number\">0</span>, <span class=\"string\">&#x27;分组&#x27;</span>, prediction)</span><br><span class=\"line\">data_ori.to_csv(<span class=\"string\">&#x27;.hero_out.csv&#x27;</span>, index=<span class=\"literal\">False</span>, sep=<span class=\"string\">&#x27;,&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.metrics <span class=\"keyword\">import</span> calinski_harabasz_score</span><br><span class=\"line\"><span class=\"built_in\">print</span>(calinski_harabasz_score(data, prediction))</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"航空公司客户价值分析\"><a href=\"#航空公司客户价值分析\" class=\"headerlink\" title=\"航空公司客户价值分析\"></a>航空公司客户价值分析</h1><img src=\"/posts/c1c7733e/%E8%88%AA%E7%A9%BA.png\" class=\"\">\n\n<hr>\n<h1 id=\"比特币价格预测\"><a href=\"#比特币价格预测\" class=\"headerlink\" title=\"比特币价格预测\"></a>比特币价格预测</h1><p>比特币价格走势预测</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 比特币走势预测，使用时间序列ARMA</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">from</span> statsmodels.tsa.arima_model <span class=\"keyword\">import</span> ARMA</span><br><span class=\"line\"><span class=\"keyword\">import</span> warnings</span><br><span class=\"line\"><span class=\"keyword\">from</span> itertools <span class=\"keyword\">import</span> product</span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\">warnings.filterwarnings(<span class=\"string\">&#x27;ignore&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 数据加载</span></span><br><span class=\"line\">df = pd.read_csv(<span class=\"string\">&#x27;./bitcoin_2012-01-01_to_2018-10-31.csv&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 将时间作为df的索</span></span><br><span class=\"line\">df.Timestamp = pd.to_datetime(df.Timestamp)</span><br><span class=\"line\">df.index = df.Timestamp</span><br><span class=\"line\"><span class=\"comment\"># 数据探索</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(df.head(<span class=\"number\">10</span>))</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据探索部分打印内容：</span><br><span class=\"line\">            Timestamp      Open      High       Low     Close  Volume_(BTC)  \\</span><br><span class=\"line\">Timestamp                                                                     </span><br><span class=\"line\"><span class=\"number\">2011</span>-<span class=\"number\">12</span>-<span class=\"number\">31</span> <span class=\"number\">2011</span>-<span class=\"number\">12</span>-<span class=\"number\">31</span>  <span class=\"number\">4.465000</span>  <span class=\"number\">4.482500</span>  <span class=\"number\">4.465000</span>  <span class=\"number\">4.482500</span>     <span class=\"number\">23.829470</span>   </span><br><span class=\"line\"><span class=\"number\">2012</span>-01-01 <span class=\"number\">2012</span>-01-01  <span class=\"number\">4.806667</span>  <span class=\"number\">4.806667</span>  <span class=\"number\">4.806667</span>  <span class=\"number\">4.806667</span>      <span class=\"number\">7.200667</span>   </span><br><span class=\"line\"><span class=\"number\">2012</span>-01-02 <span class=\"number\">2012</span>-01-02  <span class=\"number\">5.000000</span>  <span class=\"number\">5.000000</span>  <span class=\"number\">5.000000</span>  <span class=\"number\">5.000000</span>     <span class=\"number\">19.048000</span>   </span><br><span class=\"line\"><span class=\"number\">2012</span>-01-03 <span class=\"number\">2012</span>-01-03  <span class=\"number\">5.252500</span>  <span class=\"number\">5.252500</span>  <span class=\"number\">5.252500</span>  <span class=\"number\">5.252500</span>     <span class=\"number\">11.004660</span>   </span><br><span class=\"line\"><span class=\"number\">2012</span>-01-04 <span class=\"number\">2012</span>-01-04  <span class=\"number\">5.200000</span>  <span class=\"number\">5.223333</span>  <span class=\"number\">5.200000</span>  <span class=\"number\">5.223333</span>     <span class=\"number\">11.914807</span>   </span><br><span class=\"line\"><span class=\"number\">2012</span>-01-05 <span class=\"number\">2012</span>-01-05  <span class=\"number\">6.281429</span>  <span class=\"number\">6.286190</span>  <span class=\"number\">6.281429</span>  <span class=\"number\">6.286190</span>      <span class=\"number\">4.514373</span>   </span><br><span class=\"line\"><span class=\"number\">2012</span>-01-06 <span class=\"number\">2012</span>-01-06  <span class=\"number\">6.435000</span>  <span class=\"number\">6.445000</span>  <span class=\"number\">6.435000</span>  <span class=\"number\">6.445000</span>      <span class=\"number\">2.420196</span>   </span><br><span class=\"line\"><span class=\"number\">2012</span>-01-07 <span class=\"number\">2012</span>-01-07  <span class=\"number\">6.800000</span>  <span class=\"number\">6.800000</span>  <span class=\"number\">6.800000</span>  <span class=\"number\">6.800000</span>      <span class=\"number\">0.295858</span>   </span><br><span class=\"line\"><span class=\"number\">2012</span>-01-08 <span class=\"number\">2012</span>-01-08  <span class=\"number\">6.950000</span>  <span class=\"number\">6.950000</span>  <span class=\"number\">6.950000</span>  <span class=\"number\">6.950000</span>      <span class=\"number\">2.500000</span>   </span><br><span class=\"line\"><span class=\"number\">2012</span>-01-09 <span class=\"number\">2012</span>-01-09  <span class=\"number\">6.584167</span>  <span class=\"number\">6.584167</span>  <span class=\"number\">6.581667</span>  <span class=\"number\">6.581667</span>      <span class=\"number\">1.857481</span>   </span><br><span class=\"line\"></span><br><span class=\"line\">            Volume_(Currency)  Weighted_Price  </span><br><span class=\"line\">Timestamp                                      </span><br><span class=\"line\"><span class=\"number\">2011</span>-<span class=\"number\">12</span>-<span class=\"number\">31</span>         <span class=\"number\">106.330084</span>        <span class=\"number\">4.471603</span>  </span><br><span class=\"line\"><span class=\"number\">2012</span>-01-01          <span class=\"number\">35.259720</span>        <span class=\"number\">4.806667</span>  </span><br><span class=\"line\"><span class=\"number\">2012</span>-01-02          <span class=\"number\">95.240000</span>        <span class=\"number\">5.000000</span>  </span><br><span class=\"line\"><span class=\"number\">2012</span>-01-03          <span class=\"number\">58.100651</span>        <span class=\"number\">5.252500</span>  </span><br><span class=\"line\"><span class=\"number\">2012</span>-01-04          <span class=\"number\">63.119578</span>        <span class=\"number\">5.208159</span>  </span><br><span class=\"line\"><span class=\"number\">2012</span>-01-05          <span class=\"number\">27.987370</span>        <span class=\"number\">6.284127</span>  </span><br><span class=\"line\"><span class=\"number\">2012</span>-01-06          <span class=\"number\">15.914658</span>        <span class=\"number\">6.438999</span>  </span><br><span class=\"line\"><span class=\"number\">2012</span>-01-07           <span class=\"number\">2.011834</span>        <span class=\"number\">6.800000</span>  </span><br><span class=\"line\"><span class=\"number\">2012</span>-01-08          <span class=\"number\">17.300000</span>        <span class=\"number\">6.950000</span>  </span><br><span class=\"line\"><span class=\"number\">2012</span>-01-09          <span class=\"number\">12.306798</span>        <span class=\"number\">6.582770</span>  </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 按照月，季度，年来统计</span></span><br><span class=\"line\">df_month = df.resample(<span class=\"string\">&#x27;M&#x27;</span>).mean()</span><br><span class=\"line\">df_Q = df.resample(<span class=\"string\">&#x27;Q-DEC&#x27;</span>).mean()</span><br><span class=\"line\">df_year = df.resample(<span class=\"string\">&#x27;A-DEC&#x27;</span>).mean()</span><br><span class=\"line\"><span class=\"comment\"># 按照天，月，季度，年来显示比特币的走势</span></span><br><span class=\"line\">fig = plt.figure(figsize=[<span class=\"number\">15</span>, <span class=\"number\">7</span>])</span><br><span class=\"line\">plt.rcParams[<span class=\"string\">&#x27;font.sans-serif&#x27;</span>]=[<span class=\"string\">&#x27;SimHei&#x27;</span>] <span class=\"comment\">#用来正常显示中文标签</span></span><br><span class=\"line\">plt.suptitle(<span class=\"string\">&#x27;比特币金额（美金）&#x27;</span>, fontsize=<span class=\"number\">20</span>)</span><br><span class=\"line\">plt.subplot(<span class=\"number\">221</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.plot(df.Weighted_Price, <span class=\"string\">&#x27;-&#x27;</span>, label=<span class=\"string\">&#x27;按天&#x27;</span>)</span><br><span class=\"line\">plt.legend()</span><br><span class=\"line\">plt.subplot(<span class=\"number\">222</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.plot(df.Weighted_Price, <span class=\"string\">&#x27;-&#x27;</span>, label=<span class=\"string\">&#x27;按月&#x27;</span>)</span><br><span class=\"line\">plt.legend()</span><br><span class=\"line\">plt.subplot(<span class=\"number\">223</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.plot(df.Weighted_Price, <span class=\"string\">&#x27;-&#x27;</span>, label=<span class=\"string\">&#x27;按季度&#x27;</span>)</span><br><span class=\"line\">plt.legend()</span><br><span class=\"line\">plt.subplot(<span class=\"number\">224</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.plot(df.Weighted_Price, <span class=\"string\">&#x27;-&#x27;</span>, label=<span class=\"string\">&#x27;按年&#x27;</span>)</span><br><span class=\"line\">plt.legend()</span><br><span class=\"line\">plt.show()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>按照天、月、季度、年来统计显示比特币的走势：</p>\n<img src=\"/posts/c1c7733e/bit1.png\" class=\"\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置参数范围</span></span><br><span class=\"line\">ps = <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">qs = <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">parameters = product(ps, qs)</span><br><span class=\"line\">parameters_list = <span class=\"built_in\">list</span>(parameters)</span><br><span class=\"line\"><span class=\"comment\"># 寻找最优ARMA模型参数，即best_aic最小</span></span><br><span class=\"line\">results = []</span><br><span class=\"line\">best_aic = <span class=\"built_in\">float</span>(<span class=\"string\">&quot;inf&quot;</span>) <span class=\"comment\"># 正无穷</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> param <span class=\"keyword\">in</span> parameters_list:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        model = ARMA(df_month.Weighted_Price,order=(param[<span class=\"number\">0</span>], param[<span class=\"number\">1</span>])).fit()</span><br><span class=\"line\">    <span class=\"keyword\">except</span> ValueError:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;参数错误:&#x27;</span>, param)</span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\">    aic = model.aic</span><br><span class=\"line\">    <span class=\"keyword\">if</span> aic &lt; best_aic:</span><br><span class=\"line\">        best_model = model</span><br><span class=\"line\">        best_aic = aic</span><br><span class=\"line\">        best_param = param</span><br><span class=\"line\">    results.append([param, model.aic])</span><br><span class=\"line\"><span class=\"comment\"># 输出最优模型</span></span><br><span class=\"line\">result_table = pd.DataFrame(results)</span><br><span class=\"line\">result_table.columns = [<span class=\"string\">&#x27;parameters&#x27;</span>, <span class=\"string\">&#x27;aic&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;最优模型:&#x27;</span>, best_model.summary())</span><br><span class=\"line\"><span class=\"comment\"># 比特币预测</span></span><br><span class=\"line\">df_month2 = df_month[[<span class=\"string\">&#x27;Weighted_Price&#x27;</span>]]</span><br><span class=\"line\">date_list = [datetime(<span class=\"number\">2018</span>, <span class=\"number\">11</span>, <span class=\"number\">30</span>), datetime(<span class=\"number\">2018</span>, <span class=\"number\">12</span>, <span class=\"number\">31</span>), datetime(<span class=\"number\">2019</span>, <span class=\"number\">1</span>, <span class=\"number\">31</span>),</span><br><span class=\"line\">             datetime(<span class=\"number\">2019</span>, <span class=\"number\">2</span>, <span class=\"number\">28</span>), datetime(<span class=\"number\">2019</span>, <span class=\"number\">3</span>, <span class=\"number\">31</span>),</span><br><span class=\"line\">             datetime(<span class=\"number\">2019</span>, <span class=\"number\">4</span>, <span class=\"number\">30</span>), datetime(<span class=\"number\">2019</span>, <span class=\"number\">5</span>, <span class=\"number\">31</span>), datetime(<span class=\"number\">2019</span>, <span class=\"number\">6</span>, <span class=\"number\">30</span>)]</span><br><span class=\"line\">future = pd.DataFrame(index=date_list, columns=df_month.columns)</span><br><span class=\"line\">df_month2 = pd.concat([df_month2, future])</span><br><span class=\"line\">df_month2[<span class=\"string\">&#x27;forecast&#x27;</span>] = best_model.predict(start=<span class=\"number\">0</span>, end=<span class=\"number\">91</span>)</span><br><span class=\"line\"><span class=\"comment\"># 比特币预测结果显示</span></span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">20</span>,<span class=\"number\">7</span>))</span><br><span class=\"line\">df_month2.Weighted_Price.plot(label=<span class=\"string\">&#x27;实际金额&#x27;</span>)</span><br><span class=\"line\">df_month2.forecast.plot(color=<span class=\"string\">&#x27;r&#x27;</span>, ls=<span class=\"string\">&#x27;--&#x27;</span>, label=<span class=\"string\">&#x27;预测金额&#x27;</span>)</span><br><span class=\"line\">plt.legend()</span><br><span class=\"line\">plt.title(<span class=\"string\">&#x27;比特币金额(月)&#x27;</span>)</span><br><span class=\"line\">plt.xlabel(<span class=\"string\">&#x27;时间&#x27;</span>)</span><br><span class=\"line\">plt.ylabel(<span class=\"string\">&#x27;美金&#x27;</span>)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n<img src=\"/posts/c1c7733e/bit2.png\" class=\"\">\n\n<p>比特币预测结果：</p>\n<img src=\"/posts/c1c7733e/bit3.png\" class=\"\">\n","site":{"data":{}},"length":25221,"excerpt":"<p><strong>数据挖掘与分析部分模块的实例及原理应用</strong></p>","more":"<h1 id=\"Numpy学习\"><a href=\"#Numpy学习\" class=\"headerlink\" title=\"Numpy学习\"></a>Numpy学习</h1><table>\n<thead>\n<tr>\n<th align=\"center\">姓名</th>\n<th align=\"center\">语文</th>\n<th align=\"center\">英语</th>\n<th align=\"center\">数学</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">张飞</td>\n<td align=\"center\">66</td>\n<td align=\"center\">65</td>\n<td align=\"center\">30</td>\n</tr>\n<tr>\n<td align=\"center\">关羽</td>\n<td align=\"center\">95</td>\n<td align=\"center\">85</td>\n<td align=\"center\">98</td>\n</tr>\n<tr>\n<td align=\"center\">赵云</td>\n<td align=\"center\">93</td>\n<td align=\"center\">92</td>\n<td align=\"center\">96</td>\n</tr>\n<tr>\n<td align=\"center\">黄忠</td>\n<td align=\"center\">90</td>\n<td align=\"center\">88</td>\n<td align=\"center\">77</td>\n</tr>\n<tr>\n<td align=\"center\">典韦</td>\n<td align=\"center\">80</td>\n<td align=\"center\">90</td>\n<td align=\"center\">90</td>\n</tr>\n</tbody></table>\n<h2 id=\"题目具体要求\"><a href=\"#题目具体要求\" class=\"headerlink\" title=\"题目具体要求\"></a>题目具体要求</h2><p>1、使用 Numpy 统计团队中成员的语文、英语、数学的平均成绩、最小成绩、最大成绩、方差、标准差。</p>\n<p>2、把这些人的总成绩排序，得出名次进行成绩输出。</p>\n<h2 id=\"Numpy基本原理\"><a href=\"#Numpy基本原理\" class=\"headerlink\" title=\"Numpy基本原理\"></a><strong>Numpy基本原理</strong></h2><p>Numpy 是 Python 语言的一个第三方库，其支持大量高维度<a href=\"https://so.csdn.net/so/search?q=%E6%95%B0%E7%BB%84&spm=1001.2101.3001.7020\">数组</a>与矩阵运算。此外，NumPy 也针对数组运算提供大量的数学函数。Numpy 中定义的最重要的对象是称为 <code>ndarray</code> 的 N 维数组类型。 它描述相同类型的元素<a href=\"https://so.csdn.net/so/search?q=%E9%9B%86%E5%90%88&spm=1001.2101.3001.7020\">集合</a>。 可以使用基于零的索引访问集合中的项目。</p>\n<h2 id=\"实现代码\"><a href=\"#实现代码\" class=\"headerlink\" title=\"实现代码\"></a>实现代码</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\">persontype = np.dtype(&#123;<span class=\"string\">&#x27;names&#x27;</span>: [<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;age&#x27;</span>, <span class=\"string\">&#x27;chinese&#x27;</span>, <span class=\"string\">&#x27;math&#x27;</span>, <span class=\"string\">&#x27;english&#x27;</span>, <span class=\"string\">&#x27;total&#x27;</span>], <span class=\"string\">&#x27;formats&#x27;</span>: [<span class=\"string\">&#x27;S32&#x27;</span>, <span class=\"string\">&#x27;i&#x27;</span>, <span class=\"string\">&#x27;i&#x27;</span>, <span class=\"string\">&#x27;i&#x27;</span>, <span class=\"string\">&#x27;i&#x27;</span>, <span class=\"string\">&#x27;i&#x27;</span>]&#125;)</span><br><span class=\"line\">peoples = np.array([(<span class=\"string\">&quot;zhang fei&quot;</span>, <span class=\"number\">18</span>, <span class=\"number\">66</span>, <span class=\"number\">30</span>, <span class=\"number\">65</span>, <span class=\"number\">0</span>), (<span class=\"string\">&quot;guan yu&quot;</span>, <span class=\"number\">19</span>, <span class=\"number\">95</span>, <span class=\"number\">98</span>, <span class=\"number\">85</span>, <span class=\"number\">0</span>), (<span class=\"string\">&quot;zhao yun&quot;</span>, <span class=\"number\">20</span>, <span class=\"number\">93</span>, <span class=\"number\">96</span>, <span class=\"number\">92</span>, <span class=\"number\">0</span>), (<span class=\"string\">&quot;huang zhong&quot;</span>, <span class=\"number\">21</span>, <span class=\"number\">90</span>, <span class=\"number\">77</span>, <span class=\"number\">88</span>, <span class=\"number\">0</span>)], dtype=persontype)</span><br><span class=\"line\"></span><br><span class=\"line\">ages = peoples[:][<span class=\"string\">&#x27;age&#x27;</span>]</span><br><span class=\"line\">chineses = peoples[:][<span class=\"string\">&#x27;chinese&#x27;</span>]</span><br><span class=\"line\">maths = peoples[:][<span class=\"string\">&#x27;math&#x27;</span>]</span><br><span class=\"line\">englishs = peoples[:][<span class=\"string\">&#x27;english&#x27;</span>]</span><br><span class=\"line\">total = peoples[:][<span class=\"string\">&#x27;total&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;各项平均值&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;年龄：&quot;</span>, np.mean(ages))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;语文：&quot;</span>, np.mean(chineses))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;数学：&quot;</span>, np.mean(maths))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;英语：&quot;</span>, np.mean(englishs))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;-&quot;</span> * <span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;各项最大值&quot;</span>) </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;年龄：&quot;</span>, np.amax(ages))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;语文：&quot;</span>, np.amax(chineses))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;数学：&quot;</span>, np.amax(maths))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;英语：&quot;</span>, np.amax(englishs))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;-&quot;</span> * <span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;各项最小值&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;年龄：&quot;</span>, np.amin(ages))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;语文：&quot;</span>, np.amin(chineses))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;数学：&quot;</span>, np.amin(maths))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;英语：&quot;</span>, np.amin(englishs))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;-&quot;</span> * <span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;各项标准差&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;年龄：&quot;</span>, np.std(ages))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;语文：&quot;</span>, np.std(chineses))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;数学：&quot;</span>, np.std(maths))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;英语：&quot;</span>, np.std(englishs))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;-&quot;</span> * <span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;各项方差&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;年龄：&quot;</span>, np.var(ages))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;语文：&quot;</span>, np.var(chineses))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;数学：&quot;</span>, np.var(maths))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;英语：&quot;</span>, np.var(englishs))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;-&quot;</span> * <span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;总成绩排序&quot;</span>)</span><br><span class=\"line\">peoples[:][<span class=\"string\">&#x27;total&#x27;</span>] = chineses + maths + englishs</span><br><span class=\"line\">rank = <span class=\"built_in\">sorted</span>(peoples, key=<span class=\"keyword\">lambda</span> t: t[<span class=\"number\">4</span>], reverse=<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> rank:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(i)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输出结果\"><a href=\"#输出结果\" class=\"headerlink\" title=\"输出结果\"></a>输出结果</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">各项平均值</span><br><span class=\"line\">年龄： 19.5</span><br><span class=\"line\">语文： 86.0</span><br><span class=\"line\">数学： 75.25</span><br><span class=\"line\">英语： 82.5</span><br><span class=\"line\"></span><br><span class=\"line\">各项最大值</span><br><span class=\"line\">年龄： 21</span><br><span class=\"line\">语文： 95</span><br><span class=\"line\">数学： 98</span><br><span class=\"line\">英语： 92</span><br><span class=\"line\"></span><br><span class=\"line\">各项最小值</span><br><span class=\"line\">年龄： 18</span><br><span class=\"line\">语文： 66</span><br><span class=\"line\">数学： 30</span><br><span class=\"line\">英语： 65</span><br><span class=\"line\"></span><br><span class=\"line\">各项标准差</span><br><span class=\"line\">年龄： 1.118033988749895</span><br><span class=\"line\">语文： 11.683321445547923</span><br><span class=\"line\">数学： 27.380421837510102</span><br><span class=\"line\">英语： 10.404326023342406</span><br><span class=\"line\"></span><br><span class=\"line\">各项方差</span><br><span class=\"line\">年龄： 1.25</span><br><span class=\"line\">语文： 136.5</span><br><span class=\"line\">数学： 749.6875</span><br><span class=\"line\">英语： 108.25</span><br><span class=\"line\"></span><br><span class=\"line\">总成绩排序</span><br><span class=\"line\">(b&#x27;zhao yun&#x27;, 20, 93, 96, 92, 281)</span><br><span class=\"line\">(b&#x27;huang zhong&#x27;, 21, 90, 77, 88, 255)</span><br><span class=\"line\">(b&#x27;guan yu&#x27;, 19, 95, 98, 85, 278)</span><br><span class=\"line\">(b&#x27;zhang fei&#x27;, 18, 66, 30, 65, 161)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"Pandas学习\"><a href=\"#Pandas学习\" class=\"headerlink\" title=\"Pandas学习\"></a>Pandas学习</h1><p>学习数据结构：Series 和 DataFrame</p>\n<p>Series 是个定长的字典序列。说是定长是因为在存储的时候，相当于两个 ndarray，这也是和字典结构最大的不同。因为在字典的结构里，元素的个数是不固定的。</p>\n<p>Series 有两个基本属性：index 和 values。在 Series 结构中，index 默认是 0,1,2,……递增的整数序列，当然也可以自己来指定索引，比如 index&#x3D;[‘a’, ‘b’, ‘c’, ‘d’]。</p>\n<p>DataFrame 类型数据结构类似数据库表，它包括了行索引和列索引，可以将 DataFrame 看成是由相同索引的 Series 组成的字典类型。</p>\n<p>(二)  Pandas数据清洗</p>\n<p>1.删除 DataFrame 中的不必要的列或行；</p>\n<p>2.重命名列名 columns，让列表名更容易识别；</p>\n<p>3.去重复的值数据采集可能存在重复的行；</p>\n<p>4.格式问题；</p>\n<p>5.查找空值。</p>\n<hr>\n<h1 id=\"Kaggle竞赛-Titanic乘客生存预测\"><a href=\"#Kaggle竞赛-Titanic乘客生存预测\" class=\"headerlink\" title=\"Kaggle竞赛-Titanic乘客生存预测\"></a>Kaggle竞赛-Titanic乘客生存预测</h1><p>决策树与AdaBoost实验</p>\n<h2 id=\"目标任务\"><a href=\"#目标任务\" class=\"headerlink\" title=\"目标任务\"></a><strong>目标任务</strong></h2><p>（1） 学习决策树、AdaBoost的原理，特性；</p>\n<p>（2） 学习使用Python编写决策树和AdaBoost分类器；</p>\n<p>（3） 学习使用sklearn训练决策树和AdaBoost，熟悉数据挖掘的一般流程.</p>\n<hr>\n<h2 id=\"实验数据\"><a href=\"#实验数据\" class=\"headerlink\" title=\"实验数据\"></a><strong>实验数据</strong></h2><p>Kaggle数据挖掘竞赛平台之Titanic 乘客生存预测。问题描述：泰坦尼克海难是著名的十大灾难之一，究竟多少人遇难，各方统计的结果不一。Kaggle数据挖掘竞赛平台的数据集数据集格式为 csv，一共有两个文件：train.csv 是训练数据集，包含特征信息和存活与否的标签；test.csv: 测试数据集，只包含特征信息。</p>\n<p>在训练集中，包括了以下字段，它们具体为：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">字段</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">PassengerId</td>\n<td>乘客编号</td>\n</tr>\n<tr>\n<td align=\"left\">Survived</td>\n<td>是否幸存</td>\n</tr>\n<tr>\n<td align=\"left\">Pclass</td>\n<td>船票等级</td>\n</tr>\n<tr>\n<td align=\"left\">Name</td>\n<td>乘客姓名</td>\n</tr>\n<tr>\n<td align=\"left\">Sex</td>\n<td>乘客性别</td>\n</tr>\n<tr>\n<td align=\"left\">SibSp</td>\n<td>亲戚数量（兄妹、配偶数）</td>\n</tr>\n<tr>\n<td align=\"left\">Parch</td>\n<td>亲戚数量（父母、子女数）</td>\n</tr>\n<tr>\n<td align=\"left\">Ticket</td>\n<td>船票号码</td>\n</tr>\n<tr>\n<td align=\"left\">Fare</td>\n<td>船票价格</td>\n</tr>\n<tr>\n<td align=\"left\">Cabin</td>\n<td>船舱</td>\n</tr>\n<tr>\n<td align=\"left\">Embarked</td>\n<td>登陆港口</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"生存预测的关键流程\"><a href=\"#生存预测的关键流程\" class=\"headerlink\" title=\"生存预测的关键流程\"></a><strong>生存预测的关键流程</strong></h2><p>要对训练集中乘客的生存进行预测，这个过程可以划分为两个重要的阶段：</p>\n<p>准备阶段：首先需要对训练集、测试集的数据进行探索，分析数据质量，并对数据进行清洗，然后通过特征选择对数据进行降维，方便后续分类运算；</p>\n<p>分类阶段：首先通过训练集的特征矩阵、分类结果得到分类器，然后将分类器应用于测试集。然后对分类器的准确性进行分析，并对模型进行可视化。</p>\n<h2 id=\"实验过程\"><a href=\"#实验过程\" class=\"headerlink\" title=\"实验过程\"></a><strong>实验过程</strong></h2><h3 id=\"实验导入模块\"><a href=\"#实验导入模块\" class=\"headerlink\" title=\"实验导入模块\"></a>实验导入模块</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> xgboost <span class=\"keyword\">as</span> xgb</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.linear_model <span class=\"keyword\">import</span> LogisticRegression</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> train_test_split</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.ensemble <span class=\"keyword\">import</span> RandomForestRegressor</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.tree <span class=\"keyword\">import</span> DecisionTreeClassifier</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.ensemble <span class=\"keyword\">import</span> RandomForestClassifier</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.ensemble <span class=\"keyword\">import</span> AdaBoostClassifier</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.metrics <span class=\"keyword\">import</span> accuracy_score</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> cross_val_score</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> csv</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"数据探索\"><a href=\"#数据探索\" class=\"headerlink\" title=\"数据探索\"></a><strong>数据探索</strong></h3><ul>\n<li><p>info():了解数据表的基本情况，包括行数、列数、每列的数据类型、数据完整度；</p>\n</li>\n<li><p>describe():了解数据表的统计情况，包括总数、平均值、标准差、最小值、最大值等；</p>\n</li>\n<li><p>describe(include&#x3D;[‘O’]):查看字符串类型（非数字）的整体情况；</p>\n</li>\n<li><p>head():查看前几行数据（默认是前 5 行）；</p>\n</li>\n<li><p>tail():查看后几行数据（默认是最后 5 行）。</p>\n</li>\n</ul>\n<p>具体代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"comment\"># 数据加载</span></span><br><span class=\"line\">train_data = pd.read_csv(<span class=\"string\">&#x27;Titanic.train.csv&#x27;</span>)</span><br><span class=\"line\">test_data = pd.read_csv(<span class=\"string\">&#x27;Titanic.test.csv&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 数据探索</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(train_data.info())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;-&#x27;</span> * <span class=\"number\">30</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(train_data.describe())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;-&#x27;</span> * <span class=\"number\">30</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(train_data.describe(include=[<span class=\"string\">&#x27;O&#x27;</span>]))  <span class=\"comment\"># include后面是大写的O字母</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;-&#x27;</span> * <span class=\"number\">30</span>)</span><br></pre></td></tr></table></figure>\n\n<p>数据读取结果：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">class</span> &#x27;<span class=\"attr\">pandas.core.frame.DataFrame</span>&#x27;&gt;</span></span></span><br><span class=\"line\">RangeIndex: 891 entries, 0 to 890</span><br><span class=\"line\">Data columns (total 12 columns):</span><br><span class=\"line\"> #   Column       Non-Null Count  Dtype  </span><br><span class=\"line\">---  ------       --------------  -----  </span><br><span class=\"line\"> 0   PassengerId  891 non-null    int64  </span><br><span class=\"line\"> 1   Survived     891 non-null    int64  </span><br><span class=\"line\"> 2   Pclass       891 non-null    int64  </span><br><span class=\"line\"> 3   Name         891 non-null    object </span><br><span class=\"line\"> 4   Sex          891 non-null    object </span><br><span class=\"line\"> 5   Age          714 non-null    float64</span><br><span class=\"line\"> 6   SibSp        891 non-null    int64  </span><br><span class=\"line\"> 7   Parch        891 non-null    int64  </span><br><span class=\"line\"> 8   Ticket       891 non-null    object </span><br><span class=\"line\"> 9   Fare         891 non-null    float64</span><br><span class=\"line\"> 10  Cabin        204 non-null    object </span><br><span class=\"line\"> 11  Embarked     891 non-null    object </span><br><span class=\"line\">dtypes: float64(2), int64(5), object(5)</span><br><span class=\"line\">memory usage: 83.7+ KB</span><br><span class=\"line\">None</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"数据清洗\"><a href=\"#数据清洗\" class=\"headerlink\" title=\"数据清洗\"></a><strong>数据清洗</strong></h3><p>通过数据探索，我们发现 Age、Fare 和 Cabin 这三个字段的数据有所缺失。其中 Age 为年龄字段，是数值型，我们可以通过平均值进行补齐；Fare 为船票价格，是数值型，我们也可以通过其他人购买船票的平均值进行补齐。具体实现的代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用平均年龄来填充年龄中的nan值</span></span><br><span class=\"line\">train_data[<span class=\"string\">&#x27;Age&#x27;</span>].fillna(train_data[<span class=\"string\">&#x27;Age&#x27;</span>].mean(), inplace=<span class=\"literal\">True</span>)</span><br><span class=\"line\">test_data[<span class=\"string\">&#x27;Age&#x27;</span>].fillna(test_data[<span class=\"string\">&#x27;Age&#x27;</span>].mean(), inplace=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用票价的均值填充票价中的nan值</span></span><br><span class=\"line\">train_data[<span class=\"string\">&#x27;Fare&#x27;</span>].fillna(train_data[<span class=\"string\">&#x27;Fare&#x27;</span>].mean(), inplace=<span class=\"literal\">True</span>)</span><br><span class=\"line\">test_data[<span class=\"string\">&#x27;Fare&#x27;</span>].fillna(test_data[<span class=\"string\">&#x27;Fare&#x27;</span>].mean(), inplace=<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(train_data[<span class=\"string\">&#x27;Embarked&#x27;</span>].value_counts())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用登录最多的港口来填充登录港口的nan值</span></span><br><span class=\"line\">train_data[<span class=\"string\">&#x27;Embarked&#x27;</span>].fillna(<span class=\"string\">&#x27;S&#x27;</span>, inplace=<span class=\"literal\">True</span>)</span><br><span class=\"line\">test_data[<span class=\"string\">&#x27;Embarked&#x27;</span>].fillna(<span class=\"string\">&#x27;S&#x27;</span>, inplace=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"特征选择\"><a href=\"#特征选择\" class=\"headerlink\" title=\"特征选择\"></a><strong>特征选择</strong></h3><p>特征选择是分类器的关键。特征选择不同，得到的分类器也不同。那么该选择哪些特征做生存的预测呢？</p>\n<p>通过数据探索发现，PassengerId 为乘客编号，对分类没有作用，可以放弃；Name 为乘客姓名，对分类没有作用，可以放弃；Cabin 字段缺失值太多，可以放弃；Ticket 字段为船票号码，杂乱无章且无规律，可以放弃。其余的字段包括：Pclass、Sex、Age、SibSp、Parch 和 Fare，这些属性分别表示了乘客的船票等级、性别、年龄、亲戚数量以及船票价格，可能会和乘客的生存预测分类有关系。具体是什么关系，我们可以交给分类器来处理。因此先将 Pclass、Sex、Age 等这些其余的字段作特征，放到特征向量 features 里。</p>\n<p>代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 模块3：特征选择</span></span><br><span class=\"line\">features = [<span class=\"string\">&#x27;Pclass&#x27;</span>, <span class=\"string\">&#x27;Sex&#x27;</span>, <span class=\"string\">&#x27;Age&#x27;</span>, <span class=\"string\">&#x27;SibSp&#x27;</span>, <span class=\"string\">&#x27;Parch&#x27;</span>, <span class=\"string\">&#x27;Fare&#x27;</span>, <span class=\"string\">&#x27;Embarked&#x27;</span>]</span><br><span class=\"line\">train_features = train_data[features]</span><br><span class=\"line\">train_labels = train_data[<span class=\"string\">&#x27;Survived&#x27;</span>]</span><br><span class=\"line\">test_features = test_data[features]</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.feature_extraction <span class=\"keyword\">import</span> DictVectorizer</span><br><span class=\"line\">dvec = DictVectorizer(sparse=<span class=\"literal\">False</span>)</span><br><span class=\"line\">train_features = dvec.fit_transform(train_features.to_dict(orient=<span class=\"string\">&#x27;record&#x27;</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dvec.feature_names_)</span><br></pre></td></tr></table></figure>\n\n<p>数据读取结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">S    644</span><br><span class=\"line\">C    168</span><br><span class=\"line\">Q     77</span><br><span class=\"line\">U      2</span><br><span class=\"line\">Name: Embarked, dtype: int64</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"分类模型及模型的评价\"><a href=\"#分类模型及模型的评价\" class=\"headerlink\" title=\"分类模型及模型的评价\"></a><strong>分类模型及模型的评价</strong></h3><p>1） 使用 sklearn 中的决策树模型。使用 ID3 算法使用DecisionTreeClassifier 时，设置 criterion&#x3D;‘entropy’，然后使用 fit 进行训练，将特征值矩阵和分类标识结果作为参数传入，得到决策树分类器。</p>\n<p>2） 使用 sklearn 中的集成学习模型Adaboost()</p>\n<p>3） 采用 K 折交叉验证准确率。sklearn 的 model_selection 模型选择中提供了 cross_val_score 函数。</p>\n<p>Ø K 折交叉验证的原理：</p>\n<p>拿出大部分样本进行训练，少量的用于分类器的验证。K 折交叉验证，就是做 K 次交叉验证，每次选取 K 分之一的数据作为验证，其余作为训练。轮流 K 次，取平均值。</p>\n<p>代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 决策树弱分类器</span></span><br><span class=\"line\">dt_stump = DecisionTreeClassifier(max_depth=<span class=\"number\">7</span>, min_samples_leaf=<span class=\"number\">5</span>)</span><br><span class=\"line\">dt_stump.fit(train_features, train_labels)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">u&#x27;决策树弱分类器准确率为 %.4lf&#x27;</span> % np.mean(cross_val_score(dt_stump, train_features, train_labels, cv=<span class=\"number\">10</span>)))</span><br><span class=\"line\"><span class=\"comment\"># 决策树分类器</span></span><br><span class=\"line\">dt = DecisionTreeClassifier()</span><br><span class=\"line\">dt.fit(train_features, train_labels)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">u&#x27;决策树分类器准确率为 %.4lf&#x27;</span> % np.mean(cross_val_score(dt, train_features, train_labels, cv=<span class=\"number\">10</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># AdaBoost分类器</span></span><br><span class=\"line\">ada = AdaBoostClassifier()</span><br><span class=\"line\">ada.fit(train_features, train_labels)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">u&#x27;AdaBoost 分类器准确率为 %.4lf&#x27;</span> %</span><br><span class=\"line\">np.mean(cross_val_score(ada, train_features, train_labels, cv=<span class=\"number\">15</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># XGBoost分类器</span></span><br><span class=\"line\">xgb = xgb.XGBClassifier(max_depth=<span class=\"number\">8</span>, min_child_weight=<span class=\"number\">3</span>)</span><br><span class=\"line\">xgb.fit(train_features, train_labels)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">u&#x27;XGBoost 分类器准确率为 %.4lf&#x27;</span> %</span><br><span class=\"line\">np.mean(cross_val_score(ada, train_features, train_labels, cv=<span class=\"number\">15</span>)))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"各个分类器准确率\"><a href=\"#各个分类器准确率\" class=\"headerlink\" title=\"各个分类器准确率\"></a>各个分类器准确率</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">决策树弱分类器准确率为 0.8228</span><br><span class=\"line\">决策树分类器准确率为 0.7778</span><br><span class=\"line\">AdaBoost 分类器准确率为 0.8183</span><br><span class=\"line\">XGBoost 分类器准确率为 0.8183</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"银行客户违约信用分析\"><a href=\"#银行客户违约信用分析\" class=\"headerlink\" title=\"银行客户违约信用分析\"></a>银行客户违约信用分析</h1><p>对银行客户基本信息数据集进行分析，提取不同信息进行特征分析和预测，通过多种分类器算法预测客户违约行为</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> xlwt</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.feature_extraction <span class=\"keyword\">import</span> DictVectorizer</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.tree <span class=\"keyword\">import</span> DecisionTreeClassifier</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> cross_val_score</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.ensemble <span class=\"keyword\">import</span> AdaBoostClassifier</span><br><span class=\"line\"><span class=\"keyword\">import</span> xgboost <span class=\"keyword\">as</span> xgb</span><br><span class=\"line\"><span class=\"keyword\">from</span> xgboost <span class=\"keyword\">import</span> XGBClassifier</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.linear_model <span class=\"keyword\">import</span> LogisticRegression</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.naive_bayes <span class=\"keyword\">import</span> MultinomialNB<span class=\"comment\">#多项式朴素贝叶斯分类器</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.svm <span class=\"keyword\">import</span> LinearSVC</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.naive_bayes <span class=\"keyword\">import</span> BernoulliNB</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数据集读取转换csv文件预处理\"><a href=\"#数据集读取转换csv文件预处理\" class=\"headerlink\" title=\"数据集读取转换csv文件预处理\"></a>数据集读取转换csv文件预处理</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># datafile = &#x27;data.xls&#x27;</span></span><br><span class=\"line\">resultfile = <span class=\"string\">&#x27;data.csv&#x27;</span></span><br><span class=\"line\">data = pd.read_excel(<span class=\"string\">&#x27;data.xls&#x27;</span>)</span><br><span class=\"line\">data.to_csv(resultfile)</span><br><span class=\"line\"><span class=\"comment\">## excel转成csv表头中文乱码</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数据探索-1\"><a href=\"#数据探索-1\" class=\"headerlink\" title=\"数据探索\"></a>数据探索</h2><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">datafile = <span class=\"string\">&#x27;data.csv&#x27;</span></span><br><span class=\"line\">data = pd.read_csv(datafile)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(data.info())</span><br><span class=\"line\">data1 = data.describe()</span><br><span class=\"line\">data1.to_excel(<span class=\"string\">&#x27;data_dexcribe.xls&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<img src=\"/posts/c1c7733e/1.png\" class=\"\">\n\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\">weiyue = pd.value_counts(data[<span class=\"string\">&#x27;违约&#x27;</span>])[<span class=\"number\">1</span>]</span><br><span class=\"line\">not_weiyue = pd.value_counts(data[<span class=\"string\">&#x27;违约&#x27;</span>])[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 绘图</span></span><br><span class=\"line\">fig = plt.figure(figsize = (<span class=\"number\">8</span>, <span class=\"number\">5</span>))  <span class=\"comment\"># 设置画布大小</span></span><br><span class=\"line\">plt.rcParams[<span class=\"string\">&#x27;font.sans-serif&#x27;</span>] = [<span class=\"string\">&#x27;KaiTi&#x27;</span>]</span><br><span class=\"line\">plt.bar(x=<span class=\"built_in\">range</span>(<span class=\"number\">2</span>), height=[weiyue, not_weiyue,], width=<span class=\"number\">0.4</span>, alpha=<span class=\"number\">0.8</span>, color=<span class=\"string\">&#x27;skyblue&#x27;</span>)</span><br><span class=\"line\">plt.xticks([index <span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>)], [<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;0&#x27;</span>])</span><br><span class=\"line\">plt.xlabel(<span class=\"string\">&#x27;是否违约&#x27;</span>)</span><br><span class=\"line\">plt.ylabel(<span class=\"string\">&#x27;客户人数&#x27;</span>)</span><br><span class=\"line\">plt.title(<span class=\"string\">&#x27;客户是否违约柱状图&#x27;</span>)</span><br><span class=\"line\">plt.show()</span><br><span class=\"line\">plt.close()</span><br><span class=\"line\"><span class=\"comment\">## 输出可见违约：未违约大概2:5</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/posts/c1c7733e/2.png\" class=\"\">\n\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 绘制 是否违约客户 与 年龄 的分布</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"><span class=\"comment\">## 提取年龄</span></span><br><span class=\"line\">age = data[<span class=\"string\">&#x27;年龄&#x27;</span>].dropna()</span><br><span class=\"line\">age = age.astype(<span class=\"string\">&#x27;int64&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">## 绘制客户年龄分布箱型图</span></span><br><span class=\"line\">fig = plt.figure()</span><br><span class=\"line\">fig, axes = plt.subplots(<span class=\"number\">1</span>, <span class=\"number\">3</span>, figsize=(<span class=\"number\">10</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\">sns.distplot(data[<span class=\"string\">&quot;年龄&quot;</span>], ax = axes[<span class=\"number\">0</span>], axlabel=<span class=\"string\">&#x27;所有客户年龄分布&#x27;</span>)</span><br><span class=\"line\">sns.distplot(data.loc[data[<span class=\"string\">&quot;违约&quot;</span>]==<span class=\"number\">0</span>][<span class=\"string\">&quot;年龄&quot;</span>], ax = axes[<span class=\"number\">1</span>], axlabel = <span class=\"string\">&#x27;非违约客户年龄分布&#x27;</span>)</span><br><span class=\"line\">sns.distplot(data.loc[data[<span class=\"string\">&quot;违约&quot;</span>]==<span class=\"number\">1</span>][<span class=\"string\">&quot;年龄&quot;</span>], ax = axes[<span class=\"number\">2</span>], axlabel = <span class=\"string\">&#x27;违约客户年龄分布&#x27;</span>)</span><br><span class=\"line\">plt.show()</span><br><span class=\"line\">plt.close()</span><br></pre></td></tr></table></figure>\n\n<img src=\"/posts/c1c7733e/3.png\" class=\"\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 客户年龄中存在300岁，需要数据清洗删除异常值，用年龄均值填充</span></span><br><span class=\"line\"><span class=\"comment\"># plt.title(&#x27;客户是否违约柱状图&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\"># plt.show()</span></span><br><span class=\"line\"><span class=\"comment\"># plt.close()</span></span><br><span class=\"line\"><span class=\"comment\"># 均值填充年龄</span></span><br><span class=\"line\">data[<span class=\"string\">&#x27;年龄&#x27;</span>].fillna(data[<span class=\"string\">&#x27;年龄&#x27;</span>].mean(), inplace=<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"comment\"># 删除年龄大于80的数据</span></span><br><span class=\"line\">data.drop(data[(data[<span class=\"string\">&#x27;年龄&#x27;</span>] &gt; <span class=\"number\">80</span>)].index.tolist(), inplace=<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(data[<span class=\"string\">&quot;年龄&quot;</span>].describe())</span><br><span class=\"line\"><span class=\"comment\"># 将性别数据分别用female=1，male=0表示</span></span><br><span class=\"line\">data.loc[data[<span class=\"string\">&quot;性别&quot;</span>] == <span class=\"string\">&quot;male&quot;</span>, <span class=\"string\">&quot;性别&quot;</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">data.loc[data[<span class=\"string\">&quot;性别&quot;</span>] == <span class=\"string\">&quot;female&quot;</span>, <span class=\"string\">&quot;性别&quot;</span>] = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>性别特性处理：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">count    699.000000</span><br><span class=\"line\">mean      34.863308</span><br><span class=\"line\">std        7.967906</span><br><span class=\"line\">min       20.000000</span><br><span class=\"line\">25%       29.000000</span><br><span class=\"line\">50%       34.000000</span><br><span class=\"line\">75%       40.000000</span><br><span class=\"line\">max       56.000000</span><br><span class=\"line\">Name: 年龄, dtype: float64</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 计算相关性矩阵</span></span><br><span class=\"line\">data_corr = data</span><br><span class=\"line\">dt_corr = data_corr.corr(method = <span class=\"string\">&#x27;pearson&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;相关性矩阵为：\\n&#x27;</span>, dt_corr)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 绘制热力图</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\">plt.subplots(figsize=(<span class=\"number\">10</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\">sns.heatmap(dt_corr, annot=<span class=\"literal\">True</span>, vmax=<span class=\"number\">1</span>, square=<span class=\"literal\">True</span>, cmap=<span class=\"string\">&#x27;Blues&#x27;</span>)</span><br><span class=\"line\">plt.show()</span><br><span class=\"line\">plt.close()</span><br></pre></td></tr></table></figure>\n\n<img src=\"/posts/c1c7733e/4.png\" class=\"\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sklearn.feature_extraction <span class=\"keyword\">import</span> DictVectorizer</span><br><span class=\"line\"><span class=\"comment\"># 通过分析选择合适的特征用于预测</span></span><br><span class=\"line\">features = [<span class=\"string\">&#x27;年龄&#x27;</span>, <span class=\"string\">&#x27;教育&#x27;</span>, <span class=\"string\">&#x27;工龄&#x27;</span>, <span class=\"string\">&#x27;地址&#x27;</span>, <span class=\"string\">&#x27;负债率&#x27;</span>, <span class=\"string\">&#x27;信用卡负债&#x27;</span>, <span class=\"string\">&#x27;收入&#x27;</span>]</span><br><span class=\"line\">features_train = data[features]</span><br><span class=\"line\">train_label = data[<span class=\"string\">&#x27;违约&#x27;</span>]</span><br><span class=\"line\">dev = DictVectorizer(sparse=<span class=\"literal\">False</span>)</span><br><span class=\"line\"><span class=\"comment\"># 转化成字典型</span></span><br><span class=\"line\">features_train = dev.fit_transform(features_train.to_dict(orient=<span class=\"string\">&#x27;record&#x27;</span>))</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> train_test_split</span><br><span class=\"line\">X_train, X_test, y_train, y_test = train_test_split(features_train,train_label,test_size=<span class=\"number\">0.3</span>, random_state=<span class=\"number\">23</span>,shuffle=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sklearn.neural_network <span class=\"keyword\">import</span> MLPClassifier</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.metrics <span class=\"keyword\">import</span> confusion_matrix, classification_report</span><br><span class=\"line\"><span class=\"keyword\">import</span> sklearn.metrics <span class=\"keyword\">as</span> metrics</span><br><span class=\"line\"><span class=\"comment\">#import sklearn.metrics.roc</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">Confusion_matrix</span>(<span class=\"params\">model</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(confusion_matrix(y_test, model.predict(X_test)))  <span class=\"comment\"># 混淆矩阵</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(classification_report(y_test, model.predict(X_test)))  <span class=\"comment\"># 分类报告</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> itertools</span><br><span class=\"line\"><span class=\"comment\"># 混淆矩阵可视化</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">plot_confusion_matrix</span>(<span class=\"params\">cm, classes, normalize = <span class=\"literal\">False</span>, title = <span class=\"string\">&#x27;Confusion matrix&quot;&#x27;</span>, cmap = plt.cm.Blues</span>) :</span><br><span class=\"line\">    plt.figure()</span><br><span class=\"line\">    plt.imshow(cm, interpolation = <span class=\"string\">&#x27;nearest&#x27;</span>, cmap = cmap)</span><br><span class=\"line\">    plt.title(title)</span><br><span class=\"line\">    plt.colorbar()</span><br><span class=\"line\">    tick_marks = np.arange(<span class=\"built_in\">len</span>(classes))</span><br><span class=\"line\">    plt.xticks(tick_marks, classes, rotation = <span class=\"number\">0</span>)</span><br><span class=\"line\">    plt.yticks(tick_marks, classes)</span><br><span class=\"line\"> </span><br><span class=\"line\">    thresh = cm.<span class=\"built_in\">max</span>() / <span class=\"number\">2.</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, j <span class=\"keyword\">in</span> itertools.product(<span class=\"built_in\">range</span>(cm.shape[<span class=\"number\">0</span>]), <span class=\"built_in\">range</span>(cm.shape[<span class=\"number\">1</span>])) :</span><br><span class=\"line\">        plt.text(j, i, cm[i, j],</span><br><span class=\"line\">                 horizontalalignment = <span class=\"string\">&#x27;center&#x27;</span>,</span><br><span class=\"line\">                 color = <span class=\"string\">&#x27;white&#x27;</span> <span class=\"keyword\">if</span> cm[i, j] &gt; thresh <span class=\"keyword\">else</span> <span class=\"string\">&#x27;black&#x27;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">    plt.tight_layout()</span><br><span class=\"line\">    plt.ylabel(<span class=\"string\">&#x27;True label&#x27;</span>)</span><br><span class=\"line\">    plt.xlabel(<span class=\"string\">&#x27;Predicted label&#x27;</span>)</span><br><span class=\"line\">    plt.show()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"不同分类器处理结果呈现\"><a href=\"#不同分类器处理结果呈现\" class=\"headerlink\" title=\"不同分类器处理结果呈现\"></a>不同分类器处理结果呈现</h2><h3 id=\"决策树与决策树弱分类器\"><a href=\"#决策树与决策树弱分类器\" class=\"headerlink\" title=\"决策树与决策树弱分类器\"></a>决策树与决策树弱分类器</h3><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#决策树分类器</span></span><br><span class=\"line\">dt = DecisionTreeClassifier(max_depth=<span class=\"number\">3</span>,min_samples_leaf=<span class=\"number\">1</span>)</span><br><span class=\"line\">dt.fit(features_train, train_label)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#决策树弱分类器</span></span><br><span class=\"line\">dt_stump =DecisionTreeClassifier()</span><br><span class=\"line\">dt_stump.fit(features_train,train_label)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 决策树分类器</span></span><br><span class=\"line\">dt.fit(X_train, y_train)</span><br><span class=\"line\">predict_y = dt.predict(X_test)</span><br><span class=\"line\"></span><br><span class=\"line\">cm1 = confusion_matrix(y_test, predict_y)</span><br><span class=\"line\">class_names = [<span class=\"string\">&#x27;违约&#x27;</span>, <span class=\"string\">&#x27;未违约&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 显示混淆矩阵</span></span><br><span class=\"line\">plot_confusion_matrix(cm1, classes=class_names, title=<span class=\"string\">&#x27;决策树分类&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Confusion_matrix(dt)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 决策树分类器</span></span><br><span class=\"line\">dt.fit(X_train, y_train)</span><br><span class=\"line\">predict_y = dt.predict(X_test)</span><br><span class=\"line\"></span><br><span class=\"line\">cm1 = confusion_matrix(y_test, predict_y)</span><br><span class=\"line\">class_names = [<span class=\"string\">&#x27;违约&#x27;</span>, <span class=\"string\">&#x27;未违约&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 显示混淆矩阵</span></span><br><span class=\"line\">plot_confusion_matrix(cm1, classes=class_names, title=<span class=\"string\">&#x27;决策树分类&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Confusion_matrix(dt)</span><br></pre></td></tr></table></figure>\n\n<p>决策树分类器 混淆矩阵：</p>\n<img src=\"/posts/c1c7733e/5.png\" class=\"\">\n\n<p>决策树分类器 分类报告：</p>\n<img src=\"/posts/c1c7733e/6.png\" class=\"\">\n\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 决策树弱分类器</span></span><br><span class=\"line\"><span class=\"comment\">#dt_stump = DecisionTreeClassifier()</span></span><br><span class=\"line\">dt_stump.fit(X_train, y_train)</span><br><span class=\"line\">predict_y = dt_stump.predict(X_test)</span><br><span class=\"line\"><span class=\"comment\">#score_y = dt_stump.decision_function(X_test)</span></span><br><span class=\"line\">cm1 = confusion_matrix(y_test, predict_y)</span><br><span class=\"line\">class_names = [<span class=\"string\">&#x27;违约&#x27;</span>, <span class=\"string\">&#x27;未违约&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 显示混淆矩阵</span></span><br><span class=\"line\">plot_confusion_matrix(cm1, classes=class_names, title=<span class=\"string\">&#x27;决策树弱分类&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Confusion_matrix(dt_stump)</span><br></pre></td></tr></table></figure>\n\n<p>决策树弱分类器 混淆矩阵：</p>\n<img src=\"/posts/c1c7733e/7.png\" class=\"\">\n\n<p>决策树弱分类器 分类报告：</p>\n<img src=\"/posts/c1c7733e/8.png\" class=\"\">\n\n<h3 id=\"AdaBoost\"><a href=\"#AdaBoost\" class=\"headerlink\" title=\"AdaBoost\"></a>AdaBoost</h3><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#AdaBoost分类器 基分类器提升（循环）次数,随机种子设置,</span></span><br><span class=\"line\">ada = AdaBoostClassifier(n_estimators = <span class=\"number\">10</span>,random_state = <span class=\"number\">10</span>,learning_rate=<span class=\"number\">1.1</span>)</span><br><span class=\"line\">ada.fit(features_train,train_label)</span><br><span class=\"line\"></span><br><span class=\"line\">ada.fit(X_train, y_train)</span><br><span class=\"line\">predict_y = ada.predict(X_test)</span><br><span class=\"line\"></span><br><span class=\"line\">cm2 = confusion_matrix(y_test, predict_y)</span><br><span class=\"line\"></span><br><span class=\"line\">class_names = [<span class=\"string\">&#x27;违约&#x27;</span>, <span class=\"string\">&#x27;未违约&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 显示混淆矩阵</span></span><br><span class=\"line\">plot_confusion_matrix(cm2, classes=class_names, title=<span class=\"string\">&#x27;AdaBoost分类器&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Confusion_matrix(ada)</span><br></pre></td></tr></table></figure>\n\n<p>AdaBoost分类器 混淆矩阵：</p>\n<img src=\"/posts/c1c7733e/9.png\" class=\"\">\n\n<p>AdaBoost分类器 分类报告：</p>\n<img src=\"/posts/c1c7733e/10.png\" class=\"\">\n\n<h3 id=\"XGBoost\"><a href=\"#XGBoost\" class=\"headerlink\" title=\"XGBoost\"></a>XGBoost</h3><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#XGBoost分类器</span></span><br><span class=\"line\"><span class=\"comment\">#xgb = XGBClassifier(n_estimators = 350, learning_rate=0.2)</span></span><br><span class=\"line\">xgb = XGBClassifier()</span><br><span class=\"line\">xgb.fit(features_train,train_label)</span><br><span class=\"line\"></span><br><span class=\"line\">xgb.fit(X_train, y_train)</span><br><span class=\"line\">predict_y = xgb.predict(X_test)</span><br><span class=\"line\"><span class=\"comment\">#score_y = dt_stump.decision_function(X_test)</span></span><br><span class=\"line\">cm3 = confusion_matrix(y_test, predict_y)</span><br><span class=\"line\">class_names = [<span class=\"string\">&#x27;违约&#x27;</span>, <span class=\"string\">&#x27;未违约&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 显示混淆矩阵</span></span><br><span class=\"line\">plot_confusion_matrix(cm3, classes=class_names, title=<span class=\"string\">&#x27;XGBoost分类器&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Confusion_matrix(xgb)</span><br></pre></td></tr></table></figure>\n\n<p>XGBoost分类器 混淆矩阵：</p>\n<img src=\"/posts/c1c7733e/11.png\" class=\"\">\n\n<p>XGBoost分类器 分类报告：</p>\n<img src=\"/posts/c1c7733e/12.png\" class=\"\">\n\n<h3 id=\"逻辑回归\"><a href=\"#逻辑回归\" class=\"headerlink\" title=\"逻辑回归\"></a>逻辑回归</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 逻辑回归分类器</span></span><br><span class=\"line\">log = LogisticRegression()</span><br><span class=\"line\">log.fit(features_train, train_label)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 逻辑回归分类器</span></span><br><span class=\"line\">log = LogisticRegression()</span><br><span class=\"line\">log.fit(X_train, y_train)</span><br><span class=\"line\">predict_y = log.predict(X_test)</span><br><span class=\"line\">score_y = log.decision_function(X_test)</span><br><span class=\"line\">cm = confusion_matrix(y_test, predict_y)</span><br><span class=\"line\">class_names = [<span class=\"string\">&#x27;违约&#x27;</span>, <span class=\"string\">&#x27;未违约&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 显示混淆矩阵</span></span><br><span class=\"line\">plot_confusion_matrix(cm, classes=class_names, title=<span class=\"string\">&#x27;逻辑回归&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Confusion_matrix(log)</span><br></pre></td></tr></table></figure>\n\n<p>逻辑回归 混淆矩阵：</p>\n<img src=\"/posts/c1c7733e/13.png\" class=\"\">\n\n<p>逻辑回归 分类报告：</p>\n<img src=\"/posts/c1c7733e/14.png\" class=\"\">\n\n<h3 id=\"朴素贝叶斯\"><a href=\"#朴素贝叶斯\" class=\"headerlink\" title=\"朴素贝叶斯\"></a>朴素贝叶斯</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 多项朴素贝叶斯分类器</span></span><br><span class=\"line\">mul = MultinomialNB()</span><br><span class=\"line\"><span class=\"comment\">#mul.fit(features_train, train_label)</span></span><br><span class=\"line\">mul.fit(X_train, y_train)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#mul.fit(X_train, y_train)</span></span><br><span class=\"line\">predict_y = mul.predict(X_test)</span><br><span class=\"line\"><span class=\"comment\">#score_y = mul.decision_function(X_test)</span></span><br><span class=\"line\">cm4 = confusion_matrix(y_test, predict_y)</span><br><span class=\"line\">class_names = [<span class=\"string\">&#x27;违约&#x27;</span>, <span class=\"string\">&#x27;未违约&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 显示混淆矩阵</span></span><br><span class=\"line\">plot_confusion_matrix(cm4, classes=class_names, title=<span class=\"string\">&#x27;多项朴素贝叶斯&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Confusion_matrix(mul)</span><br></pre></td></tr></table></figure>\n\n<p>朴素贝叶斯 混淆矩阵：</p>\n<img src=\"/posts/c1c7733e/15.png\" class=\"\">\n\n<p>朴素贝叶斯 分类报告：</p>\n<img src=\"/posts/c1c7733e/16.png\" class=\"\">\n\n<h2 id=\"结果整合\"><a href=\"#结果整合\" class=\"headerlink\" title=\"结果整合\"></a>结果整合</h2><img src=\"/posts/c1c7733e/17.png\" class=\"\">\n\n<hr>\n<h1 id=\"GMM聚类\"><a href=\"#GMM聚类\" class=\"headerlink\" title=\"GMM聚类\"></a>GMM聚类</h1><p>EM算法处理王者荣耀英雄属性数据集</p>\n<h2 id=\"使用EM算法工具完成聚类分析算法\"><a href=\"#使用EM算法工具完成聚类分析算法\" class=\"headerlink\" title=\"使用EM算法工具完成聚类分析算法\"></a>使用EM算法工具完成聚类分析算法</h2><p>实验目的： 学习使用EM算法工具完成聚类分析算法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#实验使用的工具包</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> csv</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.mixture <span class=\"keyword\">import</span> GaussianMixture</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.preprocessing <span class=\"keyword\">import</span> StandardScaler</span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数据读取\"><a href=\"#数据读取\" class=\"headerlink\" title=\"数据读取\"></a>数据读取</h3><p>任务一：数据加载，避免中文乱码问题完成</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#数据读取,请填写相应的代码！</span></span><br><span class=\"line\">data_ori = pd.read_csv(<span class=\"string\">&#x27;heros.csv&#x27;</span>, encoding=<span class=\"string\">&#x27;gb18030&#x27;</span>)</span><br><span class=\"line\">features = [<span class=\"string\">u&#x27;最大生命&#x27;</span>,<span class=\"string\">u&#x27;生命成长&#x27;</span>,<span class=\"string\">u&#x27;初始生命&#x27;</span>,<span class=\"string\">u&#x27;最大法力&#x27;</span>, <span class=\"string\">u&#x27;法力成长&#x27;</span>,<span class=\"string\">u&#x27;初始法力&#x27;</span>,<span class=\"string\">u&#x27;最高物攻&#x27;</span>,<span class=\"string\">u&#x27;物攻成长&#x27;</span>,<span class=\"string\">u&#x27;初始物攻&#x27;</span>,<span class=\"string\">u&#x27;最大物防&#x27;</span>,<span class=\"string\">u&#x27;物防成长&#x27;</span>,<span class=\"string\">u&#x27;初始物防&#x27;</span>, <span class=\"string\">u&#x27;最大每5秒回血&#x27;</span>, <span class=\"string\">u&#x27;每5秒回血成长&#x27;</span>, <span class=\"string\">u&#x27;初始每5秒回血&#x27;</span>, <span class=\"string\">u&#x27;最大每5秒回蓝&#x27;</span>, <span class=\"string\">u&#x27;每5秒回蓝成长&#x27;</span>, <span class=\"string\">u&#x27;初始每5秒回蓝&#x27;</span>, <span class=\"string\">u&#x27;最大攻速&#x27;</span>, <span class=\"string\">u&#x27;攻击范围&#x27;</span>]</span><br><span class=\"line\">data = data_ori[features]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 对英雄属性之间的关系进行可视化分析</span></span><br><span class=\"line\"><span class=\"comment\"># 设置 plt 正确显示中文</span></span><br><span class=\"line\">plt.rcParams[<span class=\"string\">&#x27;font.sans-serif&#x27;</span>]=[<span class=\"string\">&#x27;SimHei&#x27;</span>] <span class=\"comment\"># 用来正常显示中文标签</span></span><br><span class=\"line\">plt.rcParams[<span class=\"string\">&#x27;axes.unicode_minus&#x27;</span>]=<span class=\"literal\">False</span> <span class=\"comment\"># 用来正常显示负号</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数据探索-2\"><a href=\"#数据探索-2\" class=\"headerlink\" title=\"数据探索\"></a>数据探索</h3><p>任务二：编写计算特征之间相似度的代码</p>\n<p>用热力图呈现 features_mean 字段之间的相关性 </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#填写相应代码！！</span></span><br><span class=\"line\">corr = data[features].corr()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(corr)</span><br><span class=\"line\">             最大生命      生命成长      初始生命      最大法力      法力成长      初始法力      最高物攻  \\</span><br><span class=\"line\">最大生命     <span class=\"number\">1.000000</span>  <span class=\"number\">0.977408</span>  <span class=\"number\">0.761300</span> -<span class=\"number\">0.220133</span> -<span class=\"number\">0.207130</span> -<span class=\"number\">0.260449</span> -<span class=\"number\">0.246412</span>   </span><br><span class=\"line\">生命成长     <span class=\"number\">0.977408</span>  <span class=\"number\">1.000000</span>  <span class=\"number\">0.658106</span> -<span class=\"number\">0.224112</span> -<span class=\"number\">0.212271</span> -<span class=\"number\">0.260464</span> -<span class=\"number\">0.268377</span>   </span><br><span class=\"line\">初始生命     <span class=\"number\">0.761300</span>  <span class=\"number\">0.658106</span>  <span class=\"number\">1.000000</span> -<span class=\"number\">0.189349</span> -<span class=\"number\">0.178674</span> -<span class=\"number\">0.222314</span> -<span class=\"number\">0.140356</span>   </span><br><span class=\"line\">最大法力    -<span class=\"number\">0.220133</span> -<span class=\"number\">0.224112</span> -<span class=\"number\">0.189349</span>  <span class=\"number\">1.000000</span>  <span class=\"number\">0.998958</span>  <span class=\"number\">0.988178</span> -<span class=\"number\">0.180428</span>   </span><br><span class=\"line\">法力成长    -<span class=\"number\">0.207130</span> -<span class=\"number\">0.212271</span> -<span class=\"number\">0.178674</span>  <span class=\"number\">0.998958</span>  <span class=\"number\">1.000000</span>  <span class=\"number\">0.980154</span> -<span class=\"number\">0.175029</span>   </span><br><span class=\"line\">初始法力    -<span class=\"number\">0.260449</span> -<span class=\"number\">0.260464</span> -<span class=\"number\">0.222314</span>  <span class=\"number\">0.988178</span>  <span class=\"number\">0.980154</span>  <span class=\"number\">1.000000</span> -<span class=\"number\">0.195800</span>   </span><br><span class=\"line\">最高物攻    -<span class=\"number\">0.246412</span> -<span class=\"number\">0.268377</span> -<span class=\"number\">0.140356</span> -<span class=\"number\">0.180428</span> -<span class=\"number\">0.175029</span> -<span class=\"number\">0.195800</span>  <span class=\"number\">1.000000</span>   </span><br><span class=\"line\">物攻成长    -<span class=\"number\">0.230507</span> -<span class=\"number\">0.248988</span> -<span class=\"number\">0.121609</span> -<span class=\"number\">0.197617</span> -<span class=\"number\">0.191883</span> -<span class=\"number\">0.213851</span>  <span class=\"number\">0.986098</span>   </span><br><span class=\"line\">初始物攻    -<span class=\"number\">0.195840</span> -<span class=\"number\">0.223728</span> -<span class=\"number\">0.161278</span>  <span class=\"number\">0.003153</span>  <span class=\"number\">0.003966</span>  <span class=\"number\">0.000371</span>  <span class=\"number\">0.536409</span>   </span><br><span class=\"line\">最大物防     <span class=\"number\">0.862472</span>  <span class=\"number\">0.879106</span>  <span class=\"number\">0.529737</span> -<span class=\"number\">0.210425</span> -<span class=\"number\">0.200722</span> -<span class=\"number\">0.239802</span> -<span class=\"number\">0.227352</span>   </span><br><span class=\"line\">物防成长     <span class=\"number\">0.832795</span>  <span class=\"number\">0.847654</span>  <span class=\"number\">0.528719</span> -<span class=\"number\">0.226732</span> -<span class=\"number\">0.217018</span> -<span class=\"number\">0.255893</span> -<span class=\"number\">0.182300</span>   </span><br><span class=\"line\">初始物防     <span class=\"number\">0.746460</span>  <span class=\"number\">0.764736</span>  <span class=\"number\">0.403032</span> -<span class=\"number\">0.106082</span> -<span class=\"number\">0.098780</span> -<span class=\"number\">0.128992</span> -<span class=\"number\">0.316263</span>   </span><br><span class=\"line\">最大每<span class=\"number\">5</span>秒回血  <span class=\"number\">0.951013</span>  <span class=\"number\">0.943635</span>  <span class=\"number\">0.688104</span> -<span class=\"number\">0.224234</span> -<span class=\"number\">0.212305</span> -<span class=\"number\">0.260875</span> -<span class=\"number\">0.290216</span>   </span><br><span class=\"line\">每<span class=\"number\">5</span>秒回血成长  <span class=\"number\">0.967369</span>  <span class=\"number\">0.972436</span>  <span class=\"number\">0.647438</span> -<span class=\"number\">0.190258</span> -<span class=\"number\">0.177943</span> -<span class=\"number\">0.228721</span> -<span class=\"number\">0.246922</span>   </span><br><span class=\"line\">初始每<span class=\"number\">5</span>秒回血  <span class=\"number\">0.829468</span>  <span class=\"number\">0.798746</span>  <span class=\"number\">0.701547</span> -<span class=\"number\">0.268561</span> -<span class=\"number\">0.258510</span> -<span class=\"number\">0.298217</span> -<span class=\"number\">0.346468</span>   </span><br><span class=\"line\">最大每<span class=\"number\">5</span>秒回蓝 -<span class=\"number\">0.286851</span> -<span class=\"number\">0.297569</span> -<span class=\"number\">0.224674</span>  <span class=\"number\">0.872025</span>  <span class=\"number\">0.853143</span>  <span class=\"number\">0.922108</span> -<span class=\"number\">0.193140</span>   </span><br><span class=\"line\">每<span class=\"number\">5</span>秒回蓝成长 -<span class=\"number\">0.207165</span> -<span class=\"number\">0.212225</span> -<span class=\"number\">0.179819</span>  <span class=\"number\">0.996253</span>  <span class=\"number\">0.997483</span>  <span class=\"number\">0.976856</span> -<span class=\"number\">0.179123</span>   </span><br><span class=\"line\">初始每<span class=\"number\">5</span>秒回蓝 -<span class=\"number\">0.279098</span> -<span class=\"number\">0.292439</span> -<span class=\"number\">0.199537</span>  <span class=\"number\">0.450477</span>  <span class=\"number\">0.415945</span>  <span class=\"number\">0.559600</span> -<span class=\"number\">0.145060</span>   </span><br><span class=\"line\"></span><br><span class=\"line\">             物攻成长      初始物攻      最大物防      物防成长      初始物防   最大每<span class=\"number\">5</span>秒回血   每<span class=\"number\">5</span>秒回血成长  \\</span><br><span class=\"line\">最大生命    -<span class=\"number\">0.230507</span> -<span class=\"number\">0.195840</span>  <span class=\"number\">0.862472</span>  <span class=\"number\">0.832795</span>  <span class=\"number\">0.746460</span>  <span class=\"number\">0.951013</span>  <span class=\"number\">0.967369</span>   </span><br><span class=\"line\">生命成长    -<span class=\"number\">0.248988</span> -<span class=\"number\">0.223728</span>  <span class=\"number\">0.879106</span>  <span class=\"number\">0.847654</span>  <span class=\"number\">0.764736</span>  <span class=\"number\">0.943635</span>  <span class=\"number\">0.972436</span>   </span><br><span class=\"line\">初始生命    -<span class=\"number\">0.121609</span> -<span class=\"number\">0.161278</span>  <span class=\"number\">0.529737</span>  <span class=\"number\">0.528719</span>  <span class=\"number\">0.403032</span>  <span class=\"number\">0.688104</span>  <span class=\"number\">0.647438</span>   </span><br><span class=\"line\">最大法力    -<span class=\"number\">0.197617</span>  <span class=\"number\">0.003153</span> -<span class=\"number\">0.210425</span> -<span class=\"number\">0.226732</span> -<span class=\"number\">0.106082</span> -<span class=\"number\">0.224234</span> -<span class=\"number\">0.190258</span>   </span><br><span class=\"line\">法力成长    -<span class=\"number\">0.191883</span>  <span class=\"number\">0.003966</span> -<span class=\"number\">0.200722</span> -<span class=\"number\">0.217018</span> -<span class=\"number\">0.098780</span> -<span class=\"number\">0.212305</span> -<span class=\"number\">0.177943</span>   </span><br><span class=\"line\">初始法力    -<span class=\"number\">0.213851</span>  <span class=\"number\">0.000371</span> -<span class=\"number\">0.239802</span> -<span class=\"number\">0.255893</span> -<span class=\"number\">0.128992</span> -<span class=\"number\">0.260875</span> -<span class=\"number\">0.228721</span>   </span><br><span class=\"line\">最高物攻     <span class=\"number\">0.986098</span>  <span class=\"number\">0.536409</span> -<span class=\"number\">0.227352</span> -<span class=\"number\">0.182300</span> -<span class=\"number\">0.316263</span> -<span class=\"number\">0.290216</span> -<span class=\"number\">0.246922</span>   </span><br><span class=\"line\">物攻成长     <span class=\"number\">1.000000</span>  <span class=\"number\">0.388718</span> -<span class=\"number\">0.218394</span> -<span class=\"number\">0.170773</span> -<span class=\"number\">0.317801</span> -<span class=\"number\">0.276067</span> -<span class=\"number\">0.231988</span>   </span><br><span class=\"line\">初始物攻     <span class=\"number\">0.388718</span>  <span class=\"number\">1.000000</span> -<span class=\"number\">0.151566</span> -<span class=\"number\">0.143719</span> -<span class=\"number\">0.139327</span> -<span class=\"number\">0.207319</span> -<span class=\"number\">0.191102</span>   </span><br><span class=\"line\">最大物防    -<span class=\"number\">0.218394</span> -<span class=\"number\">0.151566</span>  <span class=\"number\">1.000000</span>  <span class=\"number\">0.983223</span>  <span class=\"number\">0.808768</span>  <span class=\"number\">0.864672</span>  <span class=\"number\">0.883474</span>   </span><br><span class=\"line\">物防成长    -<span class=\"number\">0.170773</span> -<span class=\"number\">0.143719</span>  <span class=\"number\">0.983223</span>  <span class=\"number\">1.000000</span>  <span class=\"number\">0.687920</span>  <span class=\"number\">0.836301</span>  <span class=\"number\">0.849445</span>   </span><br><span class=\"line\">初始物防    -<span class=\"number\">0.317801</span> -<span class=\"number\">0.139327</span>  <span class=\"number\">0.808768</span>  <span class=\"number\">0.687920</span>  <span class=\"number\">1.000000</span>  <span class=\"number\">0.743957</span>  <span class=\"number\">0.776385</span>   </span><br><span class=\"line\">最大每<span class=\"number\">5</span>秒回血 -<span class=\"number\">0.276067</span> -<span class=\"number\">0.207319</span>  <span class=\"number\">0.864672</span>  <span class=\"number\">0.836301</span>  <span class=\"number\">0.743957</span>  <span class=\"number\">1.000000</span>  <span class=\"number\">0.983556</span>   </span><br><span class=\"line\">每<span class=\"number\">5</span>秒回血成长 -<span class=\"number\">0.231988</span> -<span class=\"number\">0.191102</span>  <span class=\"number\">0.883474</span>  <span class=\"number\">0.849445</span>  <span class=\"number\">0.776385</span>  <span class=\"number\">0.983556</span>  <span class=\"number\">1.000000</span>   </span><br><span class=\"line\">初始每<span class=\"number\">5</span>秒回血 -<span class=\"number\">0.335171</span> -<span class=\"number\">0.219081</span>  <span class=\"number\">0.746610</span>  <span class=\"number\">0.731842</span>  <span class=\"number\">0.611008</span>  <span class=\"number\">0.937169</span>  <span class=\"number\">0.858750</span>   </span><br><span class=\"line\">最大每<span class=\"number\">5</span>秒回蓝 -<span class=\"number\">0.226294</span>  <span class=\"number\">0.078473</span> -<span class=\"number\">0.269346</span> -<span class=\"number\">0.282500</span> -<span class=\"number\">0.160954</span> -<span class=\"number\">0.267749</span> -<span class=\"number\">0.247764</span>   </span><br><span class=\"line\">每<span class=\"number\">5</span>秒回蓝成长 -<span class=\"number\">0.196605</span>  <span class=\"number\">0.005237</span> -<span class=\"number\">0.202790</span> -<span class=\"number\">0.217446</span> -<span class=\"number\">0.105629</span> -<span class=\"number\">0.202148</span> -<span class=\"number\">0.169121</span>   </span><br><span class=\"line\">初始每<span class=\"number\">5</span>秒回蓝 -<span class=\"number\">0.184345</span>  <span class=\"number\">0.132174</span> -<span class=\"number\">0.253111</span> -<span class=\"number\">0.260324</span> -<span class=\"number\">0.168099</span> -<span class=\"number\">0.250934</span> -<span class=\"number\">0.251700</span>   </span><br><span class=\"line\"></span><br><span class=\"line\">          初始每<span class=\"number\">5</span>秒回血   最大每<span class=\"number\">5</span>秒回蓝   每<span class=\"number\">5</span>秒回蓝成长   初始每<span class=\"number\">5</span>秒回蓝  </span><br><span class=\"line\">最大生命     <span class=\"number\">0.829468</span> -<span class=\"number\">0.286851</span> -<span class=\"number\">0.207165</span> -<span class=\"number\">0.279098</span>  </span><br><span class=\"line\">生命成长     <span class=\"number\">0.798746</span> -<span class=\"number\">0.297569</span> -<span class=\"number\">0.212225</span> -<span class=\"number\">0.292439</span>  </span><br><span class=\"line\">初始生命     <span class=\"number\">0.701547</span> -<span class=\"number\">0.224674</span> -<span class=\"number\">0.179819</span> -<span class=\"number\">0.199537</span>  </span><br><span class=\"line\">最大法力    -<span class=\"number\">0.268561</span>  <span class=\"number\">0.872025</span>  <span class=\"number\">0.996253</span>  <span class=\"number\">0.450477</span>  </span><br><span class=\"line\">法力成长    -<span class=\"number\">0.258510</span>  <span class=\"number\">0.853143</span>  <span class=\"number\">0.997483</span>  <span class=\"number\">0.415945</span>  </span><br><span class=\"line\">初始法力    -<span class=\"number\">0.298217</span>  <span class=\"number\">0.922108</span>  <span class=\"number\">0.976856</span>  <span class=\"number\">0.559600</span>  </span><br><span class=\"line\">最高物攻    -<span class=\"number\">0.346468</span> -<span class=\"number\">0.193140</span> -<span class=\"number\">0.179123</span> -<span class=\"number\">0.145060</span>  </span><br><span class=\"line\">物攻成长    -<span class=\"number\">0.335171</span> -<span class=\"number\">0.226294</span> -<span class=\"number\">0.196605</span> -<span class=\"number\">0.184345</span>  </span><br><span class=\"line\">初始物攻    -<span class=\"number\">0.219081</span>  <span class=\"number\">0.078473</span>  <span class=\"number\">0.005237</span>  <span class=\"number\">0.132174</span>  </span><br><span class=\"line\">最大物防     <span class=\"number\">0.746610</span> -<span class=\"number\">0.269346</span> -<span class=\"number\">0.202790</span> -<span class=\"number\">0.253111</span>  </span><br><span class=\"line\">物防成长     <span class=\"number\">0.731842</span> -<span class=\"number\">0.282500</span> -<span class=\"number\">0.217446</span> -<span class=\"number\">0.260324</span>  </span><br><span class=\"line\">初始物防     <span class=\"number\">0.611008</span> -<span class=\"number\">0.160954</span> -<span class=\"number\">0.105629</span> -<span class=\"number\">0.168099</span>  </span><br><span class=\"line\">最大每<span class=\"number\">5</span>秒回血  <span class=\"number\">0.937169</span> -<span class=\"number\">0.267749</span> -<span class=\"number\">0.202148</span> -<span class=\"number\">0.250934</span>  </span><br><span class=\"line\">每<span class=\"number\">5</span>秒回血成长  <span class=\"number\">0.858750</span> -<span class=\"number\">0.247764</span> -<span class=\"number\">0.169121</span> -<span class=\"number\">0.251700</span>  </span><br><span class=\"line\">初始每<span class=\"number\">5</span>秒回血  <span class=\"number\">1.000000</span> -<span class=\"number\">0.280945</span> -<span class=\"number\">0.246737</span> -<span class=\"number\">0.225670</span>  </span><br><span class=\"line\">最大每<span class=\"number\">5</span>秒回蓝 -<span class=\"number\">0.280945</span>  <span class=\"number\">1.000000</span>  <span class=\"number\">0.856248</span>  <span class=\"number\">0.827604</span>  </span><br><span class=\"line\">每<span class=\"number\">5</span>秒回蓝成长 -<span class=\"number\">0.246737</span>  <span class=\"number\">0.856248</span>  <span class=\"number\">1.000000</span>  <span class=\"number\">0.418679</span>  </span><br><span class=\"line\">初始每<span class=\"number\">5</span>秒回蓝 -<span class=\"number\">0.225670</span>  <span class=\"number\">0.827604</span>  <span class=\"number\">0.418679</span>  <span class=\"number\">1.000000</span>  </span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#热力图可视化！！</span></span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">14</span>,<span class=\"number\">14</span>))</span><br><span class=\"line\"><span class=\"comment\"># annot=True 显示每个方格的数据</span></span><br><span class=\"line\">sns.heatmap(corr, annot=<span class=\"literal\">True</span>)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n<img src=\"/posts/c1c7733e/GMM.png\" class=\"\">\n\n<p>从图中可以看出“最大生命”，“生命成长”，“初始生命”这三个属性的相关性大，我们只 需保留一个属性即可。 features_remain数组保留了特征选择的属性，这样将原本的20个属性降维到了13个属性。 相关性大cong的属性保留一个，因此可以对属性进行降维</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#将原本的20个属性降维到13个属性。请填写代码！</span></span><br><span class=\"line\">features = [<span class=\"string\">u&#x27;最大生命&#x27;</span>,<span class=\"string\">u&#x27;生命成长&#x27;</span>,<span class=\"string\">u&#x27;初始生命&#x27;</span>,<span class=\"string\">u&#x27;最大法力&#x27;</span>, <span class=\"string\">u&#x27;法力成长&#x27;</span>,<span class=\"string\">u&#x27;初始法力&#x27;</span>,<span class=\"string\">u&#x27;最高物攻&#x27;</span>,<span class=\"string\">u&#x27;物攻成长&#x27;</span>,<span class=\"string\">u&#x27;初始物攻&#x27;</span>,<span class=\"string\">u&#x27;最大物防&#x27;</span>,<span class=\"string\">u&#x27;物防成长&#x27;</span>,<span class=\"string\">u&#x27;初始物防&#x27;</span>, <span class=\"string\">u&#x27;最大每5秒回血&#x27;</span>, <span class=\"string\">u&#x27;每5秒回血成长&#x27;</span>, <span class=\"string\">u&#x27;初始每5秒回血&#x27;</span>, <span class=\"string\">u&#x27;最大每5秒回蓝&#x27;</span>, <span class=\"string\">u&#x27;每5秒回蓝成长&#x27;</span>, <span class=\"string\">u&#x27;初始每5秒回蓝&#x27;</span>, <span class=\"string\">u&#x27;最大攻速&#x27;</span>, <span class=\"string\">u&#x27;攻击范围&#x27;</span>]</span><br><span class=\"line\">data = data_ori[features]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数据清洗-1\"><a href=\"#数据清洗-1\" class=\"headerlink\" title=\"数据清洗\"></a>数据清洗</h3><p>任务三： “最大攻速”这个属性值是百分数，不适合做矩阵运算，需要将百分数转化成小数。 “攻击范围”这个字段的取值为远程或者近战，也不适合矩阵运算； </p>\n<p>解决办法：将取值做个映射，用1代表远程，0代表近战。 </p>\n<p>示例：map({‘远程’:1,’近战’:0})</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data[<span class=\"string\">u&#x27;最大攻速&#x27;</span>] = data[<span class=\"string\">u&#x27;最大攻速&#x27;</span>].apply(<span class=\"keyword\">lambda</span> x:<span class=\"built_in\">float</span>(x.strip(<span class=\"string\">&#x27;%&#x27;</span>))/<span class=\"number\">100</span>)</span><br><span class=\"line\">data[<span class=\"string\">u&#x27;攻击范围&#x27;</span>] = data[<span class=\"string\">u&#x27;攻击范围&#x27;</span>].<span class=\"built_in\">map</span>(&#123;<span class=\"string\">&#x27;远程&#x27;</span>:<span class=\"number\">1</span>,<span class=\"string\">&#x27;近战&#x27;</span>:<span class=\"number\">0</span>&#125;)</span><br><span class=\"line\">&lt;ipython-<span class=\"built_in\">input</span>-<span class=\"number\">73</span>-cb0648147d53&gt;:<span class=\"number\">2</span>: SettingWithCopyWarning: </span><br><span class=\"line\">A value <span class=\"keyword\">is</span> trying to be <span class=\"built_in\">set</span> on a copy of a <span class=\"built_in\">slice</span> <span class=\"keyword\">from</span> a DataFrame.</span><br><span class=\"line\">Try using .loc[row_indexer,col_indexer] = value instead</span><br><span class=\"line\"></span><br><span class=\"line\">See the caveats <span class=\"keyword\">in</span> the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html<span class=\"comment\">#returning-a-view-versus-a-copy</span></span><br><span class=\"line\">  data[<span class=\"string\">u&#x27;最大攻速&#x27;</span>] = data[<span class=\"string\">u&#x27;最大攻速&#x27;</span>].apply(<span class=\"keyword\">lambda</span> x:<span class=\"built_in\">float</span>(x.strip(<span class=\"string\">&#x27;%&#x27;</span>))/<span class=\"number\">100</span>)</span><br><span class=\"line\">&lt;ipython-<span class=\"built_in\">input</span>-<span class=\"number\">73</span>-cb0648147d53&gt;:<span class=\"number\">3</span>: SettingWithCopyWarning: </span><br><span class=\"line\">A value <span class=\"keyword\">is</span> trying to be <span class=\"built_in\">set</span> on a copy of a <span class=\"built_in\">slice</span> <span class=\"keyword\">from</span> a DataFrame.</span><br><span class=\"line\">Try using .loc[row_indexer,col_indexer] = value instead</span><br><span class=\"line\"></span><br><span class=\"line\">See the caveats <span class=\"keyword\">in</span> the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html<span class=\"comment\">#returning-a-view-versus-a-copy</span></span><br><span class=\"line\">  data[<span class=\"string\">u&#x27;攻击范围&#x27;</span>] = data[<span class=\"string\">u&#x27;攻击范围&#x27;</span>].<span class=\"built_in\">map</span>(&#123;<span class=\"string\">&#x27;远程&#x27;</span>:<span class=\"number\">1</span>,<span class=\"string\">&#x27;近战&#x27;</span>:<span class=\"number\">0</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>采用 Z-Score 规范化数据，保证每个特征维度的数据均值为 0，方差为 1</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ss = StandardScaler()</span><br><span class=\"line\">data = ss.fit_transform(data)</span><br></pre></td></tr></table></figure>\n\n<p>构造GMM聚类模型，GaussianMixture()</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gmm = GaussianMixture(n_components=<span class=\"number\">30</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 训练数据</span></span><br><span class=\"line\">gmm.fit(data)</span><br><span class=\"line\"></span><br><span class=\"line\">prediction = gmm.predict(data)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(prediction)</span><br><span class=\"line\">[<span class=\"number\">13</span> <span class=\"number\">24</span> <span class=\"number\">11</span> <span class=\"number\">10</span>  <span class=\"number\">2</span> <span class=\"number\">25</span> <span class=\"number\">20</span> <span class=\"number\">11</span>  <span class=\"number\">7</span> <span class=\"number\">24</span> <span class=\"number\">18</span> <span class=\"number\">14</span> <span class=\"number\">10</span>  <span class=\"number\">0</span>  <span class=\"number\">1</span> <span class=\"number\">18</span> <span class=\"number\">13</span>  <span class=\"number\">7</span>  <span class=\"number\">2</span> <span class=\"number\">12</span> <span class=\"number\">22</span> <span class=\"number\">12</span> <span class=\"number\">12</span> <span class=\"number\">12</span></span><br><span class=\"line\"> <span class=\"number\">12</span> <span class=\"number\">12</span> <span class=\"number\">12</span> <span class=\"number\">21</span> <span class=\"number\">16</span> <span class=\"number\">26</span> <span class=\"number\">24</span>  <span class=\"number\">9</span>  <span class=\"number\">9</span> <span class=\"number\">16</span> <span class=\"number\">26</span>  <span class=\"number\">9</span> <span class=\"number\">16</span>  <span class=\"number\">6</span>  <span class=\"number\">4</span> <span class=\"number\">15</span>  <span class=\"number\">9</span> <span class=\"number\">16</span> <span class=\"number\">16</span>  <span class=\"number\">9</span> <span class=\"number\">16</span> <span class=\"number\">15</span> <span class=\"number\">14</span>  <span class=\"number\">4</span></span><br><span class=\"line\"> <span class=\"number\">24</span> <span class=\"number\">16</span> <span class=\"number\">28</span>  <span class=\"number\">5</span>  <span class=\"number\">2</span>  <span class=\"number\">3</span>  <span class=\"number\">3</span> <span class=\"number\">13</span> <span class=\"number\">29</span>  <span class=\"number\">5</span> <span class=\"number\">23</span>  <span class=\"number\">2</span> <span class=\"number\">29</span> <span class=\"number\">19</span> <span class=\"number\">17</span> <span class=\"number\">13</span>  <span class=\"number\">8</span>  <span class=\"number\">5</span> <span class=\"number\">27</span>  <span class=\"number\">5</span> <span class=\"number\">21</span>]</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\"># 将分组结果输出到 CSV 文件中</span></span><br><span class=\"line\">data_ori.insert(<span class=\"number\">0</span>, <span class=\"string\">&#x27;分组&#x27;</span>, prediction)</span><br><span class=\"line\">data_ori.to_csv(<span class=\"string\">&#x27;.hero_out.csv&#x27;</span>, index=<span class=\"literal\">False</span>, sep=<span class=\"string\">&#x27;,&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.metrics <span class=\"keyword\">import</span> calinski_harabasz_score</span><br><span class=\"line\"><span class=\"built_in\">print</span>(calinski_harabasz_score(data, prediction))</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"航空公司客户价值分析\"><a href=\"#航空公司客户价值分析\" class=\"headerlink\" title=\"航空公司客户价值分析\"></a>航空公司客户价值分析</h1><img src=\"/posts/c1c7733e/%E8%88%AA%E7%A9%BA.png\" class=\"\">\n\n<hr>\n<h1 id=\"比特币价格预测\"><a href=\"#比特币价格预测\" class=\"headerlink\" title=\"比特币价格预测\"></a>比特币价格预测</h1><p>比特币价格走势预测</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 比特币走势预测，使用时间序列ARMA</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">from</span> statsmodels.tsa.arima_model <span class=\"keyword\">import</span> ARMA</span><br><span class=\"line\"><span class=\"keyword\">import</span> warnings</span><br><span class=\"line\"><span class=\"keyword\">from</span> itertools <span class=\"keyword\">import</span> product</span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\">warnings.filterwarnings(<span class=\"string\">&#x27;ignore&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 数据加载</span></span><br><span class=\"line\">df = pd.read_csv(<span class=\"string\">&#x27;./bitcoin_2012-01-01_to_2018-10-31.csv&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 将时间作为df的索</span></span><br><span class=\"line\">df.Timestamp = pd.to_datetime(df.Timestamp)</span><br><span class=\"line\">df.index = df.Timestamp</span><br><span class=\"line\"><span class=\"comment\"># 数据探索</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(df.head(<span class=\"number\">10</span>))</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据探索部分打印内容：</span><br><span class=\"line\">            Timestamp      Open      High       Low     Close  Volume_(BTC)  \\</span><br><span class=\"line\">Timestamp                                                                     </span><br><span class=\"line\"><span class=\"number\">2011</span>-<span class=\"number\">12</span>-<span class=\"number\">31</span> <span class=\"number\">2011</span>-<span class=\"number\">12</span>-<span class=\"number\">31</span>  <span class=\"number\">4.465000</span>  <span class=\"number\">4.482500</span>  <span class=\"number\">4.465000</span>  <span class=\"number\">4.482500</span>     <span class=\"number\">23.829470</span>   </span><br><span class=\"line\"><span class=\"number\">2012</span>-01-01 <span class=\"number\">2012</span>-01-01  <span class=\"number\">4.806667</span>  <span class=\"number\">4.806667</span>  <span class=\"number\">4.806667</span>  <span class=\"number\">4.806667</span>      <span class=\"number\">7.200667</span>   </span><br><span class=\"line\"><span class=\"number\">2012</span>-01-02 <span class=\"number\">2012</span>-01-02  <span class=\"number\">5.000000</span>  <span class=\"number\">5.000000</span>  <span class=\"number\">5.000000</span>  <span class=\"number\">5.000000</span>     <span class=\"number\">19.048000</span>   </span><br><span class=\"line\"><span class=\"number\">2012</span>-01-03 <span class=\"number\">2012</span>-01-03  <span class=\"number\">5.252500</span>  <span class=\"number\">5.252500</span>  <span class=\"number\">5.252500</span>  <span class=\"number\">5.252500</span>     <span class=\"number\">11.004660</span>   </span><br><span class=\"line\"><span class=\"number\">2012</span>-01-04 <span class=\"number\">2012</span>-01-04  <span class=\"number\">5.200000</span>  <span class=\"number\">5.223333</span>  <span class=\"number\">5.200000</span>  <span class=\"number\">5.223333</span>     <span class=\"number\">11.914807</span>   </span><br><span class=\"line\"><span class=\"number\">2012</span>-01-05 <span class=\"number\">2012</span>-01-05  <span class=\"number\">6.281429</span>  <span class=\"number\">6.286190</span>  <span class=\"number\">6.281429</span>  <span class=\"number\">6.286190</span>      <span class=\"number\">4.514373</span>   </span><br><span class=\"line\"><span class=\"number\">2012</span>-01-06 <span class=\"number\">2012</span>-01-06  <span class=\"number\">6.435000</span>  <span class=\"number\">6.445000</span>  <span class=\"number\">6.435000</span>  <span class=\"number\">6.445000</span>      <span class=\"number\">2.420196</span>   </span><br><span class=\"line\"><span class=\"number\">2012</span>-01-07 <span class=\"number\">2012</span>-01-07  <span class=\"number\">6.800000</span>  <span class=\"number\">6.800000</span>  <span class=\"number\">6.800000</span>  <span class=\"number\">6.800000</span>      <span class=\"number\">0.295858</span>   </span><br><span class=\"line\"><span class=\"number\">2012</span>-01-08 <span class=\"number\">2012</span>-01-08  <span class=\"number\">6.950000</span>  <span class=\"number\">6.950000</span>  <span class=\"number\">6.950000</span>  <span class=\"number\">6.950000</span>      <span class=\"number\">2.500000</span>   </span><br><span class=\"line\"><span class=\"number\">2012</span>-01-09 <span class=\"number\">2012</span>-01-09  <span class=\"number\">6.584167</span>  <span class=\"number\">6.584167</span>  <span class=\"number\">6.581667</span>  <span class=\"number\">6.581667</span>      <span class=\"number\">1.857481</span>   </span><br><span class=\"line\"></span><br><span class=\"line\">            Volume_(Currency)  Weighted_Price  </span><br><span class=\"line\">Timestamp                                      </span><br><span class=\"line\"><span class=\"number\">2011</span>-<span class=\"number\">12</span>-<span class=\"number\">31</span>         <span class=\"number\">106.330084</span>        <span class=\"number\">4.471603</span>  </span><br><span class=\"line\"><span class=\"number\">2012</span>-01-01          <span class=\"number\">35.259720</span>        <span class=\"number\">4.806667</span>  </span><br><span class=\"line\"><span class=\"number\">2012</span>-01-02          <span class=\"number\">95.240000</span>        <span class=\"number\">5.000000</span>  </span><br><span class=\"line\"><span class=\"number\">2012</span>-01-03          <span class=\"number\">58.100651</span>        <span class=\"number\">5.252500</span>  </span><br><span class=\"line\"><span class=\"number\">2012</span>-01-04          <span class=\"number\">63.119578</span>        <span class=\"number\">5.208159</span>  </span><br><span class=\"line\"><span class=\"number\">2012</span>-01-05          <span class=\"number\">27.987370</span>        <span class=\"number\">6.284127</span>  </span><br><span class=\"line\"><span class=\"number\">2012</span>-01-06          <span class=\"number\">15.914658</span>        <span class=\"number\">6.438999</span>  </span><br><span class=\"line\"><span class=\"number\">2012</span>-01-07           <span class=\"number\">2.011834</span>        <span class=\"number\">6.800000</span>  </span><br><span class=\"line\"><span class=\"number\">2012</span>-01-08          <span class=\"number\">17.300000</span>        <span class=\"number\">6.950000</span>  </span><br><span class=\"line\"><span class=\"number\">2012</span>-01-09          <span class=\"number\">12.306798</span>        <span class=\"number\">6.582770</span>  </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 按照月，季度，年来统计</span></span><br><span class=\"line\">df_month = df.resample(<span class=\"string\">&#x27;M&#x27;</span>).mean()</span><br><span class=\"line\">df_Q = df.resample(<span class=\"string\">&#x27;Q-DEC&#x27;</span>).mean()</span><br><span class=\"line\">df_year = df.resample(<span class=\"string\">&#x27;A-DEC&#x27;</span>).mean()</span><br><span class=\"line\"><span class=\"comment\"># 按照天，月，季度，年来显示比特币的走势</span></span><br><span class=\"line\">fig = plt.figure(figsize=[<span class=\"number\">15</span>, <span class=\"number\">7</span>])</span><br><span class=\"line\">plt.rcParams[<span class=\"string\">&#x27;font.sans-serif&#x27;</span>]=[<span class=\"string\">&#x27;SimHei&#x27;</span>] <span class=\"comment\">#用来正常显示中文标签</span></span><br><span class=\"line\">plt.suptitle(<span class=\"string\">&#x27;比特币金额（美金）&#x27;</span>, fontsize=<span class=\"number\">20</span>)</span><br><span class=\"line\">plt.subplot(<span class=\"number\">221</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.plot(df.Weighted_Price, <span class=\"string\">&#x27;-&#x27;</span>, label=<span class=\"string\">&#x27;按天&#x27;</span>)</span><br><span class=\"line\">plt.legend()</span><br><span class=\"line\">plt.subplot(<span class=\"number\">222</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.plot(df.Weighted_Price, <span class=\"string\">&#x27;-&#x27;</span>, label=<span class=\"string\">&#x27;按月&#x27;</span>)</span><br><span class=\"line\">plt.legend()</span><br><span class=\"line\">plt.subplot(<span class=\"number\">223</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.plot(df.Weighted_Price, <span class=\"string\">&#x27;-&#x27;</span>, label=<span class=\"string\">&#x27;按季度&#x27;</span>)</span><br><span class=\"line\">plt.legend()</span><br><span class=\"line\">plt.subplot(<span class=\"number\">224</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.plot(df.Weighted_Price, <span class=\"string\">&#x27;-&#x27;</span>, label=<span class=\"string\">&#x27;按年&#x27;</span>)</span><br><span class=\"line\">plt.legend()</span><br><span class=\"line\">plt.show()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>按照天、月、季度、年来统计显示比特币的走势：</p>\n<img src=\"/posts/c1c7733e/bit1.png\" class=\"\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置参数范围</span></span><br><span class=\"line\">ps = <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">qs = <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">parameters = product(ps, qs)</span><br><span class=\"line\">parameters_list = <span class=\"built_in\">list</span>(parameters)</span><br><span class=\"line\"><span class=\"comment\"># 寻找最优ARMA模型参数，即best_aic最小</span></span><br><span class=\"line\">results = []</span><br><span class=\"line\">best_aic = <span class=\"built_in\">float</span>(<span class=\"string\">&quot;inf&quot;</span>) <span class=\"comment\"># 正无穷</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> param <span class=\"keyword\">in</span> parameters_list:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        model = ARMA(df_month.Weighted_Price,order=(param[<span class=\"number\">0</span>], param[<span class=\"number\">1</span>])).fit()</span><br><span class=\"line\">    <span class=\"keyword\">except</span> ValueError:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;参数错误:&#x27;</span>, param)</span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\">    aic = model.aic</span><br><span class=\"line\">    <span class=\"keyword\">if</span> aic &lt; best_aic:</span><br><span class=\"line\">        best_model = model</span><br><span class=\"line\">        best_aic = aic</span><br><span class=\"line\">        best_param = param</span><br><span class=\"line\">    results.append([param, model.aic])</span><br><span class=\"line\"><span class=\"comment\"># 输出最优模型</span></span><br><span class=\"line\">result_table = pd.DataFrame(results)</span><br><span class=\"line\">result_table.columns = [<span class=\"string\">&#x27;parameters&#x27;</span>, <span class=\"string\">&#x27;aic&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;最优模型:&#x27;</span>, best_model.summary())</span><br><span class=\"line\"><span class=\"comment\"># 比特币预测</span></span><br><span class=\"line\">df_month2 = df_month[[<span class=\"string\">&#x27;Weighted_Price&#x27;</span>]]</span><br><span class=\"line\">date_list = [datetime(<span class=\"number\">2018</span>, <span class=\"number\">11</span>, <span class=\"number\">30</span>), datetime(<span class=\"number\">2018</span>, <span class=\"number\">12</span>, <span class=\"number\">31</span>), datetime(<span class=\"number\">2019</span>, <span class=\"number\">1</span>, <span class=\"number\">31</span>),</span><br><span class=\"line\">             datetime(<span class=\"number\">2019</span>, <span class=\"number\">2</span>, <span class=\"number\">28</span>), datetime(<span class=\"number\">2019</span>, <span class=\"number\">3</span>, <span class=\"number\">31</span>),</span><br><span class=\"line\">             datetime(<span class=\"number\">2019</span>, <span class=\"number\">4</span>, <span class=\"number\">30</span>), datetime(<span class=\"number\">2019</span>, <span class=\"number\">5</span>, <span class=\"number\">31</span>), datetime(<span class=\"number\">2019</span>, <span class=\"number\">6</span>, <span class=\"number\">30</span>)]</span><br><span class=\"line\">future = pd.DataFrame(index=date_list, columns=df_month.columns)</span><br><span class=\"line\">df_month2 = pd.concat([df_month2, future])</span><br><span class=\"line\">df_month2[<span class=\"string\">&#x27;forecast&#x27;</span>] = best_model.predict(start=<span class=\"number\">0</span>, end=<span class=\"number\">91</span>)</span><br><span class=\"line\"><span class=\"comment\"># 比特币预测结果显示</span></span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">20</span>,<span class=\"number\">7</span>))</span><br><span class=\"line\">df_month2.Weighted_Price.plot(label=<span class=\"string\">&#x27;实际金额&#x27;</span>)</span><br><span class=\"line\">df_month2.forecast.plot(color=<span class=\"string\">&#x27;r&#x27;</span>, ls=<span class=\"string\">&#x27;--&#x27;</span>, label=<span class=\"string\">&#x27;预测金额&#x27;</span>)</span><br><span class=\"line\">plt.legend()</span><br><span class=\"line\">plt.title(<span class=\"string\">&#x27;比特币金额(月)&#x27;</span>)</span><br><span class=\"line\">plt.xlabel(<span class=\"string\">&#x27;时间&#x27;</span>)</span><br><span class=\"line\">plt.ylabel(<span class=\"string\">&#x27;美金&#x27;</span>)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n\n<img src=\"/posts/c1c7733e/bit2.png\" class=\"\">\n\n<p>比特币预测结果：</p>\n<img src=\"/posts/c1c7733e/bit3.png\" class=\"\">"},{"title":"Python爬虫","abbrlink":"c386cf1b","date":"2022-06-15T08:07:52.000Z","_content":"\n**Python爬虫学习**\n\n<!--more-->\n\n# requests模块案例一(搜狗首页数据提取)\n\nrequests模块：python中原生的一款基于网络请求的模块，功能非常强大，简单便携，效率极高\n\n作用：模拟浏览器发请求\n\n注意从URL下右键\"检查\"，查看 请求URL、请求方式、Content-Type的格式等，以及\"响应\"中的字典或列表格式\n\n- **爬取搜狗首页的页面数据**\n\n```python\n# 爬取搜狗首页页面数据\nimport requests\n\nif __name__ == \"__main__\":\n    # 指定url\n    url = 'https://www.sogou.com/'\n\n    # 发起请求\n    # response接收get方法返回的响应对象\n    response = requests.get(url=url)\n\n    # 获取响应数据 .text返回的是字符串形式的响应数据\n    page_text = response.text\n    print(page_text)\n\n    # 持久化存储\n    with open('./sogou.html', 'w', encoding='utf-8') as fp:\n        fp.write(page_text)\n    print('爬取数据结束！')\n```\n\n爬取结果：(源码臭长)\n\n{% asset_img sogou.png 搜狗首页html数据 %}\n\n------\n\n# requests模块案例二(网页采集器)\n\n- **简单的网页采集器**\n\n```python\nimport requests\n\nif __name__ == \"__main__\":\n\n    # UA伪装：将对应的User-Agent封装到一个字段中\n    headers = {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.75 Safari/537.36 Edg/100.0.1185.36'\n    }\n\n    url = 'https://www.sogou.com/web?'\n    # 处理url携带的参数query:封装到字典中\n    kw = input(\"输入一个query:\")\n    param = {\n        'query': kw\n    }\n    # 对指定的url发起的请求对应的url是携带参数的，并且请求过程中处理了参数\n    response = requests.get(url=url, params=param, headers=headers)\n\n    page_text = response.text\n    fileName = kw + '.html'\n    with open(fileName, 'w', encoding='utf-8') as fp:\n        fp.write(page_text)\n    print(fileName, '保存成功！')\n```\n\n**重点：**\n\n**UA**：User-Agent（请求载体的身份标识）\n\n**UA检测**(反爬)：门户网站的服务器会检测对应请求的载体身份标识，如果检测到请求的载体身份标识为某一款浏览器，则说明该请求是一个正常的请求。但如果检测到请求的载体身份标识不是基于某一款浏览器的，则表示该请求为不正常的请求(爬虫)则服务器端就可能拒绝该次请求。\n\n**UA伪装**(反反爬)：让爬虫对应的请求载体身份标识伪装成某一款浏览器\n\n\n\n**实现：**\n\n控制台输入一个query关键字，类似搜索引擎中的搜索输入框，输入关键字后对应生成它的html文件，文件下保存该关键字搜索的结果的html形式源码。\n\n例：\n\nquery：武汉    ==>>  武汉.html生成，浏览器打开武汉.html有：\n\n{% asset_img wuhan.png 网页提取结果 %}\n\n------\n\n# requests模块案例三(破解百度翻译)\n\n- **编译器版本的\"百度翻译\"**\n\n```python\nimport json\nimport requests\n\npost_url = 'https://fanyi.baidu.com/sug'\n\n# UA伪装\nheaders = {\n    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.75 Safari/537.36 Edg/100.0.1185.36'\n}\n\nword = input(\"输入您要查询的内容：\")\n# post请求参数处理（同get请求一致）\ndata = {\n    'kw': word\n}\n\n# 请求发送\nresponse = requests.post(url=post_url, data=data, headers=headers)\n\n# 获取响应数据:json方法返回的是obj（如果确认响应数据是json类型才可以使用.json方法）\n# Content-Type: application/json\ndic_obj = response.json()\n# print\n\nfileName = word + '.json'\nfp = open(fileName, 'w', encoding='utf-8')\njson.dump(dic_obj, fp=fp, ensure_ascii=False)\nprint(\"OVER\")\n```\n\n**实现：**\n\n控制台提示输入查询的内容后，自动生成对应内容的json文件，json文件下内容对应如下\n\n{% asset_img 翻译.png 编译器同屏翻译%}\n\n**功能**：可以控制台输入某单词生成json文件实现对该单词的中文翻译\n\n**问题**：测试过程中输入长句英文是无法正确输出结果\n\n------\n\n# **requests模块案例四(豆瓣电影信息提取)**\n\n- 豆瓣喜剧电影排行榜中电影基本信息的捕获\n\n```python\nimport requests\nimport json\n\nurl = 'https://movie.douban.com/j/chart/top_list?'\nparam = {\n    'type': '24',\n    'interval_id': '100:90',\n    'action': '',\n    'start': '0',  # 从库中的第几部电影去取\n    'limit': '20'  # 一次取出的个数\n}\n\n# UA伪装\nheaders = {\n    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.75 Safari/537.36 Edg/100.0.1185.36'\n}\n\nresponse = requests.get(url=url, params=param, headers=headers)\n\nlist_data = response.json()\n\nfp = open('./douban.json', 'w', encoding='utf-8')\njson.dump(list_data, fp=fp, ensure_ascii=False)\nprint(\"OVER\")\n```\n\n实现：\n\n字典中start和limit可更改(见注释)，运行生成douban.json文件，显示取出limit数量个电影的基本信息\n\n------\n\n# requests模块案例五(查询KFC餐厅地址)\n\n- 检索国内某城市所有KFC餐厅的地址等信息\n\n```python\nimport requests\n\nurl = 'http://www.kfc.com.cn/kfccda/ashx/GetStoreList.ashx?op=keyword'\n\nparam = {\n    'cname': '',\n    'pid': '',\n    'keyword': '襄阳',  # keyword处可改动，变化所要查询的国内城市名称\n    'pageIndex': '1',\n    'pageSize': '10'\n}\n\n# UA伪装\nheaders = {\n    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.75 Safari/537.36 Edg/100.0.1185.36'\n}\n\nresponse = requests.post(url=url, params=param, headers=headers)\n\npage_text = response.text\nwith open('./地址查询.html', 'w', encoding='utf-8') as fp:\n    fp.write(page_text)\nprint(\"OVER\")\n```\n\n**实现：**\n\n功能类似于官网[肯德基餐厅信息查询 (kfc.com.cn)](http://www.kfc.com.cn/kfccda/storelist/index.aspx)下\"餐厅关键字\"查询，控制台输入关键字，即可生成html文件呈现该关键字城市下所有KFC餐厅的地址信息\n\n例：\n\n城市：襄阳\n\n{% asset_img 地址查询.png 查询对应城市KFC餐厅地址信息 %}\n","source":"_posts/Python爬虫.md","raw":"---\ntitle: Python爬虫\ntags: 3\nabbrlink: c386cf1b\ndate: 2022-06-15 16:07:52\n---\n\n**Python爬虫学习**\n\n<!--more-->\n\n# requests模块案例一(搜狗首页数据提取)\n\nrequests模块：python中原生的一款基于网络请求的模块，功能非常强大，简单便携，效率极高\n\n作用：模拟浏览器发请求\n\n注意从URL下右键\"检查\"，查看 请求URL、请求方式、Content-Type的格式等，以及\"响应\"中的字典或列表格式\n\n- **爬取搜狗首页的页面数据**\n\n```python\n# 爬取搜狗首页页面数据\nimport requests\n\nif __name__ == \"__main__\":\n    # 指定url\n    url = 'https://www.sogou.com/'\n\n    # 发起请求\n    # response接收get方法返回的响应对象\n    response = requests.get(url=url)\n\n    # 获取响应数据 .text返回的是字符串形式的响应数据\n    page_text = response.text\n    print(page_text)\n\n    # 持久化存储\n    with open('./sogou.html', 'w', encoding='utf-8') as fp:\n        fp.write(page_text)\n    print('爬取数据结束！')\n```\n\n爬取结果：(源码臭长)\n\n{% asset_img sogou.png 搜狗首页html数据 %}\n\n------\n\n# requests模块案例二(网页采集器)\n\n- **简单的网页采集器**\n\n```python\nimport requests\n\nif __name__ == \"__main__\":\n\n    # UA伪装：将对应的User-Agent封装到一个字段中\n    headers = {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.75 Safari/537.36 Edg/100.0.1185.36'\n    }\n\n    url = 'https://www.sogou.com/web?'\n    # 处理url携带的参数query:封装到字典中\n    kw = input(\"输入一个query:\")\n    param = {\n        'query': kw\n    }\n    # 对指定的url发起的请求对应的url是携带参数的，并且请求过程中处理了参数\n    response = requests.get(url=url, params=param, headers=headers)\n\n    page_text = response.text\n    fileName = kw + '.html'\n    with open(fileName, 'w', encoding='utf-8') as fp:\n        fp.write(page_text)\n    print(fileName, '保存成功！')\n```\n\n**重点：**\n\n**UA**：User-Agent（请求载体的身份标识）\n\n**UA检测**(反爬)：门户网站的服务器会检测对应请求的载体身份标识，如果检测到请求的载体身份标识为某一款浏览器，则说明该请求是一个正常的请求。但如果检测到请求的载体身份标识不是基于某一款浏览器的，则表示该请求为不正常的请求(爬虫)则服务器端就可能拒绝该次请求。\n\n**UA伪装**(反反爬)：让爬虫对应的请求载体身份标识伪装成某一款浏览器\n\n\n\n**实现：**\n\n控制台输入一个query关键字，类似搜索引擎中的搜索输入框，输入关键字后对应生成它的html文件，文件下保存该关键字搜索的结果的html形式源码。\n\n例：\n\nquery：武汉    ==>>  武汉.html生成，浏览器打开武汉.html有：\n\n{% asset_img wuhan.png 网页提取结果 %}\n\n------\n\n# requests模块案例三(破解百度翻译)\n\n- **编译器版本的\"百度翻译\"**\n\n```python\nimport json\nimport requests\n\npost_url = 'https://fanyi.baidu.com/sug'\n\n# UA伪装\nheaders = {\n    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.75 Safari/537.36 Edg/100.0.1185.36'\n}\n\nword = input(\"输入您要查询的内容：\")\n# post请求参数处理（同get请求一致）\ndata = {\n    'kw': word\n}\n\n# 请求发送\nresponse = requests.post(url=post_url, data=data, headers=headers)\n\n# 获取响应数据:json方法返回的是obj（如果确认响应数据是json类型才可以使用.json方法）\n# Content-Type: application/json\ndic_obj = response.json()\n# print\n\nfileName = word + '.json'\nfp = open(fileName, 'w', encoding='utf-8')\njson.dump(dic_obj, fp=fp, ensure_ascii=False)\nprint(\"OVER\")\n```\n\n**实现：**\n\n控制台提示输入查询的内容后，自动生成对应内容的json文件，json文件下内容对应如下\n\n{% asset_img 翻译.png 编译器同屏翻译%}\n\n**功能**：可以控制台输入某单词生成json文件实现对该单词的中文翻译\n\n**问题**：测试过程中输入长句英文是无法正确输出结果\n\n------\n\n# **requests模块案例四(豆瓣电影信息提取)**\n\n- 豆瓣喜剧电影排行榜中电影基本信息的捕获\n\n```python\nimport requests\nimport json\n\nurl = 'https://movie.douban.com/j/chart/top_list?'\nparam = {\n    'type': '24',\n    'interval_id': '100:90',\n    'action': '',\n    'start': '0',  # 从库中的第几部电影去取\n    'limit': '20'  # 一次取出的个数\n}\n\n# UA伪装\nheaders = {\n    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.75 Safari/537.36 Edg/100.0.1185.36'\n}\n\nresponse = requests.get(url=url, params=param, headers=headers)\n\nlist_data = response.json()\n\nfp = open('./douban.json', 'w', encoding='utf-8')\njson.dump(list_data, fp=fp, ensure_ascii=False)\nprint(\"OVER\")\n```\n\n实现：\n\n字典中start和limit可更改(见注释)，运行生成douban.json文件，显示取出limit数量个电影的基本信息\n\n------\n\n# requests模块案例五(查询KFC餐厅地址)\n\n- 检索国内某城市所有KFC餐厅的地址等信息\n\n```python\nimport requests\n\nurl = 'http://www.kfc.com.cn/kfccda/ashx/GetStoreList.ashx?op=keyword'\n\nparam = {\n    'cname': '',\n    'pid': '',\n    'keyword': '襄阳',  # keyword处可改动，变化所要查询的国内城市名称\n    'pageIndex': '1',\n    'pageSize': '10'\n}\n\n# UA伪装\nheaders = {\n    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.75 Safari/537.36 Edg/100.0.1185.36'\n}\n\nresponse = requests.post(url=url, params=param, headers=headers)\n\npage_text = response.text\nwith open('./地址查询.html', 'w', encoding='utf-8') as fp:\n    fp.write(page_text)\nprint(\"OVER\")\n```\n\n**实现：**\n\n功能类似于官网[肯德基餐厅信息查询 (kfc.com.cn)](http://www.kfc.com.cn/kfccda/storelist/index.aspx)下\"餐厅关键字\"查询，控制台输入关键字，即可生成html文件呈现该关键字城市下所有KFC餐厅的地址信息\n\n例：\n\n城市：襄阳\n\n{% asset_img 地址查询.png 查询对应城市KFC餐厅地址信息 %}\n","slug":"Python爬虫","published":1,"updated":"2024-09-26T11:26:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm1rz0oey000d18ql1v6o6zou","content":"<p><strong>Python爬虫学习</strong></p>\n<span id=\"more\"></span>\n\n<h1 id=\"requests模块案例一-搜狗首页数据提取\"><a href=\"#requests模块案例一-搜狗首页数据提取\" class=\"headerlink\" title=\"requests模块案例一(搜狗首页数据提取)\"></a>requests模块案例一(搜狗首页数据提取)</h1><p>requests模块：python中原生的一款基于网络请求的模块，功能非常强大，简单便携，效率极高</p>\n<p>作用：模拟浏览器发请求</p>\n<p>注意从URL下右键”检查”，查看 请求URL、请求方式、Content-Type的格式等，以及”响应”中的字典或列表格式</p>\n<ul>\n<li><strong>爬取搜狗首页的页面数据</strong></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 爬取搜狗首页页面数据</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 指定url</span></span><br><span class=\"line\">    url = <span class=\"string\">&#x27;https://www.sogou.com/&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 发起请求</span></span><br><span class=\"line\">    <span class=\"comment\"># response接收get方法返回的响应对象</span></span><br><span class=\"line\">    response = requests.get(url=url)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 获取响应数据 .text返回的是字符串形式的响应数据</span></span><br><span class=\"line\">    page_text = response.text</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(page_text)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 持久化存储</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./sogou.html&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">        fp.write(page_text)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;爬取数据结束！&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>爬取结果：(源码臭长)</p>\n<img src=\"/posts/c386cf1b/sogou.png\" class=\"\" title=\"搜狗首页html数据\">\n\n<hr>\n<h1 id=\"requests模块案例二-网页采集器\"><a href=\"#requests模块案例二-网页采集器\" class=\"headerlink\" title=\"requests模块案例二(网页采集器)\"></a>requests模块案例二(网页采集器)</h1><ul>\n<li><strong>简单的网页采集器</strong></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># UA伪装：将对应的User-Agent封装到一个字段中</span></span><br><span class=\"line\">    headers = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.75 Safari/537.36 Edg/100.0.1185.36&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    url = <span class=\"string\">&#x27;https://www.sogou.com/web?&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\"># 处理url携带的参数query:封装到字典中</span></span><br><span class=\"line\">    kw = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;输入一个query:&quot;</span>)</span><br><span class=\"line\">    param = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;query&#x27;</span>: kw</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># 对指定的url发起的请求对应的url是携带参数的，并且请求过程中处理了参数</span></span><br><span class=\"line\">    response = requests.get(url=url, params=param, headers=headers)</span><br><span class=\"line\"></span><br><span class=\"line\">    page_text = response.text</span><br><span class=\"line\">    fileName = kw + <span class=\"string\">&#x27;.html&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(fileName, <span class=\"string\">&#x27;w&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">        fp.write(page_text)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(fileName, <span class=\"string\">&#x27;保存成功！&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>重点：</strong></p>\n<p><strong>UA</strong>：User-Agent（请求载体的身份标识）</p>\n<p><strong>UA检测</strong>(反爬)：门户网站的服务器会检测对应请求的载体身份标识，如果检测到请求的载体身份标识为某一款浏览器，则说明该请求是一个正常的请求。但如果检测到请求的载体身份标识不是基于某一款浏览器的，则表示该请求为不正常的请求(爬虫)则服务器端就可能拒绝该次请求。</p>\n<p><strong>UA伪装</strong>(反反爬)：让爬虫对应的请求载体身份标识伪装成某一款浏览器</p>\n<p><strong>实现：</strong></p>\n<p>控制台输入一个query关键字，类似搜索引擎中的搜索输入框，输入关键字后对应生成它的html文件，文件下保存该关键字搜索的结果的html形式源码。</p>\n<p>例：</p>\n<p>query：武汉    &#x3D;&#x3D;&gt;&gt;  武汉.html生成，浏览器打开武汉.html有：</p>\n<img src=\"/posts/c386cf1b/wuhan.png\" class=\"\" title=\"网页提取结果\">\n\n<hr>\n<h1 id=\"requests模块案例三-破解百度翻译\"><a href=\"#requests模块案例三-破解百度翻译\" class=\"headerlink\" title=\"requests模块案例三(破解百度翻译)\"></a>requests模块案例三(破解百度翻译)</h1><ul>\n<li><strong>编译器版本的”百度翻译”</strong></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">post_url = <span class=\"string\">&#x27;https://fanyi.baidu.com/sug&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># UA伪装</span></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.75 Safari/537.36 Edg/100.0.1185.36&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">word = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;输入您要查询的内容：&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># post请求参数处理（同get请求一致）</span></span><br><span class=\"line\">data = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;kw&#x27;</span>: word</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 请求发送</span></span><br><span class=\"line\">response = requests.post(url=post_url, data=data, headers=headers)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取响应数据:json方法返回的是obj（如果确认响应数据是json类型才可以使用.json方法）</span></span><br><span class=\"line\"><span class=\"comment\"># Content-Type: application/json</span></span><br><span class=\"line\">dic_obj = response.json()</span><br><span class=\"line\"><span class=\"comment\"># print</span></span><br><span class=\"line\"></span><br><span class=\"line\">fileName = word + <span class=\"string\">&#x27;.json&#x27;</span></span><br><span class=\"line\">fp = <span class=\"built_in\">open</span>(fileName, <span class=\"string\">&#x27;w&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">json.dump(dic_obj, fp=fp, ensure_ascii=<span class=\"literal\">False</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;OVER&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>实现：</strong></p>\n<p>控制台提示输入查询的内容后，自动生成对应内容的json文件，json文件下内容对应如下</p>\n<img src=\"/posts/c386cf1b/%E7%BF%BB%E8%AF%91.png\" class=\"\" title=\"编译器同屏翻译\">\n\n<p><strong>功能</strong>：可以控制台输入某单词生成json文件实现对该单词的中文翻译</p>\n<p><strong>问题</strong>：测试过程中输入长句英文是无法正确输出结果</p>\n<hr>\n<h1 id=\"requests模块案例四-豆瓣电影信息提取\"><a href=\"#requests模块案例四-豆瓣电影信息提取\" class=\"headerlink\" title=\"requests模块案例四(豆瓣电影信息提取)\"></a><strong>requests模块案例四(豆瓣电影信息提取)</strong></h1><ul>\n<li>豆瓣喜剧电影排行榜中电影基本信息的捕获</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">&#x27;https://movie.douban.com/j/chart/top_list?&#x27;</span></span><br><span class=\"line\">param = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;type&#x27;</span>: <span class=\"string\">&#x27;24&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;interval_id&#x27;</span>: <span class=\"string\">&#x27;100:90&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;action&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;start&#x27;</span>: <span class=\"string\">&#x27;0&#x27;</span>,  <span class=\"comment\"># 从库中的第几部电影去取</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;limit&#x27;</span>: <span class=\"string\">&#x27;20&#x27;</span>  <span class=\"comment\"># 一次取出的个数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># UA伪装</span></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.75 Safari/537.36 Edg/100.0.1185.36&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">response = requests.get(url=url, params=param, headers=headers)</span><br><span class=\"line\"></span><br><span class=\"line\">list_data = response.json()</span><br><span class=\"line\"></span><br><span class=\"line\">fp = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./douban.json&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">json.dump(list_data, fp=fp, ensure_ascii=<span class=\"literal\">False</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;OVER&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>实现：</p>\n<p>字典中start和limit可更改(见注释)，运行生成douban.json文件，显示取出limit数量个电影的基本信息</p>\n<hr>\n<h1 id=\"requests模块案例五-查询KFC餐厅地址\"><a href=\"#requests模块案例五-查询KFC餐厅地址\" class=\"headerlink\" title=\"requests模块案例五(查询KFC餐厅地址)\"></a>requests模块案例五(查询KFC餐厅地址)</h1><ul>\n<li>检索国内某城市所有KFC餐厅的地址等信息</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">&#x27;http://www.kfc.com.cn/kfccda/ashx/GetStoreList.ashx?op=keyword&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">param = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;cname&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;pid&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;keyword&#x27;</span>: <span class=\"string\">&#x27;襄阳&#x27;</span>,  <span class=\"comment\"># keyword处可改动，变化所要查询的国内城市名称</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;pageIndex&#x27;</span>: <span class=\"string\">&#x27;1&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;pageSize&#x27;</span>: <span class=\"string\">&#x27;10&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># UA伪装</span></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.75 Safari/537.36 Edg/100.0.1185.36&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">response = requests.post(url=url, params=param, headers=headers)</span><br><span class=\"line\"></span><br><span class=\"line\">page_text = response.text</span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./地址查询.html&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">    fp.write(page_text)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;OVER&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>实现：</strong></p>\n<p>功能类似于官网<a href=\"http://www.kfc.com.cn/kfccda/storelist/index.aspx\">肯德基餐厅信息查询 (kfc.com.cn)</a>下”餐厅关键字”查询，控制台输入关键字，即可生成html文件呈现该关键字城市下所有KFC餐厅的地址信息</p>\n<p>例：</p>\n<p>城市：襄阳</p>\n<img src=\"/posts/c386cf1b/%E5%9C%B0%E5%9D%80%E6%9F%A5%E8%AF%A2.png\" class=\"\" title=\"查询对应城市KFC餐厅地址信息\">\n","site":{"data":{}},"length":4149,"excerpt":"<p><strong>Python爬虫学习</strong></p>","more":"<h1 id=\"requests模块案例一-搜狗首页数据提取\"><a href=\"#requests模块案例一-搜狗首页数据提取\" class=\"headerlink\" title=\"requests模块案例一(搜狗首页数据提取)\"></a>requests模块案例一(搜狗首页数据提取)</h1><p>requests模块：python中原生的一款基于网络请求的模块，功能非常强大，简单便携，效率极高</p>\n<p>作用：模拟浏览器发请求</p>\n<p>注意从URL下右键”检查”，查看 请求URL、请求方式、Content-Type的格式等，以及”响应”中的字典或列表格式</p>\n<ul>\n<li><strong>爬取搜狗首页的页面数据</strong></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 爬取搜狗首页页面数据</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 指定url</span></span><br><span class=\"line\">    url = <span class=\"string\">&#x27;https://www.sogou.com/&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 发起请求</span></span><br><span class=\"line\">    <span class=\"comment\"># response接收get方法返回的响应对象</span></span><br><span class=\"line\">    response = requests.get(url=url)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 获取响应数据 .text返回的是字符串形式的响应数据</span></span><br><span class=\"line\">    page_text = response.text</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(page_text)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 持久化存储</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./sogou.html&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">        fp.write(page_text)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;爬取数据结束！&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>爬取结果：(源码臭长)</p>\n<img src=\"/posts/c386cf1b/sogou.png\" class=\"\" title=\"搜狗首页html数据\">\n\n<hr>\n<h1 id=\"requests模块案例二-网页采集器\"><a href=\"#requests模块案例二-网页采集器\" class=\"headerlink\" title=\"requests模块案例二(网页采集器)\"></a>requests模块案例二(网页采集器)</h1><ul>\n<li><strong>简单的网页采集器</strong></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># UA伪装：将对应的User-Agent封装到一个字段中</span></span><br><span class=\"line\">    headers = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.75 Safari/537.36 Edg/100.0.1185.36&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    url = <span class=\"string\">&#x27;https://www.sogou.com/web?&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\"># 处理url携带的参数query:封装到字典中</span></span><br><span class=\"line\">    kw = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;输入一个query:&quot;</span>)</span><br><span class=\"line\">    param = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;query&#x27;</span>: kw</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># 对指定的url发起的请求对应的url是携带参数的，并且请求过程中处理了参数</span></span><br><span class=\"line\">    response = requests.get(url=url, params=param, headers=headers)</span><br><span class=\"line\"></span><br><span class=\"line\">    page_text = response.text</span><br><span class=\"line\">    fileName = kw + <span class=\"string\">&#x27;.html&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(fileName, <span class=\"string\">&#x27;w&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">        fp.write(page_text)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(fileName, <span class=\"string\">&#x27;保存成功！&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>重点：</strong></p>\n<p><strong>UA</strong>：User-Agent（请求载体的身份标识）</p>\n<p><strong>UA检测</strong>(反爬)：门户网站的服务器会检测对应请求的载体身份标识，如果检测到请求的载体身份标识为某一款浏览器，则说明该请求是一个正常的请求。但如果检测到请求的载体身份标识不是基于某一款浏览器的，则表示该请求为不正常的请求(爬虫)则服务器端就可能拒绝该次请求。</p>\n<p><strong>UA伪装</strong>(反反爬)：让爬虫对应的请求载体身份标识伪装成某一款浏览器</p>\n<p><strong>实现：</strong></p>\n<p>控制台输入一个query关键字，类似搜索引擎中的搜索输入框，输入关键字后对应生成它的html文件，文件下保存该关键字搜索的结果的html形式源码。</p>\n<p>例：</p>\n<p>query：武汉    &#x3D;&#x3D;&gt;&gt;  武汉.html生成，浏览器打开武汉.html有：</p>\n<img src=\"/posts/c386cf1b/wuhan.png\" class=\"\" title=\"网页提取结果\">\n\n<hr>\n<h1 id=\"requests模块案例三-破解百度翻译\"><a href=\"#requests模块案例三-破解百度翻译\" class=\"headerlink\" title=\"requests模块案例三(破解百度翻译)\"></a>requests模块案例三(破解百度翻译)</h1><ul>\n<li><strong>编译器版本的”百度翻译”</strong></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">post_url = <span class=\"string\">&#x27;https://fanyi.baidu.com/sug&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># UA伪装</span></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.75 Safari/537.36 Edg/100.0.1185.36&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">word = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;输入您要查询的内容：&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># post请求参数处理（同get请求一致）</span></span><br><span class=\"line\">data = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;kw&#x27;</span>: word</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 请求发送</span></span><br><span class=\"line\">response = requests.post(url=post_url, data=data, headers=headers)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取响应数据:json方法返回的是obj（如果确认响应数据是json类型才可以使用.json方法）</span></span><br><span class=\"line\"><span class=\"comment\"># Content-Type: application/json</span></span><br><span class=\"line\">dic_obj = response.json()</span><br><span class=\"line\"><span class=\"comment\"># print</span></span><br><span class=\"line\"></span><br><span class=\"line\">fileName = word + <span class=\"string\">&#x27;.json&#x27;</span></span><br><span class=\"line\">fp = <span class=\"built_in\">open</span>(fileName, <span class=\"string\">&#x27;w&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">json.dump(dic_obj, fp=fp, ensure_ascii=<span class=\"literal\">False</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;OVER&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>实现：</strong></p>\n<p>控制台提示输入查询的内容后，自动生成对应内容的json文件，json文件下内容对应如下</p>\n<img src=\"/posts/c386cf1b/%E7%BF%BB%E8%AF%91.png\" class=\"\" title=\"编译器同屏翻译\">\n\n<p><strong>功能</strong>：可以控制台输入某单词生成json文件实现对该单词的中文翻译</p>\n<p><strong>问题</strong>：测试过程中输入长句英文是无法正确输出结果</p>\n<hr>\n<h1 id=\"requests模块案例四-豆瓣电影信息提取\"><a href=\"#requests模块案例四-豆瓣电影信息提取\" class=\"headerlink\" title=\"requests模块案例四(豆瓣电影信息提取)\"></a><strong>requests模块案例四(豆瓣电影信息提取)</strong></h1><ul>\n<li>豆瓣喜剧电影排行榜中电影基本信息的捕获</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">&#x27;https://movie.douban.com/j/chart/top_list?&#x27;</span></span><br><span class=\"line\">param = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;type&#x27;</span>: <span class=\"string\">&#x27;24&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;interval_id&#x27;</span>: <span class=\"string\">&#x27;100:90&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;action&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;start&#x27;</span>: <span class=\"string\">&#x27;0&#x27;</span>,  <span class=\"comment\"># 从库中的第几部电影去取</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;limit&#x27;</span>: <span class=\"string\">&#x27;20&#x27;</span>  <span class=\"comment\"># 一次取出的个数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># UA伪装</span></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.75 Safari/537.36 Edg/100.0.1185.36&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">response = requests.get(url=url, params=param, headers=headers)</span><br><span class=\"line\"></span><br><span class=\"line\">list_data = response.json()</span><br><span class=\"line\"></span><br><span class=\"line\">fp = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./douban.json&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">json.dump(list_data, fp=fp, ensure_ascii=<span class=\"literal\">False</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;OVER&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>实现：</p>\n<p>字典中start和limit可更改(见注释)，运行生成douban.json文件，显示取出limit数量个电影的基本信息</p>\n<hr>\n<h1 id=\"requests模块案例五-查询KFC餐厅地址\"><a href=\"#requests模块案例五-查询KFC餐厅地址\" class=\"headerlink\" title=\"requests模块案例五(查询KFC餐厅地址)\"></a>requests模块案例五(查询KFC餐厅地址)</h1><ul>\n<li>检索国内某城市所有KFC餐厅的地址等信息</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">&#x27;http://www.kfc.com.cn/kfccda/ashx/GetStoreList.ashx?op=keyword&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">param = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;cname&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;pid&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;keyword&#x27;</span>: <span class=\"string\">&#x27;襄阳&#x27;</span>,  <span class=\"comment\"># keyword处可改动，变化所要查询的国内城市名称</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;pageIndex&#x27;</span>: <span class=\"string\">&#x27;1&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;pageSize&#x27;</span>: <span class=\"string\">&#x27;10&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># UA伪装</span></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.75 Safari/537.36 Edg/100.0.1185.36&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">response = requests.post(url=url, params=param, headers=headers)</span><br><span class=\"line\"></span><br><span class=\"line\">page_text = response.text</span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./地址查询.html&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">    fp.write(page_text)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;OVER&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>实现：</strong></p>\n<p>功能类似于官网<a href=\"http://www.kfc.com.cn/kfccda/storelist/index.aspx\">肯德基餐厅信息查询 (kfc.com.cn)</a>下”餐厅关键字”查询，控制台输入关键字，即可生成html文件呈现该关键字城市下所有KFC餐厅的地址信息</p>\n<p>例：</p>\n<p>城市：襄阳</p>\n<img src=\"/posts/c386cf1b/%E5%9C%B0%E5%9D%80%E6%9F%A5%E8%AF%A2.png\" class=\"\" title=\"查询对应城市KFC餐厅地址信息\">"},{"title":"hexo使用方法及命令","abbrlink":"1eb58338","date":"2022-06-15T08:06:08.000Z","_content":"\n**介绍hexo常用的命令以及markdown常用语法**\n\n<!--more-->\n\n## hexo常用命令\n\n```python\nhexo new \"postName\"\t\t#新建文章\nhexo new page \"pageName\"#新建页面\nhexo generate \t\t\t#生成静态页面至public目录\nhexo server \t\t\t#开启预览访问端口\nhexo deploy \t\t\t#部署到GitHub\nhexo help  \t\t\t\t#查看帮助\nhexo version  \t\t\t#查看Hexo的版本\nhexo clean \t\t\t\t#清理public的内容\n组合命令：\nhexo s -g\t\t\t \t#生成并本地预览\nhexo d -g\t\t \t\t#生成并上传\n```\n\n## Hexo Markdown简明语法\n\n### 内容目录\n\n使用的yun主题自带目录生成(正确使用markdown语法)\n新建的文章默认生成目录\n新建的页面可以在首部添加: ` toc: true `\n\n### 斜体和粗体\n\n使用``` * ```和``` ** ```表示斜体和粗体，格式如下：\n\n```\n*斜体*，**粗体**\n```\n\n效果如下：*斜体*，**粗体**\n\n### 分级标题\n\n使用 ``` === ```表示一级标题，使用``` --- ```表示二级标题，格式如下：\n\n```\n这是一个一级标题\n===\n这是一个二级标题\n---\n```\n\n或者：使用``` # ```号（建议```#```后面跟一个空格）\n\n```\n# H1\n## H2\n### H3\n#### H4\n##### H5\n###### H6\n```\n\n### 分割线\n\n在单独的一行使用``` *** ```或者``` ___ ```表示分割线\n\n```\npart1\n___ (三个下划线)\npart2\n```\n\n效果如下：\n\npart1\n\n___\n\npart2\n\n### 删除线\n\n使用``` ~~ ```表示删除线\n（``` ~~ ```要紧跟文字不能空格）\n\n```\n~~我被划了吗？~~\n```\n\n~~我被划了吗？~~\n\n### 超链接\n\n#### 文字\n\n插入文字超链接的格式如下 ：\n\n```\n[链接文字](链接地址 \"链接标题\")\n```\n\n#### 图片\n\n插入图片超链接的格式如下：\n\n```\n![图片说明](图片链接 \"图片标题\")\n```\n\n#### 音频\n\n插入音频，使用插件hexo-tag-aplayer，语法如下：\n\n```\n{% aplayer title author url [picture_url, narrow, autoplay, width:xx%, lrc:xxx] %}\n```\n\n详情参见：hexo-tag-aplayer [中文使用文档](https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md)\n\n#### 视频\n\n引用视频则直接插入iframe代码：\n\n```\n<script src=\"/js/youtube-autoresizer.js\"></script>\n<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/HfElOZSEqn4\" frameborder=\"0\" allowfullscreen></iframe>\n```\n\n### 注释\n\n用``` \\ ```表示注释，``` \\ ```后面的文字解析为纯文本格式。\n渲染效果：\n\n```\n\\## 看我没有变成二级标题吧\n```\n\n\\## 看我没有变成二级标题吧\n\n### 引用\n\n#### 普通引用\n\n使用` > `表示文字引用：\n(必须要在每行的开头)\n\n```\n> 野火烧不尽，\n春风吹又生\n\n遇到换行结束\n```\n\neg：\n\n> 野火烧不尽，\n> 春风吹又生\n\n遇到换行结束 \n\n#### 嵌套引用\n\n```\n> 最外层引用\n> > 第二层引用\n> > > 可以嵌套很多层\n```\n\n> 最外层引用\n>\n> > 第二层引用\n> >\n> > > 可以嵌套很多层\n\n#### 引用嵌套列表\n\n```\n> - 这是引用里嵌套的一个列表\n> - 还可以有子列表\n> \t- 子列表\n> \t- 子列表\n```\n\n> - 这是引用里嵌套的一个列表\n> - 还可以有子列表\n>   - 子列表\n>   - 子列表\n\n#### 引用嵌套代码\n\n````\n>     同样的，在前面加四个空格形成代码块\n\n\n> ```\n> 或者使用三个反引号形成代码块\n> ```\n````\n\n>     同样的，在前面加四个空格形成代码块\n\n\n> ```\n> 或者使用三个反引号形成代码块\n> ```\n\n### 列表与表格\n\n#### 无序列表\n\n使用``` * ```, ``` + ```, ``` - ``` 来显示无序列表\n(后面加空格)\n\n```\n+ 无序列表项 一\n\t- 子无序列表 一\n\t- 子无序列表 二\n\t\t* 子无序列表 三\n+ 无序列表项 二\n+ 无序列表项 三\n```\n\n效果展示：\n\n+ 无序列表项 一\n  - 子无序列表 一\n  - 子无序列表 二\n    * 子无序列表 三\n+ 无序列表项 二\n+ 无序列表项 三\n\n#### 有序列表\n\n使用数字和点表示有序列表：\n(同样的，要加空格)\n\n```\n1. 有序列表项 一\n\t1. 子有序列表项 一\n\t2. 子有序列表项 二\n\t4. 故意标错，会自动排序\n2. 有序列表项 二\n3. 有序列表项 三\n```\n\n1. 有序列表项 一\n   1. 子有序列表项 一\n   2. 子有序列表项 二\n   3. 故意标错，会自动排序\n2. 有序列表项 二\n3. 有序列表项 三\n\n### 绘制表格\n\n绘制表格格式如下：\n` | ` 控制分列，\n` - ` 控制分行，\n` : ` 控制对齐方式。\n    \n示例：\n\n```\n| 这是标题 | 自动加粗 | 标题下指定对齐方式 | 不指定对齐方式 |\n| :------- | --------: | :---: |---|\n| ↑左对齐 | 右对齐↑  | ↑居中↑     |默认左对齐|\n| 123456789    | ←空格不占位置   | 987654321 | 1 |\n| 123456789| ←没有空格     | 987654321 | 0 |\n```\n\n效果展示：\n\n| 这是标题  |      自动加粗 | 标题下指定对齐方式 | 不指定对齐方式 |\n| :-------- | ------------: | :----------------: | -------------- |\n| ↑左对齐   |       右对齐↑ |       ↑居中↑       | 默认左对齐     |\n| 123456789 | ←空格不占位置 |     987654321      | 1              |\n| 123456789 |     ←没有空格 |     987654321      | 0              |\n\n### 代码块\n\n#### 行内代码\n\n使用``` ` ```符号\n\n```\n可以用 `一个`，\n可以用 ``两个``，\n也可以用 ```三个```，\n总之就是要 ````成对````。\n```\n\n可以用 `一个`，\n可以用 ``两个``，\n也可以用 ```三个```，\n总之就是要 ````成对````。\n\n#### 多行代码\n\n使用：``` ` ```符号\n至少要三个连续的 ``` ` ```，数目要配对\n\n````\n```\n#include<stdion.h>\nint main\n{\n\tcout<<\"hello world!\"<<endl;\n\treturn 0;\n}\n```\n````\n\n```\n#include<stdion.h>\nint main\n{\n\tcout<<\"hello world!\"<<endl;\n\treturn 0;\n}\n```\n\n#### 加强的代码块\n\n````\n```cpp\n#include<stdion.h>\nint main\n{\n\tcout<<\"hello world!\"<<endl;\n\treturn 0;\n}\n```\n````\n\n效果：\n\n```cpp\n#include<stdion.h>\nint main\n{\n\tcout<<\"hello world!\"<<endl;\n\treturn 0;\n}\n```\n\n***end***\n","source":"_posts/hexo使用方法及命令.md","raw":"---\ntitle: hexo使用方法及命令\ntags: 1\nabbrlink: 1eb58338\ndate: 2022-06-15 16:06:08\n---\n\n**介绍hexo常用的命令以及markdown常用语法**\n\n<!--more-->\n\n## hexo常用命令\n\n```python\nhexo new \"postName\"\t\t#新建文章\nhexo new page \"pageName\"#新建页面\nhexo generate \t\t\t#生成静态页面至public目录\nhexo server \t\t\t#开启预览访问端口\nhexo deploy \t\t\t#部署到GitHub\nhexo help  \t\t\t\t#查看帮助\nhexo version  \t\t\t#查看Hexo的版本\nhexo clean \t\t\t\t#清理public的内容\n组合命令：\nhexo s -g\t\t\t \t#生成并本地预览\nhexo d -g\t\t \t\t#生成并上传\n```\n\n## Hexo Markdown简明语法\n\n### 内容目录\n\n使用的yun主题自带目录生成(正确使用markdown语法)\n新建的文章默认生成目录\n新建的页面可以在首部添加: ` toc: true `\n\n### 斜体和粗体\n\n使用``` * ```和``` ** ```表示斜体和粗体，格式如下：\n\n```\n*斜体*，**粗体**\n```\n\n效果如下：*斜体*，**粗体**\n\n### 分级标题\n\n使用 ``` === ```表示一级标题，使用``` --- ```表示二级标题，格式如下：\n\n```\n这是一个一级标题\n===\n这是一个二级标题\n---\n```\n\n或者：使用``` # ```号（建议```#```后面跟一个空格）\n\n```\n# H1\n## H2\n### H3\n#### H4\n##### H5\n###### H6\n```\n\n### 分割线\n\n在单独的一行使用``` *** ```或者``` ___ ```表示分割线\n\n```\npart1\n___ (三个下划线)\npart2\n```\n\n效果如下：\n\npart1\n\n___\n\npart2\n\n### 删除线\n\n使用``` ~~ ```表示删除线\n（``` ~~ ```要紧跟文字不能空格）\n\n```\n~~我被划了吗？~~\n```\n\n~~我被划了吗？~~\n\n### 超链接\n\n#### 文字\n\n插入文字超链接的格式如下 ：\n\n```\n[链接文字](链接地址 \"链接标题\")\n```\n\n#### 图片\n\n插入图片超链接的格式如下：\n\n```\n![图片说明](图片链接 \"图片标题\")\n```\n\n#### 音频\n\n插入音频，使用插件hexo-tag-aplayer，语法如下：\n\n```\n{% aplayer title author url [picture_url, narrow, autoplay, width:xx%, lrc:xxx] %}\n```\n\n详情参见：hexo-tag-aplayer [中文使用文档](https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md)\n\n#### 视频\n\n引用视频则直接插入iframe代码：\n\n```\n<script src=\"/js/youtube-autoresizer.js\"></script>\n<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/HfElOZSEqn4\" frameborder=\"0\" allowfullscreen></iframe>\n```\n\n### 注释\n\n用``` \\ ```表示注释，``` \\ ```后面的文字解析为纯文本格式。\n渲染效果：\n\n```\n\\## 看我没有变成二级标题吧\n```\n\n\\## 看我没有变成二级标题吧\n\n### 引用\n\n#### 普通引用\n\n使用` > `表示文字引用：\n(必须要在每行的开头)\n\n```\n> 野火烧不尽，\n春风吹又生\n\n遇到换行结束\n```\n\neg：\n\n> 野火烧不尽，\n> 春风吹又生\n\n遇到换行结束 \n\n#### 嵌套引用\n\n```\n> 最外层引用\n> > 第二层引用\n> > > 可以嵌套很多层\n```\n\n> 最外层引用\n>\n> > 第二层引用\n> >\n> > > 可以嵌套很多层\n\n#### 引用嵌套列表\n\n```\n> - 这是引用里嵌套的一个列表\n> - 还可以有子列表\n> \t- 子列表\n> \t- 子列表\n```\n\n> - 这是引用里嵌套的一个列表\n> - 还可以有子列表\n>   - 子列表\n>   - 子列表\n\n#### 引用嵌套代码\n\n````\n>     同样的，在前面加四个空格形成代码块\n\n\n> ```\n> 或者使用三个反引号形成代码块\n> ```\n````\n\n>     同样的，在前面加四个空格形成代码块\n\n\n> ```\n> 或者使用三个反引号形成代码块\n> ```\n\n### 列表与表格\n\n#### 无序列表\n\n使用``` * ```, ``` + ```, ``` - ``` 来显示无序列表\n(后面加空格)\n\n```\n+ 无序列表项 一\n\t- 子无序列表 一\n\t- 子无序列表 二\n\t\t* 子无序列表 三\n+ 无序列表项 二\n+ 无序列表项 三\n```\n\n效果展示：\n\n+ 无序列表项 一\n  - 子无序列表 一\n  - 子无序列表 二\n    * 子无序列表 三\n+ 无序列表项 二\n+ 无序列表项 三\n\n#### 有序列表\n\n使用数字和点表示有序列表：\n(同样的，要加空格)\n\n```\n1. 有序列表项 一\n\t1. 子有序列表项 一\n\t2. 子有序列表项 二\n\t4. 故意标错，会自动排序\n2. 有序列表项 二\n3. 有序列表项 三\n```\n\n1. 有序列表项 一\n   1. 子有序列表项 一\n   2. 子有序列表项 二\n   3. 故意标错，会自动排序\n2. 有序列表项 二\n3. 有序列表项 三\n\n### 绘制表格\n\n绘制表格格式如下：\n` | ` 控制分列，\n` - ` 控制分行，\n` : ` 控制对齐方式。\n    \n示例：\n\n```\n| 这是标题 | 自动加粗 | 标题下指定对齐方式 | 不指定对齐方式 |\n| :------- | --------: | :---: |---|\n| ↑左对齐 | 右对齐↑  | ↑居中↑     |默认左对齐|\n| 123456789    | ←空格不占位置   | 987654321 | 1 |\n| 123456789| ←没有空格     | 987654321 | 0 |\n```\n\n效果展示：\n\n| 这是标题  |      自动加粗 | 标题下指定对齐方式 | 不指定对齐方式 |\n| :-------- | ------------: | :----------------: | -------------- |\n| ↑左对齐   |       右对齐↑ |       ↑居中↑       | 默认左对齐     |\n| 123456789 | ←空格不占位置 |     987654321      | 1              |\n| 123456789 |     ←没有空格 |     987654321      | 0              |\n\n### 代码块\n\n#### 行内代码\n\n使用``` ` ```符号\n\n```\n可以用 `一个`，\n可以用 ``两个``，\n也可以用 ```三个```，\n总之就是要 ````成对````。\n```\n\n可以用 `一个`，\n可以用 ``两个``，\n也可以用 ```三个```，\n总之就是要 ````成对````。\n\n#### 多行代码\n\n使用：``` ` ```符号\n至少要三个连续的 ``` ` ```，数目要配对\n\n````\n```\n#include<stdion.h>\nint main\n{\n\tcout<<\"hello world!\"<<endl;\n\treturn 0;\n}\n```\n````\n\n```\n#include<stdion.h>\nint main\n{\n\tcout<<\"hello world!\"<<endl;\n\treturn 0;\n}\n```\n\n#### 加强的代码块\n\n````\n```cpp\n#include<stdion.h>\nint main\n{\n\tcout<<\"hello world!\"<<endl;\n\treturn 0;\n}\n```\n````\n\n效果：\n\n```cpp\n#include<stdion.h>\nint main\n{\n\tcout<<\"hello world!\"<<endl;\n\treturn 0;\n}\n```\n\n***end***\n","slug":"hexo使用方法及命令","published":1,"updated":"2024-09-26T11:25:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm1rz0oez000f18ql1gux88lq","content":"<p><strong>介绍hexo常用的命令以及markdown常用语法</strong></p>\n<span id=\"more\"></span>\n\n<h2 id=\"hexo常用命令\"><a href=\"#hexo常用命令\" class=\"headerlink\" title=\"hexo常用命令\"></a>hexo常用命令</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new <span class=\"string\">&quot;postName&quot;</span>\t\t<span class=\"comment\">#新建文章</span></span><br><span class=\"line\">hexo new page <span class=\"string\">&quot;pageName&quot;</span><span class=\"comment\">#新建页面</span></span><br><span class=\"line\">hexo generate \t\t\t<span class=\"comment\">#生成静态页面至public目录</span></span><br><span class=\"line\">hexo server \t\t\t<span class=\"comment\">#开启预览访问端口</span></span><br><span class=\"line\">hexo deploy \t\t\t<span class=\"comment\">#部署到GitHub</span></span><br><span class=\"line\">hexo <span class=\"built_in\">help</span>  \t\t\t\t<span class=\"comment\">#查看帮助</span></span><br><span class=\"line\">hexo version  \t\t\t<span class=\"comment\">#查看Hexo的版本</span></span><br><span class=\"line\">hexo clean \t\t\t\t<span class=\"comment\">#清理public的内容</span></span><br><span class=\"line\">组合命令：</span><br><span class=\"line\">hexo s -g\t\t\t \t<span class=\"comment\">#生成并本地预览</span></span><br><span class=\"line\">hexo d -g\t\t \t\t<span class=\"comment\">#生成并上传</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Hexo-Markdown简明语法\"><a href=\"#Hexo-Markdown简明语法\" class=\"headerlink\" title=\"Hexo Markdown简明语法\"></a>Hexo Markdown简明语法</h2><h3 id=\"内容目录\"><a href=\"#内容目录\" class=\"headerlink\" title=\"内容目录\"></a>内容目录</h3><p>使用的yun主题自带目录生成(正确使用markdown语法)<br>新建的文章默认生成目录<br>新建的页面可以在首部添加: <code>toc: true</code></p>\n<h3 id=\"斜体和粗体\"><a href=\"#斜体和粗体\" class=\"headerlink\" title=\"斜体和粗体\"></a>斜体和粗体</h3><p>使用<code>*</code>和<code>**</code>表示斜体和粗体，格式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*斜体*，**粗体**</span><br></pre></td></tr></table></figure>\n\n<p>效果如下：<em>斜体</em>，<strong>粗体</strong></p>\n<h3 id=\"分级标题\"><a href=\"#分级标题\" class=\"headerlink\" title=\"分级标题\"></a>分级标题</h3><p>使用 <code>===</code>表示一级标题，使用<code>---</code>表示二级标题，格式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是一个一级标题</span><br><span class=\"line\">===</span><br><span class=\"line\">这是一个二级标题</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>或者：使用<code>#</code>号（建议<code>#</code>后面跟一个空格）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># H1</span><br><span class=\"line\">## H2</span><br><span class=\"line\">### H3</span><br><span class=\"line\">#### H4</span><br><span class=\"line\">##### H5</span><br><span class=\"line\">###### H6</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"分割线\"><a href=\"#分割线\" class=\"headerlink\" title=\"分割线\"></a>分割线</h3><p>在单独的一行使用<code>***</code>或者<code>___</code>表示分割线</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">part1</span><br><span class=\"line\">___ (三个下划线)</span><br><span class=\"line\">part2</span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<p>part1</p>\n<hr>\n<p>part2</p>\n<h3 id=\"删除线\"><a href=\"#删除线\" class=\"headerlink\" title=\"删除线\"></a>删除线</h3><p>使用<code>~~</code>表示删除线<br>（<code>~~</code>要紧跟文字不能空格）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~~我被划了吗？~~</span><br></pre></td></tr></table></figure>\n\n<p><del>我被划了吗？</del></p>\n<h3 id=\"超链接\"><a href=\"#超链接\" class=\"headerlink\" title=\"超链接\"></a>超链接</h3><h4 id=\"文字\"><a href=\"#文字\" class=\"headerlink\" title=\"文字\"></a>文字</h4><p>插入文字超链接的格式如下 ：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[链接文字](链接地址 &quot;链接标题&quot;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h4><p>插入图片超链接的格式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![图片说明](图片链接 &quot;图片标题&quot;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"音频\"><a href=\"#音频\" class=\"headerlink\" title=\"音频\"></a>音频</h4><p>插入音频，使用插件hexo-tag-aplayer，语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% aplayer title author url [picture_url, narrow, autoplay, width:xx%, lrc:xxx] %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>详情参见：hexo-tag-aplayer <a href=\"https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md\">中文使用文档</a></p>\n<h4 id=\"视频\"><a href=\"#视频\" class=\"headerlink\" title=\"视频\"></a>视频</h4><p>引用视频则直接插入iframe代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;/js/youtube-autoresizer.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;https://www.youtube.com/embed/HfElOZSEqn4&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><p>用<code>\\</code>表示注释，<code>\\</code>后面的文字解析为纯文本格式。<br>渲染效果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\## 看我没有变成二级标题吧</span><br></pre></td></tr></table></figure>\n\n<p>## 看我没有变成二级标题吧</p>\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><h4 id=\"普通引用\"><a href=\"#普通引用\" class=\"headerlink\" title=\"普通引用\"></a>普通引用</h4><p>使用<code>&gt;</code>表示文字引用：<br>(必须要在每行的开头)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 野火烧不尽，</span><br><span class=\"line\">春风吹又生</span><br><span class=\"line\"></span><br><span class=\"line\">遇到换行结束</span><br></pre></td></tr></table></figure>\n\n<p>eg：</p>\n<blockquote>\n<p>野火烧不尽，<br>春风吹又生</p>\n</blockquote>\n<p>遇到换行结束 </p>\n<h4 id=\"嵌套引用\"><a href=\"#嵌套引用\" class=\"headerlink\" title=\"嵌套引用\"></a>嵌套引用</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 最外层引用</span><br><span class=\"line\">&gt; &gt; 第二层引用</span><br><span class=\"line\">&gt; &gt; &gt; 可以嵌套很多层</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>最外层引用</p>\n<blockquote>\n<p>第二层引用</p>\n<blockquote>\n<p>可以嵌套很多层</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<h4 id=\"引用嵌套列表\"><a href=\"#引用嵌套列表\" class=\"headerlink\" title=\"引用嵌套列表\"></a>引用嵌套列表</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; - 这是引用里嵌套的一个列表</span><br><span class=\"line\">&gt; - 还可以有子列表</span><br><span class=\"line\">&gt; \t- 子列表</span><br><span class=\"line\">&gt; \t- 子列表</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ul>\n<li>这是引用里嵌套的一个列表</li>\n<li>还可以有子列表<ul>\n<li>子列表</li>\n<li>子列表</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h4 id=\"引用嵌套代码\"><a href=\"#引用嵌套代码\" class=\"headerlink\" title=\"引用嵌套代码\"></a>引用嵌套代码</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;     同样的，在前面加四个空格形成代码块</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; ```</span><br><span class=\"line\">&gt; 或者使用三个反引号形成代码块</span><br><span class=\"line\">&gt; ```</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<pre><code>同样的，在前面加四个空格形成代码块\n</code></pre>\n</blockquote>\n<blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">或者使用三个反引号形成代码块</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"列表与表格\"><a href=\"#列表与表格\" class=\"headerlink\" title=\"列表与表格\"></a>列表与表格</h3><h4 id=\"无序列表\"><a href=\"#无序列表\" class=\"headerlink\" title=\"无序列表\"></a>无序列表</h4><p>使用<code>*</code>, <code>+</code>, <code>-</code> 来显示无序列表<br>(后面加空格)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ 无序列表项 一</span><br><span class=\"line\">\t- 子无序列表 一</span><br><span class=\"line\">\t- 子无序列表 二</span><br><span class=\"line\">\t\t* 子无序列表 三</span><br><span class=\"line\">+ 无序列表项 二</span><br><span class=\"line\">+ 无序列表项 三</span><br></pre></td></tr></table></figure>\n\n<p>效果展示：</p>\n<ul>\n<li>无序列表项 一<ul>\n<li>子无序列表 一</li>\n<li>子无序列表 二<ul>\n<li>子无序列表 三</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>无序列表项 二</li>\n<li>无序列表项 三</li>\n</ul>\n<h4 id=\"有序列表\"><a href=\"#有序列表\" class=\"headerlink\" title=\"有序列表\"></a>有序列表</h4><p>使用数字和点表示有序列表：<br>(同样的，要加空格)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 有序列表项 一</span><br><span class=\"line\">\t1. 子有序列表项 一</span><br><span class=\"line\">\t2. 子有序列表项 二</span><br><span class=\"line\">\t4. 故意标错，会自动排序</span><br><span class=\"line\">2. 有序列表项 二</span><br><span class=\"line\">3. 有序列表项 三</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>有序列表项 一<ol>\n<li>子有序列表项 一</li>\n<li>子有序列表项 二</li>\n<li>故意标错，会自动排序</li>\n</ol>\n</li>\n<li>有序列表项 二</li>\n<li>有序列表项 三</li>\n</ol>\n<h3 id=\"绘制表格\"><a href=\"#绘制表格\" class=\"headerlink\" title=\"绘制表格\"></a>绘制表格</h3><p>绘制表格格式如下：<br><code>|</code> 控制分列，<br><code>-</code> 控制分行，<br><code>:</code> 控制对齐方式。</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| 这是标题 | 自动加粗 | 标题下指定对齐方式 | 不指定对齐方式 |</span><br><span class=\"line\">| :------- | --------: | :---: |---|</span><br><span class=\"line\">| ↑左对齐 | 右对齐↑  | ↑居中↑     |默认左对齐|</span><br><span class=\"line\">| 123456789    | ←空格不占位置   | 987654321 | 1 |</span><br><span class=\"line\">| 123456789| ←没有空格     | 987654321 | 0 |</span><br></pre></td></tr></table></figure>\n\n<p>效果展示：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">这是标题</th>\n<th align=\"right\">自动加粗</th>\n<th align=\"center\">标题下指定对齐方式</th>\n<th>不指定对齐方式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">↑左对齐</td>\n<td align=\"right\">右对齐↑</td>\n<td align=\"center\">↑居中↑</td>\n<td>默认左对齐</td>\n</tr>\n<tr>\n<td align=\"left\">123456789</td>\n<td align=\"right\">←空格不占位置</td>\n<td align=\"center\">987654321</td>\n<td>1</td>\n</tr>\n<tr>\n<td align=\"left\">123456789</td>\n<td align=\"right\">←没有空格</td>\n<td align=\"center\">987654321</td>\n<td>0</td>\n</tr>\n</tbody></table>\n<h3 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h3><h4 id=\"行内代码\"><a href=\"#行内代码\" class=\"headerlink\" title=\"行内代码\"></a>行内代码</h4><p>使用<code>`</code>符号</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可以用 `一个`，</span><br><span class=\"line\">可以用 ``两个``，</span><br><span class=\"line\">也可以用 ```三个```，</span><br><span class=\"line\">总之就是要 ````成对````。</span><br></pre></td></tr></table></figure>\n\n<p>可以用 <code>一个</code>，<br>可以用 <code>两个</code>，<br>也可以用 <code>三个</code>，<br>总之就是要 <code>成对</code>。</p>\n<h4 id=\"多行代码\"><a href=\"#多行代码\" class=\"headerlink\" title=\"多行代码\"></a>多行代码</h4><p>使用：<code>`</code>符号<br>至少要三个连续的 <code>`</code>，数目要配对</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\">#include&lt;stdion.h&gt;</span><br><span class=\"line\">int main</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tcout&lt;&lt;&quot;hello world!&quot;&lt;&lt;endl;</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">```</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdion.h&gt;</span><br><span class=\"line\">int main</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tcout&lt;&lt;&quot;hello world!&quot;&lt;&lt;endl;</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"加强的代码块\"><a href=\"#加强的代码块\" class=\"headerlink\" title=\"加强的代码块\"></a>加强的代码块</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```cpp</span><br><span class=\"line\">#include&lt;stdion.h&gt;</span><br><span class=\"line\">int main</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tcout&lt;&lt;&quot;hello world!&quot;&lt;&lt;endl;</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">```</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdion.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> main</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;hello world!&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em><strong>end</strong></em></p>\n","site":{"data":{}},"length":2581,"excerpt":"<p><strong>介绍hexo常用的命令以及markdown常用语法</strong></p>","more":"<h2 id=\"hexo常用命令\"><a href=\"#hexo常用命令\" class=\"headerlink\" title=\"hexo常用命令\"></a>hexo常用命令</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new <span class=\"string\">&quot;postName&quot;</span>\t\t<span class=\"comment\">#新建文章</span></span><br><span class=\"line\">hexo new page <span class=\"string\">&quot;pageName&quot;</span><span class=\"comment\">#新建页面</span></span><br><span class=\"line\">hexo generate \t\t\t<span class=\"comment\">#生成静态页面至public目录</span></span><br><span class=\"line\">hexo server \t\t\t<span class=\"comment\">#开启预览访问端口</span></span><br><span class=\"line\">hexo deploy \t\t\t<span class=\"comment\">#部署到GitHub</span></span><br><span class=\"line\">hexo <span class=\"built_in\">help</span>  \t\t\t\t<span class=\"comment\">#查看帮助</span></span><br><span class=\"line\">hexo version  \t\t\t<span class=\"comment\">#查看Hexo的版本</span></span><br><span class=\"line\">hexo clean \t\t\t\t<span class=\"comment\">#清理public的内容</span></span><br><span class=\"line\">组合命令：</span><br><span class=\"line\">hexo s -g\t\t\t \t<span class=\"comment\">#生成并本地预览</span></span><br><span class=\"line\">hexo d -g\t\t \t\t<span class=\"comment\">#生成并上传</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Hexo-Markdown简明语法\"><a href=\"#Hexo-Markdown简明语法\" class=\"headerlink\" title=\"Hexo Markdown简明语法\"></a>Hexo Markdown简明语法</h2><h3 id=\"内容目录\"><a href=\"#内容目录\" class=\"headerlink\" title=\"内容目录\"></a>内容目录</h3><p>使用的yun主题自带目录生成(正确使用markdown语法)<br>新建的文章默认生成目录<br>新建的页面可以在首部添加: <code>toc: true</code></p>\n<h3 id=\"斜体和粗体\"><a href=\"#斜体和粗体\" class=\"headerlink\" title=\"斜体和粗体\"></a>斜体和粗体</h3><p>使用<code>*</code>和<code>**</code>表示斜体和粗体，格式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*斜体*，**粗体**</span><br></pre></td></tr></table></figure>\n\n<p>效果如下：<em>斜体</em>，<strong>粗体</strong></p>\n<h3 id=\"分级标题\"><a href=\"#分级标题\" class=\"headerlink\" title=\"分级标题\"></a>分级标题</h3><p>使用 <code>===</code>表示一级标题，使用<code>---</code>表示二级标题，格式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是一个一级标题</span><br><span class=\"line\">===</span><br><span class=\"line\">这是一个二级标题</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>或者：使用<code>#</code>号（建议<code>#</code>后面跟一个空格）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># H1</span><br><span class=\"line\">## H2</span><br><span class=\"line\">### H3</span><br><span class=\"line\">#### H4</span><br><span class=\"line\">##### H5</span><br><span class=\"line\">###### H6</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"分割线\"><a href=\"#分割线\" class=\"headerlink\" title=\"分割线\"></a>分割线</h3><p>在单独的一行使用<code>***</code>或者<code>___</code>表示分割线</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">part1</span><br><span class=\"line\">___ (三个下划线)</span><br><span class=\"line\">part2</span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<p>part1</p>\n<hr>\n<p>part2</p>\n<h3 id=\"删除线\"><a href=\"#删除线\" class=\"headerlink\" title=\"删除线\"></a>删除线</h3><p>使用<code>~~</code>表示删除线<br>（<code>~~</code>要紧跟文字不能空格）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~~我被划了吗？~~</span><br></pre></td></tr></table></figure>\n\n<p><del>我被划了吗？</del></p>\n<h3 id=\"超链接\"><a href=\"#超链接\" class=\"headerlink\" title=\"超链接\"></a>超链接</h3><h4 id=\"文字\"><a href=\"#文字\" class=\"headerlink\" title=\"文字\"></a>文字</h4><p>插入文字超链接的格式如下 ：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[链接文字](链接地址 &quot;链接标题&quot;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h4><p>插入图片超链接的格式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![图片说明](图片链接 &quot;图片标题&quot;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"音频\"><a href=\"#音频\" class=\"headerlink\" title=\"音频\"></a>音频</h4><p>插入音频，使用插件hexo-tag-aplayer，语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% aplayer title author url [picture_url, narrow, autoplay, width:xx%, lrc:xxx] %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>详情参见：hexo-tag-aplayer <a href=\"https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md\">中文使用文档</a></p>\n<h4 id=\"视频\"><a href=\"#视频\" class=\"headerlink\" title=\"视频\"></a>视频</h4><p>引用视频则直接插入iframe代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;/js/youtube-autoresizer.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;https://www.youtube.com/embed/HfElOZSEqn4&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><p>用<code>\\</code>表示注释，<code>\\</code>后面的文字解析为纯文本格式。<br>渲染效果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\## 看我没有变成二级标题吧</span><br></pre></td></tr></table></figure>\n\n<p>## 看我没有变成二级标题吧</p>\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><h4 id=\"普通引用\"><a href=\"#普通引用\" class=\"headerlink\" title=\"普通引用\"></a>普通引用</h4><p>使用<code>&gt;</code>表示文字引用：<br>(必须要在每行的开头)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 野火烧不尽，</span><br><span class=\"line\">春风吹又生</span><br><span class=\"line\"></span><br><span class=\"line\">遇到换行结束</span><br></pre></td></tr></table></figure>\n\n<p>eg：</p>\n<blockquote>\n<p>野火烧不尽，<br>春风吹又生</p>\n</blockquote>\n<p>遇到换行结束 </p>\n<h4 id=\"嵌套引用\"><a href=\"#嵌套引用\" class=\"headerlink\" title=\"嵌套引用\"></a>嵌套引用</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 最外层引用</span><br><span class=\"line\">&gt; &gt; 第二层引用</span><br><span class=\"line\">&gt; &gt; &gt; 可以嵌套很多层</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>最外层引用</p>\n<blockquote>\n<p>第二层引用</p>\n<blockquote>\n<p>可以嵌套很多层</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<h4 id=\"引用嵌套列表\"><a href=\"#引用嵌套列表\" class=\"headerlink\" title=\"引用嵌套列表\"></a>引用嵌套列表</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; - 这是引用里嵌套的一个列表</span><br><span class=\"line\">&gt; - 还可以有子列表</span><br><span class=\"line\">&gt; \t- 子列表</span><br><span class=\"line\">&gt; \t- 子列表</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ul>\n<li>这是引用里嵌套的一个列表</li>\n<li>还可以有子列表<ul>\n<li>子列表</li>\n<li>子列表</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h4 id=\"引用嵌套代码\"><a href=\"#引用嵌套代码\" class=\"headerlink\" title=\"引用嵌套代码\"></a>引用嵌套代码</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;     同样的，在前面加四个空格形成代码块</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; ```</span><br><span class=\"line\">&gt; 或者使用三个反引号形成代码块</span><br><span class=\"line\">&gt; ```</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<pre><code>同样的，在前面加四个空格形成代码块\n</code></pre>\n</blockquote>\n<blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">或者使用三个反引号形成代码块</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"列表与表格\"><a href=\"#列表与表格\" class=\"headerlink\" title=\"列表与表格\"></a>列表与表格</h3><h4 id=\"无序列表\"><a href=\"#无序列表\" class=\"headerlink\" title=\"无序列表\"></a>无序列表</h4><p>使用<code>*</code>, <code>+</code>, <code>-</code> 来显示无序列表<br>(后面加空格)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ 无序列表项 一</span><br><span class=\"line\">\t- 子无序列表 一</span><br><span class=\"line\">\t- 子无序列表 二</span><br><span class=\"line\">\t\t* 子无序列表 三</span><br><span class=\"line\">+ 无序列表项 二</span><br><span class=\"line\">+ 无序列表项 三</span><br></pre></td></tr></table></figure>\n\n<p>效果展示：</p>\n<ul>\n<li>无序列表项 一<ul>\n<li>子无序列表 一</li>\n<li>子无序列表 二<ul>\n<li>子无序列表 三</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>无序列表项 二</li>\n<li>无序列表项 三</li>\n</ul>\n<h4 id=\"有序列表\"><a href=\"#有序列表\" class=\"headerlink\" title=\"有序列表\"></a>有序列表</h4><p>使用数字和点表示有序列表：<br>(同样的，要加空格)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 有序列表项 一</span><br><span class=\"line\">\t1. 子有序列表项 一</span><br><span class=\"line\">\t2. 子有序列表项 二</span><br><span class=\"line\">\t4. 故意标错，会自动排序</span><br><span class=\"line\">2. 有序列表项 二</span><br><span class=\"line\">3. 有序列表项 三</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>有序列表项 一<ol>\n<li>子有序列表项 一</li>\n<li>子有序列表项 二</li>\n<li>故意标错，会自动排序</li>\n</ol>\n</li>\n<li>有序列表项 二</li>\n<li>有序列表项 三</li>\n</ol>\n<h3 id=\"绘制表格\"><a href=\"#绘制表格\" class=\"headerlink\" title=\"绘制表格\"></a>绘制表格</h3><p>绘制表格格式如下：<br><code>|</code> 控制分列，<br><code>-</code> 控制分行，<br><code>:</code> 控制对齐方式。</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| 这是标题 | 自动加粗 | 标题下指定对齐方式 | 不指定对齐方式 |</span><br><span class=\"line\">| :------- | --------: | :---: |---|</span><br><span class=\"line\">| ↑左对齐 | 右对齐↑  | ↑居中↑     |默认左对齐|</span><br><span class=\"line\">| 123456789    | ←空格不占位置   | 987654321 | 1 |</span><br><span class=\"line\">| 123456789| ←没有空格     | 987654321 | 0 |</span><br></pre></td></tr></table></figure>\n\n<p>效果展示：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">这是标题</th>\n<th align=\"right\">自动加粗</th>\n<th align=\"center\">标题下指定对齐方式</th>\n<th>不指定对齐方式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">↑左对齐</td>\n<td align=\"right\">右对齐↑</td>\n<td align=\"center\">↑居中↑</td>\n<td>默认左对齐</td>\n</tr>\n<tr>\n<td align=\"left\">123456789</td>\n<td align=\"right\">←空格不占位置</td>\n<td align=\"center\">987654321</td>\n<td>1</td>\n</tr>\n<tr>\n<td align=\"left\">123456789</td>\n<td align=\"right\">←没有空格</td>\n<td align=\"center\">987654321</td>\n<td>0</td>\n</tr>\n</tbody></table>\n<h3 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h3><h4 id=\"行内代码\"><a href=\"#行内代码\" class=\"headerlink\" title=\"行内代码\"></a>行内代码</h4><p>使用<code>`</code>符号</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可以用 `一个`，</span><br><span class=\"line\">可以用 ``两个``，</span><br><span class=\"line\">也可以用 ```三个```，</span><br><span class=\"line\">总之就是要 ````成对````。</span><br></pre></td></tr></table></figure>\n\n<p>可以用 <code>一个</code>，<br>可以用 <code>两个</code>，<br>也可以用 <code>三个</code>，<br>总之就是要 <code>成对</code>。</p>\n<h4 id=\"多行代码\"><a href=\"#多行代码\" class=\"headerlink\" title=\"多行代码\"></a>多行代码</h4><p>使用：<code>`</code>符号<br>至少要三个连续的 <code>`</code>，数目要配对</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\">#include&lt;stdion.h&gt;</span><br><span class=\"line\">int main</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tcout&lt;&lt;&quot;hello world!&quot;&lt;&lt;endl;</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">```</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdion.h&gt;</span><br><span class=\"line\">int main</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tcout&lt;&lt;&quot;hello world!&quot;&lt;&lt;endl;</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"加强的代码块\"><a href=\"#加强的代码块\" class=\"headerlink\" title=\"加强的代码块\"></a>加强的代码块</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```cpp</span><br><span class=\"line\">#include&lt;stdion.h&gt;</span><br><span class=\"line\">int main</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tcout&lt;&lt;&quot;hello world!&quot;&lt;&lt;endl;</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">```</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdion.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> main</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;hello world!&quot;</span>&lt;&lt;endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em><strong>end</strong></em></p>"},{"title":"selenium自动化测试","abbrlink":"3cb24475","date":"2022-09-14T05:21:11.000Z","_content":"\n**Python selenium UI自动化测试技术分享**\n\n<!--more-->\n\n# 初入URL页面即警告框弹窗的解决办法\n\n```python\noptions = webdriver.ChromeOptions()\noptions.add_experimental_option('excludeSwitches', ['enable-logging'])\noptions.add_experimental_option(\"excludeSwitches\", [\"enable-automation\"])\noptions.add_experimental_option(\"useAutomationExtension\", 'False')\noptions.add_argument(\"--user-data-dir=\" + str(pathlib.Path.home()) + r\"\\AppData\\Local\\Google\\Chrome\\seleniumTest\")\n\n# 创建 WebDriver 对象，指明使用chrome浏览器驱动\ndriver = webdriver.Chrome(service=Service(r'C:\\Program Files\\Google\\Chrome\\Application\\chromedriver.exe'), \n                          options=options)  \n```\n\n以Chrome浏览器调用为例，service处路径规范为本地chrome文件夹内部的chromedriver绝对路径，options是对chromedriver所调用的chrome浏览器基本设置的修改。\n\n浏览器URL搜索栏搜索 'chrome://flags'，如下图Insecure origins trested as secure处添加需要使用的测试网址url，英文逗号分隔，置为Enabled重启浏览器即可。\n\n{% asset_img flags设置.png  %}\n\n------\n\n# Selenium的三种等待方法\n\n## sleep()：强制等待\n\n```python\nimport time\n\"\"\"程序代码块\"\"\"\ntime.sleep(N)  # N为整数, 意为编译器运行至该行，强制暂停等待加载N秒\n```\n\n执行 sleep()后线程休眠。\n\n固定的等待，常用于演示，调试，初学者观察效果。实际项目中不建议使用这种等待，由于网络的好坏导致等待时间不确定，如果设置的等待时间不足够长，元素找不到会报错，如果设置的等待时间过长，保证元素可以找到，但其实可能用不了这么久。这种等待方法十分笨拙，无论页面加载得如何，都必须等待n秒，可以说是十分不智能了。\n\n但是强制等待也不是一无是处，比如界面操作完要关闭，但是最后你提交了一些数据，如果非常快的退出浏览器会丢失请求。那就需要强制等待一定时间，这个跟隐式等待还是显示等待都无关。再比如当我们没有找到元素而报错，定位问题时，可以先用sleep()来尝试一下，确定是否是由于等待时间的问题没有找到元素，如果是的话就可以用显示等待来代替。\n\n## implicitly_wait()：隐式等待\n\n```python\nfrom selenium import webdriver\n\"\"\"程序代码块\"\"\"\ndriver = webdriver.Chrome(...)\ndriver.implicitly_wait(N)  # N为整数, 意为编译器运行至该行，隐式等待N秒\n```\n\n原理：隐式等待，就是在创建driver时，为浏览器对象创建一个等待时间，这个方法是得不到某个元素就等待一段时间，直到拿到某个元素位置。\n\n注意：在使用隐式等待的时候，实际上浏览器会在你自己设定的时间内不断的刷新页面去寻找我们需要的元素 他是全局等待。是对页面中的所有元素设置加载时间。\n\n隐式等待可以理解成在规定的时间范围内，浏览器在不停的刷新页面，直到找到相关元素提前结束等待。如果超出了设置时间还未找到定位元素则抛出异常。但如果页面本身包含一个超大视频之类的文件，就算我们需要定位的元素在最开始已经加载出来，却依旧要等待所有文件加载结束之后，脚本才能继续执行，依旧算是有些弊端。\n\nimplicitly_wait(最大等待时长)默认参数的单位为秒。如果在代码中你设置了隐式等待时长为10秒，首先这10秒并非一个固定的等待时间，它并不影响脚本的执行速度。其次，它并不针对页面上的某一元素进行等待。当脚本执行到某个元素定位时，如果元素可以定位，则继续执行，如果元素定位不到，则它将以轮询的方式不断地判断元素是否被定位到。假设在第六秒定位到了元素则继续执行，若直到超出设置的时长10秒还没有定位到元素，则抛出异常。\n\n缺点：隐式等待对于有些条件无法生效，比如url的改变，窗口的延迟新增，动态属性延迟加载……\n\n## WebDriverWait()：显示等待\n\n```python\nfrom selenium.webdriver.support.ui import WebDriverWait\n\"\"\"程序代码块\"\"\"\nwait = WebDriverWait(driver, 10)\nwait.until(EC.presence_of_element_located((By.ID, 'XXX')))\n```\n\n显示等待是Selenium客户可以使用的命令式过程语言。\n\n主要思想是最长等待n秒，n秒内每隔一段时间去检查需要定位的元素是否存在（默认检测频率为0.5s），若存在则提前结束等待。若超时未找到则报错。默认抛出异常为：NoSuchElementException。\n\n这种等待比隐性等待更智能了一些，无视整个页面的加载，只要需要的元素存在了，就结束等待。显示等待不仅针对元素定位有效，而且可以针对某种行为（url的改变，属性的延迟加载）看它是否具备了一定的特征，就开始有所动作了。\n\n函数详细介绍：\n\n`WebDriverWait(driver, timeout, poll_frequency=0.5, ignored_exceptions=None)`\n\n- driver：浏览器驱动\n- timeout：最长等待时间，默认以秒为单位\n- poll_frequency：监测的时间间隔，默认为0.5秒\n- ignored_exceptions：超时后的异常信息，默认情况下抛NoSuchElementException异常\n\nWebDriverWait一般有 until 和 until_not 方法配合使用\n\n- until(method,message)\n- until_not(method ,message)\n\n------\n\n# 终端打印 判断函数是否完整执行\n\n对于强迫症的我，会抓住很多细枝末节的地方挑刺，webhis测试脚本运行主要是通过调用function.py下记录的各个模块函数来进行的，而又由于python逐行逐句执行的特性，在function.py下每个函数末尾增加如下代码：\n\n```python\nimport inspect\n\n...\nif True:\n        function_name = inspect.currentframe().f_code.co_name\n        print(f\"函数 {function_name} 执行完成\")\n```\n\n脚本执行过程中，某函数执行完成后，编译器终端打印：“函数XXX执行完成”，以助于排查脚本报错时具体是哪个函数模块的问题。\n\n```markdown\nPython 的 inspect 模块提供了一些函数，用于获取活动对象（如函数、类、方法）的信息。这些函数可以帮助查看对象的内部结构，了解它们的工作原理。\n\n以下是 inspect 模块的一些常用函数：\n\n- inspect.getmembers(object, predicate=None): 返回一个包含对象的所有成员的列表，每个成员都是一个 (name, value) 对的形式。如果提供了 predicate 参数，那么只有 predicate(value) 为 True 的成员才会被返回。\n\n- inspect.getdoc(object): 返回对象的文档字符串。\n\n- inspect.getsource(object): 返回对象的源代码（如果可用）。\n\n- inspect.getfile(object): 返回定义对象的源文件的路径（如果可用）。\n\n- inspect.currentframe(): 返回当前的栈帧。\n\n我的代码中，inspect.currentframe().f_code.co_name 被用来获取当前函数的名字。inspect.currentframe() 返回当前的栈帧，.f_code 返回这个栈帧的代码对象，.co_name 返回这个代码对象的名字，也就是当前函数的名字。\n```\n\n------\n\n# try-except校验 判断不定出现弹窗\n\nwebhis医嘱开立过程中，有重复医嘱是否开立判断校验。\n\n- 为患者开立某pickshell医嘱时，当其医嘱列表存在该医嘱，会有“确认是否开立重复医嘱”的弹窗校验\n- 医嘱保存时，有“是否保存重复医嘱”的弹窗校验\n- WPB选中患者，进行某些操作时（如挂号），会对患者基本信息校验，（例如身份证错误）\n\n故可在对应脚本代码位置增加try...expect...方法的校验\n\n```python\n\"\"\"-----患者当前医嘱列表重复开立弹窗判断-----\"\"\"\ntry:\n    wait = WebDriverWait(driver, 3)\n    wait.until(EC.presence_of_element_located((By.XPATH, \"//*[text()='已经开立，是否继续？']\")))\n\n    confirm_button = driver.find_element(by=By.XPATH, value=\"//*[text()='确定']\")\n    confirm_button.click()\nexcept:\n    print(\"---该医嘱可为此患者开立---\")\n    pass\n\n\n\"\"\"-----患者医嘱重复预警弹窗判断-----\"\"\"\ntry:\n    wait = WebDriverWait(driver, 3)\n    wait.until(EC.presence_of_element_located((By.XPATH, '//*[@id=\"root\"]/div[2]/div/div/div/div[2]/div/div[2]/div/div/div[2]/div/div[1]/div/div/div[2]')))\n\n    confirm_button = driver.find_element(by=By.XPATH, value=\"//*[text()='强制保存']\")\n    confirm_button.click()\nexcept:\n    print(\"---该医嘱可为此患者开立---\")\n    pass\n```\n\n当脚本执行过程中 有如上 校验弹窗出现，可以通过显式等待元素定位的方法，对弹窗进行模拟操作以关闭弹窗，进行后续脚本代码的执行。\n\n如果有需要的话，可以增加expect抛出异常方法。\n\n------\n\n","source":"_posts/selenium自动化测试.md","raw":"---\ntitle: selenium自动化测试\nabbrlink: 3cb24475\ndate: 2022-09-14 13:21:11\ntags: 1\n---\n\n**Python selenium UI自动化测试技术分享**\n\n<!--more-->\n\n# 初入URL页面即警告框弹窗的解决办法\n\n```python\noptions = webdriver.ChromeOptions()\noptions.add_experimental_option('excludeSwitches', ['enable-logging'])\noptions.add_experimental_option(\"excludeSwitches\", [\"enable-automation\"])\noptions.add_experimental_option(\"useAutomationExtension\", 'False')\noptions.add_argument(\"--user-data-dir=\" + str(pathlib.Path.home()) + r\"\\AppData\\Local\\Google\\Chrome\\seleniumTest\")\n\n# 创建 WebDriver 对象，指明使用chrome浏览器驱动\ndriver = webdriver.Chrome(service=Service(r'C:\\Program Files\\Google\\Chrome\\Application\\chromedriver.exe'), \n                          options=options)  \n```\n\n以Chrome浏览器调用为例，service处路径规范为本地chrome文件夹内部的chromedriver绝对路径，options是对chromedriver所调用的chrome浏览器基本设置的修改。\n\n浏览器URL搜索栏搜索 'chrome://flags'，如下图Insecure origins trested as secure处添加需要使用的测试网址url，英文逗号分隔，置为Enabled重启浏览器即可。\n\n{% asset_img flags设置.png  %}\n\n------\n\n# Selenium的三种等待方法\n\n## sleep()：强制等待\n\n```python\nimport time\n\"\"\"程序代码块\"\"\"\ntime.sleep(N)  # N为整数, 意为编译器运行至该行，强制暂停等待加载N秒\n```\n\n执行 sleep()后线程休眠。\n\n固定的等待，常用于演示，调试，初学者观察效果。实际项目中不建议使用这种等待，由于网络的好坏导致等待时间不确定，如果设置的等待时间不足够长，元素找不到会报错，如果设置的等待时间过长，保证元素可以找到，但其实可能用不了这么久。这种等待方法十分笨拙，无论页面加载得如何，都必须等待n秒，可以说是十分不智能了。\n\n但是强制等待也不是一无是处，比如界面操作完要关闭，但是最后你提交了一些数据，如果非常快的退出浏览器会丢失请求。那就需要强制等待一定时间，这个跟隐式等待还是显示等待都无关。再比如当我们没有找到元素而报错，定位问题时，可以先用sleep()来尝试一下，确定是否是由于等待时间的问题没有找到元素，如果是的话就可以用显示等待来代替。\n\n## implicitly_wait()：隐式等待\n\n```python\nfrom selenium import webdriver\n\"\"\"程序代码块\"\"\"\ndriver = webdriver.Chrome(...)\ndriver.implicitly_wait(N)  # N为整数, 意为编译器运行至该行，隐式等待N秒\n```\n\n原理：隐式等待，就是在创建driver时，为浏览器对象创建一个等待时间，这个方法是得不到某个元素就等待一段时间，直到拿到某个元素位置。\n\n注意：在使用隐式等待的时候，实际上浏览器会在你自己设定的时间内不断的刷新页面去寻找我们需要的元素 他是全局等待。是对页面中的所有元素设置加载时间。\n\n隐式等待可以理解成在规定的时间范围内，浏览器在不停的刷新页面，直到找到相关元素提前结束等待。如果超出了设置时间还未找到定位元素则抛出异常。但如果页面本身包含一个超大视频之类的文件，就算我们需要定位的元素在最开始已经加载出来，却依旧要等待所有文件加载结束之后，脚本才能继续执行，依旧算是有些弊端。\n\nimplicitly_wait(最大等待时长)默认参数的单位为秒。如果在代码中你设置了隐式等待时长为10秒，首先这10秒并非一个固定的等待时间，它并不影响脚本的执行速度。其次，它并不针对页面上的某一元素进行等待。当脚本执行到某个元素定位时，如果元素可以定位，则继续执行，如果元素定位不到，则它将以轮询的方式不断地判断元素是否被定位到。假设在第六秒定位到了元素则继续执行，若直到超出设置的时长10秒还没有定位到元素，则抛出异常。\n\n缺点：隐式等待对于有些条件无法生效，比如url的改变，窗口的延迟新增，动态属性延迟加载……\n\n## WebDriverWait()：显示等待\n\n```python\nfrom selenium.webdriver.support.ui import WebDriverWait\n\"\"\"程序代码块\"\"\"\nwait = WebDriverWait(driver, 10)\nwait.until(EC.presence_of_element_located((By.ID, 'XXX')))\n```\n\n显示等待是Selenium客户可以使用的命令式过程语言。\n\n主要思想是最长等待n秒，n秒内每隔一段时间去检查需要定位的元素是否存在（默认检测频率为0.5s），若存在则提前结束等待。若超时未找到则报错。默认抛出异常为：NoSuchElementException。\n\n这种等待比隐性等待更智能了一些，无视整个页面的加载，只要需要的元素存在了，就结束等待。显示等待不仅针对元素定位有效，而且可以针对某种行为（url的改变，属性的延迟加载）看它是否具备了一定的特征，就开始有所动作了。\n\n函数详细介绍：\n\n`WebDriverWait(driver, timeout, poll_frequency=0.5, ignored_exceptions=None)`\n\n- driver：浏览器驱动\n- timeout：最长等待时间，默认以秒为单位\n- poll_frequency：监测的时间间隔，默认为0.5秒\n- ignored_exceptions：超时后的异常信息，默认情况下抛NoSuchElementException异常\n\nWebDriverWait一般有 until 和 until_not 方法配合使用\n\n- until(method,message)\n- until_not(method ,message)\n\n------\n\n# 终端打印 判断函数是否完整执行\n\n对于强迫症的我，会抓住很多细枝末节的地方挑刺，webhis测试脚本运行主要是通过调用function.py下记录的各个模块函数来进行的，而又由于python逐行逐句执行的特性，在function.py下每个函数末尾增加如下代码：\n\n```python\nimport inspect\n\n...\nif True:\n        function_name = inspect.currentframe().f_code.co_name\n        print(f\"函数 {function_name} 执行完成\")\n```\n\n脚本执行过程中，某函数执行完成后，编译器终端打印：“函数XXX执行完成”，以助于排查脚本报错时具体是哪个函数模块的问题。\n\n```markdown\nPython 的 inspect 模块提供了一些函数，用于获取活动对象（如函数、类、方法）的信息。这些函数可以帮助查看对象的内部结构，了解它们的工作原理。\n\n以下是 inspect 模块的一些常用函数：\n\n- inspect.getmembers(object, predicate=None): 返回一个包含对象的所有成员的列表，每个成员都是一个 (name, value) 对的形式。如果提供了 predicate 参数，那么只有 predicate(value) 为 True 的成员才会被返回。\n\n- inspect.getdoc(object): 返回对象的文档字符串。\n\n- inspect.getsource(object): 返回对象的源代码（如果可用）。\n\n- inspect.getfile(object): 返回定义对象的源文件的路径（如果可用）。\n\n- inspect.currentframe(): 返回当前的栈帧。\n\n我的代码中，inspect.currentframe().f_code.co_name 被用来获取当前函数的名字。inspect.currentframe() 返回当前的栈帧，.f_code 返回这个栈帧的代码对象，.co_name 返回这个代码对象的名字，也就是当前函数的名字。\n```\n\n------\n\n# try-except校验 判断不定出现弹窗\n\nwebhis医嘱开立过程中，有重复医嘱是否开立判断校验。\n\n- 为患者开立某pickshell医嘱时，当其医嘱列表存在该医嘱，会有“确认是否开立重复医嘱”的弹窗校验\n- 医嘱保存时，有“是否保存重复医嘱”的弹窗校验\n- WPB选中患者，进行某些操作时（如挂号），会对患者基本信息校验，（例如身份证错误）\n\n故可在对应脚本代码位置增加try...expect...方法的校验\n\n```python\n\"\"\"-----患者当前医嘱列表重复开立弹窗判断-----\"\"\"\ntry:\n    wait = WebDriverWait(driver, 3)\n    wait.until(EC.presence_of_element_located((By.XPATH, \"//*[text()='已经开立，是否继续？']\")))\n\n    confirm_button = driver.find_element(by=By.XPATH, value=\"//*[text()='确定']\")\n    confirm_button.click()\nexcept:\n    print(\"---该医嘱可为此患者开立---\")\n    pass\n\n\n\"\"\"-----患者医嘱重复预警弹窗判断-----\"\"\"\ntry:\n    wait = WebDriverWait(driver, 3)\n    wait.until(EC.presence_of_element_located((By.XPATH, '//*[@id=\"root\"]/div[2]/div/div/div/div[2]/div/div[2]/div/div/div[2]/div/div[1]/div/div/div[2]')))\n\n    confirm_button = driver.find_element(by=By.XPATH, value=\"//*[text()='强制保存']\")\n    confirm_button.click()\nexcept:\n    print(\"---该医嘱可为此患者开立---\")\n    pass\n```\n\n当脚本执行过程中 有如上 校验弹窗出现，可以通过显式等待元素定位的方法，对弹窗进行模拟操作以关闭弹窗，进行后续脚本代码的执行。\n\n如果有需要的话，可以增加expect抛出异常方法。\n\n------\n\n","slug":"selenium自动化测试","published":1,"updated":"2024-09-26T11:28:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm1rz0oez000h18ql6h6bhwc4","content":"<p><strong>Python selenium UI自动化测试技术分享</strong></p>\n<span id=\"more\"></span>\n\n<h1 id=\"初入URL页面即警告框弹窗的解决办法\"><a href=\"#初入URL页面即警告框弹窗的解决办法\" class=\"headerlink\" title=\"初入URL页面即警告框弹窗的解决办法\"></a>初入URL页面即警告框弹窗的解决办法</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">options = webdriver.ChromeOptions()</span><br><span class=\"line\">options.add_experimental_option(<span class=\"string\">&#x27;excludeSwitches&#x27;</span>, [<span class=\"string\">&#x27;enable-logging&#x27;</span>])</span><br><span class=\"line\">options.add_experimental_option(<span class=\"string\">&quot;excludeSwitches&quot;</span>, [<span class=\"string\">&quot;enable-automation&quot;</span>])</span><br><span class=\"line\">options.add_experimental_option(<span class=\"string\">&quot;useAutomationExtension&quot;</span>, <span class=\"string\">&#x27;False&#x27;</span>)</span><br><span class=\"line\">options.add_argument(<span class=\"string\">&quot;--user-data-dir=&quot;</span> + <span class=\"built_in\">str</span>(pathlib.Path.home()) + <span class=\"string\">r&quot;\\AppData\\Local\\Google\\Chrome\\seleniumTest&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建 WebDriver 对象，指明使用chrome浏览器驱动</span></span><br><span class=\"line\">driver = webdriver.Chrome(service=Service(<span class=\"string\">r&#x27;C:\\Program Files\\Google\\Chrome\\Application\\chromedriver.exe&#x27;</span>), </span><br><span class=\"line\">                          options=options)  </span><br></pre></td></tr></table></figure>\n\n<p>以Chrome浏览器调用为例，service处路径规范为本地chrome文件夹内部的chromedriver绝对路径，options是对chromedriver所调用的chrome浏览器基本设置的修改。</p>\n<p>浏览器URL搜索栏搜索 ‘chrome:&#x2F;&#x2F;flags’，如下图Insecure origins trested as secure处添加需要使用的测试网址url，英文逗号分隔，置为Enabled重启浏览器即可。</p>\n<img src=\"/posts/3cb24475/flags%E8%AE%BE%E7%BD%AE.png\" class=\"\">\n\n<hr>\n<h1 id=\"Selenium的三种等待方法\"><a href=\"#Selenium的三种等待方法\" class=\"headerlink\" title=\"Selenium的三种等待方法\"></a>Selenium的三种等待方法</h1><h2 id=\"sleep-：强制等待\"><a href=\"#sleep-：强制等待\" class=\"headerlink\" title=\"sleep()：强制等待\"></a>sleep()：强制等待</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;程序代码块&quot;&quot;&quot;</span></span><br><span class=\"line\">time.sleep(N)  <span class=\"comment\"># N为整数, 意为编译器运行至该行，强制暂停等待加载N秒</span></span><br></pre></td></tr></table></figure>\n\n<p>执行 sleep()后线程休眠。</p>\n<p>固定的等待，常用于演示，调试，初学者观察效果。实际项目中不建议使用这种等待，由于网络的好坏导致等待时间不确定，如果设置的等待时间不足够长，元素找不到会报错，如果设置的等待时间过长，保证元素可以找到，但其实可能用不了这么久。这种等待方法十分笨拙，无论页面加载得如何，都必须等待n秒，可以说是十分不智能了。</p>\n<p>但是强制等待也不是一无是处，比如界面操作完要关闭，但是最后你提交了一些数据，如果非常快的退出浏览器会丢失请求。那就需要强制等待一定时间，这个跟隐式等待还是显示等待都无关。再比如当我们没有找到元素而报错，定位问题时，可以先用sleep()来尝试一下，确定是否是由于等待时间的问题没有找到元素，如果是的话就可以用显示等待来代替。</p>\n<h2 id=\"implicitly-wait-：隐式等待\"><a href=\"#implicitly-wait-：隐式等待\" class=\"headerlink\" title=\"implicitly_wait()：隐式等待\"></a>implicitly_wait()：隐式等待</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;程序代码块&quot;&quot;&quot;</span></span><br><span class=\"line\">driver = webdriver.Chrome(...)</span><br><span class=\"line\">driver.implicitly_wait(N)  <span class=\"comment\"># N为整数, 意为编译器运行至该行，隐式等待N秒</span></span><br></pre></td></tr></table></figure>\n\n<p>原理：隐式等待，就是在创建driver时，为浏览器对象创建一个等待时间，这个方法是得不到某个元素就等待一段时间，直到拿到某个元素位置。</p>\n<p>注意：在使用隐式等待的时候，实际上浏览器会在你自己设定的时间内不断的刷新页面去寻找我们需要的元素 他是全局等待。是对页面中的所有元素设置加载时间。</p>\n<p>隐式等待可以理解成在规定的时间范围内，浏览器在不停的刷新页面，直到找到相关元素提前结束等待。如果超出了设置时间还未找到定位元素则抛出异常。但如果页面本身包含一个超大视频之类的文件，就算我们需要定位的元素在最开始已经加载出来，却依旧要等待所有文件加载结束之后，脚本才能继续执行，依旧算是有些弊端。</p>\n<p>implicitly_wait(最大等待时长)默认参数的单位为秒。如果在代码中你设置了隐式等待时长为10秒，首先这10秒并非一个固定的等待时间，它并不影响脚本的执行速度。其次，它并不针对页面上的某一元素进行等待。当脚本执行到某个元素定位时，如果元素可以定位，则继续执行，如果元素定位不到，则它将以轮询的方式不断地判断元素是否被定位到。假设在第六秒定位到了元素则继续执行，若直到超出设置的时长10秒还没有定位到元素，则抛出异常。</p>\n<p>缺点：隐式等待对于有些条件无法生效，比如url的改变，窗口的延迟新增，动态属性延迟加载……</p>\n<h2 id=\"WebDriverWait-：显示等待\"><a href=\"#WebDriverWait-：显示等待\" class=\"headerlink\" title=\"WebDriverWait()：显示等待\"></a>WebDriverWait()：显示等待</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.support.ui <span class=\"keyword\">import</span> WebDriverWait</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;程序代码块&quot;&quot;&quot;</span></span><br><span class=\"line\">wait = WebDriverWait(driver, <span class=\"number\">10</span>)</span><br><span class=\"line\">wait.until(EC.presence_of_element_located((By.ID, <span class=\"string\">&#x27;XXX&#x27;</span>)))</span><br></pre></td></tr></table></figure>\n\n<p>显示等待是Selenium客户可以使用的命令式过程语言。</p>\n<p>主要思想是最长等待n秒，n秒内每隔一段时间去检查需要定位的元素是否存在（默认检测频率为0.5s），若存在则提前结束等待。若超时未找到则报错。默认抛出异常为：NoSuchElementException。</p>\n<p>这种等待比隐性等待更智能了一些，无视整个页面的加载，只要需要的元素存在了，就结束等待。显示等待不仅针对元素定位有效，而且可以针对某种行为（url的改变，属性的延迟加载）看它是否具备了一定的特征，就开始有所动作了。</p>\n<p>函数详细介绍：</p>\n<p><code>WebDriverWait(driver, timeout, poll_frequency=0.5, ignored_exceptions=None)</code></p>\n<ul>\n<li>driver：浏览器驱动</li>\n<li>timeout：最长等待时间，默认以秒为单位</li>\n<li>poll_frequency：监测的时间间隔，默认为0.5秒</li>\n<li>ignored_exceptions：超时后的异常信息，默认情况下抛NoSuchElementException异常</li>\n</ul>\n<p>WebDriverWait一般有 until 和 until_not 方法配合使用</p>\n<ul>\n<li>until(method,message)</li>\n<li>until_not(method ,message)</li>\n</ul>\n<hr>\n<h1 id=\"终端打印-判断函数是否完整执行\"><a href=\"#终端打印-判断函数是否完整执行\" class=\"headerlink\" title=\"终端打印 判断函数是否完整执行\"></a>终端打印 判断函数是否完整执行</h1><p>对于强迫症的我，会抓住很多细枝末节的地方挑刺，webhis测试脚本运行主要是通过调用function.py下记录的各个模块函数来进行的，而又由于python逐行逐句执行的特性，在function.py下每个函数末尾增加如下代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> inspect</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        function_name = inspect.currentframe().f_code.co_name</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;函数 <span class=\"subst\">&#123;function_name&#125;</span> 执行完成&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>脚本执行过程中，某函数执行完成后，编译器终端打印：“函数XXX执行完成”，以助于排查脚本报错时具体是哪个函数模块的问题。</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Python 的 inspect 模块提供了一些函数，用于获取活动对象（如函数、类、方法）的信息。这些函数可以帮助查看对象的内部结构，了解它们的工作原理。</span><br><span class=\"line\"></span><br><span class=\"line\">以下是 inspect 模块的一些常用函数：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> inspect.getmembers(object, predicate=None): 返回一个包含对象的所有成员的列表，每个成员都是一个 (name, value) 对的形式。如果提供了 predicate 参数，那么只有 predicate(value) 为 True 的成员才会被返回。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> inspect.getdoc(object): 返回对象的文档字符串。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> inspect.getsource(object): 返回对象的源代码（如果可用）。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> inspect.getfile(object): 返回定义对象的源文件的路径（如果可用）。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> inspect.currentframe(): 返回当前的栈帧。</span><br><span class=\"line\"></span><br><span class=\"line\">我的代码中，inspect.currentframe().f<span class=\"emphasis\">_code.co_</span>name 被用来获取当前函数的名字。inspect.currentframe() 返回当前的栈帧，.f<span class=\"emphasis\">_code 返回这个栈帧的代码对象，.co_</span>name 返回这个代码对象的名字，也就是当前函数的名字。</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"try-except校验-判断不定出现弹窗\"><a href=\"#try-except校验-判断不定出现弹窗\" class=\"headerlink\" title=\"try-except校验 判断不定出现弹窗\"></a>try-except校验 判断不定出现弹窗</h1><p>webhis医嘱开立过程中，有重复医嘱是否开立判断校验。</p>\n<ul>\n<li>为患者开立某pickshell医嘱时，当其医嘱列表存在该医嘱，会有“确认是否开立重复医嘱”的弹窗校验</li>\n<li>医嘱保存时，有“是否保存重复医嘱”的弹窗校验</li>\n<li>WPB选中患者，进行某些操作时（如挂号），会对患者基本信息校验，（例如身份证错误）</li>\n</ul>\n<p>故可在对应脚本代码位置增加try…expect…方法的校验</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;-----患者当前医嘱列表重复开立弹窗判断-----&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    wait = WebDriverWait(driver, <span class=\"number\">3</span>)</span><br><span class=\"line\">    wait.until(EC.presence_of_element_located((By.XPATH, <span class=\"string\">&quot;//*[text()=&#x27;已经开立，是否继续？&#x27;]&quot;</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">    confirm_button = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[text()=&#x27;确定&#x27;]&quot;</span>)</span><br><span class=\"line\">    confirm_button.click()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;---该医嘱可为此患者开立---&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;-----患者医嘱重复预警弹窗判断-----&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    wait = WebDriverWait(driver, <span class=\"number\">3</span>)</span><br><span class=\"line\">    wait.until(EC.presence_of_element_located((By.XPATH, <span class=\"string\">&#x27;//*[@id=&quot;root&quot;]/div[2]/div/div/div/div[2]/div/div[2]/div/div/div[2]/div/div[1]/div/div/div[2]&#x27;</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">    confirm_button = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[text()=&#x27;强制保存&#x27;]&quot;</span>)</span><br><span class=\"line\">    confirm_button.click()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;---该医嘱可为此患者开立---&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n\n<p>当脚本执行过程中 有如上 校验弹窗出现，可以通过显式等待元素定位的方法，对弹窗进行模拟操作以关闭弹窗，进行后续脚本代码的执行。</p>\n<p>如果有需要的话，可以增加expect抛出异常方法。</p>\n<hr>\n","site":{"data":{}},"length":4695,"excerpt":"<p><strong>Python selenium UI自动化测试技术分享</strong></p>","more":"<h1 id=\"初入URL页面即警告框弹窗的解决办法\"><a href=\"#初入URL页面即警告框弹窗的解决办法\" class=\"headerlink\" title=\"初入URL页面即警告框弹窗的解决办法\"></a>初入URL页面即警告框弹窗的解决办法</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">options = webdriver.ChromeOptions()</span><br><span class=\"line\">options.add_experimental_option(<span class=\"string\">&#x27;excludeSwitches&#x27;</span>, [<span class=\"string\">&#x27;enable-logging&#x27;</span>])</span><br><span class=\"line\">options.add_experimental_option(<span class=\"string\">&quot;excludeSwitches&quot;</span>, [<span class=\"string\">&quot;enable-automation&quot;</span>])</span><br><span class=\"line\">options.add_experimental_option(<span class=\"string\">&quot;useAutomationExtension&quot;</span>, <span class=\"string\">&#x27;False&#x27;</span>)</span><br><span class=\"line\">options.add_argument(<span class=\"string\">&quot;--user-data-dir=&quot;</span> + <span class=\"built_in\">str</span>(pathlib.Path.home()) + <span class=\"string\">r&quot;\\AppData\\Local\\Google\\Chrome\\seleniumTest&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建 WebDriver 对象，指明使用chrome浏览器驱动</span></span><br><span class=\"line\">driver = webdriver.Chrome(service=Service(<span class=\"string\">r&#x27;C:\\Program Files\\Google\\Chrome\\Application\\chromedriver.exe&#x27;</span>), </span><br><span class=\"line\">                          options=options)  </span><br></pre></td></tr></table></figure>\n\n<p>以Chrome浏览器调用为例，service处路径规范为本地chrome文件夹内部的chromedriver绝对路径，options是对chromedriver所调用的chrome浏览器基本设置的修改。</p>\n<p>浏览器URL搜索栏搜索 ‘chrome:&#x2F;&#x2F;flags’，如下图Insecure origins trested as secure处添加需要使用的测试网址url，英文逗号分隔，置为Enabled重启浏览器即可。</p>\n<img src=\"/posts/3cb24475/flags%E8%AE%BE%E7%BD%AE.png\" class=\"\">\n\n<hr>\n<h1 id=\"Selenium的三种等待方法\"><a href=\"#Selenium的三种等待方法\" class=\"headerlink\" title=\"Selenium的三种等待方法\"></a>Selenium的三种等待方法</h1><h2 id=\"sleep-：强制等待\"><a href=\"#sleep-：强制等待\" class=\"headerlink\" title=\"sleep()：强制等待\"></a>sleep()：强制等待</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;程序代码块&quot;&quot;&quot;</span></span><br><span class=\"line\">time.sleep(N)  <span class=\"comment\"># N为整数, 意为编译器运行至该行，强制暂停等待加载N秒</span></span><br></pre></td></tr></table></figure>\n\n<p>执行 sleep()后线程休眠。</p>\n<p>固定的等待，常用于演示，调试，初学者观察效果。实际项目中不建议使用这种等待，由于网络的好坏导致等待时间不确定，如果设置的等待时间不足够长，元素找不到会报错，如果设置的等待时间过长，保证元素可以找到，但其实可能用不了这么久。这种等待方法十分笨拙，无论页面加载得如何，都必须等待n秒，可以说是十分不智能了。</p>\n<p>但是强制等待也不是一无是处，比如界面操作完要关闭，但是最后你提交了一些数据，如果非常快的退出浏览器会丢失请求。那就需要强制等待一定时间，这个跟隐式等待还是显示等待都无关。再比如当我们没有找到元素而报错，定位问题时，可以先用sleep()来尝试一下，确定是否是由于等待时间的问题没有找到元素，如果是的话就可以用显示等待来代替。</p>\n<h2 id=\"implicitly-wait-：隐式等待\"><a href=\"#implicitly-wait-：隐式等待\" class=\"headerlink\" title=\"implicitly_wait()：隐式等待\"></a>implicitly_wait()：隐式等待</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;程序代码块&quot;&quot;&quot;</span></span><br><span class=\"line\">driver = webdriver.Chrome(...)</span><br><span class=\"line\">driver.implicitly_wait(N)  <span class=\"comment\"># N为整数, 意为编译器运行至该行，隐式等待N秒</span></span><br></pre></td></tr></table></figure>\n\n<p>原理：隐式等待，就是在创建driver时，为浏览器对象创建一个等待时间，这个方法是得不到某个元素就等待一段时间，直到拿到某个元素位置。</p>\n<p>注意：在使用隐式等待的时候，实际上浏览器会在你自己设定的时间内不断的刷新页面去寻找我们需要的元素 他是全局等待。是对页面中的所有元素设置加载时间。</p>\n<p>隐式等待可以理解成在规定的时间范围内，浏览器在不停的刷新页面，直到找到相关元素提前结束等待。如果超出了设置时间还未找到定位元素则抛出异常。但如果页面本身包含一个超大视频之类的文件，就算我们需要定位的元素在最开始已经加载出来，却依旧要等待所有文件加载结束之后，脚本才能继续执行，依旧算是有些弊端。</p>\n<p>implicitly_wait(最大等待时长)默认参数的单位为秒。如果在代码中你设置了隐式等待时长为10秒，首先这10秒并非一个固定的等待时间，它并不影响脚本的执行速度。其次，它并不针对页面上的某一元素进行等待。当脚本执行到某个元素定位时，如果元素可以定位，则继续执行，如果元素定位不到，则它将以轮询的方式不断地判断元素是否被定位到。假设在第六秒定位到了元素则继续执行，若直到超出设置的时长10秒还没有定位到元素，则抛出异常。</p>\n<p>缺点：隐式等待对于有些条件无法生效，比如url的改变，窗口的延迟新增，动态属性延迟加载……</p>\n<h2 id=\"WebDriverWait-：显示等待\"><a href=\"#WebDriverWait-：显示等待\" class=\"headerlink\" title=\"WebDriverWait()：显示等待\"></a>WebDriverWait()：显示等待</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.support.ui <span class=\"keyword\">import</span> WebDriverWait</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;程序代码块&quot;&quot;&quot;</span></span><br><span class=\"line\">wait = WebDriverWait(driver, <span class=\"number\">10</span>)</span><br><span class=\"line\">wait.until(EC.presence_of_element_located((By.ID, <span class=\"string\">&#x27;XXX&#x27;</span>)))</span><br></pre></td></tr></table></figure>\n\n<p>显示等待是Selenium客户可以使用的命令式过程语言。</p>\n<p>主要思想是最长等待n秒，n秒内每隔一段时间去检查需要定位的元素是否存在（默认检测频率为0.5s），若存在则提前结束等待。若超时未找到则报错。默认抛出异常为：NoSuchElementException。</p>\n<p>这种等待比隐性等待更智能了一些，无视整个页面的加载，只要需要的元素存在了，就结束等待。显示等待不仅针对元素定位有效，而且可以针对某种行为（url的改变，属性的延迟加载）看它是否具备了一定的特征，就开始有所动作了。</p>\n<p>函数详细介绍：</p>\n<p><code>WebDriverWait(driver, timeout, poll_frequency=0.5, ignored_exceptions=None)</code></p>\n<ul>\n<li>driver：浏览器驱动</li>\n<li>timeout：最长等待时间，默认以秒为单位</li>\n<li>poll_frequency：监测的时间间隔，默认为0.5秒</li>\n<li>ignored_exceptions：超时后的异常信息，默认情况下抛NoSuchElementException异常</li>\n</ul>\n<p>WebDriverWait一般有 until 和 until_not 方法配合使用</p>\n<ul>\n<li>until(method,message)</li>\n<li>until_not(method ,message)</li>\n</ul>\n<hr>\n<h1 id=\"终端打印-判断函数是否完整执行\"><a href=\"#终端打印-判断函数是否完整执行\" class=\"headerlink\" title=\"终端打印 判断函数是否完整执行\"></a>终端打印 判断函数是否完整执行</h1><p>对于强迫症的我，会抓住很多细枝末节的地方挑刺，webhis测试脚本运行主要是通过调用function.py下记录的各个模块函数来进行的，而又由于python逐行逐句执行的特性，在function.py下每个函数末尾增加如下代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> inspect</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        function_name = inspect.currentframe().f_code.co_name</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;函数 <span class=\"subst\">&#123;function_name&#125;</span> 执行完成&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>脚本执行过程中，某函数执行完成后，编译器终端打印：“函数XXX执行完成”，以助于排查脚本报错时具体是哪个函数模块的问题。</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Python 的 inspect 模块提供了一些函数，用于获取活动对象（如函数、类、方法）的信息。这些函数可以帮助查看对象的内部结构，了解它们的工作原理。</span><br><span class=\"line\"></span><br><span class=\"line\">以下是 inspect 模块的一些常用函数：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> inspect.getmembers(object, predicate=None): 返回一个包含对象的所有成员的列表，每个成员都是一个 (name, value) 对的形式。如果提供了 predicate 参数，那么只有 predicate(value) 为 True 的成员才会被返回。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> inspect.getdoc(object): 返回对象的文档字符串。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> inspect.getsource(object): 返回对象的源代码（如果可用）。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> inspect.getfile(object): 返回定义对象的源文件的路径（如果可用）。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> inspect.currentframe(): 返回当前的栈帧。</span><br><span class=\"line\"></span><br><span class=\"line\">我的代码中，inspect.currentframe().f<span class=\"emphasis\">_code.co_</span>name 被用来获取当前函数的名字。inspect.currentframe() 返回当前的栈帧，.f<span class=\"emphasis\">_code 返回这个栈帧的代码对象，.co_</span>name 返回这个代码对象的名字，也就是当前函数的名字。</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"try-except校验-判断不定出现弹窗\"><a href=\"#try-except校验-判断不定出现弹窗\" class=\"headerlink\" title=\"try-except校验 判断不定出现弹窗\"></a>try-except校验 判断不定出现弹窗</h1><p>webhis医嘱开立过程中，有重复医嘱是否开立判断校验。</p>\n<ul>\n<li>为患者开立某pickshell医嘱时，当其医嘱列表存在该医嘱，会有“确认是否开立重复医嘱”的弹窗校验</li>\n<li>医嘱保存时，有“是否保存重复医嘱”的弹窗校验</li>\n<li>WPB选中患者，进行某些操作时（如挂号），会对患者基本信息校验，（例如身份证错误）</li>\n</ul>\n<p>故可在对应脚本代码位置增加try…expect…方法的校验</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;-----患者当前医嘱列表重复开立弹窗判断-----&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    wait = WebDriverWait(driver, <span class=\"number\">3</span>)</span><br><span class=\"line\">    wait.until(EC.presence_of_element_located((By.XPATH, <span class=\"string\">&quot;//*[text()=&#x27;已经开立，是否继续？&#x27;]&quot;</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">    confirm_button = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[text()=&#x27;确定&#x27;]&quot;</span>)</span><br><span class=\"line\">    confirm_button.click()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;---该医嘱可为此患者开立---&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;-----患者医嘱重复预警弹窗判断-----&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    wait = WebDriverWait(driver, <span class=\"number\">3</span>)</span><br><span class=\"line\">    wait.until(EC.presence_of_element_located((By.XPATH, <span class=\"string\">&#x27;//*[@id=&quot;root&quot;]/div[2]/div/div/div/div[2]/div/div[2]/div/div/div[2]/div/div[1]/div/div/div[2]&#x27;</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">    confirm_button = driver.find_element(by=By.XPATH, value=<span class=\"string\">&quot;//*[text()=&#x27;强制保存&#x27;]&quot;</span>)</span><br><span class=\"line\">    confirm_button.click()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;---该医嘱可为此患者开立---&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n\n<p>当脚本执行过程中 有如上 校验弹窗出现，可以通过显式等待元素定位的方法，对弹窗进行模拟操作以关闭弹窗，进行后续脚本代码的执行。</p>\n<p>如果有需要的话，可以增加expect抛出异常方法。</p>\n<hr>"},{"title":"数开-内外关联过滤条件置于on和where时结果差异","abbrlink":"2f22026c","date":"2023-05-26T10:17:24.000Z","_content":"\n**Join表关联on过滤与where过滤造成指标计算结果差异**\n\n<!--more-->\n\n项目中，结合精算师给的模板计算精算指标 prem 时尝试在Join on条件写入筛选条件。\n\n从测试环境数仓，ODS层客户投保记录表拿了500条数据，需要关联APP层客户投保详情记录表数据，（APP层粒度更高，记录除客户信息外的保险ID 投保时间等信息）。\n\n计算指标：first_prem 每个客户首年保费、total_prem 客户总交保费、first_of_total_prem 保费收入比\n\n测试数据 指标计算：\n\n```sql\nselect\n    prem_std,\n    least(\n        cast(ppp as int),\n        policy_year,\n        floor(months_between(elapse_date, t1.buy_datetime) / 12) + 1\n    ) as ppp_year\nfrom insurance_app.policy_result t1\nleft join insurance_ods.policy_surrender t2 on t1.pol_no = t2.pol_no\nwhere t1.month = '2021-04';\n```\n\n```sql\nselect\n    prem_std,\n    least(\n        cast(ppp as int),\n        policy_year,\n        floor(months_between(elapse_date, t1.buy_datetime) / 12) + 1\n    ) as ppp_year\nfrom insurance_app.policy_result t1\nleft join insurance_ods.policy_surrender t2 on t1.pol_no = t2.pol_no\nand t1.month = '2021-04'\n```\n\n{% asset_img 1.png 测试数据差异结果 %}\n\n正确结果应该是第一行数据，这个问题就对应上 SQL的外关联(left join | right join | full join)的特点：\n\n无论哪种外关联，都会将两表的并集，和主表的全部 取出，而 Join的 on 条件仅仅是对 Join 的匹配条件进行筛选过滤，where则是在两表关联完成以后，对关联后的所谓临时表数据进行过滤。\n\n**即，on 过滤条件 针对 连接时的匹配，关联后不会减少主表的行数，主表的所有记录均仍保留**\n\n**where 过滤条件 会作用于整个结果集，可以理解为 关联后的临时表 再过滤，故会再根据where条件筛选掉部分数据。**\n\n------\n\n项目保费指标 prem 是 数值结果计算，从数值上不够明显，下面举个简单的例子就好。\n\n{% asset_img 2.png 举个栗子 %}\n\n不加过滤条件 单独left join时:\n\n```sql\nSELECT e.emp_name, p.project_name\nFROM employees e\nLEFT JOIN projects p\nON e.emp_id = p.emp_id\n```\n\n| emp_name | project_name |\n| -------- | ------------ |\n| Alice    | Project A    |\n| Bob      | Project B    |\n| Bob      | Project C    |\n| Charlie  | NULL         |\n\non 上 加过滤条件时：\n\n```sql\nSELECT e.emp_name, p.project_name\nFROM employees e\nLEFT JOIN projects p\nON e.emp_id = p.emp_id AND p.project_name = 'Project A';\n```\n\n| emp_name | project_name |\n| -------- | ------------ |\n| Alice    | Project A    |\n| Bob      | NULL         |\n| Charlie  | NULL         |\n\nwhere 上 加过滤条件时：\n\n```sql\nSELECT e.emp_name, p.project_name\nFROM employees e\nLEFT JOIN projects p\nON e.emp_id = p.emp_id\nWHERE p.project_name = 'Project A';\n```\n\n| emp_name | project_name |\n| -------- | ------------ |\n| Alice    | Project A    |\n\n\n\n\n\n\n\n","source":"_posts/数开-内外关联过滤条件置于on和where时结果差异.md","raw":"---\ntitle: 数开-内外关联过滤条件置于on和where时结果差异\nabbrlink: 2f22026c\ndate: 2023-05-26 18:17:24\ntags:\n---\n\n**Join表关联on过滤与where过滤造成指标计算结果差异**\n\n<!--more-->\n\n项目中，结合精算师给的模板计算精算指标 prem 时尝试在Join on条件写入筛选条件。\n\n从测试环境数仓，ODS层客户投保记录表拿了500条数据，需要关联APP层客户投保详情记录表数据，（APP层粒度更高，记录除客户信息外的保险ID 投保时间等信息）。\n\n计算指标：first_prem 每个客户首年保费、total_prem 客户总交保费、first_of_total_prem 保费收入比\n\n测试数据 指标计算：\n\n```sql\nselect\n    prem_std,\n    least(\n        cast(ppp as int),\n        policy_year,\n        floor(months_between(elapse_date, t1.buy_datetime) / 12) + 1\n    ) as ppp_year\nfrom insurance_app.policy_result t1\nleft join insurance_ods.policy_surrender t2 on t1.pol_no = t2.pol_no\nwhere t1.month = '2021-04';\n```\n\n```sql\nselect\n    prem_std,\n    least(\n        cast(ppp as int),\n        policy_year,\n        floor(months_between(elapse_date, t1.buy_datetime) / 12) + 1\n    ) as ppp_year\nfrom insurance_app.policy_result t1\nleft join insurance_ods.policy_surrender t2 on t1.pol_no = t2.pol_no\nand t1.month = '2021-04'\n```\n\n{% asset_img 1.png 测试数据差异结果 %}\n\n正确结果应该是第一行数据，这个问题就对应上 SQL的外关联(left join | right join | full join)的特点：\n\n无论哪种外关联，都会将两表的并集，和主表的全部 取出，而 Join的 on 条件仅仅是对 Join 的匹配条件进行筛选过滤，where则是在两表关联完成以后，对关联后的所谓临时表数据进行过滤。\n\n**即，on 过滤条件 针对 连接时的匹配，关联后不会减少主表的行数，主表的所有记录均仍保留**\n\n**where 过滤条件 会作用于整个结果集，可以理解为 关联后的临时表 再过滤，故会再根据where条件筛选掉部分数据。**\n\n------\n\n项目保费指标 prem 是 数值结果计算，从数值上不够明显，下面举个简单的例子就好。\n\n{% asset_img 2.png 举个栗子 %}\n\n不加过滤条件 单独left join时:\n\n```sql\nSELECT e.emp_name, p.project_name\nFROM employees e\nLEFT JOIN projects p\nON e.emp_id = p.emp_id\n```\n\n| emp_name | project_name |\n| -------- | ------------ |\n| Alice    | Project A    |\n| Bob      | Project B    |\n| Bob      | Project C    |\n| Charlie  | NULL         |\n\non 上 加过滤条件时：\n\n```sql\nSELECT e.emp_name, p.project_name\nFROM employees e\nLEFT JOIN projects p\nON e.emp_id = p.emp_id AND p.project_name = 'Project A';\n```\n\n| emp_name | project_name |\n| -------- | ------------ |\n| Alice    | Project A    |\n| Bob      | NULL         |\n| Charlie  | NULL         |\n\nwhere 上 加过滤条件时：\n\n```sql\nSELECT e.emp_name, p.project_name\nFROM employees e\nLEFT JOIN projects p\nON e.emp_id = p.emp_id\nWHERE p.project_name = 'Project A';\n```\n\n| emp_name | project_name |\n| -------- | ------------ |\n| Alice    | Project A    |\n\n\n\n\n\n\n\n","slug":"数开-内外关联过滤条件置于on和where时结果差异","published":1,"updated":"2024-09-26T11:29:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm1rz0of0000j18ql34qib7al","content":"<p><strong>Join表关联on过滤与where过滤造成指标计算结果差异</strong></p>\n<span id=\"more\"></span>\n\n<p>项目中，结合精算师给的模板计算精算指标 prem 时尝试在Join on条件写入筛选条件。</p>\n<p>从测试环境数仓，ODS层客户投保记录表拿了500条数据，需要关联APP层客户投保详情记录表数据，（APP层粒度更高，记录除客户信息外的保险ID 投保时间等信息）。</p>\n<p>计算指标：first_prem 每个客户首年保费、total_prem 客户总交保费、first_of_total_prem 保费收入比</p>\n<p>测试数据 指标计算：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">    prem_std,</span><br><span class=\"line\">    least(</span><br><span class=\"line\">        <span class=\"built_in\">cast</span>(ppp <span class=\"keyword\">as</span> <span class=\"type\">int</span>),</span><br><span class=\"line\">        policy_year,</span><br><span class=\"line\">        <span class=\"built_in\">floor</span>(months_between(elapse_date, t1.buy_datetime) <span class=\"operator\">/</span> <span class=\"number\">12</span>) <span class=\"operator\">+</span> <span class=\"number\">1</span></span><br><span class=\"line\">    ) <span class=\"keyword\">as</span> ppp_year</span><br><span class=\"line\"><span class=\"keyword\">from</span> insurance_app.policy_result t1</span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">join</span> insurance_ods.policy_surrender t2 <span class=\"keyword\">on</span> t1.pol_no <span class=\"operator\">=</span> t2.pol_no</span><br><span class=\"line\"><span class=\"keyword\">where</span> t1.month <span class=\"operator\">=</span> <span class=\"string\">&#x27;2021-04&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">    prem_std,</span><br><span class=\"line\">    least(</span><br><span class=\"line\">        <span class=\"built_in\">cast</span>(ppp <span class=\"keyword\">as</span> <span class=\"type\">int</span>),</span><br><span class=\"line\">        policy_year,</span><br><span class=\"line\">        <span class=\"built_in\">floor</span>(months_between(elapse_date, t1.buy_datetime) <span class=\"operator\">/</span> <span class=\"number\">12</span>) <span class=\"operator\">+</span> <span class=\"number\">1</span></span><br><span class=\"line\">    ) <span class=\"keyword\">as</span> ppp_year</span><br><span class=\"line\"><span class=\"keyword\">from</span> insurance_app.policy_result t1</span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">join</span> insurance_ods.policy_surrender t2 <span class=\"keyword\">on</span> t1.pol_no <span class=\"operator\">=</span> t2.pol_no</span><br><span class=\"line\"><span class=\"keyword\">and</span> t1.month <span class=\"operator\">=</span> <span class=\"string\">&#x27;2021-04&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/posts/2f22026c/1.png\" class=\"\" title=\"测试数据差异结果\">\n\n<p>正确结果应该是第一行数据，这个问题就对应上 SQL的外关联(left join | right join | full join)的特点：</p>\n<p>无论哪种外关联，都会将两表的并集，和主表的全部 取出，而 Join的 on 条件仅仅是对 Join 的匹配条件进行筛选过滤，where则是在两表关联完成以后，对关联后的所谓临时表数据进行过滤。</p>\n<p><strong>即，on 过滤条件 针对 连接时的匹配，关联后不会减少主表的行数，主表的所有记录均仍保留</strong></p>\n<p><strong>where 过滤条件 会作用于整个结果集，可以理解为 关联后的临时表 再过滤，故会再根据where条件筛选掉部分数据。</strong></p>\n<hr>\n<p>项目保费指标 prem 是 数值结果计算，从数值上不够明显，下面举个简单的例子就好。</p>\n<img src=\"/posts/2f22026c/2.png\" class=\"\" title=\"举个栗子\">\n\n<p>不加过滤条件 单独left join时:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> e.emp_name, p.project_name</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> employees e</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> projects p</span><br><span class=\"line\"><span class=\"keyword\">ON</span> e.emp_id <span class=\"operator\">=</span> p.emp_id</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>emp_name</th>\n<th>project_name</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Alice</td>\n<td>Project A</td>\n</tr>\n<tr>\n<td>Bob</td>\n<td>Project B</td>\n</tr>\n<tr>\n<td>Bob</td>\n<td>Project C</td>\n</tr>\n<tr>\n<td>Charlie</td>\n<td>NULL</td>\n</tr>\n</tbody></table>\n<p>on 上 加过滤条件时：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> e.emp_name, p.project_name</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> employees e</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> projects p</span><br><span class=\"line\"><span class=\"keyword\">ON</span> e.emp_id <span class=\"operator\">=</span> p.emp_id <span class=\"keyword\">AND</span> p.project_name <span class=\"operator\">=</span> <span class=\"string\">&#x27;Project A&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>emp_name</th>\n<th>project_name</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Alice</td>\n<td>Project A</td>\n</tr>\n<tr>\n<td>Bob</td>\n<td>NULL</td>\n</tr>\n<tr>\n<td>Charlie</td>\n<td>NULL</td>\n</tr>\n</tbody></table>\n<p>where 上 加过滤条件时：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> e.emp_name, p.project_name</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> employees e</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> projects p</span><br><span class=\"line\"><span class=\"keyword\">ON</span> e.emp_id <span class=\"operator\">=</span> p.emp_id</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> p.project_name <span class=\"operator\">=</span> <span class=\"string\">&#x27;Project A&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>emp_name</th>\n<th>project_name</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Alice</td>\n<td>Project A</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"length":1541,"excerpt":"<p><strong>Join表关联on过滤与where过滤造成指标计算结果差异</strong></p>","more":"<p>项目中，结合精算师给的模板计算精算指标 prem 时尝试在Join on条件写入筛选条件。</p>\n<p>从测试环境数仓，ODS层客户投保记录表拿了500条数据，需要关联APP层客户投保详情记录表数据，（APP层粒度更高，记录除客户信息外的保险ID 投保时间等信息）。</p>\n<p>计算指标：first_prem 每个客户首年保费、total_prem 客户总交保费、first_of_total_prem 保费收入比</p>\n<p>测试数据 指标计算：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">    prem_std,</span><br><span class=\"line\">    least(</span><br><span class=\"line\">        <span class=\"built_in\">cast</span>(ppp <span class=\"keyword\">as</span> <span class=\"type\">int</span>),</span><br><span class=\"line\">        policy_year,</span><br><span class=\"line\">        <span class=\"built_in\">floor</span>(months_between(elapse_date, t1.buy_datetime) <span class=\"operator\">/</span> <span class=\"number\">12</span>) <span class=\"operator\">+</span> <span class=\"number\">1</span></span><br><span class=\"line\">    ) <span class=\"keyword\">as</span> ppp_year</span><br><span class=\"line\"><span class=\"keyword\">from</span> insurance_app.policy_result t1</span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">join</span> insurance_ods.policy_surrender t2 <span class=\"keyword\">on</span> t1.pol_no <span class=\"operator\">=</span> t2.pol_no</span><br><span class=\"line\"><span class=\"keyword\">where</span> t1.month <span class=\"operator\">=</span> <span class=\"string\">&#x27;2021-04&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">    prem_std,</span><br><span class=\"line\">    least(</span><br><span class=\"line\">        <span class=\"built_in\">cast</span>(ppp <span class=\"keyword\">as</span> <span class=\"type\">int</span>),</span><br><span class=\"line\">        policy_year,</span><br><span class=\"line\">        <span class=\"built_in\">floor</span>(months_between(elapse_date, t1.buy_datetime) <span class=\"operator\">/</span> <span class=\"number\">12</span>) <span class=\"operator\">+</span> <span class=\"number\">1</span></span><br><span class=\"line\">    ) <span class=\"keyword\">as</span> ppp_year</span><br><span class=\"line\"><span class=\"keyword\">from</span> insurance_app.policy_result t1</span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">join</span> insurance_ods.policy_surrender t2 <span class=\"keyword\">on</span> t1.pol_no <span class=\"operator\">=</span> t2.pol_no</span><br><span class=\"line\"><span class=\"keyword\">and</span> t1.month <span class=\"operator\">=</span> <span class=\"string\">&#x27;2021-04&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<img src=\"/posts/2f22026c/1.png\" class=\"\" title=\"测试数据差异结果\">\n\n<p>正确结果应该是第一行数据，这个问题就对应上 SQL的外关联(left join | right join | full join)的特点：</p>\n<p>无论哪种外关联，都会将两表的并集，和主表的全部 取出，而 Join的 on 条件仅仅是对 Join 的匹配条件进行筛选过滤，where则是在两表关联完成以后，对关联后的所谓临时表数据进行过滤。</p>\n<p><strong>即，on 过滤条件 针对 连接时的匹配，关联后不会减少主表的行数，主表的所有记录均仍保留</strong></p>\n<p><strong>where 过滤条件 会作用于整个结果集，可以理解为 关联后的临时表 再过滤，故会再根据where条件筛选掉部分数据。</strong></p>\n<hr>\n<p>项目保费指标 prem 是 数值结果计算，从数值上不够明显，下面举个简单的例子就好。</p>\n<img src=\"/posts/2f22026c/2.png\" class=\"\" title=\"举个栗子\">\n\n<p>不加过滤条件 单独left join时:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> e.emp_name, p.project_name</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> employees e</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> projects p</span><br><span class=\"line\"><span class=\"keyword\">ON</span> e.emp_id <span class=\"operator\">=</span> p.emp_id</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>emp_name</th>\n<th>project_name</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Alice</td>\n<td>Project A</td>\n</tr>\n<tr>\n<td>Bob</td>\n<td>Project B</td>\n</tr>\n<tr>\n<td>Bob</td>\n<td>Project C</td>\n</tr>\n<tr>\n<td>Charlie</td>\n<td>NULL</td>\n</tr>\n</tbody></table>\n<p>on 上 加过滤条件时：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> e.emp_name, p.project_name</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> employees e</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> projects p</span><br><span class=\"line\"><span class=\"keyword\">ON</span> e.emp_id <span class=\"operator\">=</span> p.emp_id <span class=\"keyword\">AND</span> p.project_name <span class=\"operator\">=</span> <span class=\"string\">&#x27;Project A&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>emp_name</th>\n<th>project_name</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Alice</td>\n<td>Project A</td>\n</tr>\n<tr>\n<td>Bob</td>\n<td>NULL</td>\n</tr>\n<tr>\n<td>Charlie</td>\n<td>NULL</td>\n</tr>\n</tbody></table>\n<p>where 上 加过滤条件时：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> e.emp_name, p.project_name</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> employees e</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> projects p</span><br><span class=\"line\"><span class=\"keyword\">ON</span> e.emp_id <span class=\"operator\">=</span> p.emp_id</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> p.project_name <span class=\"operator\">=</span> <span class=\"string\">&#x27;Project A&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>emp_name</th>\n<th>project_name</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Alice</td>\n<td>Project A</td>\n</tr>\n</tbody></table>"}],"PostAsset":[{"_id":"source/_posts/Python学习/名片管理系统效果图1.jpg","slug":"名片管理系统效果图1.jpg","post":"cm1rz0oew000818qlbtgf5uwh","modified":0,"renderable":0},{"_id":"source/_posts/Python学习/名片管理系统效果图2.jpg","slug":"名片管理系统效果图2.jpg","post":"cm1rz0oew000818qlbtgf5uwh","modified":0,"renderable":0},{"_id":"source/_posts/Python学习/名片管理系统效果图3.jpg","slug":"名片管理系统效果图3.jpg","post":"cm1rz0oew000818qlbtgf5uwh","modified":0,"renderable":0},{"_id":"source/_posts/Python学习/迭代器和生成器.jpg","slug":"迭代器和生成器.jpg","post":"cm1rz0oew000818qlbtgf5uwh","modified":0,"renderable":0},{"_id":"source/_posts/Python学习/迭代器实例.jpg","slug":"迭代器实例.jpg","post":"cm1rz0oew000818qlbtgf5uwh","modified":0,"renderable":0},{"_id":"source/_posts/Python学习/飞机大战.jpg","slug":"飞机大战.jpg","post":"cm1rz0oew000818qlbtgf5uwh","modified":0,"renderable":0},{"_id":"source/_posts/Python-Selenium脚本/Outpatient_doctor_station.png","slug":"Outpatient_doctor_station.png","post":"cm1rz0oex000918qlb6i2btt5","modified":0,"renderable":0},{"_id":"source/_posts/Python-Selenium脚本/Outpatient_registration.png","slug":"Outpatient_registration.png","post":"cm1rz0oex000918qlb6i2btt5","modified":0,"renderable":0},{"_id":"source/_posts/Python-Selenium脚本/pickshell输入医嘱.png","slug":"pickshell输入医嘱.png","post":"cm1rz0oex000918qlb6i2btt5","modified":0,"renderable":0},{"_id":"source/_posts/Python-Selenium脚本/pickshell运行系统截图.png","slug":"pickshell运行系统截图.png","post":"cm1rz0oex000918qlb6i2btt5","modified":0,"renderable":0},{"_id":"source/_posts/Python-Selenium脚本/pickshell运行终端截图.png","slug":"pickshell运行终端截图.png","post":"cm1rz0oex000918qlb6i2btt5","modified":0,"renderable":0},{"_id":"source/_posts/Python-Selenium脚本/医嘱保存成功校验.png","slug":"医嘱保存成功校验.png","post":"cm1rz0oex000918qlb6i2btt5","modified":0,"renderable":0},{"_id":"source/_posts/Python-Selenium脚本/医嘱保存重复校验.png","slug":"医嘱保存重复校验.png","post":"cm1rz0oex000918qlb6i2btt5","modified":0,"renderable":0},{"_id":"source/_posts/Python-Selenium脚本/医嘱详细信息录入.png","slug":"医嘱详细信息录入.png","post":"cm1rz0oex000918qlb6i2btt5","modified":0,"renderable":0},{"_id":"source/_posts/Python-Selenium脚本/医嘱重复弹窗.png","slug":"医嘱重复弹窗.png","post":"cm1rz0oex000918qlb6i2btt5","modified":0,"renderable":0},{"_id":"source/_posts/Python-Selenium脚本/医生看诊页面.png","slug":"医生看诊页面.png","post":"cm1rz0oex000918qlb6i2btt5","modified":0,"renderable":0},{"_id":"source/_posts/Python-Selenium脚本/检查类医嘱开立方法.png","slug":"检查类医嘱开立方法.png","post":"cm1rz0oex000918qlb6i2btt5","modified":0,"renderable":0},{"_id":"source/_posts/Python-Selenium脚本/检查类医嘱运行系统截图.png","slug":"检查类医嘱运行系统截图.png","post":"cm1rz0oex000918qlb6i2btt5","modified":0,"renderable":0},{"_id":"source/_posts/Python-Selenium脚本/检查类医嘱运行终端截图.png","slug":"检查类医嘱运行终端截图.png","post":"cm1rz0oex000918qlb6i2btt5","modified":0,"renderable":0},{"_id":"source/_posts/Python-Selenium脚本/检验类医嘱开立方法.png","slug":"检验类医嘱开立方法.png","post":"cm1rz0oex000918qlb6i2btt5","modified":0,"renderable":0},{"_id":"source/_posts/Python-Selenium脚本/检验类医嘱运行系统截图.png","slug":"检验类医嘱运行系统截图.png","post":"cm1rz0oex000918qlb6i2btt5","modified":0,"renderable":0},{"_id":"source/_posts/Python-Selenium脚本/检验类医嘱运行终端截图.png","slug":"检验类医嘱运行终端截图.png","post":"cm1rz0oex000918qlb6i2btt5","modified":0,"renderable":0},{"_id":"source/_posts/Python-Selenium脚本/登录主页面.png","slug":"登录主页面.png","post":"cm1rz0oex000918qlb6i2btt5","modified":0,"renderable":0},{"_id":"source/_posts/Python-Selenium脚本/登录子页面.png","slug":"登录子页面.png","post":"cm1rz0oex000918qlb6i2btt5","modified":0,"renderable":0},{"_id":"source/_posts/Python爬虫/sogou.png","slug":"sogou.png","post":"cm1rz0oey000d18ql1v6o6zou","modified":0,"renderable":0},{"_id":"source/_posts/Python爬虫/wuhan.png","slug":"wuhan.png","post":"cm1rz0oey000d18ql1v6o6zou","modified":0,"renderable":0},{"_id":"source/_posts/Python爬虫/地址查询.png","slug":"地址查询.png","post":"cm1rz0oey000d18ql1v6o6zou","modified":0,"renderable":0},{"_id":"source/_posts/Python爬虫/翻译.png","slug":"翻译.png","post":"cm1rz0oey000d18ql1v6o6zou","modified":0,"renderable":0},{"_id":"source/_posts/Python数据分析与挖掘/1.png","slug":"1.png","post":"cm1rz0oey000c18qlbptccny4","modified":0,"renderable":0},{"_id":"source/_posts/Python数据分析与挖掘/10.png","slug":"10.png","post":"cm1rz0oey000c18qlbptccny4","modified":0,"renderable":0},{"_id":"source/_posts/Python数据分析与挖掘/11.png","slug":"11.png","post":"cm1rz0oey000c18qlbptccny4","modified":0,"renderable":0},{"_id":"source/_posts/Python数据分析与挖掘/12.png","slug":"12.png","post":"cm1rz0oey000c18qlbptccny4","modified":0,"renderable":0},{"_id":"source/_posts/Python数据分析与挖掘/13.png","slug":"13.png","post":"cm1rz0oey000c18qlbptccny4","modified":0,"renderable":0},{"_id":"source/_posts/Python数据分析与挖掘/14.png","slug":"14.png","post":"cm1rz0oey000c18qlbptccny4","modified":0,"renderable":0},{"_id":"source/_posts/Python数据分析与挖掘/15.png","slug":"15.png","post":"cm1rz0oey000c18qlbptccny4","modified":0,"renderable":0},{"_id":"source/_posts/Python数据分析与挖掘/16.png","slug":"16.png","post":"cm1rz0oey000c18qlbptccny4","modified":0,"renderable":0},{"_id":"source/_posts/Python数据分析与挖掘/17.png","slug":"17.png","post":"cm1rz0oey000c18qlbptccny4","modified":0,"renderable":0},{"_id":"source/_posts/Python数据分析与挖掘/2.png","slug":"2.png","post":"cm1rz0oey000c18qlbptccny4","modified":0,"renderable":0},{"_id":"source/_posts/Python数据分析与挖掘/3.png","slug":"3.png","post":"cm1rz0oey000c18qlbptccny4","modified":0,"renderable":0},{"_id":"source/_posts/Python数据分析与挖掘/4.png","slug":"4.png","post":"cm1rz0oey000c18qlbptccny4","modified":0,"renderable":0},{"_id":"source/_posts/Python数据分析与挖掘/5.png","slug":"5.png","post":"cm1rz0oey000c18qlbptccny4","modified":0,"renderable":0},{"_id":"source/_posts/Python数据分析与挖掘/6.png","slug":"6.png","post":"cm1rz0oey000c18qlbptccny4","modified":0,"renderable":0},{"_id":"source/_posts/Python数据分析与挖掘/7.png","slug":"7.png","post":"cm1rz0oey000c18qlbptccny4","modified":0,"renderable":0},{"_id":"source/_posts/Python数据分析与挖掘/8.png","slug":"8.png","post":"cm1rz0oey000c18qlbptccny4","modified":0,"renderable":0},{"_id":"source/_posts/Python数据分析与挖掘/9.png","slug":"9.png","post":"cm1rz0oey000c18qlbptccny4","modified":0,"renderable":0},{"_id":"source/_posts/Python数据分析与挖掘/bit1.png","slug":"bit1.png","post":"cm1rz0oey000c18qlbptccny4","modified":0,"renderable":0},{"_id":"source/_posts/Python数据分析与挖掘/bit2.png","slug":"bit2.png","post":"cm1rz0oey000c18qlbptccny4","modified":0,"renderable":0},{"_id":"source/_posts/Python数据分析与挖掘/bit3.png","slug":"bit3.png","post":"cm1rz0oey000c18qlbptccny4","modified":0,"renderable":0},{"_id":"source/_posts/Python数据分析与挖掘/GMM.png","slug":"GMM.png","post":"cm1rz0oey000c18qlbptccny4","modified":0,"renderable":0},{"_id":"source/_posts/Python数据分析与挖掘/航空.png","slug":"航空.png","post":"cm1rz0oey000c18qlbptccny4","modified":0,"renderable":0},{"_id":"source/_posts/selenium自动化测试/flags设置.png","slug":"flags设置.png","post":"cm1rz0oez000h18ql6h6bhwc4","modified":0,"renderable":0},{"_id":"source/_posts/数开-内外关联过滤条件置于on和where时结果差异/1.png","slug":"1.png","post":"cm1rz0of0000j18ql34qib7al","modified":0,"renderable":0},{"_id":"source/_posts/数开-内外关联过滤条件置于on和where时结果差异/2.png","slug":"2.png","post":"cm1rz0of0000j18ql34qib7al","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"cm1rz0oet000418qle9ilb2n6","tag_id":"cm1rz0oeu000618qlffg50dk9","_id":"cm1rz0oey000b18qlaw3k1cbn"},{"post_id":"cm1rz0oeu000518qlex2gcs8t","tag_id":"cm1rz0oex000a18ql0fk0ayup","_id":"cm1rz0oez000g18ql4vqye0w0"},{"post_id":"cm1rz0oew000718ql0b1hddgb","tag_id":"cm1rz0oez000e18qley0igol9","_id":"cm1rz0of0000k18qlff9j2kav"},{"post_id":"cm1rz0oew000818qlbtgf5uwh","tag_id":"cm1rz0of0000i18qlg0uv32sk","_id":"cm1rz0of1000m18qlfi3n1z2v"},{"post_id":"cm1rz0oey000c18qlbptccny4","tag_id":"cm1rz0of0000l18qlggcbbnlv","_id":"cm1rz0of1000o18qlhgdb3s7k"},{"post_id":"cm1rz0oey000d18ql1v6o6zou","tag_id":"cm1rz0of1000n18qlbxfz8ams","_id":"cm1rz0of1000q18qla6wh8ohj"},{"post_id":"cm1rz0oez000f18ql1gux88lq","tag_id":"cm1rz0of1000p18ql71bwcc6a","_id":"cm1rz0of2000s18ql9iadd7zr"},{"post_id":"cm1rz0oez000h18ql6h6bhwc4","tag_id":"cm1rz0of1000p18ql71bwcc6a","_id":"cm1rz0of2000t18qlcx8bf7jy"}],"Tag":[{"name":"6","_id":"cm1rz0oeu000618qlffg50dk9"},{"name":"2","_id":"cm1rz0oex000a18ql0fk0ayup"},{"name":"7","_id":"cm1rz0oez000e18qley0igol9"},{"name":"4","_id":"cm1rz0of0000i18qlg0uv32sk"},{"name":"5","_id":"cm1rz0of0000l18qlggcbbnlv"},{"name":"3","_id":"cm1rz0of1000n18qlbxfz8ams"},{"name":"1","_id":"cm1rz0of1000p18ql71bwcc6a"}]}}