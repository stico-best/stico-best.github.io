<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>KBJ-ISSUE记录</title>
    <url>/posts/5f967442.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重新输入！" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容！">
  <script id="hbeData" type="hbeData" data-hmacdigest="59501016bf4e35e1a7818ade7b315d2833e5fd10ddb69bbf2c5022d9382092ea"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>6</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL学习</title>
    <url>/posts/c6fb831a.html</url>
    <content><![CDATA[<p><strong>基本的SQL语言学习（MySQL）</strong></p>
<span id="more"></span>

<h1 id="SQL的基本定义及概念"><a href="#SQL的基本定义及概念" class="headerlink" title="SQL的基本定义及概念"></a>SQL的基本定义及概念</h1><p><strong>数据库（DataBase）</strong>：存储数据的仓库，数据有组织的进行存储。</p>
<p><strong>数据库管理系统（DBMS）</strong>：操纵和管理数据库的大型软件。</p>
<p><strong>SQL</strong>：操作关系型数据库的编程语言。</p>
<p><strong>关系型数据库（RDBMS）</strong>：建立在关系模型基础上，由多张相互连接的二维表组成的数据库</p>
<p>基础使用方法：通过cmd输入mysql -r root -p进入mysql页面进行操作 或 运行MySQL command line Client - Unicode</p>
<p><strong>SQL分类</strong>：</p>
<table>
<thead>
<tr>
<th><strong>DDL</strong></th>
<th><strong>数据定义语言</strong></th>
<th><strong>定义数据库对象（数据库、表、字段）</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>DML</strong></td>
<td><strong>数据操作语言</strong></td>
<td><strong>对数据库表中数据增删改</strong></td>
</tr>
<tr>
<td><strong>DQL</strong></td>
<td><strong>数据查询语言</strong></td>
<td><strong>查询数据库表中的记录</strong></td>
</tr>
<tr>
<td><strong>DCL</strong></td>
<td><strong>数据控制语言</strong></td>
<td><strong>创建数据库用户，控制数据库的访问权限</strong></td>
</tr>
</tbody></table>
<hr>
<h1 id="DDL语句"><a href="#DDL语句" class="headerlink" title="DDL语句"></a>DDL语句</h1><p>语句后面注意 “ ; ”	，	[…]部分表示选写内容	，	comment ‘…’ 为注释内容</p>
<h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><ul>
<li>查询所有数据库：<strong>show database;</strong></li>
<li>查询当前数据库：<strong>select database();</strong></li>
<li>创建数据库：<strong>create database [if not exists] 数据库名;</strong></li>
<li>删除数据库：<strong>drop database [if not exists] 数据库名;</strong></li>
<li>使用数据库：<strong>use 数据库名;</strong></li>
</ul>
<h2 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h2><ul>
<li>修改表名：<strong>alter table 表名 rename to 新表名;</strong></li>
<li>删除表：<strong>drop table [if exists] 表名</strong></li>
<li>删除指定表，并重新创建该表（初始化该表）：<strong>truncate table 表名;</strong></li>
</ul>
<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><ul>
<li>查询当前数据库所有表：<strong>show tables;</strong></li>
<li>查询表结构：<strong>desc 表名;</strong></li>
<li>查询指定表的建表语句：<strong>show create table 表名;</strong></li>
</ul>
<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><ul>
<li>添加字段：<strong>alter table 表名 add 字段名 数据类型;</strong></li>
<li>修改数据类型：<strong>alter table 表名 modify 字段名 新的数据类型;</strong></li>
<li>修改字段名和字段类型：<strong>alter table 表名 change 旧字段名 新字段名 数据类型;</strong></li>
</ul>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><ul>
<li>删除字段：<strong>alter table 表名 drop 字段名;</strong></li>
</ul>
<hr>
<h1 id="DML语句"><a href="#DML语句" class="headerlink" title="DML语句"></a>DML语句</h1><h2 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h2><ul>
<li>给指定字段添加数据：<strong>insert into 表名(字段名1,字段名2,…) values (值1,值2,…);</strong></li>
<li>给全部字段添加数据：<strong>insert into 表名 values (值1,值2,…);</strong></li>
<li>批量添加数据：<strong>insert into 表名(字段名1,字段名2,…) values (值1,值2,…);</strong>  &#x2F;<em>一行</em>&#x2F;</li>
<li>​						 <strong>insert into 表名 values (值1,值2,…),(值1,值2,…),(值1,值2,…);</strong>  &#x2F;<em>多行</em>&#x2F;</li>
</ul>
<p>插入数据时，指定的字段顺序需要与值的顺序是一一对应的。</p>
<p>字符串和日期型数据应该包含在引号中。</p>
<p>插入的数据大小，应该在字段的规定范围内（满足对应的数据类型和数据范围）。</p>
<h2 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h2><ul>
<li><strong>update 表名 set 字段名1&#x3D;值1,字段名2&#x3D;值2,… [where 条件];</strong></li>
</ul>
<p>修改语句的条件可有可无，若没有where条件，则会修改整张表的所有数据。</p>
<h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><ul>
<li><strong>delete from 表名 [where 条件];</strong></li>
</ul>
<p>删除语句的条件可有可无，若没有where条件，则会删除整张表的所有数据。</p>
<p>delete语句不能删除某个字段的值（可以用update）。</p>
<hr>
<h1 id="DQL语句"><a href="#DQL语句" class="headerlink" title="DQL语句"></a>DQL语句</h1><h2 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h2><ul>
<li>查询多个字段：<strong>select 字段1,字段2,… from 表名;</strong></li>
<li>查询全部字段：<strong>select * from 表名;</strong></li>
<li>设置别名：<strong>select 字段1[as 别名1],字段2[as 别名2],… from 表名;</strong></li>
<li>去除重复记录：<strong>select distinct 字段列表 from 表名;</strong></li>
</ul>
<h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><ul>
<li><strong>select 字段列表 from 表名 where 条件列表;</strong></li>
</ul>
<p>例：查询姓名为两个字的员工信息select * from employee where name like ‘__’;</p>
<p>​		查询身份证号最后一位是X的员工信息select * from employee where idcard like ‘%X’;</p>
<p>​		或 select * from employee where idcard like ‘________________<em>X’ (17个’</em>‘)</p>
<table>
<thead>
<tr>
<th>比较运算符</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td>&gt;</td>
<td align="left">大于</td>
</tr>
<tr>
<td>&gt;&#x3D;</td>
<td align="left">大于等于</td>
</tr>
<tr>
<td>&lt;</td>
<td align="left">小于</td>
</tr>
<tr>
<td>&lt;&#x3D;</td>
<td align="left">小于等于</td>
</tr>
<tr>
<td>&#x3D;</td>
<td align="left">等于</td>
</tr>
<tr>
<td>&lt;&gt; 或 !&#x3D;</td>
<td align="left">不等于</td>
</tr>
<tr>
<td>between…and…</td>
<td align="left">介于范围之内（between 小 and 大）</td>
</tr>
<tr>
<td>in(…)</td>
<td align="left">在in之内的列表中的值，满足一个即可</td>
</tr>
<tr>
<td>like 占位符</td>
<td align="left">模糊匹配（_匹配单个字符，%匹配任意个字符）</td>
</tr>
<tr>
<td>is null</td>
<td align="left">判断是否为空</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>逻辑运算符</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>and 或 &amp;&amp;</td>
<td>并且（多个条件同时成立）</td>
</tr>
<tr>
<td>or 或 ||</td>
<td>或者（多个条件任意一个成立）</td>
</tr>
<tr>
<td>not 或 ！</td>
<td>非，不是</td>
</tr>
</tbody></table>
<h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><ul>
<li><strong>select 聚合函数(字段列表) from 表名;</strong></li>
</ul>
<p>定义：将一列数据作为一个整体，进行纵向计算</p>
<p>null值不参与所有聚合函数的运算</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>count</td>
<td>统计数量</td>
</tr>
<tr>
<td>max</td>
<td>最大值</td>
</tr>
<tr>
<td>min</td>
<td>最小值</td>
</tr>
<tr>
<td>avg</td>
<td>平均值</td>
</tr>
<tr>
<td>sum</td>
<td>求和</td>
</tr>
</tbody></table>
<h2 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h2><ul>
<li><strong>select 字段列表 from 表名 [where 条件] group by 分组字段名 [having 分组后过滤条件];</strong></li>
</ul>
<h2 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h2><ul>
<li><strong>select 字段列表 from 表名 order by 字段1,排序方式1,字段2,排序方式2,…;</strong></li>
</ul>
<p>排序方式有：ASC升序(默认)、DESC降序</p>
<h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><ul>
<li><strong>select 字段列表 from 表名 limit 起始索引,查询记录数;</strong></li>
</ul>
<p>起始索引从0开始，起始索引&#x3D;(查询页码 - 1) * 每页显示记录数</p>
<p>如果查询的是第一页数据，起始索引可以省略</p>
<h2 id="DQL语句执行顺序"><a href="#DQL语句执行顺序" class="headerlink" title="DQL语句执行顺序"></a>DQL语句执行顺序</h2><ol>
<li>from 表名列表</li>
<li>where 条件列表</li>
<li>group by 分组字段列表</li>
<li>having 分组后条件列表</li>
<li>select 字段列表</li>
<li>order by 排序字段列表</li>
<li>limit 分页参数</li>
</ol>
<hr>
<h1 id="DCL语句"><a href="#DCL语句" class="headerlink" title="DCL语句"></a>DCL语句</h1><p>数据控制语言，用来管理数据库用户、控制数据库的访问权限。</p>
<table>
<thead>
<tr>
<th>权限（常用）</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>all(all privileges)</td>
<td>所有权限</td>
</tr>
<tr>
<td>select</td>
<td>查询数据</td>
</tr>
<tr>
<td>insert</td>
<td>插入数据</td>
</tr>
<tr>
<td>update</td>
<td>修改数据</td>
</tr>
<tr>
<td>delete</td>
<td>删除数据</td>
</tr>
<tr>
<td>alter</td>
<td>修改表</td>
</tr>
<tr>
<td>drop</td>
<td>删除数据库&#x2F;表&#x2F;视图</td>
</tr>
<tr>
<td>create</td>
<td>创建数据库&#x2F;表</td>
</tr>
</tbody></table>
<h2 id="管理用户"><a href="#管理用户" class="headerlink" title="管理用户"></a>管理用户</h2><ul>
<li>查询用户：use mysql;  &#x3D;&gt;  <strong>select * from user;</strong></li>
<li>创建用户：<strong>create user ‘user name‘@’host name’ identified by ‘password’;</strong></li>
<li>修改用户密码：<strong>alter user ‘user name‘@’host name’ identified with mysql_native_password by ‘new password’;</strong></li>
<li>删除用户：<strong>drop user ‘user name‘@’host name’;</strong></li>
</ul>
<h2 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h2><ul>
<li>查询权限：<strong>show grants for ‘user name‘@’host name’;</strong></li>
<li>授予权限：<strong>grant 权限列表 on 数据库名.表名 to ‘user name‘@’host name’;</strong></li>
<li>撤销权限：<strong>revoke 权限列表 on 数据库名.表名 from ‘user name‘@’host name’;</strong></li>
</ul>
<hr>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h2><table>
<thead>
<tr>
<th>函数（常用）</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>concat(S1, S2, S3, … ,Sn)</td>
<td>字符串拼接，将S1…Sn拼接成一个字符串</td>
</tr>
<tr>
<td>lower(str)</td>
<td>将字符串str全部转为小写</td>
</tr>
<tr>
<td>upper(str)</td>
<td>将字符串str全部转为大写</td>
</tr>
<tr>
<td>lpad(str, n, pad)</td>
<td>左填充，用字符串pad对str的左边进行填充，达到n个字符串长度</td>
</tr>
<tr>
<td>rpad(str, n, pad)</td>
<td>右填充，用字符串pad对str的右边进行填充，达到n个字符串长度</td>
</tr>
<tr>
<td>trim(str)</td>
<td>去掉字符串头部和尾部的空格</td>
</tr>
<tr>
<td>substring(str, start, len)</td>
<td>返回从字符串str从start位置起的len个长度的字符串</td>
</tr>
</tbody></table>
<p>例：study数据库的employee表中将员工编号workno更改，将编号前补齐’0’以达到五位数编号</p>
<p>答：update employee set wordno &#x3D; lpad(workno, 5, ‘0’);</p>
<hr>
<h2 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h2><table>
<thead>
<tr>
<th>函数（常用）</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>ceil(x)</td>
<td>向上取整</td>
</tr>
<tr>
<td>floor(x)</td>
<td>向下取整</td>
</tr>
<tr>
<td>mod(x, y)</td>
<td>返回x&#x2F;y的模（整除后的余数）</td>
</tr>
<tr>
<td>rand()</td>
<td>返回0~1内的随机数</td>
</tr>
<tr>
<td>round(x, y)</td>
<td>求参数x的四舍五入的值，保留y位小数</td>
</tr>
</tbody></table>
<p>例：使用数据库的函数，实现随机生成6位验证码</p>
<p>答：lpad(round(select rand() * 1000000, 0), 6, ‘0’);</p>
<p>此方法运用了round()函数，替换成向上或向下取整函数依然可以完成，lpad或rpad同理。</p>
<hr>
<h2 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h2><table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>curdate()</td>
<td>返回当前日期</td>
</tr>
<tr>
<td>curtime()</td>
<td>返回当前时间</td>
</tr>
<tr>
<td>now()</td>
<td>返回当前日期和时间</td>
</tr>
<tr>
<td>year(date)</td>
<td>获取指定date的年份</td>
</tr>
<tr>
<td>month(date)</td>
<td>获取指定date的月份</td>
</tr>
<tr>
<td>day(date)</td>
<td>获取指定date的日期</td>
</tr>
<tr>
<td>date_add(date, interval expr type)</td>
<td>计算date加expr type后对应的时间,expr表示数值，type表示类型如年月日</td>
</tr>
<tr>
<td>datediff(date1, date2)</td>
<td>计算date1 和 date2之间相隔的天数</td>
</tr>
</tbody></table>
<p>函数举例：date_add(now(), interval 90 day) &#x3D;&#x3D;&gt;&gt; 2022-07-08 18:54:37</p>
<p>函数举例：datediff(‘2022-4-9’, ‘2022-7-1’) &#x3D;&#x3D;&gt;&gt; -83</p>
<p>例：根据study数据库的employee表，计算所有员工入职时间，用天数表示，并按天数降序排序</p>
<p>答：select name, datediff(curdate(), entrydate) from employee order by datediff(curdate(), entrydate) desc;</p>
<hr>
<h2 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h2><table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>if(value, t, f)</td>
<td>如果value为true，则返回t，否则返回f</td>
</tr>
<tr>
<td>ifnull(value1, value2)</td>
<td>如果value1不为空，返回value1，否则返回value2</td>
</tr>
<tr>
<td>case when [val1] then [res1] … else [default] end</td>
<td>如果val1为true，返回res1，…否则返回default默认值</td>
</tr>
<tr>
<td>case [expr] when [val1] then [res1] … else [default] end</td>
<td>如果expr的值等于val1，返回res1，…否则返回default默认值</td>
</tr>
</tbody></table>
<p>例：根据study数据库的score表，将学生成绩置换成’优秀’&gt;&#x3D;85,60&#x3D;&lt;’及格’&#x3D;&lt;85,’不及格’&lt;60</p>
<p>答：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select</span><br><span class="line">    id,</span><br><span class="line">    name,</span><br><span class="line">    (case when math &gt;= 85 then &#x27;优秀&#x27; when math &lt; 60 then &#x27;不及格&#x27; else &#x27;及格&#x27; end),</span><br><span class="line">    (case when english &gt;= 85 then &#x27;优秀&#x27; when english &lt; 60 then &#x27;不及格&#x27; else &#x27;及格&#x27; end),</span><br><span class="line">    (case when chinese &gt;= 85 then &#x27;优秀&#x27; when chinese &lt; 60 then &#x27;不及格&#x27; else &#x27;及格&#x27; end)</span><br><span class="line">from score;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h1><h2 id="基本定义"><a href="#基本定义" class="headerlink" title="基本定义"></a>基本定义</h2><p>概念：约束是作用于表中字段上的规则，用于限制存储在表中的数据。</p>
<p>目的：保证数据库中数据的正确、有效性和完整性。</p>
<p>分类：</p>
<table>
<thead>
<tr>
<th>约束</th>
<th>描述</th>
<th>关键字</th>
</tr>
</thead>
<tbody><tr>
<td>非空约束</td>
<td>限制该字段的数据不能为null</td>
<td>not null</td>
</tr>
<tr>
<td>唯一约束</td>
<td>保证该字段的所有数据都是唯一、不重复的</td>
<td>unique</td>
</tr>
<tr>
<td>主键约束</td>
<td>主键是一行数据的唯一标识，要求非空且唯一</td>
<td>primary key</td>
</tr>
<tr>
<td>默认约束</td>
<td>保存数据时，如果未指定该字段的值，则采用默认值</td>
<td>default</td>
</tr>
<tr>
<td>检查约束</td>
<td>保证字段值满足某一个条件</td>
<td>check</td>
</tr>
<tr>
<td>外键约束</td>
<td>用来让两张表的数据之间建立连接，保证数据的一致性和完整性</td>
<td>foreign key</td>
</tr>
</tbody></table>
<p>注意：约束是作用于表中字段上的，可以在创建表&#x2F;修改表的时候添加约束。</p>
<p>例：</p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table user</span><br><span class="line">(</span><br><span class="line"> id int primary key auto_increment comment &#x27;主键&#x27;,</span><br><span class="line"> name varchar(10) not null unique comment &#x27;姓名&#x27;,</span><br><span class="line"> age int check (age&gt;0 &amp;&amp; age&lt;=120) comment &#x27;年龄&#x27;,</span><br><span class="line"> status char(1) default &#x27;1&#x27; comment &#x27;状态&#x27;,</span><br><span class="line"> gender char(1) comment &#x27;性别&#x27;</span><br><span class="line">)comment &#x27;用户表&#x27;;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h2><h3 id="基本定义-1"><a href="#基本定义-1" class="headerlink" title="基本定义"></a>基本定义</h3><p>概念：外键用来让两张表的数据之间建立连接，从而保证数据的一致性和完整性。</p>
<p>注意：在数据库层面，未建立外键关联的两张表之间通过外键约束，是无法保证数据的一致性和完整性的。</p>
<hr>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>添加外键：</p>
<ul>
<li><strong>create table 表名(</strong></li>
<li>​		<strong>字段名		数据类型,</strong></li>
<li>​		<strong>……			 ……</strong></li>
<li>​		<strong>[constraint] [外键名称] foreign key (外键字段名) references 主表(主表列名)</strong></li>
<li><strong>);</strong></li>
</ul>
<p>或：</p>
<ul>
<li><strong>alter table 表名 add constraint 外键名称 foreign key(外键字段名) references 主表(主表字段名);</strong></li>
</ul>
<p>删除外键：</p>
<ul>
<li><strong>alter table 表名 drop foreign key 外键名称;</strong></li>
</ul>
<hr>
<h3 id="删除-x2F-更新行为"><a href="#删除-x2F-更新行为" class="headerlink" title="删除&#x2F;更新行为"></a>删除&#x2F;更新行为</h3><ul>
<li><strong>alter table 表名 add constraint 外键名称 foreign key(外键字段名) references 主表(主表字段名) on update cascade on delete cascade;</strong></li>
</ul>
<table>
<thead>
<tr>
<th>行为</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>no action</td>
<td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除&#x2F;更新(与restrict一致)</td>
</tr>
<tr>
<td>restrict</td>
<td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除&#x2F;更新(与no action一致)</td>
</tr>
<tr>
<td>cascade</td>
<td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有，则也删除&#x2F;更新外键在子表中的记录</td>
</tr>
<tr>
<td>set null</td>
<td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为null(这就要求该外键允许取null)</td>
</tr>
<tr>
<td>set default</td>
<td>父表有变更时，子表将外键列设置成一个默认的值(innodb不支持)</td>
</tr>
</tbody></table>
<hr>
<h1 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h1><h2 id="多表关系"><a href="#多表关系" class="headerlink" title="多表关系"></a>多表关系</h2><p>项目开发中，在进行数据库表结构设计时，会根据业务需求及业务模块之间的关系，分析并设计表结构，由于业务之间相互关联，所以各个表结构之间也存在着各种联系，基本上分为三种：一对多、多对多、一对一。</p>
<h3 id="多对多关系"><a href="#多对多关系" class="headerlink" title="多对多关系"></a>多对多关系</h3><p>实现：建立第三张中间表，中间至少包含两个外键，分别关联两方主键</p>
<p>常见多对多关系如：学生与课程</p>


<h3 id="一对一关系"><a href="#一对一关系" class="headerlink" title="一对一关系"></a>一对一关系</h3><p>关系：一对一关系，多用于单标拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中。</p>
<p>实现：在任意一方加入外键，关联另外一方的主键，并且<strong>设置外键为唯一的(UNIQUE)</strong></p>
<h2 id="多表查询分类"><a href="#多表查询分类" class="headerlink" title="多表查询分类"></a>多表查询分类</h2><p>定义：指从多张表中查询数据</p>
<p><strong>连接查询：</strong></p>
<p>内连接：相当于查询A、B交集部分数据</p>
<p>外连接：	</p>
<ul>
<li>左外连接：查询左表所有数据，以及两张表交集部分数据</li>
<li>右外连接：查询右表所有数据，以及两张表交集部分数据</li>
</ul>
<p>自连接：当前表与自身的连接查询，自连接必须使用表别名</p>
<p>子查询</p>
<h2 id="多表查询语句"><a href="#多表查询语句" class="headerlink" title="多表查询语句"></a>多表查询语句</h2><h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><p>隐式内连接：<strong>select 字段列表 from 表1, 表2 where 条件…;</strong></p>
<p>显式内连接：<strong>select 字段列表 from 表1 [inner] join 表2 on 连接条件…;</strong></p>
<h3 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h3><p>查询表1的所有数据 包含表1和表2交集部分的数据)：</p>
<p><strong>select 字段列表 from 表1 left [outer] join 表2 on 条件…;</strong></p>
<p>右外连接(相当于查询表2的所有数据 包含表1和表2交集部分的数据)：</p>
<p><strong>select 字段列表 from 表1 right [outer] join 表2 on 条件…;</strong></p>
<h3 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h3><p><strong>select 字段列表 from 表A 别名A join 表A 别名B on 条件…;</strong></p>
<h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>SQL语句中嵌套select语句，称为嵌套查询，又称子查询</p>
<p><strong>select * from t1 where column1&#x3D; (select column1 from t2);</strong></p>
<p>子查询外部的语句可以是insert&#x2F;update&#x2F;delete&#x2F;select的任何一个</p>
<p>根据子查询结果不同，分为：</p>
<ul>
<li>标量子查询(子查询结果为单个值，常用的操作符：&#x3D;&#x3D;、&lt;&gt;、&gt;、&gt;&#x3D;、&lt;、&lt;&#x3D;)</li>
<li>列子查询(子查询结果为一列，常用的操作符：in、not in、any、some、all)</li>
<li>行子查询(子查询结果为一行，常用的操作符：&#x3D;、&lt;&gt;、in、not in)</li>
<li>表子查询(子查询结果为多行多列，常用的操作符：in)</li>
</ul>
<p>根据子查询位置，分为：where之后、from之后、select之后</p>
<hr>
<h1 id="联合查询-union"><a href="#联合查询-union" class="headerlink" title="联合查询-union"></a>联合查询-union</h1><p>对于union查询，就是把多次查询的结果合并起来，形成一个新的查询结果集。</p>
<p>对于联合查询的多张表的列数必须保持一致，字段类型也需要保持一致</p>
<p>union all会将全部的数据直接合并在一起输出，union会对合并之后的数据去重再输出</p>
<p><strong>select 字段列表 from 表A …</strong></p>
<p><strong>union [all]</strong></p>
<p><strong>select 字段列表 from 表B …;</strong></p>
<hr>
<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>事务是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</p>
<h2 id="事务操作"><a href="#事务操作" class="headerlink" title="事务操作"></a>事务操作</h2><p>查看&#x2F;设置事务提交方式：</p>
<p><strong>select @@autocommit;</strong></p>
<p><strong>set @@autocommit &#x3D; 0;</strong>  ## 切换为手动提交</p>
<p>提交事务：<strong>commit;</strong></p>
<p>回滚事务：<strong>rollback;</strong></p>
<h2 id="事务四大特性ACID"><a href="#事务四大特性ACID" class="headerlink" title="事务四大特性ACID"></a>事务四大特性ACID</h2><ul>
<li>原子性：事务是不可分割的最小操作单元，要么全部成功，要么全部失败。</li>
<li>一致性：事务完成时，必须使所有的数据都保持一致状态。</li>
<li>隔离性：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。</li>
<li>持久性：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。</li>
</ul>
<h2 id="并发事务问题"><a href="#并发事务问题" class="headerlink" title="并发事务问题"></a>并发事务问题</h2><table>
<thead>
<tr>
<th>问题</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>脏读</td>
<td>一个事务读到另外一个事务还没有提交的数据</td>
</tr>
<tr>
<td>不可重复读</td>
<td>一个事务先后读取同一条记录，但两次读取的数据不同</td>
</tr>
<tr>
<td>幻读</td>
<td>一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据时又发现这行数据</td>
</tr>
</tbody></table>
<h2 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h2><table>
<thead>
<tr>
<th align="center">隔离级别</th>
<th align="center">脏读</th>
<th align="center">不可重复读</th>
<th align="center">幻读</th>
</tr>
</thead>
<tbody><tr>
<td align="center">read uncommitted</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">×</td>
</tr>
<tr>
<td align="center">read committed</td>
<td align="center">×</td>
<td align="center">√</td>
<td align="center">√</td>
</tr>
<tr>
<td align="center">repeatable read</td>
<td align="center">×</td>
<td align="center">×</td>
<td align="center">√</td>
</tr>
<tr>
<td align="center">serializable</td>
<td align="center">×</td>
<td align="center">×</td>
<td align="center">×</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>2</tag>
      </tags>
  </entry>
  <entry>
    <title>Next主题博客美化</title>
    <url>/posts/e23f9c5e.html</url>
    <content><![CDATA[<p><strong>优化美化博客插件推荐（自用）</strong></p>
<span id="more"></span>

<h1 id="唯一ID链接博文"><a href="#唯一ID链接博文" class="headerlink" title="唯一ID链接博文"></a>唯一ID链接博文</h1><p>插件名及链接地址：<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a></p>
<p>Git Bash 输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>

<p>站点config.yml添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># URL</span><br><span class="line">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span><br><span class="line">url: http://example.com</span><br><span class="line">permalink: posts/:abbrlink.html</span><br><span class="line">permalink_defaults:</span><br><span class="line">pretty_urls:</span><br><span class="line">  trailing_index: true # Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span><br><span class="line">  trailing_html: true # Set to false to remove trailing &#x27;.html&#x27; from permalinks</span><br><span class="line"></span><br><span class="line">## abbrlink config</span><br><span class="line">abbrlink:</span><br><span class="line">  alg: crc32      #support crc16(default) and crc32 进制</span><br><span class="line">  rep: hex        #support dec(default) and hex  算法</span><br><span class="line">  drafts: false   #(true)Process draft,(false)Do not process draft. false(default) </span><br><span class="line">  ## Generate categories from directory-tree</span><br><span class="line">  ## depth: the max_depth of directory-tree you want to generate, should &gt; 0</span><br><span class="line">  auto_category:</span><br><span class="line">     enable: true  #true(default)</span><br><span class="line">     depth:        #3(default)</span><br><span class="line">     over_write: false </span><br><span class="line">  auto_title: false #enable auto title, it can auto fill the title by path</span><br><span class="line">  auto_date: false #enable auto date, it can auto fill the date by time today</span><br><span class="line">  force: false #enable force mode,in this mode, the plugin will ignore the cache, and calc the abbrlink for every post even it already had abbrlink.</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="本地搜索功能"><a href="#本地搜索功能" class="headerlink" title="本地搜索功能"></a>本地搜索功能</h1><p>插件名及链接地址：<a href="https://github.com/theme-next/hexo-generator-searchdb">hexo-generator-searchdb</a></p>
<p>Git Bash 输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<p>站点config.yml添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="加密浏览博文"><a href="#加密浏览博文" class="headerlink" title="加密浏览博文"></a>加密浏览博文</h1><p>插件名及链接地址：<a href="https://github.com/D0n9X1n/hexo-blog-encrypt">hexo-blog-encrypt</a></p>
<p>Git Bash 输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-blog-encrypt --save</span><br></pre></td></tr></table></figure>

<p>站点config.yml添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Security</span><br><span class="line">encrypt: # hexo-blog-encrypt</span><br><span class="line">  silent: true</span><br><span class="line">  abstract: 本文加密，请输入密码以查看！</span><br><span class="line">  message: 当前文章暂不对外可见，请输入密码后查看！</span><br><span class="line">  tags:</span><br><span class="line">  - &#123;name: private, password: hello&#125;</span><br><span class="line">  wrong_pass_message: 密码错误，请重新输入！</span><br><span class="line">  wrong_hash_message: 抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容！</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="静态看板娘"><a href="#静态看板娘" class="headerlink" title="静态看板娘"></a>静态看板娘</h1><p>插件名及链接地址：<a href="https://github.com/EYHN/hexo-helper-live2d">hexo-helper-live2d</a></p>
<p>看板娘模板：</p>
<ul>
<li><code>live2d-widget-model-chitose</code></li>
<li><code>live2d-widget-model-epsilon2_1</code></li>
<li><code>live2d-widget-model-gf</code></li>
<li><code>live2d-widget-model-haru/01</code> (use <code>npm install --save live2d-widget-model-haru</code>)</li>
<li><code>live2d-widget-model-haru/02</code> (use <code>npm install --save live2d-widget-model-haru</code>)</li>
<li><code>live2d-widget-model-haruto</code></li>
<li><code>live2d-widget-model-hibiki</code></li>
<li><code>live2d-widget-model-hijiki</code></li>
<li><code>live2d-widget-model-izumi</code></li>
<li><code>live2d-widget-model-koharu</code></li>
<li><code>live2d-widget-model-miku</code></li>
<li><code>live2d-widget-model-ni-j</code></li>
<li><code>live2d-widget-model-nico</code></li>
<li><code>live2d-widget-model-nietzsche</code></li>
<li><code>live2d-widget-model-nipsilon</code></li>
<li><code>live2d-widget-model-nito</code></li>
<li><code>live2d-widget-model-shizuku</code></li>
<li><code>live2d-widget-model-tororo</code></li>
<li><code>live2d-widget-model-tsumiki</code></li>
<li><code>live2d-widget-model-unitychan</code></li>
<li><code>live2d-widget-model-wanko</code></li>
<li><code>live2d-widget-model-z16</code></li>
</ul>
<p>根据以上模板挑选并Git Bash 输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install live2d-widget-model-您选择的模板名 --save</span><br></pre></td></tr></table></figure>

<p>Git Bash 输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-helper-live2d --save</span><br></pre></td></tr></table></figure>

<p>站点config.yml添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">live2d:</span><br><span class="line">  enable: true    # 是否启用看板娘</span><br><span class="line">  scriptFrom: local    # 默认</span><br><span class="line">  pluginRootPath: live2dw/    # 插件在站点上的根目录(相对路径)</span><br><span class="line">  pluginJsPath: lib/    # 脚本文件相对与插件根目录路径</span><br><span class="line">  pluginModelPath: assets/    # 模型文件相对与插件根目录路径</span><br><span class="line">  # scriptFrom: jsdelivr    # jsdelivr CDN</span><br><span class="line">  # scriptFrom: unpkg    # unpkg CDN</span><br><span class="line">  # scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js    # 你的自定义 url</span><br><span class="line">  tagMode: false # 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中</span><br><span class="line">  debug: false # 调试, 是否在控制台输出日志</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-z16 # 根据自己选择并下载的模板改名！！！</span><br><span class="line">    scale: 1</span><br><span class="line">    hHeadPos: 0.5</span><br><span class="line">    vHeadPos: 0.618</span><br><span class="line">  display:</span><br><span class="line">    superSample: 2</span><br><span class="line">    width: 200	# 宽</span><br><span class="line">    height: 400	# 高</span><br><span class="line">    position: left    # 左侧还是右侧</span><br><span class="line">    hOffset: 0</span><br><span class="line">    vOffset: -10    # 距底部距离</span><br><span class="line">  mobile:</span><br><span class="line">    show: false    # 手机端是否可见，建议不可见否则可能影响阅读</span><br><span class="line">    scale: 0.5</span><br><span class="line">  react:</span><br><span class="line">    opacityDefault: 0.7</span><br><span class="line">    opacityOnHover: 0.2</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="一键部署博客"><a href="#一键部署博客" class="headerlink" title="一键部署博客"></a>一键部署博客</h1><p>插件名及链接地址：<a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a></p>
<p>Git Bash 输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>站点config.yml配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: &lt;仓库链接&gt; # 可以是 https 链接也可以是 git 链接</span><br><span class="line">  branch: [分支] # GitHub 的网站分支为 gh-pages，其他网站可能有所不同</span><br><span class="line">  message: [message] # 默认是 Site updated: &#123;&#123; now(&#x27;YYYY-MM-DD HH:mm:ss&#x27;) &#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="统计博文字数和阅读时长"><a href="#统计博文字数和阅读时长" class="headerlink" title="统计博文字数和阅读时长"></a>统计博文字数和阅读时长</h1><p>插件名及链接地址：<a href="https://github.com/theme-next/hexo-symbols-count-time">hexo-symbols-count-time</a></p>
<p>Git Bash 输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure>

<p>站点config.yml添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  symbols: true</span><br><span class="line">  time: true</span><br><span class="line">  total_symbols: true</span><br><span class="line">  total_time: true</span><br><span class="line">  exclude_codeblock: false</span><br><span class="line">  awl: 4</span><br><span class="line">  wpm: 275</span><br><span class="line">  suffix: &quot;mins.&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="sitemap浏览器爬取博客"><a href="#sitemap浏览器爬取博客" class="headerlink" title="sitemap浏览器爬取博客"></a>sitemap浏览器爬取博客</h1><p>插件名及链接地址：<a href="https://github.com/hexojs/hexo-generator-sitemap">hexo-generator-sitemap</a></p>
<p>Git Bash 输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure>

<p>站点config.yml添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># hexo-generator-sitemap</span><br><span class="line">## https://github.com/hexojs/hexo-generator-sitemap</span><br><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br><span class="line">  # template: ./sitemap_template.xml</span><br><span class="line">  rel: true</span><br><span class="line">  tags: false</span><br><span class="line">  categories: false</span><br></pre></td></tr></table></figure>

<p>具体参考：<a href="https://ywang-wnlo.github.io/posts/abac0c46">https://ywang-wnlo.github.io/posts/abac0c46</a></p>
<hr>
<h1 id="鼠标左键点击爱心特效"><a href="#鼠标左键点击爱心特效" class="headerlink" title="鼠标左键点击爱心特效"></a>鼠标左键点击爱心特效</h1><p>Blog文件夹 -&gt; themes -&gt; next（你的主题名文件夹） -&gt; source -&gt; js</p>
<p>在js文件夹下新建一个“love.js”，并存入以下内容保存。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"><span class="variable language_">window</span>, <span class="variable language_">document</span>, <span class="literal">undefined</span></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> hearts = [];</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">requestAnimationFrame</span> = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">window</span>.<span class="property">requestAnimationFrame</span> ||</span><br><span class="line">            <span class="variable language_">window</span>.<span class="property">webkitRequestAnimationFrame</span> ||</span><br><span class="line">            <span class="variable language_">window</span>.<span class="property">mozRequestAnimationFrame</span> ||</span><br><span class="line">            <span class="variable language_">window</span>.<span class="property">oRequestAnimationFrame</span> ||</span><br><span class="line">            <span class="variable language_">window</span>.<span class="property">msRequestAnimationFrame</span> ||</span><br><span class="line">            <span class="keyword">function</span> (<span class="params">callback</span>) &#123;</span><br><span class="line">                <span class="built_in">setTimeout</span>(callback, <span class="number">1000</span> / <span class="number">60</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line">    <span class="title function_">init</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">css</span>(</span><br><span class="line">            <span class="string">&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: absolute;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;</span></span><br><span class="line">        );</span><br><span class="line">        <span class="title function_">attachEvent</span>();</span><br><span class="line">        <span class="title function_">gameloop</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">gameloop</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; hearts.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hearts[i].<span class="property">alpha</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(hearts[i].<span class="property">el</span>);</span><br><span class="line">                hearts.<span class="title function_">splice</span>(i, <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            hearts[i].<span class="property">y</span>--;</span><br><span class="line">            hearts[i].<span class="property">scale</span> += <span class="number">0.004</span>;</span><br><span class="line">            hearts[i].<span class="property">alpha</span> -= <span class="number">0.013</span>;</span><br><span class="line">            hearts[i].<span class="property">el</span>.<span class="property">style</span>.<span class="property">cssText</span> = <span class="string">&quot;left:&quot;</span> + hearts[i].<span class="property">x</span> + <span class="string">&quot;px;top:&quot;</span> + hearts[i].<span class="property">y</span> + <span class="string">&quot;px;opacity:&quot;</span> + hearts[i]</span><br><span class="line">                .<span class="property">alpha</span> + <span class="string">&quot;;transform:scale(&quot;</span> + hearts[i].<span class="property">scale</span> + <span class="string">&quot;,&quot;</span> + hearts[i].<span class="property">scale</span> +</span><br><span class="line">                <span class="string">&quot;) rotate(45deg);background:&quot;</span> + hearts[i].<span class="property">color</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">requestAnimationFrame</span>(gameloop);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">attachEvent</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> old = <span class="keyword">typeof</span> <span class="variable language_">window</span>.<span class="property">onclick</span> === <span class="string">&quot;function&quot;</span> &amp;&amp; <span class="variable language_">window</span>.<span class="property">onclick</span>;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">            old &amp;&amp; <span class="title function_">old</span>();</span><br><span class="line">            <span class="title function_">createHeart</span>(event);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">createHeart</span>(<span class="params">event</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> d = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">        d.<span class="property">className</span> = <span class="string">&quot;heart&quot;</span>;</span><br><span class="line">        hearts.<span class="title function_">push</span>(&#123;</span><br><span class="line">            <span class="attr">el</span>: d,</span><br><span class="line">            <span class="attr">x</span>: event.<span class="property">clientX</span> - <span class="number">5</span>,</span><br><span class="line">            <span class="attr">y</span>: event.<span class="property">clientY</span> - <span class="number">5</span>,</span><br><span class="line">            <span class="attr">scale</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">alpha</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">color</span>: <span class="title function_">randomColor</span>()</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(d);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">css</span>(<span class="params">css</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> style = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;style&quot;</span>);</span><br><span class="line">        style.<span class="property">type</span> = <span class="string">&quot;text/css&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            style.<span class="title function_">appendChild</span>(<span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(css));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">            style.<span class="property">styleSheet</span>.<span class="property">cssText</span> = css;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;head&#x27;</span>)[<span class="number">0</span>].<span class="title function_">appendChild</span>(style);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">randomColor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;rgb(&quot;</span> + (~~(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">255</span>)) + <span class="string">&quot;,&quot;</span> + (~~(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">255</span>)) + <span class="string">&quot;,&quot;</span> + (~~(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">255</span>)) +</span><br><span class="line">            <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(<span class="variable language_">window</span>, <span class="variable language_">document</span>);</span><br></pre></td></tr></table></figure>



<p>再到	themes -&gt; next（你的主题名文件夹） -&gt; layout</p>
<p>打开“_layout.swig”文件夹，在最后的 body 之前添加：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 页面点击小红心 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/love.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>7</tag>
      </tags>
  </entry>
  <entry>
    <title>Python+Selenium脚本</title>
    <url>/posts/e4f344ea.html</url>
    <content><![CDATA[<p><strong>python + selenium UI自动化测试脚本原创</strong></p>
<span id="more"></span>

<h1 id="Driver的封装"><a href="#Driver的封装" class="headerlink" title="Driver的封装"></a>Driver的封装</h1><p>针对Webhis-baoji的UI自动化脚本，由于其本地URL是始终固定不变的，所需调用的driver也是不变的，故欲打算采用“单例设计模式”。</p>
<h2 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h2><p>单例（Singleton）模式的定义：指一个类只有一个实例，且该类能自行创建这个实例的一种模式。例如，Windows 中只能打开一个任务管理器，这样可以避免因打开多个任务管理器窗口而造成内存资源的浪费，或出现各个窗口显示内容的不一致等错误。</p>
<p>在计算机系统中，还有 Windows 的回收站、操作系统中的文件系统、多线程中的线程池、显卡的驱动程序对象、打印机的后台处理服务、应用程序的日志对象、数据库的连接池、网站的计数器、Web 应用的配置对象、应用程序中的对话框、系统中的缓存等常常被设计成单例。</p>
<p>单例模式是设计模式中最简单的模式之一。通常，普通类的构造函数是公有的，外部类可以通过“new 构造函数()”来生成多个实例。但是，如果将类的构造函数设为私有的，外部类就无法调用该构造函数，也就无法生成多个实例。这时该类自身必须定义一个静态私有实例，并向外提供一个静态的公有函数用于创建或获取该静态私有实例。</p>
<p>单例模式有 3 个特点：</p>
<ul>
<li>单例类只有一个实例对象</li>
<li>该单例对象必须由单例类自行创建</li>
<li>单例类对外提供一个访问该单例的全局访问点</li>
</ul>
<hr>
<h2 id="UI-WEBHIS目录结构"><a href="#UI-WEBHIS目录结构" class="headerlink" title="UI-WEBHIS目录结构"></a>UI-WEBHIS目录结构</h2><p>本章主在展示driver类的封装，仅以挂号功能作为展示及验证。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">webhis-baoji(主目录)/</span><br><span class="line">│</span><br><span class="line">├── tool(工具子目录)/</span><br><span class="line">│   └── driver.py(driver的封装)</span><br><span class="line">│   └── function.py(函数的调用)</span><br><span class="line">│</span><br><span class="line">└── script(脚本子目录-功能)/	# 以下为当前已实现功能脚本代码</span><br><span class="line"><span class="code">    └── login.py(登录-功能)</span></span><br><span class="line"><span class="code">    └── registered.py(门诊急挂号-功能)</span></span><br><span class="line"><span class="code">    └── orders_entry.py(门诊医嘱录入-功能)</span></span><br><span class="line"><span class="code">    └── &gt;&gt;&gt;...&lt;&lt;&lt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="driver-py"><a href="#driver-py" class="headerlink" title="driver.py"></a>driver.py</h2><p>所需导包：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.service <span class="keyword">import</span> Service</span><br><span class="line"><span class="keyword">import</span> pathlib</span><br></pre></td></tr></table></figure>

<p>封装：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Webhis-Baoji Chrome浏览器驱动 配置及调用&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;-----多个py文件共同调用同一个webhis-driver时, 使用以下方法-----&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DriverSingleton</span>:</span><br><span class="line">    _instance = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getInstance</span>():</span><br><span class="line">        <span class="keyword">if</span> DriverSingleton._instance == <span class="literal">None</span>:</span><br><span class="line">            options = webdriver.ChromeOptions()</span><br><span class="line">            options.add_experimental_option(<span class="string">&#x27;excludeSwitches&#x27;</span>, [<span class="string">&#x27;enable-logging&#x27;</span>])</span><br><span class="line">            options.add_experimental_option(<span class="string">&quot;excludeSwitches&quot;</span>, [<span class="string">&quot;enable-automation&quot;</span>])</span><br><span class="line">            options.add_experimental_option(<span class="string">&quot;useAutomationExtension&quot;</span>, <span class="string">&#x27;False&#x27;</span>)</span><br><span class="line">            options.add_argument(<span class="string">&quot;--user-data-dir=&quot;</span> + <span class="built_in">str</span>(pathlib.Path.home()) + <span class="string">r&quot;\AppData\Local\Google\Chrome\seleniumTest&quot;</span>)</span><br><span class="line">            DriverSingleton._instance = webdriver.Chrome(service=Service(<span class="string">r&#x27;C:\Program Files\Google\Chrome\Application\chromedriver.exe&#x27;</span>), options=options)</span><br><span class="line">        <span class="keyword">return</span> DriverSingleton._instance</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;-----单个py文件单独调用webhis-driver时, 使用以下方法-----&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">options = webdriver.ChromeOptions()</span></span><br><span class="line"><span class="string">options.add_experimental_option(&#x27;excludeSwitches&#x27;, [&#x27;enable-logging&#x27;])</span></span><br><span class="line"><span class="string">options.add_experimental_option(&quot;excludeSwitches&quot;, [&quot;enable-automation&quot;])</span></span><br><span class="line"><span class="string">options.add_experimental_option(&quot;useAutomationExtension&quot;, &#x27;False&#x27;)</span></span><br><span class="line"><span class="string">options.add_argument(&quot;--user-data-dir=&quot; + str(pathlib.Path.home()) + r&quot;\AppData\Local\Google\Chrome\seleniumTest&quot;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 创建 WebDriver 对象, 指明使用chrome浏览器驱动</span></span><br><span class="line"><span class="string">driver = webdriver.Chrome(service=Service(r&#x27;C:\Program Files\Google\Chrome\Application\chromedriver.exe&#x27;), options=options)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>



<p>在这个类中，_instance是一个类变量，用于存储DriverSingleton的实例。getInstance是一个静态方法，用于获取DriverSingleton的实例。</p>
<ul>
<li>如果_instance为None，则创建一个新的webdriver.Chrome实例并将其存储在_instance中。</li>
</ul>
<p>(webdriver.Chrome实例使用了一些特定的选项，例如禁用日志记录，禁用自动化，禁用自动化扩展，并设置用户数据目录)</p>
<ul>
<li>如果_instance不为None，则直接返回_instance。这就保证了无论何时调用getInstance方法，都会返回同一个webdriver.Chrome实例。</li>
</ul>
<p>这种设计模式在需要确保类只有一个实例，并且需要全局访问点的情况下非常有用。在这个情况下，webdriver.Chrome实例在整个应用程序中都使用同一个浏览器实例。</p>
<hr>
<h2 id="function-py"><a href="#function-py" class="headerlink" title="function.py"></a>function.py</h2><p>所需导包：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">&#x27;C:\webhispython\Webhis-test\webhis-baoji&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> inspect</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> NoSuchElementException</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="登录-函数模块"><a href="#登录-函数模块" class="headerlink" title="登录-函数模块"></a>登录-函数模块</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;---登录 模块---&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># login(driver， 用户名, 密码, 登录地点, 登录科室)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">driver, username, password, xpath_role, xpath_location</span>):  <span class="comment"># login(用户名, 密码, 角色, 登录地点)</span></span><br><span class="line">    time.sleep(<span class="number">5</span>)  <span class="comment"># 停止5秒，等待浏览器加载页面</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;系统登录首页&quot;&quot;&quot;</span></span><br><span class="line">    driver.find_element(by=By.ID, value=<span class="string">&#x27;login_username&#x27;</span>).send_keys(username)  <span class="comment"># 用户名</span></span><br><span class="line">    driver.find_element(by=By.ID, value=<span class="string">&#x27;login_password&#x27;</span>).send_keys(password)  <span class="comment"># 密码</span></span><br><span class="line">    driver.find_element(by=By.ID, value=<span class="string">&#x27;nextBtn&#x27;</span>).click()</span><br><span class="line">    driver.implicitly_wait(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;登录详细选项页&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 角色下拉框选值</span></span><br><span class="line">    item = driver.find_element(by=By.ID, value=<span class="string">&#x27;entryForm_roleMstrId&#x27;</span>)</span><br><span class="line">    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class="line">    driver.find_element(by=By.XPATH, value=xpath_role).click()  <span class="comment"># 选择角色</span></span><br><span class="line">    driver.implicitly_wait(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 科室下拉框选值</span></span><br><span class="line">    item = driver.find_element(by=By.ID, value=<span class="string">&#x27;entryForm_locationMstrId&#x27;</span>)</span><br><span class="line">    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class="line">    driver.find_element(by=By.XPATH, value=xpath_location).click()  <span class="comment"># 选择科室</span></span><br><span class="line">    driver.implicitly_wait(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 点击登录跳转</span></span><br><span class="line">    driver.find_element(by=By.ID, value=<span class="string">&#x27;loginBtn&#x27;</span>).send_keys(Keys.ENTER)</span><br><span class="line">    driver.implicitly_wait(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">        function_name = inspect.currentframe().f_code.co_name</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;函数 <span class="subst">&#123;function_name&#125;</span> 执行完成&quot;</span>)</span><br></pre></td></tr></table></figure>



<hr>
<h3 id="门诊急挂号-函数模块"><a href="#门诊急挂号-函数模块" class="headerlink" title="门诊急挂号-函数模块"></a>门诊急挂号-函数模块</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;---门急诊挂号 模块---&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># registration(driver, 患者门诊病案号, 挂号资源代码)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">registration</span>(<span class="params">driver, record_number, registration_resources_code</span>):  <span class="comment"># 门急诊挂号</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)  <span class="comment"># 停止5秒，等待浏览器加载页面</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;进入门急诊挂号页面&quot;&quot;&quot;</span></span><br><span class="line">    item = driver.find_element(by=By.XPATH, value=<span class="string">&quot;//*[@class=&#x27;kt-global-header-common-trigger&#x27;]&quot;</span>)  <span class="comment"># 展开大类菜单</span></span><br><span class="line">    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    driver.find_element(by=By.XPATH, value=<span class="string">&quot;//*[@id=&#x27;root&#x27;]//*[@class=&#x27;ant-menu-submenu-title&#x27;]//*[text()=&#x27;门诊医生站&#x27;]&quot;</span>)  <span class="comment"># 大类菜单</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    item = driver.find_element(by=By.XPATH, value=<span class="string">&quot;//*[@id=&#x27;root&#x27;]//*[@class=&#x27;ant-menu-item ant-menu-item-selected&#x27;]&quot;</span>)  <span class="comment"># 子类菜单(门诊医生站)</span></span><br><span class="line">    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    item = driver.find_element(by=By.XPATH, value=<span class="string">&quot;//*[@class=&#x27;ant-tabs-nav-list&#x27;]//*[text()=&#x27;门诊急挂号&#x27;]&quot;</span>)  <span class="comment"># 进入&quot;门急诊挂号&quot;页面</span></span><br><span class="line">    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    item = driver.find_element(by=By.XPATH, value=<span class="string">&quot;//*[@class=&#x27;kt-global-header-common-trigger&#x27;]&quot;</span>)  <span class="comment"># 缩回大类菜单</span></span><br><span class="line">    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 显式等待, 至&quot;门急诊挂号&quot;ID加载后再执行</span></span><br><span class="line">    wait = WebDriverWait(driver, <span class="number">10</span>)</span><br><span class="line">    wait.until(EC.presence_of_element_located((By.ID, <span class="string">&#x27;rc-tabs-0-tab-5603808&#x27;</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;WPB选择患者&quot;&quot;&quot;</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    item = driver.find_element(by=By.XPATH, value=<span class="string">&quot;//input[contains(@placeholder,&#x27;请输入姓名/手机号/病案号&#x27;)]&quot;</span>)</span><br><span class="line">    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class="line">    <span class="comment"># 输入所需患者门诊病案号, 唯一身份对应信息</span></span><br><span class="line">    driver.find_element(by=By.XPATH, value=<span class="string">&quot;//input[contains(@placeholder,&#x27;请输入姓名/手机号/病案号&#x27;)]&quot;</span>).send_keys(record_number)</span><br><span class="line">    driver.implicitly_wait(<span class="number">10</span>)  <span class="comment"># 待WPB搜索框加载并检索出send的患者数据</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定位第一条患者并点击选中</span></span><br><span class="line">    item = driver.find_element(by=By.XPATH, value=<span class="string">&quot;//*[@class=&#x27;ant-table ant-table-layout-fixed ant-table-fixed-header&#x27;]//*[@class=&#x27;ant-table-tbody&#x27;]/tr[2]&quot;</span>)</span><br><span class="line">    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;选择挂号资源&quot;&quot;&quot;</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    item = driver.find_element(by=By.XPATH, value=<span class="string">&quot;//*[@id=&#x27;rc-tabs-0-panel-5603808&#x27;]/div/div/div/div/div/div/div[1]/form/div/div[95]/div/div/div/span/div/div/div[2]/input&quot;</span>)</span><br><span class="line">    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class="line">    <span class="comment"># 输入所需挂号资源代码, 唯一代码对应信息</span></span><br><span class="line">    driver.find_element(by=By.XPATH, value=<span class="string">&quot;//*[@id=&#x27;rc-tabs-0-panel-5603808&#x27;]/div/div/div/div/div/div/div[1]/form/div/div[95]/div/div/div/span/div/div/div[2]/input&quot;</span>).send_keys(registration_resources_code)</span><br><span class="line">    driver.implicitly_wait(<span class="number">5</span>)  <span class="comment"># 待资源列表加载并检索出send的资源数据</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="comment"># 定位第一条资源并点击选中</span></span><br><span class="line">    driver.find_element(by=By.XPATH, value=<span class="string">&quot;//tr[@data-row-key=&#x27;0&#x27; and contains(@class, &#x27;ant-table-row-selected&#x27;)]&quot;</span>).click()</span><br><span class="line">    driver.implicitly_wait(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;账户支付&quot;&quot;&quot;</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    item = driver.find_element(by=By.XPATH, value=<span class="string">&quot;//*[@class=&#x27;regnRegistration_btnGroup_aOve9&#x27;]//*[contains(text(),&#x27;账户支付&#x27;)]&quot;</span>)</span><br><span class="line">    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class="line">    driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        driver.find_element(By.XPATH, <span class="string">&quot;//*[text()=&#x27;挂号成功！&#x27;]&quot;</span>)</span><br><span class="line">        driver.implicitly_wait(<span class="number">20</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;--- ATTENTION: 患者挂号成功! ---&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> NoSuchElementException:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;--- ATTENTION: 函数正常运行 但未完成挂号, 注意网络延迟并重试! ---&quot;</span>)</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">        function_name = inspect.currentframe().f_code.co_name</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;函数 <span class="subst">&#123;function_name&#125;</span> 执行完成&quot;</span>)</span><br></pre></td></tr></table></figure>



<hr>
<h3 id="门诊医嘱录入-函数模块"><a href="#门诊医嘱录入-函数模块" class="headerlink" title="门诊医嘱录入-函数模块"></a>门诊医嘱录入-函数模块</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;---门诊医嘱录入 模块---&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># outpatient_orders(drivr， 已有挂号患者， pickshell药品， 数量， 剂量， 用法， 频次, 周期)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outpatient_orders</span>(<span class="params">driver, patient_msg, order_insert, quantity, dosage, usage, frequency, cycle</span>):</span><br><span class="line">    time.sleep(<span class="number">5</span>)  <span class="comment"># 停止5秒，等待浏览器加载页面</span></span><br><span class="line"></span><br><span class="line">    item = driver.find_element(by=By.XPATH, value=<span class="string">&quot;//*[@class=&#x27;kt-global-header-common-trigger&#x27;]&quot;</span>)  <span class="comment"># 展开大类菜单</span></span><br><span class="line">    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    driver.find_element(by=By.XPATH, value=<span class="string">&quot;//*[@id=&#x27;root&#x27;]//*[@class=&#x27;ant-menu-submenu-title&#x27;]//*[text()=&#x27;门诊医生站&#x27;]&quot;</span>)  <span class="comment"># 大类菜单</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    item = driver.find_element(by=By.XPATH, value=<span class="string">&quot;//*[@id=&#x27;root&#x27;]//*[@class=&#x27;ant-menu-item ant-menu-item-selected&#x27;]&quot;</span>)  <span class="comment"># 子类菜单(门诊医生站)</span></span><br><span class="line">    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    item = driver.find_element(by=By.XPATH, value=<span class="string">&quot;//*[@class=&#x27;ant-tabs-nav-list&#x27;]//*[text()=&#x27;医生看诊&#x27;]&quot;</span>)  <span class="comment"># 进入&quot;医生看诊&quot;页面</span></span><br><span class="line">    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    item = driver.find_element(by=By.XPATH, value=<span class="string">&quot;//*[@class=&#x27;kt-global-header-common-trigger&#x27;]&quot;</span>)  <span class="comment"># 缩回大类菜单</span></span><br><span class="line">    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    item = driver.find_element(by=By.XPATH, value=<span class="string">&quot;//button[@class=&#x27;ant-btn ant-btn-link ant-btn-icon-only&#x27;]&quot;</span>)  <span class="comment"># 患者列表刷新</span></span><br><span class="line">    webdriver.ActionChains(driver).move_to_element(item).click().perform()</span><br><span class="line">    driver.implicitly_wait(<span class="number">5</span>)</span><br><span class="line">    driver.find_element(by=By.XPATH, value=patient_msg).click()  <span class="comment"># 选中患者列表对应挂号患者</span></span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 显式等待, 医嘱pickshell加载</span></span><br><span class="line">    wait = WebDriverWait(driver, <span class="number">10</span>)</span><br><span class="line">    wait.until(EC.presence_of_element_located((By.XPATH,  <span class="string">&quot;//*[@class=&#x27;kt-datapicker kt-datapicker-singleRow&#x27;]//*[@placeholder=&#x27;请输入&#x27;]&quot;</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定位并点击医嘱pickshell -&gt; 传参, 输入医嘱名称</span></span><br><span class="line">    item = driver.find_element(by=By.XPATH, value=<span class="string">&quot;//*[@class=&#x27;kt-datapicker kt-datapicker-singleRow&#x27;]//*[@placeholder=&#x27;请输入&#x27;]&quot;</span>)</span><br><span class="line">    webdriver.ActionChains(driver).move_to_element(item).click().send_keys(order_insert).perform()</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 选中列表第一条并点击</span></span><br><span class="line">    driver.find_element(By.XPATH, <span class="string">&#x27;//tr[@data-row-key=&quot;0&quot; and contains(@class, &quot;ant-table-row ant-table-row-level-0 kt-table-row-oddeven kt-row-selected-order-picker&quot;)]&#x27;</span>).click()</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;患者当前医嘱列表重复开立弹窗判断&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        wait = WebDriverWait(driver, <span class="number">3</span>)</span><br><span class="line">        wait.until(EC.presence_of_element_located((By.XPATH, <span class="string">&quot;//*[text()=&#x27;已经开立，是否继续？&#x27;]&quot;</span>)))</span><br><span class="line"></span><br><span class="line">        confirm_button = driver.find_element(by=By.XPATH, value=<span class="string">&quot;//*[text()=&#x27;确定&#x27;]&quot;</span>)</span><br><span class="line">        confirm_button.click()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---该医嘱可为此患者开立---&quot;</span>)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;----------数量----------&quot;&quot;&quot;</span></span><br><span class="line">    item = driver.find_element(by=By.ID, value=<span class="string">&quot;orderQtyId1&quot;</span>)</span><br><span class="line">    webdriver.ActionChains(driver).move_to_element(item).send_keys(quantity).perform()</span><br><span class="line">    driver.implicitly_wait(<span class="number">5</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;----------剂量----------&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># &#x27;剂量&#x27;框存在未知异常，无法定位元素</span></span><br><span class="line">    <span class="comment"># 又因前端约束 医嘱落入列表后光标自动定位到&#x27;数量&#x27;框，故使用ActionChains方法模拟TAB操作跳到&#x27;用法&#x27;框</span></span><br><span class="line">    actions = ActionChains(driver)</span><br><span class="line">    actions.send_keys(Keys.TAB, Keys.TAB).perform()</span><br><span class="line">    actions.send_keys(dosage).perform()</span><br><span class="line">    driver.implicitly_wait(<span class="number">5</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;----------用法----------&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># //*[@class=&#x27;kt-editable-cell tabIndex4&#x27;]//input</span></span><br><span class="line">    item = driver.find_element(by=By.XPATH, value=<span class="string">&quot;//*[@class=&#x27;kt-editable-cell tabIndex4&#x27;]&quot;</span>)</span><br><span class="line">    webdriver.ActionChains(driver).move_to_element(item).click().perform()</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 采用上述处理&#x27;剂量&#x27;框异常的方法后，又有未知原因 click定位到&#x27;用法&#x27;框后，光标会重新回到&#x27;剂量&#x27;框</span></span><br><span class="line">    <span class="comment"># 故使用两次click定位&#x27;用法&#x27;框方法，来避免光标异常定位问题，经测试此方法有效</span></span><br><span class="line">    item = driver.find_element(by=By.XPATH, value=<span class="string">&quot;//*[@class=&#x27;kt-editable-cell tabIndex4&#x27;]&quot;</span>)</span><br><span class="line">    webdriver.ActionChains(driver).move_to_element(item).click().perform()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    item = driver.find_element(by=By.XPATH, value=<span class="string">&quot;//*[@class=&#x27;kt-editable-cell tabIndex4&#x27;]&quot;</span>)</span><br><span class="line">    webdriver.ActionChains(driver).move_to_element(item).send_keys(usage).perform()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    webdriver.ActionChains(driver).move_to_element(item).send_keys(Keys.ENTER).perform()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 未知原因 用法框send_key后仍会再弹出下拉框，故设计为传参后立刻点击一处不可编辑区别，强制退出该输入框</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    driver.find_element(by=By.XPATH, value=<span class="string">&quot;//*[@class=&#x27;kt-global-header-common-logo-icon&#x27;]&quot;</span>).click()</span><br><span class="line">    driver.implicitly_wait(<span class="number">5</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;----------频次----------&quot;&quot;&quot;</span></span><br><span class="line">    item = driver.find_element(by=By.XPATH, value=<span class="string">&quot;//*[@class=&#x27;kt-editable-cell tabIndex5&#x27;]&quot;</span>)</span><br><span class="line">    webdriver.ActionChains(driver).move_to_element(item).click().perform()</span><br><span class="line">    driver.implicitly_wait(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    item = driver.find_element(by=By.XPATH, value=<span class="string">&quot;//*[@class=&#x27;kt-editable-cell tabIndex5&#x27;]&quot;</span>)</span><br><span class="line">    webdriver.ActionChains(driver).move_to_element(item).send_keys(frequency).perform()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    webdriver.ActionChains(driver).move_to_element(item).send_keys(Keys.ENTER).perform()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 未知原因 频次框send_key后仍会再弹出下拉框，故设计为传参后立刻点击一处不可编辑区别，强制退出该输入框</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    driver.find_element(by=By.XPATH, value=<span class="string">&quot;//*[@class=&#x27;kt-global-header-common-logo-icon&#x27;]&quot;</span>).click()</span><br><span class="line">    driver.implicitly_wait(<span class="number">5</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;----------周期----------&quot;&quot;&quot;</span></span><br><span class="line">    item = driver.find_element(by=By.XPATH, value=<span class="string">&quot;//*[@class=&#x27;kt-editable-cell tabIndex6&#x27;]&quot;</span>)</span><br><span class="line">    webdriver.ActionChains(driver).move_to_element(item).click().perform()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    item = driver.find_element(by=By.XPATH, value=<span class="string">&quot;//*[@class=&#x27;kt-editable-cell tabIndex6&#x27;]&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        webdriver.ActionChains(driver).move_to_element(item).send_keys(Keys.BACKSPACE).perform()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    item = driver.find_element(by=By.XPATH, value=<span class="string">&quot;//*[@class=&#x27;kt-editable-cell tabIndex6&#x27;]&quot;</span>)</span><br><span class="line">    webdriver.ActionChains(driver).move_to_element(item).send_keys(cycle).perform()</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;医嘱保存&quot;&quot;&quot;</span></span><br><span class="line">    driver.find_element(by=By.XPATH, value=<span class="string">&quot;//*[@class=&#x27;diagnosisAnYang_secondLineItem_RITqA diagnosisAnYang_iconCursor_Jv_RO&#x27;]//*[text()=&#x27;保存&#x27;]&quot;</span>).click()</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;患者医嘱重复预警弹窗判断&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        wait = WebDriverWait(driver, <span class="number">3</span>)</span><br><span class="line">        wait.until(EC.presence_of_element_located((By.XPATH, <span class="string">&quot;//*[@class=&#x27;ant-modal&#x27;]//*[text()=&#x27;医嘱重复报警&#x27;]&quot;</span>)))</span><br><span class="line"></span><br><span class="line">        confirm_button = driver.find_element(by=By.XPATH, value=<span class="string">&quot;//*[text()=&#x27;强制保存&#x27;]&quot;</span>)</span><br><span class="line">        webdriver.ActionChains(driver).move_to_element(confirm_button).click().perform()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---该医嘱可为此患者开立---&quot;</span>)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;医嘱保存成功弹窗校验&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        item = driver.find_element(By.XPATH, <span class="string">&quot;//*[text()=&#x27;医嘱保存成功&#x27;]&quot;</span>)</span><br><span class="line">        webdriver.ActionChains(driver).move_to_element(item).perform()</span><br><span class="line">        driver.implicitly_wait(<span class="number">5</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;--- ATTENTION: 医嘱保存成功! ---&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> NoSuchElementException:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;--- ATTENTION: 函数正常运行 但未成功保存医嘱，注意网络延迟并重试! ---&quot;</span>)</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">        function_name = inspect.currentframe().f_code.co_name</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;函数 <span class="subst">&#123;function_name&#125;</span> 执行完成&quot;</span>)</span><br></pre></td></tr></table></figure>



<hr>
<h3 id="WPB选择患者-函数模块"><a href="#WPB选择患者-函数模块" class="headerlink" title="WPB选择患者-函数模块"></a>WPB选择患者-函数模块</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;---WPB选择患者 模块---&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># wpb_select(driver, 患者门诊病案号)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wpb_select</span>(<span class="params">driver, record_number</span>):</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    item = driver.find_element(by=By.XPATH, value=<span class="string">&quot;//input[contains(@placeholder,&#x27;请输入姓名/手机号/病案号&#x27;)]&quot;</span>)</span><br><span class="line">    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class="line">    <span class="comment"># 输入所需患者门诊病案号, 唯一身份对应信息</span></span><br><span class="line">    driver.find_element(by=By.XPATH, value=<span class="string">&quot;//input[contains(@placeholder,&#x27;请输入姓名/手机号/病案号&#x27;)]&quot;</span>).send_keys(record_number)</span><br><span class="line">    driver.implicitly_wait(<span class="number">10</span>)  <span class="comment"># 待WPB搜索框加载并检索出send的患者数据</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定位第一条患者并点击选中</span></span><br><span class="line">    item = driver.find_element(by=By.XPATH, value=<span class="string">&quot;//*[@class=&#x27;ant-table ant-table-layout-fixed ant-table-fixed-header&#x27;]//*[@class=&#x27;ant-table-tbody&#x27;]/tr[2]&quot;</span>)</span><br><span class="line">    webdriver.ActionChains(driver).move_to_element(item).click(item).perform()</span><br><span class="line">    driver.implicitly_wait(<span class="number">5</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">        function_name = inspect.currentframe().f_code.co_name</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;函数 <span class="subst">&#123;function_name&#125;</span> 执行完成&quot;</span>)</span><br></pre></td></tr></table></figure>



<hr>
<h1 id="Webhis-门诊急挂号-流程测试脚本"><a href="#Webhis-门诊急挂号-流程测试脚本" class="headerlink" title="Webhis-门诊急挂号-流程测试脚本"></a>Webhis-门诊急挂号-流程测试脚本</h1><img src="/posts/e4f344ea/Outpatient_registration.png" class="">

<h2 id="registration-py"><a href="#registration-py" class="headerlink" title="registration.py"></a>registration.py</h2><h3 id="所需导包"><a href="#所需导包" class="headerlink" title="所需导包"></a>所需导包</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">&#x27;C:\webhispython\Webhis-test\webhis-baoji&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tool.driver <span class="keyword">import</span> DriverSingleton  <span class="comment"># 从tool目录driver.py下，调用公用driver驱动</span></span><br><span class="line"><span class="keyword">from</span> tool.function <span class="keyword">import</span> login, registration  <span class="comment"># 从tool目录function.py下，调用login()和registration()函数</span></span><br></pre></td></tr></table></figure>

<h3 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">driver = DriverSingleton.getInstance()  <span class="comment"># 从driver.py下调用DriverSingleton.getInstance()方法以打开同一个driver实例</span></span><br><span class="line">driver.get(url=<span class="string">&quot;http://10.227.16.12/login&quot;</span>)</span><br><span class="line">driver.maximize_window()</span><br><span class="line"><span class="comment"># time.sleep(5)  # 停止5秒，等待浏览器加载页面</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    login(driver, <span class="string">&#x27;RZX&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&quot;//*[text()=&#x27;门急诊医生&#x27;]&quot;</span>, <span class="string">&quot;//*[text()=&#x27;神经内科二科门诊&#x27;]&quot;</span>)  <span class="comment"># 用户名, 密码, 登录地点, 登录科室</span></span><br><span class="line">    registration(driver, <span class="string">&#x27;0000000034&#x27;</span>, <span class="string">&#x27;ZZHRZX&#x27;</span>)  <span class="comment"># &#x27;测试01&#x27;门诊病案号&#x27;0000000034&#x27;, &#x27;专家号-RZX&#x27;挂号资源代码&#x27;ZZHRZX&#x27;</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Success!&quot;</span>)</span><br><span class="line">    driver.quit()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol>
<li>调用 driver.py 中 DriverSingleton 方法下的浏览器驱动 ，作为 driver 被脚本调用</li>
<li>主函数走 function.py 中的 login() 函数进行登录</li>
<li>再走 function.py 中的 registration() 函数进行门诊挂号</li>
</ol>
<p>登录函数 login() 传参： 用户名username， 密码password，登录角色xpath_role，登录地点xpath_location</p>
<p>挂号函数 registration() 传参： 门诊患者病案号record_number， 挂号资源代码registration_resources_code</p>
<hr>
<h1 id="Webhis-门诊单个医嘱录入-流程测试脚本"><a href="#Webhis-门诊单个医嘱录入-流程测试脚本" class="headerlink" title="Webhis-门诊单个医嘱录入-流程测试脚本"></a>Webhis-门诊单个医嘱录入-流程测试脚本</h1><img src="/posts/e4f344ea/Outpatient_doctor_station.png" class="">

<h2 id="orders-entry-py"><a href="#orders-entry-py" class="headerlink" title="orders_entry.py"></a>orders_entry.py</h2><h3 id="所需导包-1"><a href="#所需导包-1" class="headerlink" title="所需导包"></a>所需导包</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">&#x27;C:\webhispython\Webhis-test\webhis-baoji&#x27;</span>)</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tool.driver <span class="keyword">import</span> DriverSingleton  <span class="comment"># 从tool目录driver.py下，调用公用driver驱动</span></span><br><span class="line"><span class="keyword">from</span> tool.function <span class="keyword">import</span> login, outpatient_orders  <span class="comment"># 从tool目录function.py下，调用login()和outpatient_orders()函数</span></span><br></pre></td></tr></table></figure>

<h3 id="主函数-1"><a href="#主函数-1" class="headerlink" title="主函数"></a>主函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">driver = DriverSingleton.getInstance()  <span class="comment"># 从driver.py下调用DriverSingleton.getInstance()方法以打开同一个driver实例</span></span><br><span class="line">driver.get(url=<span class="string">&quot;http://10.227.16.12/login&quot;</span>)</span><br><span class="line">driver.maximize_window()</span><br><span class="line">time.sleep(<span class="number">5</span>)  <span class="comment"># 停止5秒，等待浏览器加载页面</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># driver， 用户名, 密码, 登录地点, 登录科室</span></span><br><span class="line">    login(driver, <span class="string">&#x27;RZX&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&quot;//*[text()=&#x27;门急诊医生&#x27;]&quot;</span>, <span class="string">&quot;//*[text()=&#x27;神经内科二科门诊&#x27;]&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># drivr， 已有挂号患者， pickshell药品， 数量， 剂量， 用法， 频次， 周期</span></span><br><span class="line">    outpatient_orders(driver, <span class="string">&quot;//*[text()=&#x27;测试01 13:54 知名专家号&#x27;]&quot;</span>, <span class="string">&quot;布洛芬缓释胶囊&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;10&quot;</span>, <span class="string">&quot;口服&quot;</span>, <span class="string">&quot;qd8&quot;</span>, <span class="string">&quot;3&quot;</span>)</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Success!&quot;</span>)</span><br><span class="line">    driver.quit()</span><br></pre></td></tr></table></figure>

<ol>
<li>调用 driver.py 中 DriverSingleton 方法下的浏览器驱动 ，作为 driver 被脚本调用</li>
<li>主函数走 function.py 中的 login() 函数进行登录</li>
<li>再走 function.py 中的 outpatient_orders() 函数进行医嘱录入</li>
</ol>
<p>登录函数 login() 传参：driver，用户名username，密码password，登录角色xpath_role，登录地点xpath_location</p>
<p>医嘱录入函数 outpatient_orders() 传参：driver，已有挂号患者patient_msg，pickshell药品order_insert，数量quantity，剂量dosage，用法，频次frequency，周期cycle</p>
<hr>
]]></content>
  </entry>
  <entry>
    <title>Python学习</title>
    <url>/posts/e39e2a4e.html</url>
    <content><![CDATA[<p><strong>Python的学习记录</strong></p>
<span id="more"></span>

<h1 id="Python数据结构"><a href="#Python数据结构" class="headerlink" title="Python数据结构"></a>Python数据结构</h1><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">时间复杂度：是用来估计算法运行时间的一个式子</span><br><span class="line"></span><br><span class="line">一般来说，时间复杂度高的算法比复杂度低的算法慢</span><br><span class="line"></span><br><span class="line">常见时间复杂度效率排序（由高到低）：</span><br><span class="line">O(1) &lt; O(log2^n) &lt; O(n) &lt; O(n * log2^n) &lt; O(n^2) &lt; O(n^2 * log2^n) &lt; O(n^3)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">快速判断算法时间复杂度：</span><br><span class="line">确定问题规模n</span><br><span class="line">循环减半----&gt;&gt;log n</span><br><span class="line">k层关于n的循环----&gt;&gt;n^k</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">空间复杂度：用来评估算法内存占用大小的式子</span><br><span class="line"></span><br><span class="line">算法使用了几个变量：O(1)</span><br><span class="line">算法使用了长度为n的一维列表：O(n)</span><br><span class="line">算法使用了m行n列的二维列表：O(mn)</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>函数的嵌套调用，在函数中调用它自身</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> x &gt; <span class="number">0</span>:</span><br><span class="line">        func1(x-<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func2</span>(<span class="params">y</span>):</span><br><span class="line">    <span class="keyword">if</span> y &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(y)</span><br><span class="line">        func2(y-<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>递归：计算1+2+…+100的值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum_int</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> n + sum_int(n-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>递归：汉诺塔问题实例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">汉诺塔问题</span></span><br><span class="line"><span class="string">有n个大小不同的碗，三个盘子，需要将n个碗从一个盘子，保持原样的移动到另一个盘子中去，不改变原本n个碗的摆放顺序</span></span><br><span class="line"><span class="string">    初始 : n个碗由上到下，由小至大放置于一个盘子之上</span></span><br><span class="line"><span class="string">    结果 : 在不改变n个碗的摆放顺序的条件下，将所有n个碗&quot;平移&quot;到另一个盘子之上</span></span><br><span class="line"><span class="string">        要求 : 一次只能移动一个碗，且小碗必须在大碗上面</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">例:</span></span><br><span class="line"><span class="string">现有 A B C 三个盘子，a(小碗) b(中碗) c(大碗) 三个碗，</span></span><br><span class="line"><span class="string">初始: abc摞在A上</span></span><br><span class="line"><span class="string">过程:</span></span><br><span class="line"><span class="string">    a -&gt; C | b -&gt; B | a -&gt; B | c -&gt; C | a -&gt; A | b -&gt; C | a -&gt; C</span></span><br><span class="line"><span class="string">结束: 原在A上的abc，平移至C上，共计如上移动了七次</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">当有n个碗需要平移时，可以近似将n个碗拆分成 最大的第n个碗 和 其他(n-1)个碗</span></span><br><span class="line"><span class="string">此时类似于</span></span><br><span class="line"><span class="string">    第一步 : (n-1)个碗 从A 经过C 至B</span></span><br><span class="line"><span class="string">    第二步 : 最大的第n个碗 从A 至C</span></span><br><span class="line"><span class="string">    第三步 : (n-1)个碗 从B 经过A 至C</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hanoi</span>(<span class="params">n, a, b, c</span>):  <span class="comment"># 定义的参数的意思是(n个碗， 从盘子a， 经过盘子b， 到达盘子c)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> n &gt; <span class="number">0</span>:  <span class="comment"># 碗的数量大于0，才有后续递归。即递归终止的条件</span></span><br><span class="line">        hanoi(n-<span class="number">1</span>, a, c, b)  <span class="comment"># 对应上述第一步:从a 经过c 到达b</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;从 %s 到 %s&quot;</span> % (a, c))</span><br><span class="line">        hanoi(n-<span class="number">1</span>, b, a, c)  <span class="comment"># 对应上述第三步:从b 经过a 到达c</span></span><br><span class="line"></span><br><span class="line">hanoi(<span class="number">3</span>, <span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>)</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="Python算法"><a href="#Python算法" class="headerlink" title="Python算法"></a>Python算法</h1><p><strong>查找:在一些数据元素中，通过一定的方法找出与给定关键字相同的数据元素的过程</strong></p>
<p>列表查找(线性表查找):从列表中查找指定元素<br>    输入:列表、待查找元素<br>    输出:元素下标(未找到元素时一般返回None或-1)</p>
<p><strong>Python内置列表查找函数: index()</strong></p>
<h2 id="线性查找"><a href="#线性查找" class="headerlink" title="线性查找"></a>线性查找</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 线性查找(linear_search)：从列表第一个元素开始，顺序进行搜索，直到找到元素或搜索到列表最后一个元素为止。</span></span><br><span class="line"><span class="comment"># 时间复杂度 O(n)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">linear_search</span>(<span class="params">li, val</span>):</span><br><span class="line">    <span class="keyword">for</span> ind, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(li):  <span class="comment"># enumerate()是Python的内置函数</span></span><br><span class="line">        <span class="keyword">if</span> v == val:</span><br><span class="line">            <span class="keyword">return</span> ind</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">不用<span class="built_in">enumerate</span>()函数的代码:</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">linear_search</span>(<span class="params">list_str, n, val</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, n):</span><br><span class="line">        <span class="keyword">if</span> (list_str[i] == val):</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure>

<h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 二分查找的对象必须为 【！！！ 有序列表 ！！！】</span></span><br><span class="line"><span class="comment"># 二分查找(Binary_search):又叫折半查找，从有序列表的初始候选区li[0:n]开始，通过对待查找的值与候选区中间值的比较，可以使候选区减少一半</span></span><br><span class="line"><span class="comment"># 时间复杂度 O(log n)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">binary_search</span>(<span class="params">li, val</span>):</span><br><span class="line">    left = <span class="number">0</span></span><br><span class="line">    right = <span class="built_in">len</span>(li) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> left &lt;= right:  <span class="comment"># 候选区有值</span></span><br><span class="line">        mid = (left + right) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> li[mid] == val:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">elif</span> li[mid] &gt; val:</span><br><span class="line">            right = mid - <span class="number">1</span>  <span class="comment"># 待查找的值在mid左侧</span></span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># li(mid) &lt; val 待查找的值在mid右侧</span></span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>

<hr>
<p><strong>排序 : 将一组 无序 的记录序列调整为 有序 的记录序列</strong></p>
<p>列表排序 : 将无序列表变为有序列表<br>    输入 : 列表<br>    输出 : 有序列表</p>
<p>升序与降序</p>
<p><strong>Python内置排序函数 : sort()</strong></p>
<p>常见排序算法：冒泡排序，选择排序，插入排序<br>            快速排序，堆排序，归并排序<br>            希尔排序，计数排序，基数排序</p>
<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">冒泡排序Bubble Sort         时间复杂度O(n^2)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">列表每两个相邻的数，如果前面的比后面的大，则交换这两个数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">一趟排序完成后，则无序区减少一个数，有序区增加一个数</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bubble_sort</span>(<span class="params">li</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)-<span class="number">1</span>):  <span class="comment"># 第i趟</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)-i-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> li[j] &gt; li[j+<span class="number">1</span>]:  <span class="comment"># j &gt; j+1 为升序排序，改为j &lt; j+1 则为降序排序</span></span><br><span class="line">                li[j], li[j+<span class="number">1</span>] = li[j+<span class="number">1</span>], li[j]</span><br><span class="line">        <span class="built_in">print</span>(li)  <span class="comment"># 打印每一趟排序</span></span><br></pre></td></tr></table></figure>

<h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">选择排序select sort         时间复杂度O(n^2)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">依次遍历列表，每次遍历返回一个最小的元素，再遍历剩下元素找到剩下元素中最小的，循环直到遍历全部最小的元素</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">select_sort</span>(<span class="params">li</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)-<span class="number">1</span>):  <span class="comment"># i是第几趟</span></span><br><span class="line">        min_loc = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, <span class="built_in">len</span>(li)):</span><br><span class="line">            <span class="keyword">if</span> li[j] &lt; li[min_loc]:</span><br><span class="line">                min_loc = j</span><br><span class="line">        li[i], li[min_loc] = li[min_loc], li[i]</span><br><span class="line">        <span class="built_in">print</span>(li)</span><br></pre></td></tr></table></figure>

<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">插入排序insert sort         时间复杂度O(n^2)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">初始有序区只有一个元素，从无序区拿来一个元素，按有序插入原有序区，如此循环</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">insert_sort</span>(<span class="params">li</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(li)):  <span class="comment"># i 表示拿到的元素的下标</span></span><br><span class="line">        tmp = li[i]</span><br><span class="line">        j = i - <span class="number">1</span>  <span class="comment"># j 指的是已存入有序区的元素</span></span><br><span class="line">        <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> li[j] &gt; tmp:</span><br><span class="line">            li[j+<span class="number">1</span>] = li[j]</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        li[j+<span class="number">1</span>] = tmp</span><br><span class="line">        <span class="built_in">print</span>(li)</span><br></pre></td></tr></table></figure>

<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">快速排序quick sort:         时间复杂度O(n * log n)</span></span><br><span class="line"><span class="string">取一个元素p（第一个元素），使元素p归位</span></span><br><span class="line"><span class="string">列表被p分成左右两个部分，左边都比p小，右边都比p大。递归完成排序。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">partition</span>(<span class="params">li, left, right</span>):  <span class="comment"># left左指针对应0号元素，right右指针对应n-1号元素</span></span><br><span class="line">    tmp = li[left]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> left &lt; right:</span><br><span class="line">        <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> li[right] &gt;= tmp:  <span class="comment"># 从右边找比tmp小的数</span></span><br><span class="line">            right -= <span class="number">1</span>           <span class="comment"># 往左走一步</span></span><br><span class="line">        li[left] = li[right]  <span class="comment"># 把右边的值写到左边空位上</span></span><br><span class="line">        <span class="comment"># print(li)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> li[left] &lt;= tmp:   <span class="comment"># 从左边找比tmp大的数</span></span><br><span class="line">            left += <span class="number">1</span>            <span class="comment"># 往右走一步</span></span><br><span class="line">        li[right] = li[left]  <span class="comment"># 把左边的值写到右边空位上</span></span><br><span class="line">        <span class="comment"># print(li)</span></span><br><span class="line"></span><br><span class="line">    li[left] = tmp  <span class="comment"># 把tmp归位</span></span><br><span class="line">    <span class="keyword">return</span> left</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">quick_sort</span>(<span class="params">li, left, right</span>):</span><br><span class="line">    <span class="keyword">if</span> left &lt; right:  <span class="comment"># 表示列表至少有两个元素</span></span><br><span class="line">        mid = partition(li, left, right)</span><br><span class="line">        quick_sort(li, left, mid-<span class="number">1</span>)</span><br><span class="line">        quick_sort(li, mid+<span class="number">1</span>, right)</span><br></pre></td></tr></table></figure>

<h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">堆排序的过程：         时间复杂度O(n * log n)</span></span><br><span class="line"><span class="string">        建立堆</span></span><br><span class="line"><span class="string">        得到堆顶元素，为最大元素</span></span><br><span class="line"><span class="string">        去掉堆顶，将堆最后一个元素放到堆顶，此时可通过一次调整重新使堆有序</span></span><br><span class="line"><span class="string">        堆顶元素为第二大元素</span></span><br><span class="line"><span class="string">        重复&quot;去掉堆顶...&quot;操作，直到堆变空</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sift</span>(<span class="params">li, low, high</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param li: 列表</span></span><br><span class="line"><span class="string">    :param low: 堆的根节点的位置</span></span><br><span class="line"><span class="string">    :param high: 堆的最后一个元素的位置</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    i = low  <span class="comment"># i最开始指向根节点</span></span><br><span class="line">    j = <span class="number">2</span> * i + <span class="number">1</span>  <span class="comment"># j开始是i的左孩子</span></span><br><span class="line">    tmp = li[low]  <span class="comment"># 把堆顶存起来</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= high:  <span class="comment"># 只要j位置有数</span></span><br><span class="line">        <span class="keyword">if</span> j + <span class="number">1</span> &lt;= high <span class="keyword">and</span> li[j+<span class="number">1</span>] &gt; li[j]:  <span class="comment"># 如果右孩子存在且比左孩子大</span></span><br><span class="line">            j = j + <span class="number">1</span>  <span class="comment"># 将j指向右孩子</span></span><br><span class="line">        <span class="keyword">if</span> li[j] &gt; tmp:</span><br><span class="line">            li[i] = li[j]</span><br><span class="line">            i = j  <span class="comment"># 往下看一层</span></span><br><span class="line">            j = <span class="number">2</span> * i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># tmp更大，把tmp放到i的位置上</span></span><br><span class="line">            li[i] = tmp  <span class="comment"># 把tmp放到某一级领导位置上</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        li[i] = tmp  <span class="comment"># 把tmp放到叶子节点上</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">heap_sort</span>(<span class="params">li</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(li)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>((n-<span class="number">2</span>)//<span class="number">2</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># i表示建堆的时候调整的部分的根的下标</span></span><br><span class="line">        sift(li, i, n-<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 建堆完成</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        li[<span class="number">0</span>], li[i] = li[i], li[<span class="number">0</span>]</span><br><span class="line">        sift(li, <span class="number">0</span>, i-<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">将列表由mid分为两边low, high</span></span><br><span class="line"><span class="string">由low-&gt;mid，mid+1-&gt;high两部分</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">时间复杂度O(n * log n)</span></span><br><span class="line"><span class="string">空间复杂度O(n)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">分解：将列表越分越小，直至分成一个元素</span></span><br><span class="line"><span class="string">终止条件：一个元素是有序的</span></span><br><span class="line"><span class="string">合并：将两个有序列表归并，列表越来越大</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">li, low, mid, high</span>):</span><br><span class="line">    i = low</span><br><span class="line">    j = mid + <span class="number">1</span></span><br><span class="line">    ltmp = []</span><br><span class="line">    <span class="keyword">while</span> i &lt;= mid <span class="keyword">and</span> j &lt;= high:</span><br><span class="line">        <span class="keyword">if</span> li[i] &lt; li[j]:</span><br><span class="line">            ltmp.append(li[i])</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ltmp.append(li[j])</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">    <span class="comment"># while执行完后，左半和右半肯定有一部分没有可比较元素</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= mid:</span><br><span class="line">        ltmp.append(li[i])</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= high:</span><br><span class="line">        ltmp.append(li[j])</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">    li[low:high+<span class="number">1</span>] = ltmp</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge_sort</span>(<span class="params">li, low, high</span>):</span><br><span class="line">    <span class="keyword">if</span> low &lt; high:  <span class="comment"># 至少有两个元素</span></span><br><span class="line">        mid = (low + high) // <span class="number">2</span></span><br><span class="line">        merge_sort(li, low, mid)</span><br><span class="line">        merge_sort(li, mid+<span class="number">1</span>, high)</span><br><span class="line">        merge(li, low, mid, high)</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="Python实战"><a href="#Python实战" class="headerlink" title="Python实战"></a>Python实战</h1><h2 id="名片管理系统-基础"><a href="#名片管理系统-基础" class="headerlink" title="名片管理系统(基础)"></a>名片管理系统(基础)</h2><h3 id="实现的功能"><a href="#实现的功能" class="headerlink" title="实现的功能"></a>实现的功能</h3><ol>
<li>无限循环实现系统的连续操作</li>
<li>实现系统基本的增删改查和显示功能</li>
</ol>
<h3 id="cards-main-py"><a href="#cards-main-py" class="headerlink" title="cards_main.py"></a>cards_main.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cards_tools</span><br><span class="line"><span class="comment"># 无限循环方法</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 主界面显示</span></span><br><span class="line">    cards_tools.show_menu()</span><br><span class="line"></span><br><span class="line">    user = <span class="built_in">input</span>(<span class="string">&quot;请选择将要进行的操作:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;您选择的操作是 %s&quot;</span> % user)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 系统执行操作1、2、3</span></span><br><span class="line">    <span class="keyword">if</span> user <span class="keyword">in</span> [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>]:</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 新增名片功能</span></span><br><span class="line">        <span class="keyword">if</span> user == <span class="string">&quot;1&quot;</span>:</span><br><span class="line">            cards_tools.new_card()</span><br><span class="line">        <span class="comment"># 显示名片功能</span></span><br><span class="line">        <span class="keyword">elif</span> user == <span class="string">&quot;2&quot;</span>:</span><br><span class="line">            cards_tools.show_card()</span><br><span class="line">        <span class="comment"># 查询名片功能</span></span><br><span class="line">        <span class="keyword">elif</span> user == <span class="string">&quot;3&quot;</span>:</span><br><span class="line">            cards_tools.search_card()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 退出系统</span></span><br><span class="line">    <span class="keyword">elif</span> user == <span class="string">&quot;0&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;欢迎再次使用【名片管理系统】&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 用户输入错误3</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;输入错误，请重新输入&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="cards-tools-py"><a href="#cards-tools-py" class="headerlink" title="cards_tools.py"></a>cards_tools.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">card_list = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_menu</span>():</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;主界面的显示&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;* &quot;</span> * <span class="number">15</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;    欢迎使用【名片管理系统】&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;        1.新增名片&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;        2.显示名片&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;        3.查找名片&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;        0.退出系统&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;* &quot;</span> * <span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">new_card</span>():</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;新增名片&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;1.新增名片&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1.用户依次输入名片的所有信息</span></span><br><span class="line">    name = <span class="built_in">input</span>(<span class="string">&quot;请输入用户的姓名:&quot;</span>)</span><br><span class="line">    phone = <span class="built_in">input</span>(<span class="string">&quot;请输入用户的电话号码:&quot;</span>)</span><br><span class="line">    qq = <span class="built_in">input</span>(<span class="string">&quot;请输入用户的qq号码:&quot;</span>)</span><br><span class="line">    email = <span class="built_in">input</span>(<span class="string">&quot;请输入用户的邮箱:&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.新建一个字典用于保存用户的输入</span></span><br><span class="line">    card_dict = &#123;<span class="string">&quot;name&quot;</span>: name,</span><br><span class="line">                 <span class="string">&quot;phone&quot;</span>: phone,</span><br><span class="line">                 <span class="string">&quot;qq&quot;</span>: qq,</span><br><span class="line">                 <span class="string">&quot;email&quot;</span>: email&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3.将该字典的信息存放到数组上</span></span><br><span class="line">    card_list.append(card_dict)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(card_list)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4.提示用户添加成功</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;用户 %s 的信息添加成功&quot;</span> % name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_card</span>():</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示名片&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;2.显示名片&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;- &quot;</span> * <span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断是否存在名片信息记录，若没有，提示用户返回</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(card_list) == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;当前没有任何名片，请使用新增功能先添加名片再进行后续操作！&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打印表头</span></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> card_list:</span><br><span class="line">        <span class="built_in">print</span>(name, end=<span class="string">&quot;\t\t&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> card_dict <span class="keyword">in</span> card_list:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s\t\t%s\t\t%s\t\t%s&quot;</span> % (card_dict[<span class="string">&quot;name&quot;</span>],</span><br><span class="line">                                        card_dict[<span class="string">&quot;phone&quot;</span>],</span><br><span class="line">                                        card_dict[<span class="string">&quot;qq&quot;</span>],</span><br><span class="line">                                        card_dict[<span class="string">&quot;email&quot;</span>]))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;- &quot;</span> * <span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search_card</span>():</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;查找名片&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;3.查找名片&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1.提示用户输入要搜索的姓名</span></span><br><span class="line">    find_name = <span class="built_in">input</span>(<span class="string">&quot;请输入要搜索的用户姓名:&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.遍历名片列表，查询要搜索的姓名，若没有，需要提示用户</span></span><br><span class="line">    <span class="keyword">for</span> card_dict <span class="keyword">in</span> card_list:</span><br><span class="line">        <span class="keyword">if</span> card_dict[<span class="string">&quot;name&quot;</span>] == find_name:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;姓名\t\t电话\t\tQQ\t\t地址&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;%s\t\t%s\t\t%s\t\t%s&quot;</span> % (card_dict[<span class="string">&quot;name&quot;</span>],</span><br><span class="line">                                            card_dict[<span class="string">&quot;phone&quot;</span>],</span><br><span class="line">                                            card_dict[<span class="string">&quot;qq&quot;</span>],</span><br><span class="line">                                            card_dict[<span class="string">&quot;email&quot;</span>]))</span><br><span class="line">            <span class="comment"># 针对找到的名片执行修改和删除操作</span></span><br><span class="line">            deal_card(card_dict)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;没有找到 %s 的信息&quot;</span> % find_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deal_card</span>(<span class="params">find_dict</span>):</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(find_dict)</span><br><span class="line"></span><br><span class="line">    user_do = <span class="built_in">input</span>(<span class="string">&quot;请选择要执行的操作&quot;</span></span><br><span class="line">                    <span class="string">&quot;[1]修改  [2]删除  [0]返回上一级&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> user_do == <span class="string">&quot;1&quot;</span>:</span><br><span class="line">        find_dict[<span class="string">&quot;name&quot;</span>] = input_card_info(find_dict[<span class="string">&quot;name&quot;</span>], <span class="string">&quot;姓名:&quot;</span>)</span><br><span class="line">        find_dict[<span class="string">&quot;phone&quot;</span>] = input_card_info(find_dict[<span class="string">&quot;phone&quot;</span>], <span class="string">&quot;电话:&quot;</span>)</span><br><span class="line">        find_dict[<span class="string">&quot;qq&quot;</span>] = input_card_info(find_dict[<span class="string">&quot;qq&quot;</span>], <span class="string">&quot;QQ:&quot;</span>)</span><br><span class="line">        find_dict[<span class="string">&quot;email&quot;</span>] = input_card_info(find_dict[<span class="string">&quot;email&quot;</span>], <span class="string">&quot;邮箱:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;修改名片成功&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> user_do == <span class="string">&quot;2&quot;</span>:</span><br><span class="line">        card_list.remove(find_dict)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;删除名片成功&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">input_card_info</span>(<span class="params">dict_value, tip_message</span>):</span><br><span class="line"></span><br><span class="line">    result_str = <span class="built_in">input</span>(tip_message)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(result_str) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> result_str</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> dict_value</span><br></pre></td></tr></table></figure>

<h3 id="控制台效果展示"><a href="#控制台效果展示" class="headerlink" title="控制台效果展示"></a>控制台效果展示</h3><img src="/posts/e39e2a4e/%E5%90%8D%E7%89%87%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E6%95%88%E6%9E%9C%E5%9B%BE1.jpg" class="">

<img src="/posts/e39e2a4e/%E5%90%8D%E7%89%87%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E6%95%88%E6%9E%9C%E5%9B%BE2.jpg" class="">

<img src="/posts/e39e2a4e/%E5%90%8D%E7%89%87%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E6%95%88%E6%9E%9C%E5%9B%BE3.jpg" class="">

<hr>
<h2 id="飞机大战游戏-pygame"><a href="#飞机大战游戏-pygame" class="headerlink" title="飞机大战游戏(pygame)"></a>飞机大战游戏(pygame)</h2><h3 id="实现的功能-1"><a href="#实现的功能-1" class="headerlink" title="实现的功能"></a><strong>实现的功能</strong></h3><ol>
<li>背景图片的滚动播放</li>
<li>碰撞检测—-子弹碰撞飞机，敌机碰撞飞机</li>
<li>键盘←→控制飞机的左右移动</li>
<li>random随机数实现敌机的出现数量</li>
<li>代码中可直接修改所有飞机的移动速度</li>
</ol>
<h3 id="plane-main-py"><a href="#plane-main-py" class="headerlink" title="plane_main.py"></a>plane_main.py</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># import pygame 飞机精灵导入了pygame的模块</span></span><br><span class="line"><span class="keyword">from</span> plane_sprites <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PlaneGame</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;飞机大战主游戏&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;...游戏初始化...&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1.创建游戏窗口</span></span><br><span class="line">        self.screen = pygame.display.set_mode(SCREEN_RECT.size)</span><br><span class="line">        <span class="comment"># 2.创建游戏时钟</span></span><br><span class="line">        self.clock = pygame.time.Clock()</span><br><span class="line">        <span class="comment"># 3.调用私有方法，精灵和精灵组的创建</span></span><br><span class="line">        self.__create_sprites()</span><br><span class="line">        <span class="comment"># 4.设置定时器事件 - 创建敌机 1s/架</span></span><br><span class="line">        pygame.time.set_timer(CREATE_ENEMY_EVENT, <span class="number">1000</span>)  <span class="comment"># 第二个参数以毫秒为单位</span></span><br><span class="line">        pygame.time.set_timer(HERO_FIRE_EVENT, <span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__create_sprites</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 创建背景精灵和精灵组</span></span><br><span class="line">        bg1 = Background()</span><br><span class="line">        bg2 = Background(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        self.back_group = pygame.sprite.Group(bg1, bg2)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建敌机的精灵组</span></span><br><span class="line">        self.enemy_group = pygame.sprite.Group()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建英雄的精灵和精灵组</span></span><br><span class="line">        self.hero = Hero()</span><br><span class="line">        self.hero_group = pygame.sprite.Group(self.hero)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start_game</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;...游戏开始...&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 1.设置刷新帧率</span></span><br><span class="line">            self.clock.tick(FRAME_PER_SEC)</span><br><span class="line">            <span class="comment"># 2.事件监听</span></span><br><span class="line">            self.__event_handler()</span><br><span class="line">            <span class="comment"># 3.碰撞检测</span></span><br><span class="line">            self.__check_collide()</span><br><span class="line">            <span class="comment"># 4.更新/绘制精灵组</span></span><br><span class="line">            self.__update_sprites()</span><br><span class="line">            <span class="comment"># 5.更新显示</span></span><br><span class="line">            pygame.display.update()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__event_handler</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">            <span class="comment"># 判断是否退出游戏</span></span><br><span class="line">            <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.QUIT:</span><br><span class="line">                PlaneGame.__game_over()</span><br><span class="line">            <span class="keyword">elif</span> event.<span class="built_in">type</span> == CREATE_ENEMY_EVENT:</span><br><span class="line">                <span class="comment"># print(&quot;...敌机出场...&quot;)</span></span><br><span class="line">                <span class="comment"># 创建敌机精灵</span></span><br><span class="line">                enemy = Enemy()</span><br><span class="line">                <span class="comment"># 将敌机精灵添加到敌机精灵组</span></span><br><span class="line">                self.enemy_group.add(enemy)</span><br><span class="line">            <span class="keyword">elif</span> event.<span class="built_in">type</span> == HERO_FIRE_EVENT:</span><br><span class="line">                self.hero.fire()</span><br><span class="line">            <span class="comment"># elif event.type == pygame.KEY_DOWN and event.key == pygame.K_RIGHT:</span></span><br><span class="line">                <span class="comment"># print(&quot;向右移动&quot;)</span></span><br><span class="line">        <span class="comment"># 使用键盘提供的方法获取键盘按键</span></span><br><span class="line">        keys_pressed = pygame.key.get_pressed()</span><br><span class="line">        <span class="comment"># 判断元组中对应的按键索引值</span></span><br><span class="line">        <span class="keyword">if</span> keys_pressed[pygame.K_RIGHT]:</span><br><span class="line">            self.hero.speed = <span class="number">5</span></span><br><span class="line">        <span class="keyword">elif</span> keys_pressed[pygame.K_LEFT]:</span><br><span class="line">            self.hero.speed = -<span class="number">5</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.hero.speed = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__check_collide</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 1.子弹摧毁敌机</span></span><br><span class="line">        pygame.sprite.groupcollide(self.hero.bullets, self.enemy_group, <span class="literal">True</span>, <span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 2.敌机撞毁英雄</span></span><br><span class="line">        enemies = pygame.sprite.spritecollide(self.hero, self.enemy_group, <span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 3.判断列表是否有内容</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(enemies) &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 让英雄牺牲</span></span><br><span class="line">            self.hero.kill()</span><br><span class="line">            <span class="comment"># 结束游戏</span></span><br><span class="line">            PlaneGame.__game_over()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__update_sprites</span>(<span class="params">self</span>):</span><br><span class="line">        self.back_group.update()</span><br><span class="line">        self.back_group.draw(self.screen)</span><br><span class="line"></span><br><span class="line">        self.enemy_group.update()</span><br><span class="line">        self.enemy_group.draw(self.screen)</span><br><span class="line"></span><br><span class="line">        self.hero_group.update()</span><br><span class="line">        self.hero_group.draw(self.screen)</span><br><span class="line"></span><br><span class="line">        self.hero.bullets.update()</span><br><span class="line">        self.hero.bullets.draw(self.screen)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__game_over</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;游戏结束&quot;</span>)</span><br><span class="line">        pygame.quit()</span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 创建游戏对象</span></span><br><span class="line">    game = PlaneGame()</span><br><span class="line">    <span class="comment"># 启动游戏</span></span><br><span class="line">    game.start_game()</span><br></pre></td></tr></table></figure>

<h3 id="plane-sprites-py"><a href="#plane-sprites-py" class="headerlink" title="plane_sprites.py"></a>plane_sprites.py</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"></span><br><span class="line"><span class="comment"># 屏幕大小的常量</span></span><br><span class="line">SCREEN_RECT = pygame.Rect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">480</span>, <span class="number">700</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 刷新的帧率</span></span><br><span class="line">FRAME_PER_SEC = <span class="number">60</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建敌机的定时器常量</span></span><br><span class="line">CREATE_ENEMY_EVENT = pygame.USEREVENT</span><br><span class="line"></span><br><span class="line"><span class="comment"># 英雄发射子弹事件</span></span><br><span class="line">HERO_FIRE_EVENT = pygame.USEREVENT + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GameSprite</span>(pygame.sprite.Sprite):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;飞机大战游戏精灵&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, image_name, speed=<span class="number">1</span></span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 调用父类的初始化方法</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 定义对象的属性</span></span><br><span class="line">        self.image = pygame.image.load(image_name)</span><br><span class="line">        self.rect = self.image.get_rect()</span><br><span class="line">        self.speed = speed</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 在屏幕的垂直方向上移动</span></span><br><span class="line">        self.rect.y += self.speed</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Background</span>(<span class="title class_ inherited__">GameSprite</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;游戏背景精灵&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, is_alt=<span class="literal">False</span></span>):</span><br><span class="line">        <span class="comment"># 1.调用父类方法实现精灵的创建(image/rect/speed)</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(<span class="string">&quot;./images/background.png&quot;</span>)</span><br><span class="line">        <span class="comment"># 2.判断是否是交替图像，如果是，需要设置初始位置</span></span><br><span class="line">        <span class="keyword">if</span> is_alt:</span><br><span class="line">            self.rect.y = -self.rect.height</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1.调用父类的方法实现</span></span><br><span class="line">        <span class="built_in">super</span>().update()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2.判断图像是否移出屏幕，若移出，将图像设置到屏幕的上方</span></span><br><span class="line">        <span class="keyword">if</span> self.rect.y &gt;= SCREEN_RECT.height:</span><br><span class="line">            self.rect.y = -self.rect.height</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Enemy</span>(<span class="title class_ inherited__">GameSprite</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;敌机精灵&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 1.调用父类方法，创建敌机精灵，同时指定敌机图片</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(<span class="string">&quot;./images/enemy1.png&quot;</span>)</span><br><span class="line">        <span class="comment"># 2.指定敌机的初始随机速度</span></span><br><span class="line">        self.speed = random.randint(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line">        <span class="comment"># 3.指定敌机的初始随机位置</span></span><br><span class="line">        self.rect.bottom = <span class="number">0</span></span><br><span class="line">        max_x = SCREEN_RECT.width - self.rect.width</span><br><span class="line">        self.rect.x = random.randint(<span class="number">0</span>, max_x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 1.调用父类方法，保持垂直方向的飞行</span></span><br><span class="line">        <span class="built_in">super</span>().update()</span><br><span class="line">        <span class="comment"># 2.判断是否飞出屏幕，如果是，需要从精灵组删除敌机</span></span><br><span class="line">        <span class="keyword">if</span> self.rect.y &gt;= SCREEN_RECT.height:</span><br><span class="line">            <span class="comment"># print(&quot;飞出屏幕，需要从精灵组删除&quot;)</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># kill方法可以将精灵从所有精灵组中移出，精灵就会被自动销毁</span></span><br><span class="line">            self.kill()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># print(&quot;敌机爆炸 %s&quot; % self.rect)</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hero</span>(<span class="title class_ inherited__">GameSprite</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;英雄精灵&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 1.调用父类方法，设置image&amp;speed</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(<span class="string">&quot;./images/me1.png&quot;</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="comment"># 2.设置英雄的初始位置</span></span><br><span class="line">        self.rect.centerx = SCREEN_RECT.centerx</span><br><span class="line">        self.rect.bottom = SCREEN_RECT.bottom - <span class="number">120</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3.创建子弹的精灵组</span></span><br><span class="line">        self.bullets = pygame.sprite.Group()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 英雄在水平方向移动</span></span><br><span class="line">        self.rect.x += self.speed</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 控制英雄不能离开屏幕</span></span><br><span class="line">        <span class="keyword">if</span> self.rect.x &lt; <span class="number">0</span>:</span><br><span class="line">            self.rect.x = <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> self.rect.right &gt; SCREEN_RECT.right:</span><br><span class="line">            self.rect.right = SCREEN_RECT.right</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fire</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># print(&quot;发射子弹&quot;)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>):</span><br><span class="line">            <span class="comment"># 1.创建子弹精灵</span></span><br><span class="line">            bullet = Bullet()</span><br><span class="line">            <span class="comment"># 2.设置精灵的位置</span></span><br><span class="line">            bullet.rect.bottom = self.rect.y - i * <span class="number">20</span></span><br><span class="line">            bullet.rect.centerx = self.rect.centerx</span><br><span class="line">            <span class="comment"># 3.将精灵添加到精灵组</span></span><br><span class="line">            self.bullets.add(bullet)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bullet</span>(<span class="title class_ inherited__">GameSprite</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;子弹精灵&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 调用父类方法，设置子弹图片，设置初始速度</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(<span class="string">&quot;./images/bullet1.png&quot;</span>, -<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 调用父类方法，让子弹沿垂直方向飞行</span></span><br><span class="line">        <span class="built_in">super</span>().update()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断子弹是否飞出屏幕</span></span><br><span class="line">        <span class="keyword">if</span> self.rect.bottom &lt; <span class="number">0</span>:</span><br><span class="line">            self.kill()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># print(&quot;子弹被销毁&quot;)</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<h3 id="游戏运行效果展示图"><a href="#游戏运行效果展示图" class="headerlink" title="游戏运行效果展示图"></a>游戏运行效果展示图</h3><img src="/posts/e39e2a4e/%E9%A3%9E%E6%9C%BA%E5%A4%A7%E6%88%98.jpg" class="">

<hr>
<h1 id="Python面经"><a href="#Python面经" class="headerlink" title="Python面经"></a>Python面经</h1><h2 id="列表、元组、字典"><a href="#列表、元组、字典" class="headerlink" title="列表、元组、字典"></a>列表、元组、字典</h2><ol>
<li>列表是动态数组，它们不可变且可以重设长度（改变其内部元素的个数）。</li>
<li>元组是静态数组，它们不可变，且其内部数据一旦创建便无法改变。</li>
<li>元组缓存于Python运行时环境，这意味着我们每次使用元组时无须访问内核去分配内存。</li>
</ol>
<p><strong>列表元组字典的一些区别：</strong></p>
<p>1、列表list：有序，可变。</p>
<p>2、元组tuple：有序，不可变。</p>
<p>3、字典dict：无序，字典的key是不可变的，值是可变的；在python中字符串，数字，元组都是不可变的对象。</p>
<p>4、序列：列表，元组和字符串都属于序列；即成员有序排列，可以通过下标访问，可以进行切片操作。字符串（普通字符串和unicode字符串）</p>
<p>5、集合：没有顺序的简单对象的聚集。可以检查成员是否存在，是否是另一个集合的子集，得到两个集合的交集等等</p>
<p>6、复制一个列表或者类似的序列或者其他复杂对象，那么必须使用切片操作符来去的拷贝。当你创建一个对象并将它赋值给一个变量的时候，这个变量仅仅引用那个对象，而不是表示这个对象本身！也就是说，变量名指向你计算机中存储那个对象的内存。这被称作名称到对象的绑定。</p>
<h2 id="Python的异常机制"><a href="#Python的异常机制" class="headerlink" title="Python的异常机制"></a>Python的异常机制</h2><h3 id="1、什么是异常？"><a href="#1、什么是异常？" class="headerlink" title="1、什么是异常？"></a>1、什么是异常？</h3><p>异常即是一个事件，该事件会在程序执行过程中发生，影响了程序的正常执行。<br> 一般情况下，在Python无法正常处理程序时就会发生一个异常。<br> 异常是Python对象，表示一个错误。<br> 当Python脚本发生异常时我们需要捕获处理它，否则程序会终止执行。</p>
<h3 id="2、try…except…else结构"><a href="#2、try…except…else结构" class="headerlink" title="2、try…except…else结构"></a>2、try…except…else结构</h3><p>如果try块中没有抛出异常，则执行else块，如果try中抛出异常，则执行except模块<br> except：捕获所有的异常</p>
<p>不带任何异常类型使用except，如下实例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">    正常的操作</span><br><span class="line">   ......................</span><br><span class="line">except:</span><br><span class="line">    发生异常，执行这块代码</span><br><span class="line">   ......................</span><br><span class="line">else:</span><br><span class="line">    如果没有异常执行这块代码</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用相同的except语句来处理多个异常信息，如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">    正常的操作</span><br><span class="line">   ......................</span><br><span class="line">except(Exception1[, Exception2[,...ExceptionN]]):</span><br><span class="line">   发生以上多个异常中的一个，执行这块代码</span><br><span class="line">   ......................</span><br><span class="line">else:</span><br><span class="line">    如果没有异常执行这块代码</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3、try…except…else…finally"><a href="#3、try…except…else…finally" class="headerlink" title="3、try…except…else…finally"></a>3、try…except…else…finally</h3><p>finally块无论是否发生异常都会执行，能常用来解释try块中申请的的资源</p>
<h3 id="4、python中常见的异常类型"><a href="#4、python中常见的异常类型" class="headerlink" title="4、python中常见的异常类型"></a>4、python中常见的异常类型</h3><p>Exception：常规错误的基类<br>ZeroDivisionError：除(或取模)零 (所有数据类型)<br>AssertionError：断言语句失败<br>AttributeError：对象没有这个属性<br>IOError：输入&#x2F;输出操作失败<br>ImportError：导入模块&#x2F;对象失败<br>IndexError：序列中没有此索引(index)<br>KeyError：映射中没有这个键<br>NameError：未声明&#x2F;初始化对象 (没有属性)<br>SyntaxError：Python 语法错误<br>IndentationError：缩进错误<br>SystemError：一般的解释器系统错误<br>TypeError：对类型无效的操作<br>ValueError：传入无效的参数</p>
<h3 id="python异常代码块"><a href="#python异常代码块" class="headerlink" title="python异常代码块"></a>python异常代码块</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># func   # 可能会抛出异常的代码</span></span><br><span class="line"><span class="keyword">except</span> (Exception1, Exception2) <span class="keyword">as</span> e:  <span class="comment"># 可以捕获多个异常并处理</span></span><br><span class="line">    <span class="comment"># 异常处理的代码</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># pass  # 异常没有发生的时候代码逻辑</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="keyword">pass</span>     <span class="comment"># 无论异常有没有发生都会执行的代码，一般处理资源的关闭和释放</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Python中的GIL"><a href="#Python中的GIL" class="headerlink" title="Python中的GIL"></a>Python中的GIL</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>全局解释器锁 GIL，英文名称为 Global Interpreter Lock，它是解释器中一种线程同步的方式。</p>
<p>对于每一个解释器进程都具有一个 GIL ，它的直接作用是限制单个解释器进程中多线程的并行执行，使得即使在多核处理器上对于单个解释器进程来说，在同一时刻运行的线程仅限一个。 对于 Python 来讲，GIL 并不是它语言本身的特性，而是 CPython 解释器的实现特性。</p>
<p>Python 代码被编译后的字节码会在解释器中执行，在执行过程中，存在于 CPython 解释器中的 GIL 会致使在同一时刻只有一个线程可以执行字节码。 GIL 的存在引起的最直接的问题便是：在一个解释器进程中通过多线程的方式无法利用多核处理器来实现真正的并行。</p>
<p>因此，Python的多线程是伪多线程，无法利用多核资源，同一个时刻只有一个线程在真正的运行。</p>
<p>GIL的限制了程序的多核执行</p>
<p>  同一个时间只能有一个线程执行字节码</p>
<p>  CPU密集程序难以利用多核优势</p>
<p>  IO期间会释放GIL，对IO密集程序影响不大</p>
<p>面对GIL的存在，我们有可以有多个方法帮助我们提升性能</p>
<p>在 IO 密集型任务下，我们可以使用多线程或者协程来完成。</p>
<p>可以选择更换 Jython 等没有 GIL 的解释器，但并不推荐更换解释器，因为会错过众多 C 语言模块中的有用特性。</p>
<p>CPU密集可以使用多进程+进程池。</p>
<p>将计算密集型任务转移到 Python 的 C &#x2F; C++ 扩展模块中完成</p>
<h3 id="为什么有了GIL还要关注线程安全"><a href="#为什么有了GIL还要关注线程安全" class="headerlink" title="为什么有了GIL还要关注线程安全"></a>为什么有了GIL还要关注线程安全</h3><p>GIL 保证的是每一条字节码在执行过程中的独占性，即每一条字节码的执行都是原子性的。GIL 具有释放机制，所以 GIL 并不会保证字节码在执行过程中线程不会进行切换，即在多个字节码之间，线程具有切换的可能性。</p>
<p>我们可以用python的dis模块去查看a +&#x3D; 1执行的字节码，发现需要有多个字节码去完成，线程具有切换的可能性，所以它是非线程安全的。</p>
<p> 一个操作如果是一个字节码指令可以完成就是原子的，非原子操作不是线程安全的，原子的是可以保证线程安全的。</p>
<p> GIL 和线程互斥锁的粒度是不同的，GIL 是 Python 解释器级别的互斥，保证的是解释器级别共享资源的一致性，而线程互斥锁则是代码级（或用户级）的互斥，保证的是 Python 程序级别共享数据的一致性，所以我们仍需要线程互斥锁及其他线程同步方式来保证数据一致。</p>
<h2 id="迭代器和生成器"><a href="#迭代器和生成器" class="headerlink" title="迭代器和生成器"></a>迭代器和生成器</h2><img src="/posts/e39e2a4e/%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8.jpg" class="">

<p>容器（container）</p>
<p>container 可以理解为把多个元素组织在一起的数据结构，container 中的元素可以逐个地迭代获取，可以用 in, not in 关键字判断元素是否包含在容器中。比如Python中常见的container对象有list，deque，set</p>
<p>可迭代对象(iterables)</p>
<p>大部分的 container 都是可迭代对象，比如 list or set 都是可迭代对象，可以说只要是可以返回一个迭代器的都可以称作可迭代对象。</p>
<p>迭代器（iterator）</p>
<p>python中的容器有许多，比如列表、元组、字典、集合等，对于容器，可以很直观地想象成多个元素在一起的单元，所有的容器都是可迭代的（iterable）。</p>
<p>我们通常使用for in 语句对可迭代的对象进行枚举，其底层机制在于：</p>
<p>而可迭代对象，通过 iter() 函数返回一个迭代器（iterator），迭代器提供了一个 next 的方法。调用用这个方法后，你要么得到这个容器的下一个对象，要么得到一个StopIteration 的错误。</p>
<p>举个例子：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">  \&gt;&gt;&gt; x = [1, 2, 3]</span><br><span class="line"></span><br><span class="line">  \&gt;&gt;&gt; # Get the iterator</span><br><span class="line"></span><br><span class="line">  \&gt;&gt;&gt; y = iter(items) # Invokes items.<span class="strong">__iter__</span>()</span><br><span class="line"></span><br><span class="line">  \&gt;&gt;&gt; # Run the iterator</span><br><span class="line"></span><br><span class="line">  \&gt;&gt;&gt; next(y) # Invokes it.<span class="strong">__next__</span>()</span><br><span class="line"></span><br><span class="line">  1</span><br><span class="line"></span><br><span class="line">  \&gt;&gt;&gt; next(y)</span><br><span class="line"></span><br><span class="line">  2</span><br><span class="line"></span><br><span class="line">  \&gt;&gt;&gt; next(y)</span><br><span class="line"></span><br><span class="line">  3</span><br><span class="line"></span><br><span class="line">  \&gt;&gt;&gt; type(x)</span><br><span class="line"></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">class</span> &#x27;<span class="attr">list</span>&#x27;&gt;</span></span></span><br><span class="line"></span><br><span class="line">  \&gt;&gt;&gt; type(y)</span><br><span class="line"></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">class</span> &#x27;<span class="attr">list_iterator</span>&#x27;&gt;</span></span></span><br><span class="line"></span><br><span class="line">  \&gt;&gt;&gt; next(y)</span><br><span class="line"></span><br><span class="line">  Traceback (most recent call last):</span><br><span class="line"></span><br><span class="line">​    File &quot;<span class="language-xml"><span class="tag">&lt;<span class="name">stdin</span>&gt;</span></span>&quot;, line 1, in <span class="language-xml"><span class="tag">&lt;<span class="name">module</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  StopIteration</span><br><span class="line"></span><br><span class="line">  \&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<p>上面的例子中，x&#x3D;[1,2,3]是可迭代对象，这里也叫容器。y&#x3D;iter(x)则是迭代器，且实现了__iter__和__next__方法。</p>
<p>它们之间的关系如下图所示：</p>
<img src="/posts/e39e2a4e/%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%AE%9E%E4%BE%8B.jpg" class="">

<p>可见通过 iter 方法后就是迭代器。它是一个带状态的对象，调用 next 方法的时候返回容器中的下一个值，可以说任何实现了iter和 next 方法的对象都是迭代器，iter返回迭代器自身，next 返回容器中的下一个值，如果容器中没有更多元素了，则抛异常。</p>
<p>迭代器就像一个懒加载的工厂，等到有人需要的时候才给它生成值返回，没调用的时候就处于休眠状态等待下一次调用。</p>
<p>生成器（generator）</p>
<p>生成器(generator)可以简单理解为懒人版本的迭代器。</p>
<p>它相比于迭代器的优势是，生成器并不会像迭代器一样占用大量内存。比如声明一个迭代器：[i for i in range(100000000)]就可以声明一个包含一亿个元素的列表，每个元素在生成后都会保存到内存中。但实际上我们也许并不需要保存那么多东西，只希望在你用 next() 函数的时候，才会生成下一个变量，因此生成器应运而生，在python中的写法为(i for i in range(100000000))</p>
<p>此外，生成器还可以有别的形式，比如生成器函数，通过yield关键字，把结果返回到next()方法中，举个例子：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">frange</span>(<span class="params">start, stop, increment</span>):</span><br><span class="line">x = start</span><br><span class="line"><span class="keyword">while</span> x &lt; stop:</span><br><span class="line">	<span class="keyword">yield</span> x</span><br><span class="line">   	x += increment</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> frange(<span class="number">0</span>, <span class="number">2</span>, <span class="number">0.5</span>):</span><br><span class="line">   <span class="built_in">print</span>(n)</span><br><span class="line"></span><br><span class="line"> <span class="number">0</span></span><br><span class="line"> <span class="number">0.5</span></span><br><span class="line"> <span class="number">1.0</span></span><br><span class="line"> <span class="number">1.5</span></span><br></pre></td></tr></table></figure>

<p>相比于迭代器，生成器具有以下优点：</p>
<ol>
<li>减少内存</li>
<li>延迟计算</li>
<li>有效提高代码可读性</li>
</ol>
<h2 id="python深拷贝和浅拷贝"><a href="#python深拷贝和浅拷贝" class="headerlink" title="python深拷贝和浅拷贝"></a>python深拷贝和浅拷贝</h2><ul>
<li>浅拷贝，指的是重新分配一块内存，创建一个新的对象，但<strong>里面的元素是原对象中各个子对象的引用</strong>。</li>
<li>深拷贝，是指重新分配一块内存，创建一个新的对象，并且将原对象中的元素，以递归的方式，通过创建新的子对象拷贝到新对象中。因此，<strong>新对象和原对象没有任何关联</strong>。</li>
</ul>
<h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><ul>
<li>使用数据类型<strong>本身的构造器</strong></li>
<li>对于<strong>可变的序列</strong>，还可以通过切片操作符 : 来完成浅拷贝</li>
<li>Python 还提供了对应的函数 <strong>copy.copy()</strong> 函数，适用于任何数据类型</li>
</ul>
<p>对于元组，使用 tuple() 或者切片操作符 ‘:’ 不会创建一份浅拷贝，相反它会返回一个指向相同元组的引用：</p>
<p>使用 tuple() 或者切片操作符 ‘:’ <strong>不会创建一份浅拷贝</strong>，因为它开辟新的内存存储的是<strong>原对象的引用</strong>，而没有创建新的对象来存储原对象的子对象的引用，所以不是浅拷贝。相反它会返回一个<strong>指向相同元组的引用。</strong></p>
<p>对字符串使用 str() 或者切片操作符 ‘:’，原理和 元组相同。</p>
<p>也就是说，对字符串和元组使用 copy（）、[:]、本身的构造器完成的复制，都只是开辟了内存存储原对象的引用，而不是存储原对象的子对象的引用。</p>
<h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><p>Python 中以 copy.deepcopy() 来实现对象的深度拷贝</p>
<h3 id="两者的优缺点对比"><a href="#两者的优缺点对比" class="headerlink" title="两者的优缺点对比"></a>两者的优缺点对比</h3><p>（1）深拷贝拷贝程度高，将原数据复制到新的内存空间中。改变拷贝后的内容不影响原数据内容。但是深拷贝耗时长，且占用内存空间。<br>（2）浅拷贝拷贝程度低，只复制原数据的地址。其实是将副本的地址指向原数据地址。修改副本内容，是通过当前地址指向原数据地址，去修改。所以修改副本内容会影响到原数据内容。但是浅拷贝耗时短，占用内存空间少</p>
]]></content>
      <tags>
        <tag>4</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫</title>
    <url>/posts/c386cf1b.html</url>
    <content><![CDATA[<p><strong>Python爬虫学习</strong></p>
<span id="more"></span>

<h1 id="requests模块案例一-搜狗首页数据提取"><a href="#requests模块案例一-搜狗首页数据提取" class="headerlink" title="requests模块案例一(搜狗首页数据提取)"></a>requests模块案例一(搜狗首页数据提取)</h1><p>requests模块：python中原生的一款基于网络请求的模块，功能非常强大，简单便携，效率极高</p>
<p>作用：模拟浏览器发请求</p>
<p>注意从URL下右键”检查”，查看 请求URL、请求方式、Content-Type的格式等，以及”响应”中的字典或列表格式</p>
<ul>
<li><strong>爬取搜狗首页的页面数据</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 爬取搜狗首页页面数据</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 指定url</span></span><br><span class="line">    url = <span class="string">&#x27;https://www.sogou.com/&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发起请求</span></span><br><span class="line">    <span class="comment"># response接收get方法返回的响应对象</span></span><br><span class="line">    response = requests.get(url=url)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取响应数据 .text返回的是字符串形式的响应数据</span></span><br><span class="line">    page_text = response.text</span><br><span class="line">    <span class="built_in">print</span>(page_text)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 持久化存储</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./sogou.html&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(page_text)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;爬取数据结束！&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>爬取结果：(源码臭长)</p>
<img src="/posts/c386cf1b/sogou.png" class="" title="搜狗首页html数据">

<hr>
<h1 id="requests模块案例二-网页采集器"><a href="#requests模块案例二-网页采集器" class="headerlink" title="requests模块案例二(网页采集器)"></a>requests模块案例二(网页采集器)</h1><ul>
<li><strong>简单的网页采集器</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># UA伪装：将对应的User-Agent封装到一个字段中</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.75 Safari/537.36 Edg/100.0.1185.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    url = <span class="string">&#x27;https://www.sogou.com/web?&#x27;</span></span><br><span class="line">    <span class="comment"># 处理url携带的参数query:封装到字典中</span></span><br><span class="line">    kw = <span class="built_in">input</span>(<span class="string">&quot;输入一个query:&quot;</span>)</span><br><span class="line">    param = &#123;</span><br><span class="line">        <span class="string">&#x27;query&#x27;</span>: kw</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 对指定的url发起的请求对应的url是携带参数的，并且请求过程中处理了参数</span></span><br><span class="line">    response = requests.get(url=url, params=param, headers=headers)</span><br><span class="line"></span><br><span class="line">    page_text = response.text</span><br><span class="line">    fileName = kw + <span class="string">&#x27;.html&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(fileName, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(page_text)</span><br><span class="line">    <span class="built_in">print</span>(fileName, <span class="string">&#x27;保存成功！&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>重点：</strong></p>
<p><strong>UA</strong>：User-Agent（请求载体的身份标识）</p>
<p><strong>UA检测</strong>(反爬)：门户网站的服务器会检测对应请求的载体身份标识，如果检测到请求的载体身份标识为某一款浏览器，则说明该请求是一个正常的请求。但如果检测到请求的载体身份标识不是基于某一款浏览器的，则表示该请求为不正常的请求(爬虫)则服务器端就可能拒绝该次请求。</p>
<p><strong>UA伪装</strong>(反反爬)：让爬虫对应的请求载体身份标识伪装成某一款浏览器</p>
<p><strong>实现：</strong></p>
<p>控制台输入一个query关键字，类似搜索引擎中的搜索输入框，输入关键字后对应生成它的html文件，文件下保存该关键字搜索的结果的html形式源码。</p>
<p>例：</p>
<p>query：武汉    &#x3D;&#x3D;&gt;&gt;  武汉.html生成，浏览器打开武汉.html有：</p>
<img src="/posts/c386cf1b/wuhan.png" class="" title="网页提取结果">

<hr>
<h1 id="requests模块案例三-破解百度翻译"><a href="#requests模块案例三-破解百度翻译" class="headerlink" title="requests模块案例三(破解百度翻译)"></a>requests模块案例三(破解百度翻译)</h1><ul>
<li><strong>编译器版本的”百度翻译”</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">post_url = <span class="string">&#x27;https://fanyi.baidu.com/sug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># UA伪装</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.75 Safari/537.36 Edg/100.0.1185.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">word = <span class="built_in">input</span>(<span class="string">&quot;输入您要查询的内容：&quot;</span>)</span><br><span class="line"><span class="comment"># post请求参数处理（同get请求一致）</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;kw&#x27;</span>: word</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求发送</span></span><br><span class="line">response = requests.post(url=post_url, data=data, headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取响应数据:json方法返回的是obj（如果确认响应数据是json类型才可以使用.json方法）</span></span><br><span class="line"><span class="comment"># Content-Type: application/json</span></span><br><span class="line">dic_obj = response.json()</span><br><span class="line"><span class="comment"># print</span></span><br><span class="line"></span><br><span class="line">fileName = word + <span class="string">&#x27;.json&#x27;</span></span><br><span class="line">fp = <span class="built_in">open</span>(fileName, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">json.dump(dic_obj, fp=fp, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;OVER&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>实现：</strong></p>
<p>控制台提示输入查询的内容后，自动生成对应内容的json文件，json文件下内容对应如下</p>
<img src="/posts/c386cf1b/%E7%BF%BB%E8%AF%91.png" class="" title="编译器同屏翻译">

<p><strong>功能</strong>：可以控制台输入某单词生成json文件实现对该单词的中文翻译</p>
<p><strong>问题</strong>：测试过程中输入长句英文是无法正确输出结果</p>
<hr>
<h1 id="requests模块案例四-豆瓣电影信息提取"><a href="#requests模块案例四-豆瓣电影信息提取" class="headerlink" title="requests模块案例四(豆瓣电影信息提取)"></a><strong>requests模块案例四(豆瓣电影信息提取)</strong></h1><ul>
<li>豆瓣喜剧电影排行榜中电影基本信息的捕获</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://movie.douban.com/j/chart/top_list?&#x27;</span></span><br><span class="line">param = &#123;</span><br><span class="line">    <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;24&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;interval_id&#x27;</span>: <span class="string">&#x27;100:90&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;action&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;start&#x27;</span>: <span class="string">&#x27;0&#x27;</span>,  <span class="comment"># 从库中的第几部电影去取</span></span><br><span class="line">    <span class="string">&#x27;limit&#x27;</span>: <span class="string">&#x27;20&#x27;</span>  <span class="comment"># 一次取出的个数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># UA伪装</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.75 Safari/537.36 Edg/100.0.1185.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(url=url, params=param, headers=headers)</span><br><span class="line"></span><br><span class="line">list_data = response.json()</span><br><span class="line"></span><br><span class="line">fp = <span class="built_in">open</span>(<span class="string">&#x27;./douban.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">json.dump(list_data, fp=fp, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;OVER&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>实现：</p>
<p>字典中start和limit可更改(见注释)，运行生成douban.json文件，显示取出limit数量个电影的基本信息</p>
<hr>
<h1 id="requests模块案例五-查询KFC餐厅地址"><a href="#requests模块案例五-查询KFC餐厅地址" class="headerlink" title="requests模块案例五(查询KFC餐厅地址)"></a>requests模块案例五(查询KFC餐厅地址)</h1><ul>
<li>检索国内某城市所有KFC餐厅的地址等信息</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://www.kfc.com.cn/kfccda/ashx/GetStoreList.ashx?op=keyword&#x27;</span></span><br><span class="line"></span><br><span class="line">param = &#123;</span><br><span class="line">    <span class="string">&#x27;cname&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;pid&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;keyword&#x27;</span>: <span class="string">&#x27;襄阳&#x27;</span>,  <span class="comment"># keyword处可改动，变化所要查询的国内城市名称</span></span><br><span class="line">    <span class="string">&#x27;pageIndex&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;pageSize&#x27;</span>: <span class="string">&#x27;10&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># UA伪装</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.75 Safari/537.36 Edg/100.0.1185.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(url=url, params=param, headers=headers)</span><br><span class="line"></span><br><span class="line">page_text = response.text</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./地址查询.html&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(page_text)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;OVER&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>实现：</strong></p>
<p>功能类似于官网<a href="http://www.kfc.com.cn/kfccda/storelist/index.aspx">肯德基餐厅信息查询 (kfc.com.cn)</a>下”餐厅关键字”查询，控制台输入关键字，即可生成html文件呈现该关键字城市下所有KFC餐厅的地址信息</p>
<p>例：</p>
<p>城市：襄阳</p>
<img src="/posts/c386cf1b/%E5%9C%B0%E5%9D%80%E6%9F%A5%E8%AF%A2.png" class="" title="查询对应城市KFC餐厅地址信息">
]]></content>
      <tags>
        <tag>3</tag>
      </tags>
  </entry>
  <entry>
    <title>Python数据分析与挖掘</title>
    <url>/posts/c1c7733e.html</url>
    <content><![CDATA[<p><strong>数据挖掘与分析部分模块的实例及原理应用</strong></p>
<span id="more"></span>

<h1 id="Numpy学习"><a href="#Numpy学习" class="headerlink" title="Numpy学习"></a>Numpy学习</h1><table>
<thead>
<tr>
<th align="center">姓名</th>
<th align="center">语文</th>
<th align="center">英语</th>
<th align="center">数学</th>
</tr>
</thead>
<tbody><tr>
<td align="center">张飞</td>
<td align="center">66</td>
<td align="center">65</td>
<td align="center">30</td>
</tr>
<tr>
<td align="center">关羽</td>
<td align="center">95</td>
<td align="center">85</td>
<td align="center">98</td>
</tr>
<tr>
<td align="center">赵云</td>
<td align="center">93</td>
<td align="center">92</td>
<td align="center">96</td>
</tr>
<tr>
<td align="center">黄忠</td>
<td align="center">90</td>
<td align="center">88</td>
<td align="center">77</td>
</tr>
<tr>
<td align="center">典韦</td>
<td align="center">80</td>
<td align="center">90</td>
<td align="center">90</td>
</tr>
</tbody></table>
<h2 id="题目具体要求"><a href="#题目具体要求" class="headerlink" title="题目具体要求"></a>题目具体要求</h2><p>1、使用 Numpy 统计团队中成员的语文、英语、数学的平均成绩、最小成绩、最大成绩、方差、标准差。</p>
<p>2、把这些人的总成绩排序，得出名次进行成绩输出。</p>
<h2 id="Numpy基本原理"><a href="#Numpy基本原理" class="headerlink" title="Numpy基本原理"></a><strong>Numpy基本原理</strong></h2><p>Numpy 是 Python 语言的一个第三方库，其支持大量高维度<a href="https://so.csdn.net/so/search?q=%E6%95%B0%E7%BB%84&spm=1001.2101.3001.7020">数组</a>与矩阵运算。此外，NumPy 也针对数组运算提供大量的数学函数。Numpy 中定义的最重要的对象是称为 <code>ndarray</code> 的 N 维数组类型。 它描述相同类型的元素<a href="https://so.csdn.net/so/search?q=%E9%9B%86%E5%90%88&spm=1001.2101.3001.7020">集合</a>。 可以使用基于零的索引访问集合中的项目。</p>
<h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">persontype = np.dtype(&#123;<span class="string">&#x27;names&#x27;</span>: [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;chinese&#x27;</span>, <span class="string">&#x27;math&#x27;</span>, <span class="string">&#x27;english&#x27;</span>, <span class="string">&#x27;total&#x27;</span>], <span class="string">&#x27;formats&#x27;</span>: [<span class="string">&#x27;S32&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;i&#x27;</span>]&#125;)</span><br><span class="line">peoples = np.array([(<span class="string">&quot;zhang fei&quot;</span>, <span class="number">18</span>, <span class="number">66</span>, <span class="number">30</span>, <span class="number">65</span>, <span class="number">0</span>), (<span class="string">&quot;guan yu&quot;</span>, <span class="number">19</span>, <span class="number">95</span>, <span class="number">98</span>, <span class="number">85</span>, <span class="number">0</span>), (<span class="string">&quot;zhao yun&quot;</span>, <span class="number">20</span>, <span class="number">93</span>, <span class="number">96</span>, <span class="number">92</span>, <span class="number">0</span>), (<span class="string">&quot;huang zhong&quot;</span>, <span class="number">21</span>, <span class="number">90</span>, <span class="number">77</span>, <span class="number">88</span>, <span class="number">0</span>)], dtype=persontype)</span><br><span class="line"></span><br><span class="line">ages = peoples[:][<span class="string">&#x27;age&#x27;</span>]</span><br><span class="line">chineses = peoples[:][<span class="string">&#x27;chinese&#x27;</span>]</span><br><span class="line">maths = peoples[:][<span class="string">&#x27;math&#x27;</span>]</span><br><span class="line">englishs = peoples[:][<span class="string">&#x27;english&#x27;</span>]</span><br><span class="line">total = peoples[:][<span class="string">&#x27;total&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;各项平均值&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;年龄：&quot;</span>, np.mean(ages))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;语文：&quot;</span>, np.mean(chineses))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数学：&quot;</span>, np.mean(maths))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;英语：&quot;</span>, np.mean(englishs))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;各项最大值&quot;</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;年龄：&quot;</span>, np.amax(ages))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;语文：&quot;</span>, np.amax(chineses))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数学：&quot;</span>, np.amax(maths))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;英语：&quot;</span>, np.amax(englishs))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;各项最小值&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;年龄：&quot;</span>, np.amin(ages))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;语文：&quot;</span>, np.amin(chineses))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数学：&quot;</span>, np.amin(maths))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;英语：&quot;</span>, np.amin(englishs))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;各项标准差&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;年龄：&quot;</span>, np.std(ages))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;语文：&quot;</span>, np.std(chineses))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数学：&quot;</span>, np.std(maths))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;英语：&quot;</span>, np.std(englishs))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;各项方差&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;年龄：&quot;</span>, np.var(ages))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;语文：&quot;</span>, np.var(chineses))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数学：&quot;</span>, np.var(maths))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;英语：&quot;</span>, np.var(englishs))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;总成绩排序&quot;</span>)</span><br><span class="line">peoples[:][<span class="string">&#x27;total&#x27;</span>] = chineses + maths + englishs</span><br><span class="line">rank = <span class="built_in">sorted</span>(peoples, key=<span class="keyword">lambda</span> t: t[<span class="number">4</span>], reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> rank:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>

<h2 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">各项平均值</span><br><span class="line">年龄： 19.5</span><br><span class="line">语文： 86.0</span><br><span class="line">数学： 75.25</span><br><span class="line">英语： 82.5</span><br><span class="line"></span><br><span class="line">各项最大值</span><br><span class="line">年龄： 21</span><br><span class="line">语文： 95</span><br><span class="line">数学： 98</span><br><span class="line">英语： 92</span><br><span class="line"></span><br><span class="line">各项最小值</span><br><span class="line">年龄： 18</span><br><span class="line">语文： 66</span><br><span class="line">数学： 30</span><br><span class="line">英语： 65</span><br><span class="line"></span><br><span class="line">各项标准差</span><br><span class="line">年龄： 1.118033988749895</span><br><span class="line">语文： 11.683321445547923</span><br><span class="line">数学： 27.380421837510102</span><br><span class="line">英语： 10.404326023342406</span><br><span class="line"></span><br><span class="line">各项方差</span><br><span class="line">年龄： 1.25</span><br><span class="line">语文： 136.5</span><br><span class="line">数学： 749.6875</span><br><span class="line">英语： 108.25</span><br><span class="line"></span><br><span class="line">总成绩排序</span><br><span class="line">(b&#x27;zhao yun&#x27;, 20, 93, 96, 92, 281)</span><br><span class="line">(b&#x27;huang zhong&#x27;, 21, 90, 77, 88, 255)</span><br><span class="line">(b&#x27;guan yu&#x27;, 19, 95, 98, 85, 278)</span><br><span class="line">(b&#x27;zhang fei&#x27;, 18, 66, 30, 65, 161)</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="Pandas学习"><a href="#Pandas学习" class="headerlink" title="Pandas学习"></a>Pandas学习</h1><p>学习数据结构：Series 和 DataFrame</p>
<p>Series 是个定长的字典序列。说是定长是因为在存储的时候，相当于两个 ndarray，这也是和字典结构最大的不同。因为在字典的结构里，元素的个数是不固定的。</p>
<p>Series 有两个基本属性：index 和 values。在 Series 结构中，index 默认是 0,1,2,……递增的整数序列，当然也可以自己来指定索引，比如 index&#x3D;[‘a’, ‘b’, ‘c’, ‘d’]。</p>
<p>DataFrame 类型数据结构类似数据库表，它包括了行索引和列索引，可以将 DataFrame 看成是由相同索引的 Series 组成的字典类型。</p>
<p>(二)  Pandas数据清洗</p>
<p>1.删除 DataFrame 中的不必要的列或行；</p>
<p>2.重命名列名 columns，让列表名更容易识别；</p>
<p>3.去重复的值数据采集可能存在重复的行；</p>
<p>4.格式问题；</p>
<p>5.查找空值。</p>
<hr>
<h1 id="Kaggle竞赛-Titanic乘客生存预测"><a href="#Kaggle竞赛-Titanic乘客生存预测" class="headerlink" title="Kaggle竞赛-Titanic乘客生存预测"></a>Kaggle竞赛-Titanic乘客生存预测</h1><p>决策树与AdaBoost实验</p>
<h2 id="目标任务"><a href="#目标任务" class="headerlink" title="目标任务"></a><strong>目标任务</strong></h2><p>（1） 学习决策树、AdaBoost的原理，特性；</p>
<p>（2） 学习使用Python编写决策树和AdaBoost分类器；</p>
<p>（3） 学习使用sklearn训练决策树和AdaBoost，熟悉数据挖掘的一般流程.</p>
<hr>
<h2 id="实验数据"><a href="#实验数据" class="headerlink" title="实验数据"></a><strong>实验数据</strong></h2><p>Kaggle数据挖掘竞赛平台之Titanic 乘客生存预测。问题描述：泰坦尼克海难是著名的十大灾难之一，究竟多少人遇难，各方统计的结果不一。Kaggle数据挖掘竞赛平台的数据集数据集格式为 csv，一共有两个文件：train.csv 是训练数据集，包含特征信息和存活与否的标签；test.csv: 测试数据集，只包含特征信息。</p>
<p>在训练集中，包括了以下字段，它们具体为：</p>
<table>
<thead>
<tr>
<th align="left">字段</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">PassengerId</td>
<td>乘客编号</td>
</tr>
<tr>
<td align="left">Survived</td>
<td>是否幸存</td>
</tr>
<tr>
<td align="left">Pclass</td>
<td>船票等级</td>
</tr>
<tr>
<td align="left">Name</td>
<td>乘客姓名</td>
</tr>
<tr>
<td align="left">Sex</td>
<td>乘客性别</td>
</tr>
<tr>
<td align="left">SibSp</td>
<td>亲戚数量（兄妹、配偶数）</td>
</tr>
<tr>
<td align="left">Parch</td>
<td>亲戚数量（父母、子女数）</td>
</tr>
<tr>
<td align="left">Ticket</td>
<td>船票号码</td>
</tr>
<tr>
<td align="left">Fare</td>
<td>船票价格</td>
</tr>
<tr>
<td align="left">Cabin</td>
<td>船舱</td>
</tr>
<tr>
<td align="left">Embarked</td>
<td>登陆港口</td>
</tr>
</tbody></table>
<hr>
<h2 id="生存预测的关键流程"><a href="#生存预测的关键流程" class="headerlink" title="生存预测的关键流程"></a><strong>生存预测的关键流程</strong></h2><p>要对训练集中乘客的生存进行预测，这个过程可以划分为两个重要的阶段：</p>
<p>准备阶段：首先需要对训练集、测试集的数据进行探索，分析数据质量，并对数据进行清洗，然后通过特征选择对数据进行降维，方便后续分类运算；</p>
<p>分类阶段：首先通过训练集的特征矩阵、分类结果得到分类器，然后将分类器应用于测试集。然后对分类器的准确性进行分析，并对模型进行可视化。</p>
<h2 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a><strong>实验过程</strong></h2><h3 id="实验导入模块"><a href="#实验导入模块" class="headerlink" title="实验导入模块"></a>实验导入模块</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xgboost <span class="keyword">as</span> xgb</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> AdaBoostClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_score</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="数据探索"><a href="#数据探索" class="headerlink" title="数据探索"></a><strong>数据探索</strong></h3><ul>
<li><p>info():了解数据表的基本情况，包括行数、列数、每列的数据类型、数据完整度；</p>
</li>
<li><p>describe():了解数据表的统计情况，包括总数、平均值、标准差、最小值、最大值等；</p>
</li>
<li><p>describe(include&#x3D;[‘O’]):查看字符串类型（非数字）的整体情况；</p>
</li>
<li><p>head():查看前几行数据（默认是前 5 行）；</p>
</li>
<li><p>tail():查看后几行数据（默认是最后 5 行）。</p>
</li>
</ul>
<p>具体代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment"># 数据加载</span></span><br><span class="line">train_data = pd.read_csv(<span class="string">&#x27;Titanic.train.csv&#x27;</span>)</span><br><span class="line">test_data = pd.read_csv(<span class="string">&#x27;Titanic.test.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据探索</span></span><br><span class="line"><span class="built_in">print</span>(train_data.info())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">30</span>)</span><br><span class="line"><span class="built_in">print</span>(train_data.describe())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">30</span>)</span><br><span class="line"><span class="built_in">print</span>(train_data.describe(include=[<span class="string">&#x27;O&#x27;</span>]))  <span class="comment"># include后面是大写的O字母</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">30</span>)</span><br></pre></td></tr></table></figure>

<p>数据读取结果：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">class</span> &#x27;<span class="attr">pandas.core.frame.DataFrame</span>&#x27;&gt;</span></span></span><br><span class="line">RangeIndex: 891 entries, 0 to 890</span><br><span class="line">Data columns (total 12 columns):</span><br><span class="line"> #   Column       Non-Null Count  Dtype  </span><br><span class="line">---  ------       --------------  -----  </span><br><span class="line"> 0   PassengerId  891 non-null    int64  </span><br><span class="line"> 1   Survived     891 non-null    int64  </span><br><span class="line"> 2   Pclass       891 non-null    int64  </span><br><span class="line"> 3   Name         891 non-null    object </span><br><span class="line"> 4   Sex          891 non-null    object </span><br><span class="line"> 5   Age          714 non-null    float64</span><br><span class="line"> 6   SibSp        891 non-null    int64  </span><br><span class="line"> 7   Parch        891 non-null    int64  </span><br><span class="line"> 8   Ticket       891 non-null    object </span><br><span class="line"> 9   Fare         891 non-null    float64</span><br><span class="line"> 10  Cabin        204 non-null    object </span><br><span class="line"> 11  Embarked     891 non-null    object </span><br><span class="line">dtypes: float64(2), int64(5), object(5)</span><br><span class="line">memory usage: 83.7+ KB</span><br><span class="line">None</span><br></pre></td></tr></table></figure>



<h3 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a><strong>数据清洗</strong></h3><p>通过数据探索，我们发现 Age、Fare 和 Cabin 这三个字段的数据有所缺失。其中 Age 为年龄字段，是数值型，我们可以通过平均值进行补齐；Fare 为船票价格，是数值型，我们也可以通过其他人购买船票的平均值进行补齐。具体实现的代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用平均年龄来填充年龄中的nan值</span></span><br><span class="line">train_data[<span class="string">&#x27;Age&#x27;</span>].fillna(train_data[<span class="string">&#x27;Age&#x27;</span>].mean(), inplace=<span class="literal">True</span>)</span><br><span class="line">test_data[<span class="string">&#x27;Age&#x27;</span>].fillna(test_data[<span class="string">&#x27;Age&#x27;</span>].mean(), inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用票价的均值填充票价中的nan值</span></span><br><span class="line">train_data[<span class="string">&#x27;Fare&#x27;</span>].fillna(train_data[<span class="string">&#x27;Fare&#x27;</span>].mean(), inplace=<span class="literal">True</span>)</span><br><span class="line">test_data[<span class="string">&#x27;Fare&#x27;</span>].fillna(test_data[<span class="string">&#x27;Fare&#x27;</span>].mean(), inplace=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(train_data[<span class="string">&#x27;Embarked&#x27;</span>].value_counts())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用登录最多的港口来填充登录港口的nan值</span></span><br><span class="line">train_data[<span class="string">&#x27;Embarked&#x27;</span>].fillna(<span class="string">&#x27;S&#x27;</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">test_data[<span class="string">&#x27;Embarked&#x27;</span>].fillna(<span class="string">&#x27;S&#x27;</span>, inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<h3 id="特征选择"><a href="#特征选择" class="headerlink" title="特征选择"></a><strong>特征选择</strong></h3><p>特征选择是分类器的关键。特征选择不同，得到的分类器也不同。那么该选择哪些特征做生存的预测呢？</p>
<p>通过数据探索发现，PassengerId 为乘客编号，对分类没有作用，可以放弃；Name 为乘客姓名，对分类没有作用，可以放弃；Cabin 字段缺失值太多，可以放弃；Ticket 字段为船票号码，杂乱无章且无规律，可以放弃。其余的字段包括：Pclass、Sex、Age、SibSp、Parch 和 Fare，这些属性分别表示了乘客的船票等级、性别、年龄、亲戚数量以及船票价格，可能会和乘客的生存预测分类有关系。具体是什么关系，我们可以交给分类器来处理。因此先将 Pclass、Sex、Age 等这些其余的字段作特征，放到特征向量 features 里。</p>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 模块3：特征选择</span></span><br><span class="line">features = [<span class="string">&#x27;Pclass&#x27;</span>, <span class="string">&#x27;Sex&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>, <span class="string">&#x27;SibSp&#x27;</span>, <span class="string">&#x27;Parch&#x27;</span>, <span class="string">&#x27;Fare&#x27;</span>, <span class="string">&#x27;Embarked&#x27;</span>]</span><br><span class="line">train_features = train_data[features]</span><br><span class="line">train_labels = train_data[<span class="string">&#x27;Survived&#x27;</span>]</span><br><span class="line">test_features = test_data[features]</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_extraction <span class="keyword">import</span> DictVectorizer</span><br><span class="line">dvec = DictVectorizer(sparse=<span class="literal">False</span>)</span><br><span class="line">train_features = dvec.fit_transform(train_features.to_dict(orient=<span class="string">&#x27;record&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(dvec.feature_names_)</span><br></pre></td></tr></table></figure>

<p>数据读取结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">S    644</span><br><span class="line">C    168</span><br><span class="line">Q     77</span><br><span class="line">U      2</span><br><span class="line">Name: Embarked, dtype: int64</span><br></pre></td></tr></table></figure>



<h3 id="分类模型及模型的评价"><a href="#分类模型及模型的评价" class="headerlink" title="分类模型及模型的评价"></a><strong>分类模型及模型的评价</strong></h3><p>1） 使用 sklearn 中的决策树模型。使用 ID3 算法使用DecisionTreeClassifier 时，设置 criterion&#x3D;‘entropy’，然后使用 fit 进行训练，将特征值矩阵和分类标识结果作为参数传入，得到决策树分类器。</p>
<p>2） 使用 sklearn 中的集成学习模型Adaboost()</p>
<p>3） 采用 K 折交叉验证准确率。sklearn 的 model_selection 模型选择中提供了 cross_val_score 函数。</p>
<p>Ø K 折交叉验证的原理：</p>
<p>拿出大部分样本进行训练，少量的用于分类器的验证。K 折交叉验证，就是做 K 次交叉验证，每次选取 K 分之一的数据作为验证，其余作为训练。轮流 K 次，取平均值。</p>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 决策树弱分类器</span></span><br><span class="line">dt_stump = DecisionTreeClassifier(max_depth=<span class="number">7</span>, min_samples_leaf=<span class="number">5</span>)</span><br><span class="line">dt_stump.fit(train_features, train_labels)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">u&#x27;决策树弱分类器准确率为 %.4lf&#x27;</span> % np.mean(cross_val_score(dt_stump, train_features, train_labels, cv=<span class="number">10</span>)))</span><br><span class="line"><span class="comment"># 决策树分类器</span></span><br><span class="line">dt = DecisionTreeClassifier()</span><br><span class="line">dt.fit(train_features, train_labels)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">u&#x27;决策树分类器准确率为 %.4lf&#x27;</span> % np.mean(cross_val_score(dt, train_features, train_labels, cv=<span class="number">10</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># AdaBoost分类器</span></span><br><span class="line">ada = AdaBoostClassifier()</span><br><span class="line">ada.fit(train_features, train_labels)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">u&#x27;AdaBoost 分类器准确率为 %.4lf&#x27;</span> %</span><br><span class="line">np.mean(cross_val_score(ada, train_features, train_labels, cv=<span class="number">15</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># XGBoost分类器</span></span><br><span class="line">xgb = xgb.XGBClassifier(max_depth=<span class="number">8</span>, min_child_weight=<span class="number">3</span>)</span><br><span class="line">xgb.fit(train_features, train_labels)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">u&#x27;XGBoost 分类器准确率为 %.4lf&#x27;</span> %</span><br><span class="line">np.mean(cross_val_score(ada, train_features, train_labels, cv=<span class="number">15</span>)))</span><br></pre></td></tr></table></figure>

<h3 id="各个分类器准确率"><a href="#各个分类器准确率" class="headerlink" title="各个分类器准确率"></a>各个分类器准确率</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">决策树弱分类器准确率为 0.8228</span><br><span class="line">决策树分类器准确率为 0.7778</span><br><span class="line">AdaBoost 分类器准确率为 0.8183</span><br><span class="line">XGBoost 分类器准确率为 0.8183</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="银行客户违约信用分析"><a href="#银行客户违约信用分析" class="headerlink" title="银行客户违约信用分析"></a>银行客户违约信用分析</h1><p>对银行客户基本信息数据集进行分析，提取不同信息进行特征分析和预测，通过多种分类器算法预测客户违约行为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_extraction <span class="keyword">import</span> DictVectorizer</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_score</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> AdaBoostClassifier</span><br><span class="line"><span class="keyword">import</span> xgboost <span class="keyword">as</span> xgb</span><br><span class="line"><span class="keyword">from</span> xgboost <span class="keyword">import</span> XGBClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> MultinomialNB<span class="comment">#多项式朴素贝叶斯分类器</span></span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> LinearSVC</span><br><span class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> BernoulliNB</span><br></pre></td></tr></table></figure>

<h2 id="数据集读取转换csv文件预处理"><a href="#数据集读取转换csv文件预处理" class="headerlink" title="数据集读取转换csv文件预处理"></a>数据集读取转换csv文件预处理</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># datafile = &#x27;data.xls&#x27;</span></span><br><span class="line">resultfile = <span class="string">&#x27;data.csv&#x27;</span></span><br><span class="line">data = pd.read_excel(<span class="string">&#x27;data.xls&#x27;</span>)</span><br><span class="line">data.to_csv(resultfile)</span><br><span class="line"><span class="comment">## excel转成csv表头中文乱码</span></span><br></pre></td></tr></table></figure>

<h2 id="数据探索-1"><a href="#数据探索-1" class="headerlink" title="数据探索"></a>数据探索</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">datafile = <span class="string">&#x27;data.csv&#x27;</span></span><br><span class="line">data = pd.read_csv(datafile)</span><br><span class="line"><span class="built_in">print</span>(data.info())</span><br><span class="line">data1 = data.describe()</span><br><span class="line">data1.to_excel(<span class="string">&#x27;data_dexcribe.xls&#x27;</span>)</span><br></pre></td></tr></table></figure>

<img src="/posts/c1c7733e/1.png" class="">

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">weiyue = pd.value_counts(data[<span class="string">&#x27;违约&#x27;</span>])[<span class="number">1</span>]</span><br><span class="line">not_weiyue = pd.value_counts(data[<span class="string">&#x27;违约&#x27;</span>])[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘图</span></span><br><span class="line">fig = plt.figure(figsize = (<span class="number">8</span>, <span class="number">5</span>))  <span class="comment"># 设置画布大小</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;KaiTi&#x27;</span>]</span><br><span class="line">plt.bar(x=<span class="built_in">range</span>(<span class="number">2</span>), height=[weiyue, not_weiyue,], width=<span class="number">0.4</span>, alpha=<span class="number">0.8</span>, color=<span class="string">&#x27;skyblue&#x27;</span>)</span><br><span class="line">plt.xticks([index <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)], [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;0&#x27;</span>])</span><br><span class="line">plt.xlabel(<span class="string">&#x27;是否违约&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;客户人数&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;客户是否违约柱状图&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line">plt.close()</span><br><span class="line"><span class="comment">## 输出可见违约：未违约大概2:5</span></span><br></pre></td></tr></table></figure>

<img src="/posts/c1c7733e/2.png" class="">

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 绘制 是否违约客户 与 年龄 的分布</span></span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="comment">## 提取年龄</span></span><br><span class="line">age = data[<span class="string">&#x27;年龄&#x27;</span>].dropna()</span><br><span class="line">age = age.astype(<span class="string">&#x27;int64&#x27;</span>)</span><br><span class="line"><span class="comment">## 绘制客户年龄分布箱型图</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line">fig, axes = plt.subplots(<span class="number">1</span>, <span class="number">3</span>, figsize=(<span class="number">10</span>, <span class="number">5</span>))</span><br><span class="line">sns.distplot(data[<span class="string">&quot;年龄&quot;</span>], ax = axes[<span class="number">0</span>], axlabel=<span class="string">&#x27;所有客户年龄分布&#x27;</span>)</span><br><span class="line">sns.distplot(data.loc[data[<span class="string">&quot;违约&quot;</span>]==<span class="number">0</span>][<span class="string">&quot;年龄&quot;</span>], ax = axes[<span class="number">1</span>], axlabel = <span class="string">&#x27;非违约客户年龄分布&#x27;</span>)</span><br><span class="line">sns.distplot(data.loc[data[<span class="string">&quot;违约&quot;</span>]==<span class="number">1</span>][<span class="string">&quot;年龄&quot;</span>], ax = axes[<span class="number">2</span>], axlabel = <span class="string">&#x27;违约客户年龄分布&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line">plt.close()</span><br></pre></td></tr></table></figure>

<img src="/posts/c1c7733e/3.png" class="">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 客户年龄中存在300岁，需要数据清洗删除异常值，用年龄均值填充</span></span><br><span class="line"><span class="comment"># plt.title(&#x27;客户是否违约柱状图&#x27;)</span></span><br><span class="line"><span class="comment"># plt.show()</span></span><br><span class="line"><span class="comment"># plt.close()</span></span><br><span class="line"><span class="comment"># 均值填充年龄</span></span><br><span class="line">data[<span class="string">&#x27;年龄&#x27;</span>].fillna(data[<span class="string">&#x27;年龄&#x27;</span>].mean(), inplace=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 删除年龄大于80的数据</span></span><br><span class="line">data.drop(data[(data[<span class="string">&#x27;年龄&#x27;</span>] &gt; <span class="number">80</span>)].index.tolist(), inplace=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(data[<span class="string">&quot;年龄&quot;</span>].describe())</span><br><span class="line"><span class="comment"># 将性别数据分别用female=1，male=0表示</span></span><br><span class="line">data.loc[data[<span class="string">&quot;性别&quot;</span>] == <span class="string">&quot;male&quot;</span>, <span class="string">&quot;性别&quot;</span>] = <span class="number">0</span></span><br><span class="line">data.loc[data[<span class="string">&quot;性别&quot;</span>] == <span class="string">&quot;female&quot;</span>, <span class="string">&quot;性别&quot;</span>] = <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>性别特性处理：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">count    699.000000</span><br><span class="line">mean      34.863308</span><br><span class="line">std        7.967906</span><br><span class="line">min       20.000000</span><br><span class="line">25%       29.000000</span><br><span class="line">50%       34.000000</span><br><span class="line">75%       40.000000</span><br><span class="line">max       56.000000</span><br><span class="line">Name: 年龄, dtype: float64</span><br></pre></td></tr></table></figure>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 计算相关性矩阵</span></span><br><span class="line">data_corr = data</span><br><span class="line">dt_corr = data_corr.corr(method = <span class="string">&#x27;pearson&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;相关性矩阵为：\n&#x27;</span>, dt_corr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制热力图</span></span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line">plt.subplots(figsize=(<span class="number">10</span>, <span class="number">10</span>))</span><br><span class="line">sns.heatmap(dt_corr, annot=<span class="literal">True</span>, vmax=<span class="number">1</span>, square=<span class="literal">True</span>, cmap=<span class="string">&#x27;Blues&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line">plt.close()</span><br></pre></td></tr></table></figure>

<img src="/posts/c1c7733e/4.png" class="">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_extraction <span class="keyword">import</span> DictVectorizer</span><br><span class="line"><span class="comment"># 通过分析选择合适的特征用于预测</span></span><br><span class="line">features = [<span class="string">&#x27;年龄&#x27;</span>, <span class="string">&#x27;教育&#x27;</span>, <span class="string">&#x27;工龄&#x27;</span>, <span class="string">&#x27;地址&#x27;</span>, <span class="string">&#x27;负债率&#x27;</span>, <span class="string">&#x27;信用卡负债&#x27;</span>, <span class="string">&#x27;收入&#x27;</span>]</span><br><span class="line">features_train = data[features]</span><br><span class="line">train_label = data[<span class="string">&#x27;违约&#x27;</span>]</span><br><span class="line">dev = DictVectorizer(sparse=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 转化成字典型</span></span><br><span class="line">features_train = dev.fit_transform(features_train.to_dict(orient=<span class="string">&#x27;record&#x27;</span>))</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(features_train,train_label,test_size=<span class="number">0.3</span>, random_state=<span class="number">23</span>,shuffle=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.neural_network <span class="keyword">import</span> MLPClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> confusion_matrix, classification_report</span><br><span class="line"><span class="keyword">import</span> sklearn.metrics <span class="keyword">as</span> metrics</span><br><span class="line"><span class="comment">#import sklearn.metrics.roc</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Confusion_matrix</span>(<span class="params">model</span>):</span><br><span class="line">    <span class="built_in">print</span>(confusion_matrix(y_test, model.predict(X_test)))  <span class="comment"># 混淆矩阵</span></span><br><span class="line">    <span class="built_in">print</span>(classification_report(y_test, model.predict(X_test)))  <span class="comment"># 分类报告</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="comment"># 混淆矩阵可视化</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plot_confusion_matrix</span>(<span class="params">cm, classes, normalize = <span class="literal">False</span>, title = <span class="string">&#x27;Confusion matrix&quot;&#x27;</span>, cmap = plt.cm.Blues</span>) :</span><br><span class="line">    plt.figure()</span><br><span class="line">    plt.imshow(cm, interpolation = <span class="string">&#x27;nearest&#x27;</span>, cmap = cmap)</span><br><span class="line">    plt.title(title)</span><br><span class="line">    plt.colorbar()</span><br><span class="line">    tick_marks = np.arange(<span class="built_in">len</span>(classes))</span><br><span class="line">    plt.xticks(tick_marks, classes, rotation = <span class="number">0</span>)</span><br><span class="line">    plt.yticks(tick_marks, classes)</span><br><span class="line"> </span><br><span class="line">    thresh = cm.<span class="built_in">max</span>() / <span class="number">2.</span></span><br><span class="line">    <span class="keyword">for</span> i, j <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(cm.shape[<span class="number">0</span>]), <span class="built_in">range</span>(cm.shape[<span class="number">1</span>])) :</span><br><span class="line">        plt.text(j, i, cm[i, j],</span><br><span class="line">                 horizontalalignment = <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">                 color = <span class="string">&#x27;white&#x27;</span> <span class="keyword">if</span> cm[i, j] &gt; thresh <span class="keyword">else</span> <span class="string">&#x27;black&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">    plt.tight_layout()</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;True label&#x27;</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;Predicted label&#x27;</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>

<h2 id="不同分类器处理结果呈现"><a href="#不同分类器处理结果呈现" class="headerlink" title="不同分类器处理结果呈现"></a>不同分类器处理结果呈现</h2><h3 id="决策树与决策树弱分类器"><a href="#决策树与决策树弱分类器" class="headerlink" title="决策树与决策树弱分类器"></a>决策树与决策树弱分类器</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#决策树分类器</span></span><br><span class="line">dt = DecisionTreeClassifier(max_depth=<span class="number">3</span>,min_samples_leaf=<span class="number">1</span>)</span><br><span class="line">dt.fit(features_train, train_label)</span><br><span class="line"></span><br><span class="line"><span class="comment">#决策树弱分类器</span></span><br><span class="line">dt_stump =DecisionTreeClassifier()</span><br><span class="line">dt_stump.fit(features_train,train_label)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 决策树分类器</span></span><br><span class="line">dt.fit(X_train, y_train)</span><br><span class="line">predict_y = dt.predict(X_test)</span><br><span class="line"></span><br><span class="line">cm1 = confusion_matrix(y_test, predict_y)</span><br><span class="line">class_names = [<span class="string">&#x27;违约&#x27;</span>, <span class="string">&#x27;未违约&#x27;</span>]</span><br><span class="line"><span class="comment"># 显示混淆矩阵</span></span><br><span class="line">plot_confusion_matrix(cm1, classes=class_names, title=<span class="string">&#x27;决策树分类&#x27;</span>)</span><br><span class="line"></span><br><span class="line">Confusion_matrix(dt)</span><br></pre></td></tr></table></figure>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 决策树分类器</span></span><br><span class="line">dt.fit(X_train, y_train)</span><br><span class="line">predict_y = dt.predict(X_test)</span><br><span class="line"></span><br><span class="line">cm1 = confusion_matrix(y_test, predict_y)</span><br><span class="line">class_names = [<span class="string">&#x27;违约&#x27;</span>, <span class="string">&#x27;未违约&#x27;</span>]</span><br><span class="line"><span class="comment"># 显示混淆矩阵</span></span><br><span class="line">plot_confusion_matrix(cm1, classes=class_names, title=<span class="string">&#x27;决策树分类&#x27;</span>)</span><br><span class="line"></span><br><span class="line">Confusion_matrix(dt)</span><br></pre></td></tr></table></figure>

<p>决策树分类器 混淆矩阵：</p>
<img src="/posts/c1c7733e/5.png" class="">

<p>决策树分类器 分类报告：</p>
<img src="/posts/c1c7733e/6.png" class="">

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 决策树弱分类器</span></span><br><span class="line"><span class="comment">#dt_stump = DecisionTreeClassifier()</span></span><br><span class="line">dt_stump.fit(X_train, y_train)</span><br><span class="line">predict_y = dt_stump.predict(X_test)</span><br><span class="line"><span class="comment">#score_y = dt_stump.decision_function(X_test)</span></span><br><span class="line">cm1 = confusion_matrix(y_test, predict_y)</span><br><span class="line">class_names = [<span class="string">&#x27;违约&#x27;</span>, <span class="string">&#x27;未违约&#x27;</span>]</span><br><span class="line"><span class="comment"># 显示混淆矩阵</span></span><br><span class="line">plot_confusion_matrix(cm1, classes=class_names, title=<span class="string">&#x27;决策树弱分类&#x27;</span>)</span><br><span class="line"></span><br><span class="line">Confusion_matrix(dt_stump)</span><br></pre></td></tr></table></figure>

<p>决策树弱分类器 混淆矩阵：</p>
<img src="/posts/c1c7733e/7.png" class="">

<p>决策树弱分类器 分类报告：</p>
<img src="/posts/c1c7733e/8.png" class="">

<h3 id="AdaBoost"><a href="#AdaBoost" class="headerlink" title="AdaBoost"></a>AdaBoost</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#AdaBoost分类器 基分类器提升（循环）次数,随机种子设置,</span></span><br><span class="line">ada = AdaBoostClassifier(n_estimators = <span class="number">10</span>,random_state = <span class="number">10</span>,learning_rate=<span class="number">1.1</span>)</span><br><span class="line">ada.fit(features_train,train_label)</span><br><span class="line"></span><br><span class="line">ada.fit(X_train, y_train)</span><br><span class="line">predict_y = ada.predict(X_test)</span><br><span class="line"></span><br><span class="line">cm2 = confusion_matrix(y_test, predict_y)</span><br><span class="line"></span><br><span class="line">class_names = [<span class="string">&#x27;违约&#x27;</span>, <span class="string">&#x27;未违约&#x27;</span>]</span><br><span class="line"><span class="comment"># 显示混淆矩阵</span></span><br><span class="line">plot_confusion_matrix(cm2, classes=class_names, title=<span class="string">&#x27;AdaBoost分类器&#x27;</span>)</span><br><span class="line"></span><br><span class="line">Confusion_matrix(ada)</span><br></pre></td></tr></table></figure>

<p>AdaBoost分类器 混淆矩阵：</p>
<img src="/posts/c1c7733e/9.png" class="">

<p>AdaBoost分类器 分类报告：</p>
<img src="/posts/c1c7733e/10.png" class="">

<h3 id="XGBoost"><a href="#XGBoost" class="headerlink" title="XGBoost"></a>XGBoost</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#XGBoost分类器</span></span><br><span class="line"><span class="comment">#xgb = XGBClassifier(n_estimators = 350, learning_rate=0.2)</span></span><br><span class="line">xgb = XGBClassifier()</span><br><span class="line">xgb.fit(features_train,train_label)</span><br><span class="line"></span><br><span class="line">xgb.fit(X_train, y_train)</span><br><span class="line">predict_y = xgb.predict(X_test)</span><br><span class="line"><span class="comment">#score_y = dt_stump.decision_function(X_test)</span></span><br><span class="line">cm3 = confusion_matrix(y_test, predict_y)</span><br><span class="line">class_names = [<span class="string">&#x27;违约&#x27;</span>, <span class="string">&#x27;未违约&#x27;</span>]</span><br><span class="line"><span class="comment"># 显示混淆矩阵</span></span><br><span class="line">plot_confusion_matrix(cm3, classes=class_names, title=<span class="string">&#x27;XGBoost分类器&#x27;</span>)</span><br><span class="line"></span><br><span class="line">Confusion_matrix(xgb)</span><br></pre></td></tr></table></figure>

<p>XGBoost分类器 混淆矩阵：</p>
<img src="/posts/c1c7733e/11.png" class="">

<p>XGBoost分类器 分类报告：</p>
<img src="/posts/c1c7733e/12.png" class="">

<h3 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 逻辑回归分类器</span></span><br><span class="line">log = LogisticRegression()</span><br><span class="line">log.fit(features_train, train_label)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 逻辑回归分类器</span></span><br><span class="line">log = LogisticRegression()</span><br><span class="line">log.fit(X_train, y_train)</span><br><span class="line">predict_y = log.predict(X_test)</span><br><span class="line">score_y = log.decision_function(X_test)</span><br><span class="line">cm = confusion_matrix(y_test, predict_y)</span><br><span class="line">class_names = [<span class="string">&#x27;违约&#x27;</span>, <span class="string">&#x27;未违约&#x27;</span>]</span><br><span class="line"><span class="comment"># 显示混淆矩阵</span></span><br><span class="line">plot_confusion_matrix(cm, classes=class_names, title=<span class="string">&#x27;逻辑回归&#x27;</span>)</span><br><span class="line"></span><br><span class="line">Confusion_matrix(log)</span><br></pre></td></tr></table></figure>

<p>逻辑回归 混淆矩阵：</p>
<img src="/posts/c1c7733e/13.png" class="">

<p>逻辑回归 分类报告：</p>
<img src="/posts/c1c7733e/14.png" class="">

<h3 id="朴素贝叶斯"><a href="#朴素贝叶斯" class="headerlink" title="朴素贝叶斯"></a>朴素贝叶斯</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 多项朴素贝叶斯分类器</span></span><br><span class="line">mul = MultinomialNB()</span><br><span class="line"><span class="comment">#mul.fit(features_train, train_label)</span></span><br><span class="line">mul.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment">#mul.fit(X_train, y_train)</span></span><br><span class="line">predict_y = mul.predict(X_test)</span><br><span class="line"><span class="comment">#score_y = mul.decision_function(X_test)</span></span><br><span class="line">cm4 = confusion_matrix(y_test, predict_y)</span><br><span class="line">class_names = [<span class="string">&#x27;违约&#x27;</span>, <span class="string">&#x27;未违约&#x27;</span>]</span><br><span class="line"><span class="comment"># 显示混淆矩阵</span></span><br><span class="line">plot_confusion_matrix(cm4, classes=class_names, title=<span class="string">&#x27;多项朴素贝叶斯&#x27;</span>)</span><br><span class="line"></span><br><span class="line">Confusion_matrix(mul)</span><br></pre></td></tr></table></figure>

<p>朴素贝叶斯 混淆矩阵：</p>
<img src="/posts/c1c7733e/15.png" class="">

<p>朴素贝叶斯 分类报告：</p>
<img src="/posts/c1c7733e/16.png" class="">

<h2 id="结果整合"><a href="#结果整合" class="headerlink" title="结果整合"></a>结果整合</h2><img src="/posts/c1c7733e/17.png" class="">

<hr>
<h1 id="GMM聚类"><a href="#GMM聚类" class="headerlink" title="GMM聚类"></a>GMM聚类</h1><p>EM算法处理王者荣耀英雄属性数据集</p>
<h2 id="使用EM算法工具完成聚类分析算法"><a href="#使用EM算法工具完成聚类分析算法" class="headerlink" title="使用EM算法工具完成聚类分析算法"></a>使用EM算法工具完成聚类分析算法</h2><p>实验目的： 学习使用EM算法工具完成聚类分析算法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#实验使用的工具包</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">from</span> sklearn.mixture <span class="keyword">import</span> GaussianMixture</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<h3 id="数据读取"><a href="#数据读取" class="headerlink" title="数据读取"></a>数据读取</h3><p>任务一：数据加载，避免中文乱码问题完成</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数据读取,请填写相应的代码！</span></span><br><span class="line">data_ori = pd.read_csv(<span class="string">&#x27;heros.csv&#x27;</span>, encoding=<span class="string">&#x27;gb18030&#x27;</span>)</span><br><span class="line">features = [<span class="string">u&#x27;最大生命&#x27;</span>,<span class="string">u&#x27;生命成长&#x27;</span>,<span class="string">u&#x27;初始生命&#x27;</span>,<span class="string">u&#x27;最大法力&#x27;</span>, <span class="string">u&#x27;法力成长&#x27;</span>,<span class="string">u&#x27;初始法力&#x27;</span>,<span class="string">u&#x27;最高物攻&#x27;</span>,<span class="string">u&#x27;物攻成长&#x27;</span>,<span class="string">u&#x27;初始物攻&#x27;</span>,<span class="string">u&#x27;最大物防&#x27;</span>,<span class="string">u&#x27;物防成长&#x27;</span>,<span class="string">u&#x27;初始物防&#x27;</span>, <span class="string">u&#x27;最大每5秒回血&#x27;</span>, <span class="string">u&#x27;每5秒回血成长&#x27;</span>, <span class="string">u&#x27;初始每5秒回血&#x27;</span>, <span class="string">u&#x27;最大每5秒回蓝&#x27;</span>, <span class="string">u&#x27;每5秒回蓝成长&#x27;</span>, <span class="string">u&#x27;初始每5秒回蓝&#x27;</span>, <span class="string">u&#x27;最大攻速&#x27;</span>, <span class="string">u&#x27;攻击范围&#x27;</span>]</span><br><span class="line">data = data_ori[features]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对英雄属性之间的关系进行可视化分析</span></span><br><span class="line"><span class="comment"># 设置 plt 正确显示中文</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>]=[<span class="string">&#x27;SimHei&#x27;</span>] <span class="comment"># 用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>]=<span class="literal">False</span> <span class="comment"># 用来正常显示负号</span></span><br></pre></td></tr></table></figure>

<h3 id="数据探索-2"><a href="#数据探索-2" class="headerlink" title="数据探索"></a>数据探索</h3><p>任务二：编写计算特征之间相似度的代码</p>
<p>用热力图呈现 features_mean 字段之间的相关性 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#填写相应代码！！</span></span><br><span class="line">corr = data[features].corr()</span><br><span class="line"><span class="built_in">print</span>(corr)</span><br><span class="line">             最大生命      生命成长      初始生命      最大法力      法力成长      初始法力      最高物攻  \</span><br><span class="line">最大生命     <span class="number">1.000000</span>  <span class="number">0.977408</span>  <span class="number">0.761300</span> -<span class="number">0.220133</span> -<span class="number">0.207130</span> -<span class="number">0.260449</span> -<span class="number">0.246412</span>   </span><br><span class="line">生命成长     <span class="number">0.977408</span>  <span class="number">1.000000</span>  <span class="number">0.658106</span> -<span class="number">0.224112</span> -<span class="number">0.212271</span> -<span class="number">0.260464</span> -<span class="number">0.268377</span>   </span><br><span class="line">初始生命     <span class="number">0.761300</span>  <span class="number">0.658106</span>  <span class="number">1.000000</span> -<span class="number">0.189349</span> -<span class="number">0.178674</span> -<span class="number">0.222314</span> -<span class="number">0.140356</span>   </span><br><span class="line">最大法力    -<span class="number">0.220133</span> -<span class="number">0.224112</span> -<span class="number">0.189349</span>  <span class="number">1.000000</span>  <span class="number">0.998958</span>  <span class="number">0.988178</span> -<span class="number">0.180428</span>   </span><br><span class="line">法力成长    -<span class="number">0.207130</span> -<span class="number">0.212271</span> -<span class="number">0.178674</span>  <span class="number">0.998958</span>  <span class="number">1.000000</span>  <span class="number">0.980154</span> -<span class="number">0.175029</span>   </span><br><span class="line">初始法力    -<span class="number">0.260449</span> -<span class="number">0.260464</span> -<span class="number">0.222314</span>  <span class="number">0.988178</span>  <span class="number">0.980154</span>  <span class="number">1.000000</span> -<span class="number">0.195800</span>   </span><br><span class="line">最高物攻    -<span class="number">0.246412</span> -<span class="number">0.268377</span> -<span class="number">0.140356</span> -<span class="number">0.180428</span> -<span class="number">0.175029</span> -<span class="number">0.195800</span>  <span class="number">1.000000</span>   </span><br><span class="line">物攻成长    -<span class="number">0.230507</span> -<span class="number">0.248988</span> -<span class="number">0.121609</span> -<span class="number">0.197617</span> -<span class="number">0.191883</span> -<span class="number">0.213851</span>  <span class="number">0.986098</span>   </span><br><span class="line">初始物攻    -<span class="number">0.195840</span> -<span class="number">0.223728</span> -<span class="number">0.161278</span>  <span class="number">0.003153</span>  <span class="number">0.003966</span>  <span class="number">0.000371</span>  <span class="number">0.536409</span>   </span><br><span class="line">最大物防     <span class="number">0.862472</span>  <span class="number">0.879106</span>  <span class="number">0.529737</span> -<span class="number">0.210425</span> -<span class="number">0.200722</span> -<span class="number">0.239802</span> -<span class="number">0.227352</span>   </span><br><span class="line">物防成长     <span class="number">0.832795</span>  <span class="number">0.847654</span>  <span class="number">0.528719</span> -<span class="number">0.226732</span> -<span class="number">0.217018</span> -<span class="number">0.255893</span> -<span class="number">0.182300</span>   </span><br><span class="line">初始物防     <span class="number">0.746460</span>  <span class="number">0.764736</span>  <span class="number">0.403032</span> -<span class="number">0.106082</span> -<span class="number">0.098780</span> -<span class="number">0.128992</span> -<span class="number">0.316263</span>   </span><br><span class="line">最大每<span class="number">5</span>秒回血  <span class="number">0.951013</span>  <span class="number">0.943635</span>  <span class="number">0.688104</span> -<span class="number">0.224234</span> -<span class="number">0.212305</span> -<span class="number">0.260875</span> -<span class="number">0.290216</span>   </span><br><span class="line">每<span class="number">5</span>秒回血成长  <span class="number">0.967369</span>  <span class="number">0.972436</span>  <span class="number">0.647438</span> -<span class="number">0.190258</span> -<span class="number">0.177943</span> -<span class="number">0.228721</span> -<span class="number">0.246922</span>   </span><br><span class="line">初始每<span class="number">5</span>秒回血  <span class="number">0.829468</span>  <span class="number">0.798746</span>  <span class="number">0.701547</span> -<span class="number">0.268561</span> -<span class="number">0.258510</span> -<span class="number">0.298217</span> -<span class="number">0.346468</span>   </span><br><span class="line">最大每<span class="number">5</span>秒回蓝 -<span class="number">0.286851</span> -<span class="number">0.297569</span> -<span class="number">0.224674</span>  <span class="number">0.872025</span>  <span class="number">0.853143</span>  <span class="number">0.922108</span> -<span class="number">0.193140</span>   </span><br><span class="line">每<span class="number">5</span>秒回蓝成长 -<span class="number">0.207165</span> -<span class="number">0.212225</span> -<span class="number">0.179819</span>  <span class="number">0.996253</span>  <span class="number">0.997483</span>  <span class="number">0.976856</span> -<span class="number">0.179123</span>   </span><br><span class="line">初始每<span class="number">5</span>秒回蓝 -<span class="number">0.279098</span> -<span class="number">0.292439</span> -<span class="number">0.199537</span>  <span class="number">0.450477</span>  <span class="number">0.415945</span>  <span class="number">0.559600</span> -<span class="number">0.145060</span>   </span><br><span class="line"></span><br><span class="line">             物攻成长      初始物攻      最大物防      物防成长      初始物防   最大每<span class="number">5</span>秒回血   每<span class="number">5</span>秒回血成长  \</span><br><span class="line">最大生命    -<span class="number">0.230507</span> -<span class="number">0.195840</span>  <span class="number">0.862472</span>  <span class="number">0.832795</span>  <span class="number">0.746460</span>  <span class="number">0.951013</span>  <span class="number">0.967369</span>   </span><br><span class="line">生命成长    -<span class="number">0.248988</span> -<span class="number">0.223728</span>  <span class="number">0.879106</span>  <span class="number">0.847654</span>  <span class="number">0.764736</span>  <span class="number">0.943635</span>  <span class="number">0.972436</span>   </span><br><span class="line">初始生命    -<span class="number">0.121609</span> -<span class="number">0.161278</span>  <span class="number">0.529737</span>  <span class="number">0.528719</span>  <span class="number">0.403032</span>  <span class="number">0.688104</span>  <span class="number">0.647438</span>   </span><br><span class="line">最大法力    -<span class="number">0.197617</span>  <span class="number">0.003153</span> -<span class="number">0.210425</span> -<span class="number">0.226732</span> -<span class="number">0.106082</span> -<span class="number">0.224234</span> -<span class="number">0.190258</span>   </span><br><span class="line">法力成长    -<span class="number">0.191883</span>  <span class="number">0.003966</span> -<span class="number">0.200722</span> -<span class="number">0.217018</span> -<span class="number">0.098780</span> -<span class="number">0.212305</span> -<span class="number">0.177943</span>   </span><br><span class="line">初始法力    -<span class="number">0.213851</span>  <span class="number">0.000371</span> -<span class="number">0.239802</span> -<span class="number">0.255893</span> -<span class="number">0.128992</span> -<span class="number">0.260875</span> -<span class="number">0.228721</span>   </span><br><span class="line">最高物攻     <span class="number">0.986098</span>  <span class="number">0.536409</span> -<span class="number">0.227352</span> -<span class="number">0.182300</span> -<span class="number">0.316263</span> -<span class="number">0.290216</span> -<span class="number">0.246922</span>   </span><br><span class="line">物攻成长     <span class="number">1.000000</span>  <span class="number">0.388718</span> -<span class="number">0.218394</span> -<span class="number">0.170773</span> -<span class="number">0.317801</span> -<span class="number">0.276067</span> -<span class="number">0.231988</span>   </span><br><span class="line">初始物攻     <span class="number">0.388718</span>  <span class="number">1.000000</span> -<span class="number">0.151566</span> -<span class="number">0.143719</span> -<span class="number">0.139327</span> -<span class="number">0.207319</span> -<span class="number">0.191102</span>   </span><br><span class="line">最大物防    -<span class="number">0.218394</span> -<span class="number">0.151566</span>  <span class="number">1.000000</span>  <span class="number">0.983223</span>  <span class="number">0.808768</span>  <span class="number">0.864672</span>  <span class="number">0.883474</span>   </span><br><span class="line">物防成长    -<span class="number">0.170773</span> -<span class="number">0.143719</span>  <span class="number">0.983223</span>  <span class="number">1.000000</span>  <span class="number">0.687920</span>  <span class="number">0.836301</span>  <span class="number">0.849445</span>   </span><br><span class="line">初始物防    -<span class="number">0.317801</span> -<span class="number">0.139327</span>  <span class="number">0.808768</span>  <span class="number">0.687920</span>  <span class="number">1.000000</span>  <span class="number">0.743957</span>  <span class="number">0.776385</span>   </span><br><span class="line">最大每<span class="number">5</span>秒回血 -<span class="number">0.276067</span> -<span class="number">0.207319</span>  <span class="number">0.864672</span>  <span class="number">0.836301</span>  <span class="number">0.743957</span>  <span class="number">1.000000</span>  <span class="number">0.983556</span>   </span><br><span class="line">每<span class="number">5</span>秒回血成长 -<span class="number">0.231988</span> -<span class="number">0.191102</span>  <span class="number">0.883474</span>  <span class="number">0.849445</span>  <span class="number">0.776385</span>  <span class="number">0.983556</span>  <span class="number">1.000000</span>   </span><br><span class="line">初始每<span class="number">5</span>秒回血 -<span class="number">0.335171</span> -<span class="number">0.219081</span>  <span class="number">0.746610</span>  <span class="number">0.731842</span>  <span class="number">0.611008</span>  <span class="number">0.937169</span>  <span class="number">0.858750</span>   </span><br><span class="line">最大每<span class="number">5</span>秒回蓝 -<span class="number">0.226294</span>  <span class="number">0.078473</span> -<span class="number">0.269346</span> -<span class="number">0.282500</span> -<span class="number">0.160954</span> -<span class="number">0.267749</span> -<span class="number">0.247764</span>   </span><br><span class="line">每<span class="number">5</span>秒回蓝成长 -<span class="number">0.196605</span>  <span class="number">0.005237</span> -<span class="number">0.202790</span> -<span class="number">0.217446</span> -<span class="number">0.105629</span> -<span class="number">0.202148</span> -<span class="number">0.169121</span>   </span><br><span class="line">初始每<span class="number">5</span>秒回蓝 -<span class="number">0.184345</span>  <span class="number">0.132174</span> -<span class="number">0.253111</span> -<span class="number">0.260324</span> -<span class="number">0.168099</span> -<span class="number">0.250934</span> -<span class="number">0.251700</span>   </span><br><span class="line"></span><br><span class="line">          初始每<span class="number">5</span>秒回血   最大每<span class="number">5</span>秒回蓝   每<span class="number">5</span>秒回蓝成长   初始每<span class="number">5</span>秒回蓝  </span><br><span class="line">最大生命     <span class="number">0.829468</span> -<span class="number">0.286851</span> -<span class="number">0.207165</span> -<span class="number">0.279098</span>  </span><br><span class="line">生命成长     <span class="number">0.798746</span> -<span class="number">0.297569</span> -<span class="number">0.212225</span> -<span class="number">0.292439</span>  </span><br><span class="line">初始生命     <span class="number">0.701547</span> -<span class="number">0.224674</span> -<span class="number">0.179819</span> -<span class="number">0.199537</span>  </span><br><span class="line">最大法力    -<span class="number">0.268561</span>  <span class="number">0.872025</span>  <span class="number">0.996253</span>  <span class="number">0.450477</span>  </span><br><span class="line">法力成长    -<span class="number">0.258510</span>  <span class="number">0.853143</span>  <span class="number">0.997483</span>  <span class="number">0.415945</span>  </span><br><span class="line">初始法力    -<span class="number">0.298217</span>  <span class="number">0.922108</span>  <span class="number">0.976856</span>  <span class="number">0.559600</span>  </span><br><span class="line">最高物攻    -<span class="number">0.346468</span> -<span class="number">0.193140</span> -<span class="number">0.179123</span> -<span class="number">0.145060</span>  </span><br><span class="line">物攻成长    -<span class="number">0.335171</span> -<span class="number">0.226294</span> -<span class="number">0.196605</span> -<span class="number">0.184345</span>  </span><br><span class="line">初始物攻    -<span class="number">0.219081</span>  <span class="number">0.078473</span>  <span class="number">0.005237</span>  <span class="number">0.132174</span>  </span><br><span class="line">最大物防     <span class="number">0.746610</span> -<span class="number">0.269346</span> -<span class="number">0.202790</span> -<span class="number">0.253111</span>  </span><br><span class="line">物防成长     <span class="number">0.731842</span> -<span class="number">0.282500</span> -<span class="number">0.217446</span> -<span class="number">0.260324</span>  </span><br><span class="line">初始物防     <span class="number">0.611008</span> -<span class="number">0.160954</span> -<span class="number">0.105629</span> -<span class="number">0.168099</span>  </span><br><span class="line">最大每<span class="number">5</span>秒回血  <span class="number">0.937169</span> -<span class="number">0.267749</span> -<span class="number">0.202148</span> -<span class="number">0.250934</span>  </span><br><span class="line">每<span class="number">5</span>秒回血成长  <span class="number">0.858750</span> -<span class="number">0.247764</span> -<span class="number">0.169121</span> -<span class="number">0.251700</span>  </span><br><span class="line">初始每<span class="number">5</span>秒回血  <span class="number">1.000000</span> -<span class="number">0.280945</span> -<span class="number">0.246737</span> -<span class="number">0.225670</span>  </span><br><span class="line">最大每<span class="number">5</span>秒回蓝 -<span class="number">0.280945</span>  <span class="number">1.000000</span>  <span class="number">0.856248</span>  <span class="number">0.827604</span>  </span><br><span class="line">每<span class="number">5</span>秒回蓝成长 -<span class="number">0.246737</span>  <span class="number">0.856248</span>  <span class="number">1.000000</span>  <span class="number">0.418679</span>  </span><br><span class="line">初始每<span class="number">5</span>秒回蓝 -<span class="number">0.225670</span>  <span class="number">0.827604</span>  <span class="number">0.418679</span>  <span class="number">1.000000</span>  </span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#热力图可视化！！</span></span><br><span class="line">plt.figure(figsize=(<span class="number">14</span>,<span class="number">14</span>))</span><br><span class="line"><span class="comment"># annot=True 显示每个方格的数据</span></span><br><span class="line">sns.heatmap(corr, annot=<span class="literal">True</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<img src="/posts/c1c7733e/GMM.png" class="">

<p>从图中可以看出“最大生命”，“生命成长”，“初始生命”这三个属性的相关性大，我们只 需保留一个属性即可。 features_remain数组保留了特征选择的属性，这样将原本的20个属性降维到了13个属性。 相关性大cong的属性保留一个，因此可以对属性进行降维</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将原本的20个属性降维到13个属性。请填写代码！</span></span><br><span class="line">features = [<span class="string">u&#x27;最大生命&#x27;</span>,<span class="string">u&#x27;生命成长&#x27;</span>,<span class="string">u&#x27;初始生命&#x27;</span>,<span class="string">u&#x27;最大法力&#x27;</span>, <span class="string">u&#x27;法力成长&#x27;</span>,<span class="string">u&#x27;初始法力&#x27;</span>,<span class="string">u&#x27;最高物攻&#x27;</span>,<span class="string">u&#x27;物攻成长&#x27;</span>,<span class="string">u&#x27;初始物攻&#x27;</span>,<span class="string">u&#x27;最大物防&#x27;</span>,<span class="string">u&#x27;物防成长&#x27;</span>,<span class="string">u&#x27;初始物防&#x27;</span>, <span class="string">u&#x27;最大每5秒回血&#x27;</span>, <span class="string">u&#x27;每5秒回血成长&#x27;</span>, <span class="string">u&#x27;初始每5秒回血&#x27;</span>, <span class="string">u&#x27;最大每5秒回蓝&#x27;</span>, <span class="string">u&#x27;每5秒回蓝成长&#x27;</span>, <span class="string">u&#x27;初始每5秒回蓝&#x27;</span>, <span class="string">u&#x27;最大攻速&#x27;</span>, <span class="string">u&#x27;攻击范围&#x27;</span>]</span><br><span class="line">data = data_ori[features]</span><br></pre></td></tr></table></figure>

<h3 id="数据清洗-1"><a href="#数据清洗-1" class="headerlink" title="数据清洗"></a>数据清洗</h3><p>任务三： “最大攻速”这个属性值是百分数，不适合做矩阵运算，需要将百分数转化成小数。 “攻击范围”这个字段的取值为远程或者近战，也不适合矩阵运算； </p>
<p>解决办法：将取值做个映射，用1代表远程，0代表近战。 </p>
<p>示例：map({‘远程’:1,’近战’:0})</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data[<span class="string">u&#x27;最大攻速&#x27;</span>] = data[<span class="string">u&#x27;最大攻速&#x27;</span>].apply(<span class="keyword">lambda</span> x:<span class="built_in">float</span>(x.strip(<span class="string">&#x27;%&#x27;</span>))/<span class="number">100</span>)</span><br><span class="line">data[<span class="string">u&#x27;攻击范围&#x27;</span>] = data[<span class="string">u&#x27;攻击范围&#x27;</span>].<span class="built_in">map</span>(&#123;<span class="string">&#x27;远程&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;近战&#x27;</span>:<span class="number">0</span>&#125;)</span><br><span class="line">&lt;ipython-<span class="built_in">input</span>-<span class="number">73</span>-cb0648147d53&gt;:<span class="number">2</span>: SettingWithCopyWarning: </span><br><span class="line">A value <span class="keyword">is</span> trying to be <span class="built_in">set</span> on a copy of a <span class="built_in">slice</span> <span class="keyword">from</span> a DataFrame.</span><br><span class="line">Try using .loc[row_indexer,col_indexer] = value instead</span><br><span class="line"></span><br><span class="line">See the caveats <span class="keyword">in</span> the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html<span class="comment">#returning-a-view-versus-a-copy</span></span><br><span class="line">  data[<span class="string">u&#x27;最大攻速&#x27;</span>] = data[<span class="string">u&#x27;最大攻速&#x27;</span>].apply(<span class="keyword">lambda</span> x:<span class="built_in">float</span>(x.strip(<span class="string">&#x27;%&#x27;</span>))/<span class="number">100</span>)</span><br><span class="line">&lt;ipython-<span class="built_in">input</span>-<span class="number">73</span>-cb0648147d53&gt;:<span class="number">3</span>: SettingWithCopyWarning: </span><br><span class="line">A value <span class="keyword">is</span> trying to be <span class="built_in">set</span> on a copy of a <span class="built_in">slice</span> <span class="keyword">from</span> a DataFrame.</span><br><span class="line">Try using .loc[row_indexer,col_indexer] = value instead</span><br><span class="line"></span><br><span class="line">See the caveats <span class="keyword">in</span> the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html<span class="comment">#returning-a-view-versus-a-copy</span></span><br><span class="line">  data[<span class="string">u&#x27;攻击范围&#x27;</span>] = data[<span class="string">u&#x27;攻击范围&#x27;</span>].<span class="built_in">map</span>(&#123;<span class="string">&#x27;远程&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;近战&#x27;</span>:<span class="number">0</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>采用 Z-Score 规范化数据，保证每个特征维度的数据均值为 0，方差为 1</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ss = StandardScaler()</span><br><span class="line">data = ss.fit_transform(data)</span><br></pre></td></tr></table></figure>

<p>构造GMM聚类模型，GaussianMixture()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gmm = GaussianMixture(n_components=<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练数据</span></span><br><span class="line">gmm.fit(data)</span><br><span class="line"></span><br><span class="line">prediction = gmm.predict(data)</span><br><span class="line"><span class="built_in">print</span>(prediction)</span><br><span class="line">[<span class="number">13</span> <span class="number">24</span> <span class="number">11</span> <span class="number">10</span>  <span class="number">2</span> <span class="number">25</span> <span class="number">20</span> <span class="number">11</span>  <span class="number">7</span> <span class="number">24</span> <span class="number">18</span> <span class="number">14</span> <span class="number">10</span>  <span class="number">0</span>  <span class="number">1</span> <span class="number">18</span> <span class="number">13</span>  <span class="number">7</span>  <span class="number">2</span> <span class="number">12</span> <span class="number">22</span> <span class="number">12</span> <span class="number">12</span> <span class="number">12</span></span><br><span class="line"> <span class="number">12</span> <span class="number">12</span> <span class="number">12</span> <span class="number">21</span> <span class="number">16</span> <span class="number">26</span> <span class="number">24</span>  <span class="number">9</span>  <span class="number">9</span> <span class="number">16</span> <span class="number">26</span>  <span class="number">9</span> <span class="number">16</span>  <span class="number">6</span>  <span class="number">4</span> <span class="number">15</span>  <span class="number">9</span> <span class="number">16</span> <span class="number">16</span>  <span class="number">9</span> <span class="number">16</span> <span class="number">15</span> <span class="number">14</span>  <span class="number">4</span></span><br><span class="line"> <span class="number">24</span> <span class="number">16</span> <span class="number">28</span>  <span class="number">5</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">3</span> <span class="number">13</span> <span class="number">29</span>  <span class="number">5</span> <span class="number">23</span>  <span class="number">2</span> <span class="number">29</span> <span class="number">19</span> <span class="number">17</span> <span class="number">13</span>  <span class="number">8</span>  <span class="number">5</span> <span class="number">27</span>  <span class="number">5</span> <span class="number">21</span>]</span><br><span class="line"> </span><br><span class="line"> <span class="comment"># 将分组结果输出到 CSV 文件中</span></span><br><span class="line">data_ori.insert(<span class="number">0</span>, <span class="string">&#x27;分组&#x27;</span>, prediction)</span><br><span class="line">data_ori.to_csv(<span class="string">&#x27;.hero_out.csv&#x27;</span>, index=<span class="literal">False</span>, sep=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> calinski_harabasz_score</span><br><span class="line"><span class="built_in">print</span>(calinski_harabasz_score(data, prediction))</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="航空公司客户价值分析"><a href="#航空公司客户价值分析" class="headerlink" title="航空公司客户价值分析"></a>航空公司客户价值分析</h1><img src="/posts/c1c7733e/%E8%88%AA%E7%A9%BA.png" class="">

<hr>
<h1 id="比特币价格预测"><a href="#比特币价格预测" class="headerlink" title="比特币价格预测"></a>比特币价格预测</h1><p>比特币价格走势预测</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># 比特币走势预测，使用时间序列ARMA</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> statsmodels.tsa.arima_model <span class="keyword">import</span> ARMA</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">warnings.filterwarnings(<span class="string">&#x27;ignore&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据加载</span></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;./bitcoin_2012-01-01_to_2018-10-31.csv&#x27;</span>)</span><br><span class="line"><span class="comment"># 将时间作为df的索</span></span><br><span class="line">df.Timestamp = pd.to_datetime(df.Timestamp)</span><br><span class="line">df.index = df.Timestamp</span><br><span class="line"><span class="comment"># 数据探索</span></span><br><span class="line"><span class="built_in">print</span>(df.head(<span class="number">10</span>))</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">数据探索部分打印内容：</span><br><span class="line">            Timestamp      Open      High       Low     Close  Volume_(BTC)  \</span><br><span class="line">Timestamp                                                                     </span><br><span class="line"><span class="number">2011</span>-<span class="number">12</span>-<span class="number">31</span> <span class="number">2011</span>-<span class="number">12</span>-<span class="number">31</span>  <span class="number">4.465000</span>  <span class="number">4.482500</span>  <span class="number">4.465000</span>  <span class="number">4.482500</span>     <span class="number">23.829470</span>   </span><br><span class="line"><span class="number">2012</span>-01-01 <span class="number">2012</span>-01-01  <span class="number">4.806667</span>  <span class="number">4.806667</span>  <span class="number">4.806667</span>  <span class="number">4.806667</span>      <span class="number">7.200667</span>   </span><br><span class="line"><span class="number">2012</span>-01-02 <span class="number">2012</span>-01-02  <span class="number">5.000000</span>  <span class="number">5.000000</span>  <span class="number">5.000000</span>  <span class="number">5.000000</span>     <span class="number">19.048000</span>   </span><br><span class="line"><span class="number">2012</span>-01-03 <span class="number">2012</span>-01-03  <span class="number">5.252500</span>  <span class="number">5.252500</span>  <span class="number">5.252500</span>  <span class="number">5.252500</span>     <span class="number">11.004660</span>   </span><br><span class="line"><span class="number">2012</span>-01-04 <span class="number">2012</span>-01-04  <span class="number">5.200000</span>  <span class="number">5.223333</span>  <span class="number">5.200000</span>  <span class="number">5.223333</span>     <span class="number">11.914807</span>   </span><br><span class="line"><span class="number">2012</span>-01-05 <span class="number">2012</span>-01-05  <span class="number">6.281429</span>  <span class="number">6.286190</span>  <span class="number">6.281429</span>  <span class="number">6.286190</span>      <span class="number">4.514373</span>   </span><br><span class="line"><span class="number">2012</span>-01-06 <span class="number">2012</span>-01-06  <span class="number">6.435000</span>  <span class="number">6.445000</span>  <span class="number">6.435000</span>  <span class="number">6.445000</span>      <span class="number">2.420196</span>   </span><br><span class="line"><span class="number">2012</span>-01-07 <span class="number">2012</span>-01-07  <span class="number">6.800000</span>  <span class="number">6.800000</span>  <span class="number">6.800000</span>  <span class="number">6.800000</span>      <span class="number">0.295858</span>   </span><br><span class="line"><span class="number">2012</span>-01-08 <span class="number">2012</span>-01-08  <span class="number">6.950000</span>  <span class="number">6.950000</span>  <span class="number">6.950000</span>  <span class="number">6.950000</span>      <span class="number">2.500000</span>   </span><br><span class="line"><span class="number">2012</span>-01-09 <span class="number">2012</span>-01-09  <span class="number">6.584167</span>  <span class="number">6.584167</span>  <span class="number">6.581667</span>  <span class="number">6.581667</span>      <span class="number">1.857481</span>   </span><br><span class="line"></span><br><span class="line">            Volume_(Currency)  Weighted_Price  </span><br><span class="line">Timestamp                                      </span><br><span class="line"><span class="number">2011</span>-<span class="number">12</span>-<span class="number">31</span>         <span class="number">106.330084</span>        <span class="number">4.471603</span>  </span><br><span class="line"><span class="number">2012</span>-01-01          <span class="number">35.259720</span>        <span class="number">4.806667</span>  </span><br><span class="line"><span class="number">2012</span>-01-02          <span class="number">95.240000</span>        <span class="number">5.000000</span>  </span><br><span class="line"><span class="number">2012</span>-01-03          <span class="number">58.100651</span>        <span class="number">5.252500</span>  </span><br><span class="line"><span class="number">2012</span>-01-04          <span class="number">63.119578</span>        <span class="number">5.208159</span>  </span><br><span class="line"><span class="number">2012</span>-01-05          <span class="number">27.987370</span>        <span class="number">6.284127</span>  </span><br><span class="line"><span class="number">2012</span>-01-06          <span class="number">15.914658</span>        <span class="number">6.438999</span>  </span><br><span class="line"><span class="number">2012</span>-01-07           <span class="number">2.011834</span>        <span class="number">6.800000</span>  </span><br><span class="line"><span class="number">2012</span>-01-08          <span class="number">17.300000</span>        <span class="number">6.950000</span>  </span><br><span class="line"><span class="number">2012</span>-01-09          <span class="number">12.306798</span>        <span class="number">6.582770</span>  </span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 按照月，季度，年来统计</span></span><br><span class="line">df_month = df.resample(<span class="string">&#x27;M&#x27;</span>).mean()</span><br><span class="line">df_Q = df.resample(<span class="string">&#x27;Q-DEC&#x27;</span>).mean()</span><br><span class="line">df_year = df.resample(<span class="string">&#x27;A-DEC&#x27;</span>).mean()</span><br><span class="line"><span class="comment"># 按照天，月，季度，年来显示比特币的走势</span></span><br><span class="line">fig = plt.figure(figsize=[<span class="number">15</span>, <span class="number">7</span>])</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>]=[<span class="string">&#x27;SimHei&#x27;</span>] <span class="comment">#用来正常显示中文标签</span></span><br><span class="line">plt.suptitle(<span class="string">&#x27;比特币金额（美金）&#x27;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">plt.subplot(<span class="number">221</span>)</span><br><span class="line"></span><br><span class="line">plt.plot(df.Weighted_Price, <span class="string">&#x27;-&#x27;</span>, label=<span class="string">&#x27;按天&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.subplot(<span class="number">222</span>)</span><br><span class="line"></span><br><span class="line">plt.plot(df.Weighted_Price, <span class="string">&#x27;-&#x27;</span>, label=<span class="string">&#x27;按月&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.subplot(<span class="number">223</span>)</span><br><span class="line"></span><br><span class="line">plt.plot(df.Weighted_Price, <span class="string">&#x27;-&#x27;</span>, label=<span class="string">&#x27;按季度&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.subplot(<span class="number">224</span>)</span><br><span class="line"></span><br><span class="line">plt.plot(df.Weighted_Price, <span class="string">&#x27;-&#x27;</span>, label=<span class="string">&#x27;按年&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>按照天、月、季度、年来统计显示比特币的走势：</p>
<img src="/posts/c1c7733e/bit1.png" class="">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置参数范围</span></span><br><span class="line">ps = <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line">qs = <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line">parameters = product(ps, qs)</span><br><span class="line">parameters_list = <span class="built_in">list</span>(parameters)</span><br><span class="line"><span class="comment"># 寻找最优ARMA模型参数，即best_aic最小</span></span><br><span class="line">results = []</span><br><span class="line">best_aic = <span class="built_in">float</span>(<span class="string">&quot;inf&quot;</span>) <span class="comment"># 正无穷</span></span><br><span class="line"><span class="keyword">for</span> param <span class="keyword">in</span> parameters_list:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        model = ARMA(df_month.Weighted_Price,order=(param[<span class="number">0</span>], param[<span class="number">1</span>])).fit()</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;参数错误:&#x27;</span>, param)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    aic = model.aic</span><br><span class="line">    <span class="keyword">if</span> aic &lt; best_aic:</span><br><span class="line">        best_model = model</span><br><span class="line">        best_aic = aic</span><br><span class="line">        best_param = param</span><br><span class="line">    results.append([param, model.aic])</span><br><span class="line"><span class="comment"># 输出最优模型</span></span><br><span class="line">result_table = pd.DataFrame(results)</span><br><span class="line">result_table.columns = [<span class="string">&#x27;parameters&#x27;</span>, <span class="string">&#x27;aic&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;最优模型:&#x27;</span>, best_model.summary())</span><br><span class="line"><span class="comment"># 比特币预测</span></span><br><span class="line">df_month2 = df_month[[<span class="string">&#x27;Weighted_Price&#x27;</span>]]</span><br><span class="line">date_list = [datetime(<span class="number">2018</span>, <span class="number">11</span>, <span class="number">30</span>), datetime(<span class="number">2018</span>, <span class="number">12</span>, <span class="number">31</span>), datetime(<span class="number">2019</span>, <span class="number">1</span>, <span class="number">31</span>),</span><br><span class="line">             datetime(<span class="number">2019</span>, <span class="number">2</span>, <span class="number">28</span>), datetime(<span class="number">2019</span>, <span class="number">3</span>, <span class="number">31</span>),</span><br><span class="line">             datetime(<span class="number">2019</span>, <span class="number">4</span>, <span class="number">30</span>), datetime(<span class="number">2019</span>, <span class="number">5</span>, <span class="number">31</span>), datetime(<span class="number">2019</span>, <span class="number">6</span>, <span class="number">30</span>)]</span><br><span class="line">future = pd.DataFrame(index=date_list, columns=df_month.columns)</span><br><span class="line">df_month2 = pd.concat([df_month2, future])</span><br><span class="line">df_month2[<span class="string">&#x27;forecast&#x27;</span>] = best_model.predict(start=<span class="number">0</span>, end=<span class="number">91</span>)</span><br><span class="line"><span class="comment"># 比特币预测结果显示</span></span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">7</span>))</span><br><span class="line">df_month2.Weighted_Price.plot(label=<span class="string">&#x27;实际金额&#x27;</span>)</span><br><span class="line">df_month2.forecast.plot(color=<span class="string">&#x27;r&#x27;</span>, ls=<span class="string">&#x27;--&#x27;</span>, label=<span class="string">&#x27;预测金额&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.title(<span class="string">&#x27;比特币金额(月)&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;时间&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;美金&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<img src="/posts/c1c7733e/bit2.png" class="">

<p>比特币预测结果：</p>
<img src="/posts/c1c7733e/bit3.png" class="">
]]></content>
      <tags>
        <tag>5</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo使用方法及命令</title>
    <url>/posts/1eb58338.html</url>
    <content><![CDATA[<p><strong>介绍hexo常用的命令以及markdown常用语法</strong></p>
<span id="more"></span>

<h2 id="hexo常用命令"><a href="#hexo常用命令" class="headerlink" title="hexo常用命令"></a>hexo常用命令</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;postName&quot;</span>		<span class="comment">#新建文章</span></span><br><span class="line">hexo new page <span class="string">&quot;pageName&quot;</span><span class="comment">#新建页面</span></span><br><span class="line">hexo generate 			<span class="comment">#生成静态页面至public目录</span></span><br><span class="line">hexo server 			<span class="comment">#开启预览访问端口</span></span><br><span class="line">hexo deploy 			<span class="comment">#部署到GitHub</span></span><br><span class="line">hexo <span class="built_in">help</span>  				<span class="comment">#查看帮助</span></span><br><span class="line">hexo version  			<span class="comment">#查看Hexo的版本</span></span><br><span class="line">hexo clean 				<span class="comment">#清理public的内容</span></span><br><span class="line">组合命令：</span><br><span class="line">hexo s -g			 	<span class="comment">#生成并本地预览</span></span><br><span class="line">hexo d -g		 		<span class="comment">#生成并上传</span></span><br></pre></td></tr></table></figure>

<h2 id="Hexo-Markdown简明语法"><a href="#Hexo-Markdown简明语法" class="headerlink" title="Hexo Markdown简明语法"></a>Hexo Markdown简明语法</h2><h3 id="内容目录"><a href="#内容目录" class="headerlink" title="内容目录"></a>内容目录</h3><p>使用的yun主题自带目录生成(正确使用markdown语法)<br>新建的文章默认生成目录<br>新建的页面可以在首部添加: <code>toc: true</code></p>
<h3 id="斜体和粗体"><a href="#斜体和粗体" class="headerlink" title="斜体和粗体"></a>斜体和粗体</h3><p>使用<code>*</code>和<code>**</code>表示斜体和粗体，格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*斜体*，**粗体**</span><br></pre></td></tr></table></figure>

<p>效果如下：<em>斜体</em>，<strong>粗体</strong></p>
<h3 id="分级标题"><a href="#分级标题" class="headerlink" title="分级标题"></a>分级标题</h3><p>使用 <code>===</code>表示一级标题，使用<code>---</code>表示二级标题，格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这是一个一级标题</span><br><span class="line">===</span><br><span class="line">这是一个二级标题</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>或者：使用<code>#</code>号（建议<code>#</code>后面跟一个空格）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># H1</span><br><span class="line">## H2</span><br><span class="line">### H3</span><br><span class="line">#### H4</span><br><span class="line">##### H5</span><br><span class="line">###### H6</span><br></pre></td></tr></table></figure>

<h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>在单独的一行使用<code>***</code>或者<code>___</code>表示分割线</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">part1</span><br><span class="line">___ (三个下划线)</span><br><span class="line">part2</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p>part1</p>
<hr>
<p>part2</p>
<h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><p>使用<code>~~</code>表示删除线<br>（<code>~~</code>要紧跟文字不能空格）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~~我被划了吗？~~</span><br></pre></td></tr></table></figure>

<p><del>我被划了吗？</del></p>
<h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><h4 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h4><p>插入文字超链接的格式如下 ：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[链接文字](链接地址 &quot;链接标题&quot;)</span><br></pre></td></tr></table></figure>

<h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><p>插入图片超链接的格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![图片说明](图片链接 &quot;图片标题&quot;)</span><br></pre></td></tr></table></figure>

<h4 id="音频"><a href="#音频" class="headerlink" title="音频"></a>音频</h4><p>插入音频，使用插件hexo-tag-aplayer，语法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% aplayer title author url [picture_url, narrow, autoplay, width:xx%, lrc:xxx] %&#125;</span><br></pre></td></tr></table></figure>

<p>详情参见：hexo-tag-aplayer <a href="https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md">中文使用文档</a></p>
<h4 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h4><p>引用视频则直接插入iframe代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;/js/youtube-autoresizer.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;https://www.youtube.com/embed/HfElOZSEqn4&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure>

<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>用<code>\</code>表示注释，<code>\</code>后面的文字解析为纯文本格式。<br>渲染效果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\## 看我没有变成二级标题吧</span><br></pre></td></tr></table></figure>

<p>## 看我没有变成二级标题吧</p>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><h4 id="普通引用"><a href="#普通引用" class="headerlink" title="普通引用"></a>普通引用</h4><p>使用<code>&gt;</code>表示文字引用：<br>(必须要在每行的开头)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; 野火烧不尽，</span><br><span class="line">春风吹又生</span><br><span class="line"></span><br><span class="line">遇到换行结束</span><br></pre></td></tr></table></figure>

<p>eg：</p>
<blockquote>
<p>野火烧不尽，<br>春风吹又生</p>
</blockquote>
<p>遇到换行结束 </p>
<h4 id="嵌套引用"><a href="#嵌套引用" class="headerlink" title="嵌套引用"></a>嵌套引用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; 最外层引用</span><br><span class="line">&gt; &gt; 第二层引用</span><br><span class="line">&gt; &gt; &gt; 可以嵌套很多层</span><br></pre></td></tr></table></figure>

<blockquote>
<p>最外层引用</p>
<blockquote>
<p>第二层引用</p>
<blockquote>
<p>可以嵌套很多层</p>
</blockquote>
</blockquote>
</blockquote>
<h4 id="引用嵌套列表"><a href="#引用嵌套列表" class="headerlink" title="引用嵌套列表"></a>引用嵌套列表</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; - 这是引用里嵌套的一个列表</span><br><span class="line">&gt; - 还可以有子列表</span><br><span class="line">&gt; 	- 子列表</span><br><span class="line">&gt; 	- 子列表</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>这是引用里嵌套的一个列表</li>
<li>还可以有子列表<ul>
<li>子列表</li>
<li>子列表</li>
</ul>
</li>
</ul>
</blockquote>
<h4 id="引用嵌套代码"><a href="#引用嵌套代码" class="headerlink" title="引用嵌套代码"></a>引用嵌套代码</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;     同样的，在前面加四个空格形成代码块</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; ```</span><br><span class="line">&gt; 或者使用三个反引号形成代码块</span><br><span class="line">&gt; ```</span><br></pre></td></tr></table></figure>

<blockquote>
<pre><code>同样的，在前面加四个空格形成代码块
</code></pre>
</blockquote>
<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">或者使用三个反引号形成代码块</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="列表与表格"><a href="#列表与表格" class="headerlink" title="列表与表格"></a>列表与表格</h3><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><p>使用<code>*</code>, <code>+</code>, <code>-</code> 来显示无序列表<br>(后面加空格)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+ 无序列表项 一</span><br><span class="line">	- 子无序列表 一</span><br><span class="line">	- 子无序列表 二</span><br><span class="line">		* 子无序列表 三</span><br><span class="line">+ 无序列表项 二</span><br><span class="line">+ 无序列表项 三</span><br></pre></td></tr></table></figure>

<p>效果展示：</p>
<ul>
<li>无序列表项 一<ul>
<li>子无序列表 一</li>
<li>子无序列表 二<ul>
<li>子无序列表 三</li>
</ul>
</li>
</ul>
</li>
<li>无序列表项 二</li>
<li>无序列表项 三</li>
</ul>
<h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><p>使用数字和点表示有序列表：<br>(同样的，要加空格)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 有序列表项 一</span><br><span class="line">	1. 子有序列表项 一</span><br><span class="line">	2. 子有序列表项 二</span><br><span class="line">	4. 故意标错，会自动排序</span><br><span class="line">2. 有序列表项 二</span><br><span class="line">3. 有序列表项 三</span><br></pre></td></tr></table></figure>

<ol>
<li>有序列表项 一<ol>
<li>子有序列表项 一</li>
<li>子有序列表项 二</li>
<li>故意标错，会自动排序</li>
</ol>
</li>
<li>有序列表项 二</li>
<li>有序列表项 三</li>
</ol>
<h3 id="绘制表格"><a href="#绘制表格" class="headerlink" title="绘制表格"></a>绘制表格</h3><p>绘制表格格式如下：<br><code>|</code> 控制分列，<br><code>-</code> 控制分行，<br><code>:</code> 控制对齐方式。</p>
<p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">| 这是标题 | 自动加粗 | 标题下指定对齐方式 | 不指定对齐方式 |</span><br><span class="line">| :------- | --------: | :---: |---|</span><br><span class="line">| ↑左对齐 | 右对齐↑  | ↑居中↑     |默认左对齐|</span><br><span class="line">| 123456789    | ←空格不占位置   | 987654321 | 1 |</span><br><span class="line">| 123456789| ←没有空格     | 987654321 | 0 |</span><br></pre></td></tr></table></figure>

<p>效果展示：</p>
<table>
<thead>
<tr>
<th align="left">这是标题</th>
<th align="right">自动加粗</th>
<th align="center">标题下指定对齐方式</th>
<th>不指定对齐方式</th>
</tr>
</thead>
<tbody><tr>
<td align="left">↑左对齐</td>
<td align="right">右对齐↑</td>
<td align="center">↑居中↑</td>
<td>默认左对齐</td>
</tr>
<tr>
<td align="left">123456789</td>
<td align="right">←空格不占位置</td>
<td align="center">987654321</td>
<td>1</td>
</tr>
<tr>
<td align="left">123456789</td>
<td align="right">←没有空格</td>
<td align="center">987654321</td>
<td>0</td>
</tr>
</tbody></table>
<h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><h4 id="行内代码"><a href="#行内代码" class="headerlink" title="行内代码"></a>行内代码</h4><p>使用<code>`</code>符号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">可以用 `一个`，</span><br><span class="line">可以用 ``两个``，</span><br><span class="line">也可以用 ```三个```，</span><br><span class="line">总之就是要 ````成对````。</span><br></pre></td></tr></table></figure>

<p>可以用 <code>一个</code>，<br>可以用 <code>两个</code>，<br>也可以用 <code>三个</code>，<br>总之就是要 <code>成对</code>。</p>
<h4 id="多行代码"><a href="#多行代码" class="headerlink" title="多行代码"></a>多行代码</h4><p>使用：<code>`</code>符号<br>至少要三个连续的 <code>`</code>，数目要配对</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line">#include&lt;stdion.h&gt;</span><br><span class="line">int main</span><br><span class="line">&#123;</span><br><span class="line">	cout&lt;&lt;&quot;hello world!&quot;&lt;&lt;endl;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br><span class="line">```</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;stdion.h&gt;</span><br><span class="line">int main</span><br><span class="line">&#123;</span><br><span class="line">	cout&lt;&lt;&quot;hello world!&quot;&lt;&lt;endl;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="加强的代码块"><a href="#加强的代码块" class="headerlink" title="加强的代码块"></a>加强的代码块</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```cpp</span><br><span class="line">#include&lt;stdion.h&gt;</span><br><span class="line">int main</span><br><span class="line">&#123;</span><br><span class="line">	cout&lt;&lt;&quot;hello world!&quot;&lt;&lt;endl;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br><span class="line">```</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdion.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> main</span><br><span class="line">&#123;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;hello world!&quot;</span>&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>end</strong></em></p>
]]></content>
      <tags>
        <tag>1</tag>
      </tags>
  </entry>
  <entry>
    <title>selenium自动化测试</title>
    <url>/posts/3cb24475.html</url>
    <content><![CDATA[<p><strong>Python selenium UI自动化测试技术分享</strong></p>
<span id="more"></span>

<h1 id="初入URL页面即警告框弹窗的解决办法"><a href="#初入URL页面即警告框弹窗的解决办法" class="headerlink" title="初入URL页面即警告框弹窗的解决办法"></a>初入URL页面即警告框弹窗的解决办法</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">options = webdriver.ChromeOptions()</span><br><span class="line">options.add_experimental_option(<span class="string">&#x27;excludeSwitches&#x27;</span>, [<span class="string">&#x27;enable-logging&#x27;</span>])</span><br><span class="line">options.add_experimental_option(<span class="string">&quot;excludeSwitches&quot;</span>, [<span class="string">&quot;enable-automation&quot;</span>])</span><br><span class="line">options.add_experimental_option(<span class="string">&quot;useAutomationExtension&quot;</span>, <span class="string">&#x27;False&#x27;</span>)</span><br><span class="line">options.add_argument(<span class="string">&quot;--user-data-dir=&quot;</span> + <span class="built_in">str</span>(pathlib.Path.home()) + <span class="string">r&quot;\AppData\Local\Google\Chrome\seleniumTest&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 WebDriver 对象，指明使用chrome浏览器驱动</span></span><br><span class="line">driver = webdriver.Chrome(service=Service(<span class="string">r&#x27;C:\Program Files\Google\Chrome\Application\chromedriver.exe&#x27;</span>), </span><br><span class="line">                          options=options)  </span><br></pre></td></tr></table></figure>

<p>以Chrome浏览器调用为例，service处路径规范为本地chrome文件夹内部的chromedriver绝对路径，options是对chromedriver所调用的chrome浏览器基本设置的修改。</p>
<p>浏览器URL搜索栏搜索 ‘chrome:&#x2F;&#x2F;flags’，如下图Insecure origins trested as secure处添加需要使用的测试网址url，英文逗号分隔，置为Enabled重启浏览器即可。</p>
<img src="/posts/3cb24475/flags%E8%AE%BE%E7%BD%AE.png" class="">

<hr>
<h1 id="Selenium的三种等待方法"><a href="#Selenium的三种等待方法" class="headerlink" title="Selenium的三种等待方法"></a>Selenium的三种等待方法</h1><h2 id="sleep-：强制等待"><a href="#sleep-：强制等待" class="headerlink" title="sleep()：强制等待"></a>sleep()：强制等待</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="string">&quot;&quot;&quot;程序代码块&quot;&quot;&quot;</span></span><br><span class="line">time.sleep(N)  <span class="comment"># N为整数, 意为编译器运行至该行，强制暂停等待加载N秒</span></span><br></pre></td></tr></table></figure>

<p>执行 sleep()后线程休眠。</p>
<p>固定的等待，常用于演示，调试，初学者观察效果。实际项目中不建议使用这种等待，由于网络的好坏导致等待时间不确定，如果设置的等待时间不足够长，元素找不到会报错，如果设置的等待时间过长，保证元素可以找到，但其实可能用不了这么久。这种等待方法十分笨拙，无论页面加载得如何，都必须等待n秒，可以说是十分不智能了。</p>
<p>但是强制等待也不是一无是处，比如界面操作完要关闭，但是最后你提交了一些数据，如果非常快的退出浏览器会丢失请求。那就需要强制等待一定时间，这个跟隐式等待还是显示等待都无关。再比如当我们没有找到元素而报错，定位问题时，可以先用sleep()来尝试一下，确定是否是由于等待时间的问题没有找到元素，如果是的话就可以用显示等待来代替。</p>
<h2 id="implicitly-wait-：隐式等待"><a href="#implicitly-wait-：隐式等待" class="headerlink" title="implicitly_wait()：隐式等待"></a>implicitly_wait()：隐式等待</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="string">&quot;&quot;&quot;程序代码块&quot;&quot;&quot;</span></span><br><span class="line">driver = webdriver.Chrome(...)</span><br><span class="line">driver.implicitly_wait(N)  <span class="comment"># N为整数, 意为编译器运行至该行，隐式等待N秒</span></span><br></pre></td></tr></table></figure>

<p>原理：隐式等待，就是在创建driver时，为浏览器对象创建一个等待时间，这个方法是得不到某个元素就等待一段时间，直到拿到某个元素位置。</p>
<p>注意：在使用隐式等待的时候，实际上浏览器会在你自己设定的时间内不断的刷新页面去寻找我们需要的元素 他是全局等待。是对页面中的所有元素设置加载时间。</p>
<p>隐式等待可以理解成在规定的时间范围内，浏览器在不停的刷新页面，直到找到相关元素提前结束等待。如果超出了设置时间还未找到定位元素则抛出异常。但如果页面本身包含一个超大视频之类的文件，就算我们需要定位的元素在最开始已经加载出来，却依旧要等待所有文件加载结束之后，脚本才能继续执行，依旧算是有些弊端。</p>
<p>implicitly_wait(最大等待时长)默认参数的单位为秒。如果在代码中你设置了隐式等待时长为10秒，首先这10秒并非一个固定的等待时间，它并不影响脚本的执行速度。其次，它并不针对页面上的某一元素进行等待。当脚本执行到某个元素定位时，如果元素可以定位，则继续执行，如果元素定位不到，则它将以轮询的方式不断地判断元素是否被定位到。假设在第六秒定位到了元素则继续执行，若直到超出设置的时长10秒还没有定位到元素，则抛出异常。</p>
<p>缺点：隐式等待对于有些条件无法生效，比如url的改变，窗口的延迟新增，动态属性延迟加载……</p>
<h2 id="WebDriverWait-：显示等待"><a href="#WebDriverWait-：显示等待" class="headerlink" title="WebDriverWait()：显示等待"></a>WebDriverWait()：显示等待</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="string">&quot;&quot;&quot;程序代码块&quot;&quot;&quot;</span></span><br><span class="line">wait = WebDriverWait(driver, <span class="number">10</span>)</span><br><span class="line">wait.until(EC.presence_of_element_located((By.ID, <span class="string">&#x27;XXX&#x27;</span>)))</span><br></pre></td></tr></table></figure>

<p>显示等待是Selenium客户可以使用的命令式过程语言。</p>
<p>主要思想是最长等待n秒，n秒内每隔一段时间去检查需要定位的元素是否存在（默认检测频率为0.5s），若存在则提前结束等待。若超时未找到则报错。默认抛出异常为：NoSuchElementException。</p>
<p>这种等待比隐性等待更智能了一些，无视整个页面的加载，只要需要的元素存在了，就结束等待。显示等待不仅针对元素定位有效，而且可以针对某种行为（url的改变，属性的延迟加载）看它是否具备了一定的特征，就开始有所动作了。</p>
<p>函数详细介绍：</p>
<p><code>WebDriverWait(driver, timeout, poll_frequency=0.5, ignored_exceptions=None)</code></p>
<ul>
<li>driver：浏览器驱动</li>
<li>timeout：最长等待时间，默认以秒为单位</li>
<li>poll_frequency：监测的时间间隔，默认为0.5秒</li>
<li>ignored_exceptions：超时后的异常信息，默认情况下抛NoSuchElementException异常</li>
</ul>
<p>WebDriverWait一般有 until 和 until_not 方法配合使用</p>
<ul>
<li>until(method,message)</li>
<li>until_not(method ,message)</li>
</ul>
<hr>
<h1 id="终端打印-判断函数是否完整执行"><a href="#终端打印-判断函数是否完整执行" class="headerlink" title="终端打印 判断函数是否完整执行"></a>终端打印 判断函数是否完整执行</h1><p>对于强迫症的我，会抓住很多细枝末节的地方挑刺，webhis测试脚本运行主要是通过调用function.py下记录的各个模块函数来进行的，而又由于python逐行逐句执行的特性，在function.py下每个函数末尾增加如下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> inspect</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">        function_name = inspect.currentframe().f_code.co_name</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;函数 <span class="subst">&#123;function_name&#125;</span> 执行完成&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>脚本执行过程中，某函数执行完成后，编译器终端打印：“函数XXX执行完成”，以助于排查脚本报错时具体是哪个函数模块的问题。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Python 的 inspect 模块提供了一些函数，用于获取活动对象（如函数、类、方法）的信息。这些函数可以帮助查看对象的内部结构，了解它们的工作原理。</span><br><span class="line"></span><br><span class="line">以下是 inspect 模块的一些常用函数：</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> inspect.getmembers(object, predicate=None): 返回一个包含对象的所有成员的列表，每个成员都是一个 (name, value) 对的形式。如果提供了 predicate 参数，那么只有 predicate(value) 为 True 的成员才会被返回。</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> inspect.getdoc(object): 返回对象的文档字符串。</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> inspect.getsource(object): 返回对象的源代码（如果可用）。</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> inspect.getfile(object): 返回定义对象的源文件的路径（如果可用）。</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> inspect.currentframe(): 返回当前的栈帧。</span><br><span class="line"></span><br><span class="line">我的代码中，inspect.currentframe().f<span class="emphasis">_code.co_</span>name 被用来获取当前函数的名字。inspect.currentframe() 返回当前的栈帧，.f<span class="emphasis">_code 返回这个栈帧的代码对象，.co_</span>name 返回这个代码对象的名字，也就是当前函数的名字。</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="try-except校验-判断不定出现弹窗"><a href="#try-except校验-判断不定出现弹窗" class="headerlink" title="try-except校验 判断不定出现弹窗"></a>try-except校验 判断不定出现弹窗</h1><p>webhis医嘱开立过程中，有重复医嘱是否开立判断校验。</p>
<ul>
<li>为患者开立某pickshell医嘱时，当其医嘱列表存在该医嘱，会有“确认是否开立重复医嘱”的弹窗校验</li>
<li>医嘱保存时，有“是否保存重复医嘱”的弹窗校验</li>
<li>WPB选中患者，进行某些操作时（如挂号），会对患者基本信息校验，（例如身份证错误）</li>
</ul>
<p>故可在对应脚本代码位置增加try…expect…方法的校验</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;-----患者当前医嘱列表重复开立弹窗判断-----&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    wait = WebDriverWait(driver, <span class="number">3</span>)</span><br><span class="line">    wait.until(EC.presence_of_element_located((By.XPATH, <span class="string">&quot;//*[text()=&#x27;已经开立，是否继续？&#x27;]&quot;</span>)))</span><br><span class="line"></span><br><span class="line">    confirm_button = driver.find_element(by=By.XPATH, value=<span class="string">&quot;//*[text()=&#x27;确定&#x27;]&quot;</span>)</span><br><span class="line">    confirm_button.click()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---该医嘱可为此患者开立---&quot;</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;-----患者医嘱重复预警弹窗判断-----&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    wait = WebDriverWait(driver, <span class="number">3</span>)</span><br><span class="line">    wait.until(EC.presence_of_element_located((By.XPATH, <span class="string">&#x27;//*[@id=&quot;root&quot;]/div[2]/div/div/div/div[2]/div/div[2]/div/div/div[2]/div/div[1]/div/div/div[2]&#x27;</span>)))</span><br><span class="line"></span><br><span class="line">    confirm_button = driver.find_element(by=By.XPATH, value=<span class="string">&quot;//*[text()=&#x27;强制保存&#x27;]&quot;</span>)</span><br><span class="line">    confirm_button.click()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---该医嘱可为此患者开立---&quot;</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>当脚本执行过程中 有如上 校验弹窗出现，可以通过显式等待元素定位的方法，对弹窗进行模拟操作以关闭弹窗，进行后续脚本代码的执行。</p>
<p>如果有需要的话，可以增加expect抛出异常方法。</p>
<hr>
]]></content>
      <tags>
        <tag>1</tag>
      </tags>
  </entry>
</search>
