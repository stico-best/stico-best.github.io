<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>KBJ-ISSUE记录</title>
    <url>/posts/5f967442.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重新输入！" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容！">
  <script id="hbeData" type="hbeData" data-hmacdigest="716a75e852efae0fc68b2b105456c0e05922cdc1f46b3ea36b177fdd54a77482">7ed097c27f5d8544c11f27f45203235df87e6a2023d10b0b244a70aada881d1ef44383d7f58c42041bf1ec423d961d45dc452670c131b3c37a3744b9eb6f0b20ec031eb31fd534d5df22e067ca56f75d8646680ab94c07853662877c8bdf485ef7e7671cc715d640e60d97ffbcf998e7ffcc5fb8f6cc0a71a12a6095914d5d91400d5cc11aac85fff38df4b4c924c889aaece10142d31c38a4bc27a8c631679a144f481833929e127d794e54392a629827c8c7c31a88137eae0031fd20f72c406fe9cf2d726fe1e2d90d317103181d2770622187de491cdb896e543b1ad18500408931e74b81933b1dc5a5aaaa4bb2e7944a25f224a662d9d2d7c0a1ba957439cc6afd1e9b5638622c6fef4f487523851a3c4d53302b8d330afe7f6f4aafd2922fb6f1d94c010f18da1fb3f27a56553cf0446706b7628114944a4d4b649dde37d446f7d81acfda2a2e8bcc844d23aa75426d64ca9b78a971c085e1be3d2646cfb6c5f70913e1cb3a5a037b72ddcb8702a4cc0b7522d8b9ef73069cdf97fcdd0427855faf336ce797e6e68eb06e253d491116f034b5c5d871290a58f3f7d49c2eaad31cb73409dafd56d1eb2a11aefe64c2579071bffb8b58ea84067b2a0ff1d949c3a21af80198586b5460d1925f62740373560bbadc8d6010d0ac4d062cdb2ef22c9dc722a66c293dd4135db542acad0bae78301bae753975fbd4ca8074a232f1bfcce0d7869c1b4fdcf6965a3ce248ce157d0e58d49cf6301198095adbd594e242f0fe04adac8566cdc83914500d37485982454746773d7ea967f36139fb5f7e1c446cfe7b551b5a6fd5e594a745a3f4bd6ed6085fb3c42636ea9d49e9f87ac18e3fdce7c6de04f1493d0552aa9eb64ee28bdba39e25b5ec10f54f1e821a6e4ea7b072d2ec5851a0ab09338688f4e91fa9f0a9850b7085402f45170da3641bdcc4408d3ad8f0ad207a9c13d7efd756ac99f44c17036f602937a041264fac6eaf86bcabf5eb13fe571e790dd41fc3103843a6a16f3e2789e3b1491aa1a6715f7a35ffed4b0f57922be8005ff3a281b77ca022112a05df753298a5540a0090e9fd91a2be136db984e587dcf0b755111e4751a5ab494107bb3519b6ce4ffe47a07fa526e5bf7aed45e8f02b60d68450f03cb2840e085b101415e80f156977803f587cbd08057a21beceee7aea14b8bb1665871b3d6dca68f25f6017fd4efc112dc64a6582b90fee0a8fd832c5e456947cbb5105c42c66d1051022978912f534cd8fd1ffc802e267ba1f79468e79160a28cd1b273034f2382350312d0518a460cd5c8731c5daf5e6645ea70595c7d9b870cd69db11e6740fafbdd064ae1d43291f48b59dd25be37175d34edd970079168d019721e477481164138aa82c6e1839d22da015a19d06d6b27f15158a626b8dadd1de1617aec8cd85a77d6419fec2d0f4de5421b6b5e8cb22f9c821165b60af390eddef4a7d4feee8f7792f694eeac0e272501bb53a2c2fea3eea05f201148560b27834a2ddfe140d40c56a557875938299770ff0c5ca69bce212a45378537bf9ba931c8f695c1d491625ee0a219ef0f0f908a9f09f7b54faca0d76e58a74f802d22d24f746cf16215ac7554287a33a4ba2b40fdffaec993c17e244881906d68cb0b26fa01ad85e44e9cad1a308626731421cc48d5acbc81872f42a3d3682963ecad0b828da184564745c4a5c8de722e948396b5251eab38873861e8bff6f55242adb7a2e68385271ee446956c6a6eecc31974c202e820507c32dccbb862b8c6432a5703b5f4b3dc9060ff99fcaa62b33c83eb8416d62c41b8f1b426cffaef2bec095a6e4a5d26b54a6b81f13cc962e9dc0e23ca14ed9a23c709ba1407856836f1a8b9963e33d3169b8e84025193046792bb38b18ac07ed41fda660010f1049b2e7711e94f10cb59169667cd18c0f7ee3f156ee98aaa17a9615a4ea911f4ed0910f37434600a6dcba039c5c7469c8bc3e8938fa6cdc7017cd29766d8625e7e99d751765af5080020f53ef7a33f795a65b8d23a9872124b4e547b937eba3848a58e8b1112a4373849fb1a9be7b88946f1d2dfeaebe7f3c2add3d2e2f1a346b171ff015f5aab461e170af008d0415309ccf105de0205d866a2ee6154c10a23a27c5f756bc8ca108ed156d04149320563f0a9f5c46c9f39b22d22e176e34ceec522ec835e0745f9be1678b935fb2dcf1bc27f1217cfb66f86cb513725403fe2ae52998492082275a8adbc3a595737dd25a82510a69b51b96669a6d22f8195cb45ac7fe69ba8b546a2eacb14999bc9a713049c52a6eb1c96a1f560712b686d08415a807acaaae87b4aad03599b0f1bb9eb3a0e91158a93715a069128a6f23102a6161577f7b5c8958f47e8d7af45f82ed77d1a2df67e0b3e258de3c05c2c20bd71453a891d68da35283311b164ba98a2ac026f8d69c818784119d8868655846d57dee647767ab784fc1837970f2a1b6586b0e1d0e33490dc472733cd796ba96b97947b05bfc9d67a97f797cdc09741a194e7df74f0d69b350d72350a1689aae9a55ff96bb08a4787804336aab79eb3ebc8d9744e41169ef5ae6f666fc951615e3a45d064d4cb2aa452230ca1d5f2d0ec2d21f92616cd2858fa538e16460559112fe269a6608f3bebfdbeacb50afdb59ba6c9d1b6e107fcfe1e28313a97159d4070d01665bacc8de55ba740505bccdf6bfc16a758c3c8265a3b5311616c0abed6f3ac7c13be5c756d205b5ca50f9b518c6b8972a8870aa7c99d67f1521192efa1bdf2a6e573fcc1d417cec0ef1ed0cf6513ee4bd79d392600802388eb4ee10aa0e718f2d9f0bfd8f3947e6365459682f048eb3247a58771441742791aa71c7f4c847baf39f5ab801dfe30c90e5706a0015f9fcac767a27230f0f5e7a2a32e85bc064aa919c71432ff6fbcbb4297e33e810b50842be7460c01eecce205a8ca601b2fbb993018f1ff32cc686163275bb19bb813d908a2a561e8439a1cb2f8176e6cbbe32e178589dd828dd72fecb2a8962dd20f584f99e4acdc4619d81f06e2652f9f5b6997ab2020af6caf3e4ca0b7f412c49410cc890be34f3797a030ac4c227d1948309408e77c78aae94aaca0718a13eaa6416f449666efe7cc22649ce42c92f5c9332176e448e6a8738a4af0dc41ecaf4d729a49cb7d3b1e8b96950cd0a59f6be95e68a72be0b0c8e9faae6ce836e1b4aa25de8f5d53cb81902bede1d95833d4cfe25755b48bbee00b8ff40842e230cc17ec01e13688af49b0bcc852d836c4235282a1fc1dc0f92c8aee0d75e08598744bb0b7bc73624fda28de576d309c60d057d0a9a136ae6d543f670decbd8fcdc1db76793b0ba566d059323d97120450e17f0309030e895f835ca4a71c674f21d82378f56ecf045d3d98884a3eb16dbac51b20fed3ae3f95da1f3a599ad68096a52985a59f58d85a9ab45d0daf3ce78c857df1e8a25c577f13b422129acbfe2c3fe48907d5dbf3a9f4b2476d57ce9f0fe6490772c5cba06166be5a71c1f9384b5d627eefde034b21d8d3235d619569df17ca22b1fef79a12e35e21e8e73f679f7049e8667563ea06c3eaccaff6e71391d6265d907b29cfcb44a1752e806565d2909afe8e9bfcb4825cff03a9d406b3c8c61dc270bc197e77e7c1266aba1519906c93af33ed5687b041e1d3e357aef68b43595dc16f8dec846ab326151645054696e5e818af6b7a15338345800077531d98d8fb29902c4b2a36335f36f8ef6c875183e32560a00a32bce03e54f126a85d3c8be29a63f3acf9eec10b17188d3eadac2853c8002fde77816545a07b90104ad3e6aad67ca557d189812aa1c8cb57c502d45cca3d7db227c01516b7306b96251a7c69d5652a51b8b99a5af7d94de383f4c1579780216b99d1e53b0c2a04570d5a5d469a3834cb92fc42dc66d0eda1436b1fff6156a4a18b255aea83b3da725cd4c9a755ecaa165023ddae2b7757424c1f61ea9156726c81595a7093a981d363426bad314439eb30b55655beda09cfc5f3716f479bdab97f55ee005fdd60b51083b5433995523f68978ee605b9926e30450e73e21d8a1386b3718e15d45874fd8440f439c1f29cc2cf78321cdfd56cf7df5e8e0824d4089ff578f42e23cbc1e1733715aebf8e8fa3b737c2691d5df6d1c4368aabdbdc364d241ab3469961d7d91f2fade91553f36ff002a1322b1c95db2cde4f903a5b70f570b2d6f64c48ec487f759727cfd4faee25b62cefa9abbf99a15d929838f721096356dc0fc8676fb0ce4b1efea6c5b85030f975cba419c85568c708220c73cf651b5a07786854dcd8e69a680199c7a094f50174e206a9424e4451a910071acd364a8a9870685b0c378f0b6d5191f85c1408fc73f3a7d9e76b69283fcf5ee030e2cc14f33ac08c0b28aa8001aeb647367ad72a1d4b520c1555f0c06643770df9c13aec8a3730cb73bd36132dce11229e9448a07319e586e9111518e2d3c5a4671ecebfe4d806fc6d487a744dfcd12b1ac9ed51108a02f26a44c97d81c205710a08bc2b23798f489ea6126bf1ca37b782d37359436ee898d84d3ed125031461f7b456703e4d32b4e4f5e3efed83f7c11f0e75803dbc2c985e154fe2015a75b66ccc00cf8b35dae0cc32a7aa67f4cda675f2c1e087a52076c27acf2d8b70b74b2fa252ffd4c47d87627fc96d0e2433706d6c0668b0a580bedc03be8fd70882c6d9f57ff87b8213eaf78e401d03534cd9101cf6ffd3808aedbf21651c0b5202f1bf4ffd651331657880009aa2efb5e64dc520a5accef025c22132356ef25bbc3acd9516d6e4e0ea2e38b79fcba661ddd3cd7038212ae7e33775d401b4f6efbca0219d1614485ac72c6480724d1ea117c21724b2c241ace076565c3bcf1d02a8e7f9686407a8d202c222b5627bbac7ca345e05949b169f88e2b480598274ef8211cdce4d434167359c4e3b086ccff6ea4bd164ee42ad02d9f87794f4ddeeb53141e92b36dcc874c1d8716287ef78477c67d1a99a18ab18e805f82323f8d3f50e79268b89c0458f03cd1a66cc10395799f44ffd468be0cfe6e76aebb6f8bd4fdf1f652013b505ef4df6f937bf673a870830ef8ab62a2d498a1888bef6ac20ddb096814951d94d5586fb77f09dd34b7f3a7687e825e26523b23773c174800b9d4b7b71034ca30d52f415cfdc84cf97493be78dbb4bdbfb8539543263d98369d830e091d727203072267486d0109cfdfaef95d6d1e4ebb02807f2b92000c7196e234ea756869a5e55ca00b1e98af98c55eedc1d414ed759b42c9685d71706c80795e757fa6e96a2d4063b2df529aa6402460ad6c83e036dbcc3b2ad3ccf26d9e3c10e62325c3b5e372778a14ebc624cfb617eca04b644c9d9ff51b2fd28d88ad56f7c03e14c96c053cbced76cde4571eb6b172d17c5cae03a848aeda27560a78987c455fd0c834ee7a3aeb7c254563568e32efe0b45bc1ef52f71a357e4e21b514f808d35d2006d0a10081698fa6ed964d34c148d5c013e2a1eb3ca921cf85601a24652b4817a55385cc45a65aafe47423b2916465804332b28cd4f431a8ceaa7ddb2690077fd8d67c32f260732bb94d4254c3e33987e91b89113e04432118059606a24e6bf4aee91cdf6db7e6299691f95fe105e83190e0760126197a9b537d8d2b3cb4a0554f4ec317850ffa72f1e838fbf82a9ace532a6cf5359e36534cfafccbb3a445bf47a4ba23dbeb04ab56f556f3d090ee30cf492e2a81cbf3a62386f04e9a20c981af74c33ef37ec5766b97741da25e87fdc2de8e6e4180c1523e383206f92e51f37d6e8675ec2ab35d978febc4f60b72b9f77e5d7bb53234d3eba0c47853ad9402198a1a79efea339144e385de579845313a75db5d200f900f6ca25416bdeca7e117027d93dd693ccade1d9d647ec9dc59e55fe779b78f0e10e1520094f24cdf522a4f240b9dd3a20b89a0e41222024c3dfdaf81587b50cb5c9d2a5036626056c4343c3501288534448b29f176cdd3a014ecce9fb47639ac3bfe2e47973e065f4ccce8435ed805e4164caeba1f08ccd6b4ada9fd8e4e87b0d280138a2b9aa2ad9c83f2704431f5967f7004ff9c17fae3b2d1d8b82426098914088cc66dcc7ddc818270bcd5777c03692849cc8623268b0b25760e296c68ae127a07b9248496473b4b39ad7332bb07b6438f7e0ca7aeef9c564623ce11988b9509d132f7675b7489ee11764a5cdee05ccd3f014d15507629d361e3d6ece476a495082d17d40309df3f3616fa0559eb01611624962ace5b3ca6c0c93b4bae6167f9fcc7263f120b3e71dc9459cc579f94bc19fc6a2f5c926fa89e0ead7acb0d2ec6632a7b7e551e26a54b21afadc4490adac249ee247928844684fde35cebc1355b77245f4f9c112af7d94f9486c3c645bb8b9847e97a4204c3e0621c4f8021181d1dfb0e70b1d2f41e6d290860a138ee561f08892ad9f2bc9ef0717f15972b71368aff8e4e0d1294890cec6e0ce98fb130476f6d2708fcb7ea02b4af7652dbcd2e8475d3eefd9281b35f6d8b18b8a9922d5c10254d5c974c49df5dd411324fce16bc639caf8175ead8dbaff9a30efdf9ab0f8ce24be4321d00439262cb4cc17f7297071195df4e42801d8a5bad7cce5939478db43c76d387b64258c05d07eb4d49c44e7e30981e328504015469b8fb55ee294c0d372b49ee0520a8ec122f1ac3715092d3bd82943d132b258708501007bc77dbf3eda41f0d8eda0132f6791e63e67ba1e38167f7749ab06d087c4f16cd4e39d42b4f790e84b497f46b30bad2c93c24b3e72367f3a7e0b47a0bd93c5cbfa7282e00551624d96a3f39809a7083d91a49ebf867cac72b20a925ba0193424b4e87a3381587c96f082b28b239a2454cfab7c299ebc51fb8d2a9c2f65d4e16dc1987c592b9692759959545994eadd3093072771b6394d46ffb5abcced6ce97c3d5f625a9d541cd27f5917256f826b8edba7bd93ac845bb9053a209140588353b33eec8392812bbefd48f22ff2a9d60ca43f2ff316518543614af19f3bf53cff6e693a89c0dbf07483f2df0aabd5989764818670bf4a081155d4debac793846ec58b2fb1fd924733641175832f8f8d5df4aef9b076fe2ec9166ecec037e85ef4451783075a9c60c66d32cfdf5cdf336417214a85cfc8b4081d742b78066a20d1d9e8623c330bdede4d337686812624b6723ff038fa1de73be77da0361a5d2f1bc341bec05fab8eab1b2b618d648d2452934dd067852d4998985b5b7374d8a837d1d1f1f563d6efb3b9272b1fe83d0ddac94ecd458da1a16c8b76a31fe1fa2b28b02fe6b6760703860926d8cf0457a72a37722f622c337339f166549bdc9ab02590ba5515a826fb8a2bf625b0f276b753be95e815eab89cbdc27aa2d1262012ce0d2bc291df7bbb0e58fd822e7f66436e39bf26c6043a7140332c36d765be2e5442ed3383c5d8eebecad05931bd201d91942f3b644619a3e9ce0c037aa96f48ec425122a2a416ade35c4276355b6a1189e8101aa10db67526db89f455f5f2252e90e3bc0e536fbb8a7263287693da322e2c3956edd65a6ff185958396d78c6cb3db54ac475fe2a9a73f9d5fa59daa813d1fd6b6b5903b22bc98f0ca27d81ba451e90208e1b229f37426ad278ad58088261436356184c0f19a0864c9e5469d12b70d67421fc3f77106ed4bb385dbd5aeeeee1be6fdd7b278152db7b27021ca19d0806e7ad8076cf0636ebe7c8c52f4496d838813bfe14cc9bb1cf3136fdbdfd90ad16fa21aaee4ef0685ce5974b436dcd7b67fc473948c8063c37525bd5c350fdb588f7fca0991a82aa57f2b6b8b1a416193b35e46fa892613485c28d3606ce15a7e7158064298ec75fe960e03577437b199b8290dee3b2f92498bf973f444f3c392d6b46797bcadc40657739daa12accc363140f14c0b251b52ea893f0d74b5705c842be28c00b332fdf705fd2a2d0118c776cc6acbd48c64bb6f20ef7b0ec9ff9c8df861760d96696e072ca8adb8466132f8661b5d4eb77b7a9be4eeb48d6625b5925b50056a0a899c5c03d64b788948db411d6034c67c18f1548851a904b445f9e92df479d7465d6693f694fcf89243903565e04a85df13a32ef39c99aac3d2ef9bc12c5a84cca7d1bdc00cf79e43e08fa4f508afabb35945389769674fc32c6b0cd14fe4d11602425389e386c68eb105197da5f0cc1bc709f6b40f14884bfe4d1ab69c3e3646375938f73f88ff701440a5d347f93597d14c225b7428b61893a90e8c05e70e350e37f01108f41b3423e6ab93e10eb400ee1b22cdf3ab956525ce07c44650646f7e8c1b0c00d6e5b89d94be83ad1c7554b4ee53902ef40354ca147f6a605ea6408427d98429a45afbaf18d4a35e3c7775824410de30546163e4cc81fac64473f80a6a5498ec037e02122482573014024ceb3c5d96b45d924e027ebaa7da3704478712393e18a7558fd3e1f5ea7a0e7364f3488c66dca4fa859214745ec7c005e6390283bcb1332991f47fd0965e41b81c3b2f24a55f2db482f8e20bcf5e32cdb4212255fd608d06eb805b9fa1508e236cfee48c2337d8f1c73b1eaee49b68168e7d85a77c4fdf2d2cde1429daa1ccf68699bb72ce1181a124e5689518f4dc6dd649877e2d99f09cca21c02eab615df88d31420edc9fc4e80c151aa8cb794992ebc02fce1913966875a7f18bbcbf7828a37705378d8e4e6c8a8866db3a609801b30438ae37937b65e99a643142570e73dd8d01e4b54dd6b364f2d216ea1d6e42f79c22420d9b4436a7e93249a0eafc245eec0df7c16340403e4cd77b1e6e1bc86387e251d931e4f91b3410463b86ae5f9ffdc7e4355dbda36c055cd891aec317daa1e97d16fc6e2fcbbf51e506a686ae9e35353af556d4365f05fe6f516d47fd8704b5e280cdfd79f3718f88f16c899150cf5ea1794c108cd082940cf0627a5b7732280cb2a950357798cc5ad2e15fe5817426746db8d52f5e95a41ff358c0897191647ab82bb5cfc2c64d2435d2b493246616052ee5578a25ff70b468a98c00bfbffe828015184ae34e853608b0b531628a4e131416e26b0ff32f018bfc96a364e24a8aba663b6c0e6586ded6b7dd5a75267731dbac225c8e04621dcf2851fadb843edae5db12db0e3a10f3b52e47c875cf5717531d3dc833a2c3164d96628fe919d1f85a59d9fd1a619a160811faf7c12e1d9af3940569e93f77f23812b92282d07bb68899108b58a3cad7f4f7549b45328f5420e6af8e0b0331684741ee79a4cb0ac29d6e670f441d271bc82466a6e145583a64a1dfbddc308674291b5fbcafd0a28f43e76577dfbb6cb6d8b5e844709247d6681b4fb77715c770727e82e660fe70a3af4eb59104fdc9ff7b679e0b112b46f662b4013ac0ad9d776f1ba73bb3f3d8fe81ecdcfc9591c4fb8ec47c6044d448c8e571c5ad61b1862be4cd3a5db5edd1d0668297b06e324ee696b0920f8bcb36e903f3e15d79338042d9ec8362f819e856879eb38e302c5f2d6e757e23728feed6758ec54ed3c70f2f2fb8de92d2dbe272488b0eaeca4d6077b67438d0d4e3ebd156a215a3993a4c064f0bf77f349486e7040aa7fa7cafac01124182c2f0fe278cfdde3648206e819ba518f24fc6f6e1d02ccf024c5f9b54b7626bfd751963e2b9bd8b782f0c868947e79443323cacc8d367bc0c78b0a5e82ea6e632c479f091afb2c34f01a431d13f12ba498b387de23e7e0f802441dd5dc3f521b447b76ae99ca717b03e17c5641ce4f0ceb1220c495368ecf6bcafaf204d72658e65119b8fa149161cda870a8ce35e241007c0299e4aa173f66229355435f2ae4415a279eae9b0d469d2fb5fc99d0a562fe18f612e57c89c8ac939227ee139a1c303617762d3ffbc186aaf9048d808c7bd7ba1b1aa72d5de399f0874d572b55ddac23ebadd3821a93cc0c8c14c931f60e17b533a75b7e73991f703a49e8e4c8aaae507cd830a4a76bec7eaddf0aef092104194612a73bd83311b3ec0a54fc5916651c2bf2cd06e0b43d1b3f8504515cd083a7881dc07490caac2d194138b19f505d1afe436043829cac44a1d7e6736df8191819e9a28bb393334b1cb05abc49d3daa1badd21d6ecdbab0b85cd31f2492d3986942fb8d8d04eb69eecd3f5163c6a58ef646dd75fcced3ea788604776c3d158bdd3ddef0e88a0b12ff31b51291a74e5cdf96d5391a3d4a91fbced8c74cbd3e3a2503d22fe1f0236b27ca12e417ff5c0fd7aceb5abb09b7de99db8dfd8eaa0d02bbded3dc60e899f3c4004715680cb2bc1692cd338e60a28f42521af28c59c3f84beaa427ce9d6f248dcb7720c4489a8967da9a8e1605f04a24f45d8686497512a07348474027eb99bd9d20ce474bf40353bbbd44d0c901829d84b89747741234a031ddbdab00c1f27f2a4e80716b8e29c16f385efda2e3c719abebbca598eaf97198e02a272379fbfc79604b7f1dc178369209ab986e98f398be8d6e0d36be5c26152320d8e5bdf48ab453bc155c98822f747186fa4eba8f32ce1b426e4b2aa5227ebd3722e494a7210c16b19234e20e3505fbb70e46c1ea7885514372d27c1ed111e6a9890412251bed394ada8439748a28d2bf838c76caee2cfba5a282a862ba79e01ec3804c9a715fce64ce69bf2242ac64263bb6813821756487a4e854ba22cf9acee479611f439b0ae052f3e8ad603cf262deb1e6ec0821b81d4a9a205c165e167ae2e686d5d483ab13a4c4a91c96164e67abc90799c8802aebc4d2187d9d8a926fe8709d8cda0f214d9c698a50f459a351eaa296bb5e8e8ff56f515319500f96cb652b7b0245cf51973abc596418625341b89c4bf6268ed66412e1698d1e0f1100f00ecdadd148d91bac6c8dc98c6e3c8c7949c7852bdf25296c5bbcd65afab9b0ef3d6c91c003eec41ffd8a062f8d0c4240d25980680e360c3f2aa8bca9c91df592add4d57cf086b586e7c88651c88252f67653d0678d3e9e232d5612cdbf428dcf4f491c76b698019c24ff6a6a0755d107d437d0e67e0aea55ff91523f927a633114aee18853cd0fe23852b8ba1d9900af6e080c868115dc7abd968e10dfa1620d2066ca0b43f507c6503c1ed26b5781898bd266dd71da085741b379b872055c4bbf7c130f26d17db77de43ee2e633644c7248e0579f81171e0ff1f1c0695ffd0d65a58c14aba6e9c857ed7d9077300866ecc95cf8aa873d0d09cb5e05e56bd829f9e5e0268df78952fb4fc237abf10744344da2c4e5f31b96992b8bd8227aed6b46f619295d950547085a985119c23ce502fca6e1bef67d6bcd992f5cc207f9af3454fe55c45ea06ba700786ab1ccfaa7ad2affe5bea46822f9d0efeb967b905f5da08e0b63ef573062f0703d5dec7ed229e6887f3f01f58a32ca63b68b8ea46aef80c1a1ee5b8d693c8b0109f0c9180c32d7d3141d3f2fbc45b21c4c4a9d0bc23a2d4f76d0f3a2158f2d434994920336fcbfea4449af94378af6b82edd0c9a63ebfc714bdba4974f1f0f1a3a2c1bac9f6d36290dfcbf4476b27b9dbef17ddf39207d3a459eb2142869cb16ea139db938f2a1bfa3d97d6327b4334be301de5dc32885af7b05def365c0c3fff51c4e9cf89196d67ef8e409fd2fca56500f8a39007b3cec5a30a4fdc742d53cf0379443d87b119ea783c3e944444e2a5131325d82c8865a4d58a285f8077238aba0c74ea98d47a9906aa2022c360bc174124fae3ad97c7018d364b6900e93a9b2b086ec4c605691605b20e659604f9503a8657d456c74de1b5363aa476e524bdeba3edcfad6fae9dd7f3c2163c61df231b96fcff47a90e7110243e46490c56455bdea939a6eaf75980bd000b4ceed87372696656ca998c93e72947070f56d630953f9afb60654192eae0bbda1955917288e18092fdf3ff08be6d1566cc2db8cb86c9fc9fb5b135bb5154813854bff2b39ad9b48cfb68cf35e92c745f129321599ae1e25c65318c5a72885eb089c8743613cf4e60f969435d964d912e9ccfc8006cf57a9db3196df1d402f7aaa7508a53d676b3cf00bb351fdf47ed47648707cdc41ead0f797ee26b5e3fe54b750400ec5bf0b99d1af3799de28e848f4a63dd9bdb48e3d07207c9285f885fef54d2dcb96827308f1c4cffd1d68d46ec1af2f4f66deed21b2984c9aa5fb13c43e14f45dde9255c79370ad58eb8e4d6fcb6b6d1f7c52b22f6ca0704ad0084c0d495b0730faabfe946907dfce6f1ded7f4d7b2be1b9180e98f79a0543e65b541fb63216036117df1f0cabbfafe94b5ac2ab8914720323bef354fb8e826e57461138ade4554656d555a46b9d744fffc49f3937a427a4b64557a3c43217a53dfe98a67deccf10aa6640cbb2da270cdad8cd8de758f91a66603b4b5d0004b2c79323000fb68e83260ab914c38c1577810d5f062fc1fcf96bd77abbc2d16b183cde149d292144dddb21001581ade4f5c7f4992b859e24bab278fb631131a13faeacc9e26dc35b21c4f941b9b21acf3aa55f7ef309f98e9076c28c60d080c184d071da6620241467f9b082bb5587c8da2855f60150921c62af70b35421a1eed488d9272f97dc0301bf8369c58403b9827a575e8eee2326292541fd85d0b116da8012fec240c2acf68736e988c540374137044c6c86a87499027d0bdea41706d46b324ceb3ba2ebf213dc066450fc8194327c07aec8941c6d7ea914c2ea806386f276f6887197c2caae1a21a92513a43d38e0663ef871fe8a9bb85fa31ddb773f36cd08c832450ccdf9cbc42e8fc99fe83de4c73cd4bd9ce8e962ca301f8f1194c32cdf495864b03480e8e3053600b1e1acd1898f89436441dee50d2c7c564600b0525c8b39ec8e3ccb541b89337ab72e5461884f6d54bce901a79bc274809f0fa6a3f5686f7162e27f9b1948bdf1591afc079371b18abcbae765cc141628a589064118939f373d88e5993a19af0f29d9acd83f464a319b8e9b819ca8a558a19b51a5c5a40f4f0cee17f27c5584a94d1373f36071bb261244928fd0f37149e822f2f3eb4763774bfdbb2b5b9df1217c89a8abfc3779ab20f716b17ab6da581bb5dc631d0abf30a8d8eb7a6e95cd6b66ee069dc0bcce307e1778bcc0a3c8834eead18e9da0516d67f62ecba2c4327750ff7fb9cb58fed6659ac83bfa707aa58048d0ff3880db0821328731336ef935cd5a078114e3504724801bee4d6f250bb7ed926ad613bce919ecca9622e5a6ada92ef901df32045fd4659c63aed0d6111b0a3e15c8178217d07b4148da5dab444a7d2a65ade2d2f45c9c00d2e7cf8bd7a82e2fa4fc1bf12c917ffd1f9da77b1aff0bbaf61de602dedfc817448c79b5d6d352439cc60307fd8b7b3d5349fe07d31cb833fa4ad1e0a3d688df315b2ac2e17d708ee528239048cea75f0983797c203f249f545c2fcf0a4eeca2d1c227bfa10a6deb6f5fc48ac2204cd53b1dc7bca63b40d95b6df79258fd761353804f168bb15e27d4cdc8231f8e852ae2986248a1eb13a1f734d00196c15431f411918303efe7557ad39f2a9dc7f914ffffb1f62aa5d0395b2b91f24c3c6190007212699b8f5ff631d6dc8f8d5d72c6bdf7e6226e8a72f05d85e220b79fc44be976acffd74653c373069c9ed8f911f2f08b8da324d8c94d0d0ad5f2799005e3e9a21b5ffe0aa640eec0b8d44111d15f3273240964cd4c3f8a7d97854c1feef634b5ab94bc646c1ba9566a668a1643d5c74fe6085370f32957350360a5561ffa8095b91ca18d70908b8c758ed004603b27a231a696d4d60691c1614d1bebd248d66c88629a7ff5743c03580ed98a836ca1c2efcb7f718490ddaee40248ba3a039a6a9024395c939629c6b73a0f7eebc61b8c20a024388fd1a0286e8396543374057c66f5bfb99e16f18dc698358675b9e9853e24511431ecc3db747ef4684aebc62763bf98e00b72bcec293e6fbbddef3fddab5185650bc3a4b9f3606883f4a3b22b19140245ff0153a1884c0d3217617392fefc57fd6b9e6850d0a3adfb0a699e5865a6f0e00e11de4fdd461a42834f5c15c5a6f2b38d8e6a8e7e98a308a168fb136414ba3bfad55fe0207321219df913f6a64a4f8b916379e2ebf61b92839d8090a5b0a92083c4f5f3b46f07dad2aff194b1f3d0540cd4877f02dda1ba48e3cf7503d073dec0f8caea589b6247662d8f9bab0270dc7f87fd2ba64e071633f407d8b1630e9c15a6a0473f8741d394c6dd61e1fbea2bb856678bd901fe8f608aafb9c0c11d1728bacc022bdb4e66ed900571fd5496d565bfb969b1534ea9d7053beeb19b69ea39335edc1f71ede8c963bfc587a3dea0f16eb9e0be6a10fe1ed4fff57dc2a89f2eec11c26b005eab8d6707e7950d80ce708631b49d0a1f6e3285c806d3ac85730e9519a055ee011ecd65799df14ed3bf671aa612656951908d46deeecef6c1081141b54251f528061205552301a5e2159e00efce128f3f99b55010498b6f21fe16289c73d6e53c43801f37999f197dff20ac878297fdd606267619990ddeeec366f65979c2a2ff6fb22ac269711b6b11ad0840ec1599ad75f16fa55e1d405893853a16148cf6fce7970d6c096457fc79f45a4bc4e0adcca996366908dc0a70b959c89086a277b02af2bb2a4a218ab9fcb22ee06fb38d60a200887c49b618a5fec4dfeae88913d1ca25ec02da845de33af5d9fda6f18e25f6a8f3325550aa19d318152870ee8c4322c554c7f11ada34f7986d4bb7fabe094a6c08c57ab96ff2520d2d2b7d2743ec5a8791109d108f494ff6cc35a3fd6fdab841f852269eb674fe9a6a97db46b634a6f61bc19a954d82b76d007383fa070a3c8db6ce5f588fa6816adac181f67103b8d5b3be02a702812a63f683a53cb228a12990f1dbc164bb5b6fde991d75d975f863978df7f90872955dfd4e4279b663d45da2c41e8a580693c660494846deb0b70fa1226fd2cd694442460e3bfaf5014a7848c7db59dd632b1ab712b4de98e2d208f687df0c9f9f89e40e25e7d89da1a44c27aea3a6d7c2be0b6a59ff72940c137d8d2a9fd85040cb0946d2140b857d9d723d7f6a17174715a93ad62ac5730660fb46dfc2f9188df2d5d88afb1a084dd991225fd9282ace01163884b87ebff09caf1f6f3050aa99777e437e163beb816f28402d4ffd84b3354a40b9b24945b58537fdcf1ba51d8a6169ab5df800dc76cacdcdcff3727e88f34a37116b0efc618f9b46e9266cccd112dae5dbbf8b330929192cb8e29446b008e35442cf0860f1335d003ef65127ebb20e95e8f3a9b2bfc494981e91d26f49713bcfeeb1cc6b50872ce94315e41b9241aed0a7602e575012c6659f9b5c88f25cd37a934a64090dbb533d860ac3c2faf609e863607892d8a9a1527f5179023f3fec4b58b3974fe4852edd338040052730662ca444c458ef67d4c93393e45b510c89fccf4f5b171819335c95f0f6caea38b68070a9050214be530435fba522d67e193e0f0945f1d5c9b6302415cbee0c262f17f25686f4a97c436a429b71969bd9dabddc8b09e4d37b582a2ed185aec72c9addbe452b559bb0d7e7a5a07e194fca8d479ac38cbd59c5d5a0a79b72d0233aec0f70e295aa7fd7dc4e4d3a530838e3c050266e938981c8eb6e0184ac17a18f1c55fc472f99f309b2023b559a2c2e7f733531b55568fa665f9ed0448350037156cf32e3defcd17ede8d82bbf47ce8efef9a2e9c511120fbed060d6a7498bdb1ada9448ade3623b0283fe8c40a02bb18a495528b34b639b157c6117685e400ea51408ab646dcb2144eb363bc5b4ebcc4fe9797eacdea549092bae0f796385b7b88fc1cce524fa40d781929f69f5bf2163e9ca07b495df31bd5cdcbba9763bff170815362a36f9530a7aa8b14dcad2c2706e66c5d4b09e141374db5eb890f76da66320b6fa20ec7c31802b401a8e8084011fea2be5fd38067b62cc094140be62925bf70e18a250c5b763fa3c6edd6d567336eac53ce8a76bae59f7c864e00ccae473045b9bf91eac5e7efd4818af6f97d7c85034188d6dce781fdd8c3f5b705a9916472bf9b530a7ba5df65f5f7f1a04ff3b8e8ad4c8a4b70702bf58118bea9f6598d728216a1d5f5f9beaadc684b3466e84ba4f9bcddb16af327da97bf8d0719bcdef1eca1d0c4417fa8d475ad164ef773b429fb4dcdc11dbeaded61c6442cebec8c55e59074af1b61a0b0ce54346853637c63275f4b51772464f8445917b879e5c87b191aa6ba727fe329b11e79837af9eed4a6e18cf0591beda103140e923e661f2b30ea9bad3172461d1459423198678749001f4ed5f00f5085cb0fd4b8088bfc42ecf5c52aaa2068dc2d81d5118a0de289981ce79c01dd8458cc8d55564e312e9265e0d672fef18a7964a810abc64cd8240030de3ee37f746dad373cd46064d1f561e2a99923e592bce731452c438059c67b6d5f1fe24293e41138203c53bef859d88f9f94a7990c835545c67327b0cad2f5439d0788b659136097feb41ef1b95e18f6bbb77be50a016435a1318aaccbc8820d3f3a0dd354b0c571d12dcd869a40fa30fcfa868b292b225b545c5b3f8287b6f2f28cb9018dabf2038780a6e3de40beb7863c2efce1a6006f1096ec2f0b42ab80573128c2c0074d0a0388a147d2da56a3774ce1393adb05d8d2a1046c224c95e93ae6ae200a52bd816aeae32ca6fb7d73ce4da350ba917c74d2cf274fad1900587da552e2f349c4376537268a1419b30cefce1d8183c11a2a71cc03e5a58b374a84b55ee2d00965963478c7e7615537ee8b53414093f6e401917d25d3d8d94ecc8a6919a0c3a34a9b685ef2b06df11475c2315d996762c6f3871d5bd3bbaebc461ab32055754581f2f18b50817c67ec4057e22a714bcafe0d8174c29514ea1c683c75d3468135e8129d9d4cad709a1e8deddcb54a4c93bbd77d583d364733dc0fcf67f5a457999f960a5e53bde1a18f4d333aa29b2d3163112b1b35cb6b103016a3a1732813f1c292508967e7640b270645f9eac2b15398d3942d145b5319e7b98869f97e8afd312bbd22a93a0780352138e7b1ec9be0be8b0794cbde2631fafc984c849c8855867e4105dd51727f0928a2e3958015545a75bb3ee483d24dceeb1e01ba5a4027140cfe593ae6364488127f804e6ec0f39beffc6cff3102de8aae0146fc91249908d2bb58b03738836f8cacbfd27e907f44188915e50a34056910eb479d55cef519c4216c76fc1f2a4132a18b606163377f677dd911a8efb4d0fd3e94e3f017bb587e16c548cc55f4ec960cf5cd7c5edf4410c39954eb526c73f43c6a41cd2840410b8686d23079e1336ff416a3679a013aa97f7651c23ba1fa594eb4bc9d7b4694540d4dc2033a28e037223dbea7b80d9f75627ec97c43725a37a101f14e4140ba3d6503493b5d95345db63cb0c956fb6b1cf7ab3dccf7eb2ddb1367ad21ff24db941ad30924d39adc3c8703a61f5838ecd5612d46b701fa202fab5ce5e05801bf09b6a6582fdd00b5711fa06aa4865843779972ecdf3bbc3296d9848d0154d009bffd1d2051b65a7b0f1277f11fd661c6ea7ab97cf80d724b26248794085964ebac4bbe8c420a801df120d9f591b5685df925a72fb2082a6887fdfa0690ba883a07464eb3b593e7e333ff15b11de2ca1d414ab88a86243a3db36b64bff4f85141e3019ecaaacab43dac05111edcc1817db590709801275ecfe41cd1f5f7fb501fd84f0073b3846ff598419078ec9514e78ef733849fada92d222816dee88e96fa864459a4e28d2c33fe901f223ebe675a6b86e3c1167425a3216e85168f94a6273165560f4cf01804f83f5315a122e877c700d0685382283e89be3d2d894e240feb66c6bf5f8d7fcc457441657f25de01048f88af83040701d31a6cafcc37498e62550d8d98fce3c488eeff277af5ead5972c8cd61bb8ae9fa0d6c6fe744bfc4f95e45f085854b8ead6c4f67979c727fd4484cf1165c48d482325ae54e7fc3928bc181cc7eb7515398ca20c18fd22774770c198a4cb4cc30b441840ea8d57272b67cb3b3ce759238830fff022b3fcb3f4f5f4d4fd21de04cb2b9db95f8135501a7868b09058f8d4607c442daa2da4f212f76a8887f65a48083da852ef695ecf606facc27903a6697b14ec34008f0f2cc7cf6e89dab64d314b64b1c8f1297e4143f091befb0aadc7b28187d768cb1e7a208e314289d1cf4a41dce76cc8b47c8d5dbb017ed1fcad5f4be8f5e756ad889bb99a1cd89777c618d80edf711e09f15a1fa4b03f7fe31da444e577d690ed57625936aefa78d18306fb9dad78d38bb69bfa7f84f99bb6db9e7b91af1bb64500562491db1385f7cd4f3074ff5424953e8e782ba256605e3b52dd89a6a28bf68c19e25be31583a76318c2922c7afcab275c5ad06b40d7a73a5c66085f511250d919db5eaacd569d0f119f373c93922d1e877e6f6fbb314d6dbddfb993f97e31a0df426e8481c3400938bbad14e523ba57531137fa9631914f733f73ceb62f7799ce65521c1d3eee56e3287337873e2d9587a6a4980fd04b5e274bb636cf31056abe28e6d2789eda7e65d0e52cea18d887a757dd6b5eebf9760e2a4aed797b37db7e3ff401bf2d606a030a285d0be6b2d10f69988b48f3c20f79865aa20ba15fbb129735ce287306b4789c65e94a43ac7858e2fb9ab72c332ffb9604932edca445d8f4381dddee5658c7655ee6bf0ff1d38c15606fc5aea0b1ccb29618349b93d153a6ce3585260b53380</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>6</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL学习</title>
    <url>/posts/c6fb831a.html</url>
    <content><![CDATA[<p><strong>基本的SQL语言学习（MySQL）</strong></p>
<span id="more"></span>

<h1 id="SQL的基本定义及概念"><a href="#SQL的基本定义及概念" class="headerlink" title="SQL的基本定义及概念"></a>SQL的基本定义及概念</h1><p><strong>数据库（DataBase）</strong>：存储数据的仓库，数据有组织的进行存储。</p>
<p><strong>数据库管理系统（DBMS）</strong>：操纵和管理数据库的大型软件。</p>
<p><strong>SQL</strong>：操作关系型数据库的编程语言。</p>
<p><strong>关系型数据库（RDBMS）</strong>：建立在关系模型基础上，由多张相互连接的二维表组成的数据库</p>
<p>基础使用方法：通过cmd输入mysql -r root -p进入mysql页面进行操作 或 运行MySQL command line Client - Unicode</p>
<p><strong>SQL分类</strong>：</p>
<table>
<thead>
<tr>
<th><strong>DDL</strong></th>
<th><strong>数据定义语言</strong></th>
<th><strong>定义数据库对象（数据库、表、字段）</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>DML</strong></td>
<td><strong>数据操作语言</strong></td>
<td><strong>对数据库表中数据增删改</strong></td>
</tr>
<tr>
<td><strong>DQL</strong></td>
<td><strong>数据查询语言</strong></td>
<td><strong>查询数据库表中的记录</strong></td>
</tr>
<tr>
<td><strong>DCL</strong></td>
<td><strong>数据控制语言</strong></td>
<td><strong>创建数据库用户，控制数据库的访问权限</strong></td>
</tr>
</tbody></table>
<hr>
<h1 id="DDL语句"><a href="#DDL语句" class="headerlink" title="DDL语句"></a>DDL语句</h1><p>语句后面注意 “ ; ”	，	[…]部分表示选写内容	，	comment ‘…’ 为注释内容</p>
<h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><ul>
<li>查询所有数据库：<strong>show database;</strong></li>
<li>查询当前数据库：<strong>select database();</strong></li>
<li>创建数据库：<strong>create database [if not exists] 数据库名;</strong></li>
<li>删除数据库：<strong>drop database [if not exists] 数据库名;</strong></li>
<li>使用数据库：<strong>use 数据库名;</strong></li>
</ul>
<h2 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h2><ul>
<li>修改表名：<strong>alter table 表名 rename to 新表名;</strong></li>
<li>删除表：<strong>drop table [if exists] 表名</strong></li>
<li>删除指定表，并重新创建该表（初始化该表）：<strong>truncate table 表名;</strong></li>
</ul>
<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><ul>
<li>查询当前数据库所有表：<strong>show tables;</strong></li>
<li>查询表结构：<strong>desc 表名;</strong></li>
<li>查询指定表的建表语句：<strong>show create table 表名;</strong></li>
</ul>
<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><ul>
<li>添加字段：<strong>alter table 表名 add 字段名 数据类型;</strong></li>
<li>修改数据类型：<strong>alter table 表名 modify 字段名 新的数据类型;</strong></li>
<li>修改字段名和字段类型：<strong>alter table 表名 change 旧字段名 新字段名 数据类型;</strong></li>
</ul>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><ul>
<li>删除字段：<strong>alter table 表名 drop 字段名;</strong></li>
</ul>
<hr>
<h1 id="DML语句"><a href="#DML语句" class="headerlink" title="DML语句"></a>DML语句</h1><h2 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h2><ul>
<li>给指定字段添加数据：<strong>insert into 表名(字段名1,字段名2,…) values (值1,值2,…);</strong></li>
<li>给全部字段添加数据：<strong>insert into 表名 values (值1,值2,…);</strong></li>
<li>批量添加数据：<strong>insert into 表名(字段名1,字段名2,…) values (值1,值2,…);</strong>  &#x2F;<em>一行</em>&#x2F;</li>
<li>​						 <strong>insert into 表名 values (值1,值2,…),(值1,值2,…),(值1,值2,…);</strong>  &#x2F;<em>多行</em>&#x2F;</li>
</ul>
<p>插入数据时，指定的字段顺序需要与值的顺序是一一对应的。</p>
<p>字符串和日期型数据应该包含在引号中。</p>
<p>插入的数据大小，应该在字段的规定范围内（满足对应的数据类型和数据范围）。</p>
<h2 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h2><ul>
<li><strong>update 表名 set 字段名1&#x3D;值1,字段名2&#x3D;值2,… [where 条件];</strong></li>
</ul>
<p>修改语句的条件可有可无，若没有where条件，则会修改整张表的所有数据。</p>
<h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><ul>
<li><strong>delete from 表名 [where 条件];</strong></li>
</ul>
<p>删除语句的条件可有可无，若没有where条件，则会删除整张表的所有数据。</p>
<p>delete语句不能删除某个字段的值（可以用update）。</p>
<hr>
<h1 id="DQL语句"><a href="#DQL语句" class="headerlink" title="DQL语句"></a>DQL语句</h1><h2 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h2><ul>
<li>查询多个字段：<strong>select 字段1,字段2,… from 表名;</strong></li>
<li>查询全部字段：<strong>select * from 表名;</strong></li>
<li>设置别名：<strong>select 字段1[as 别名1],字段2[as 别名2],… from 表名;</strong></li>
<li>去除重复记录：<strong>select distinct 字段列表 from 表名;</strong></li>
</ul>
<h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><ul>
<li><strong>select 字段列表 from 表名 where 条件列表;</strong></li>
</ul>
<p>例：查询姓名为两个字的员工信息select * from employee where name like ‘__’;</p>
<p>​		查询身份证号最后一位是X的员工信息select * from employee where idcard like ‘%X’;</p>
<p>​		或 select * from employee where idcard like ‘________________<em>X’ (17个’</em>‘)</p>
<table>
<thead>
<tr>
<th>比较运算符</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td>&gt;</td>
<td align="left">大于</td>
</tr>
<tr>
<td>&gt;&#x3D;</td>
<td align="left">大于等于</td>
</tr>
<tr>
<td>&lt;</td>
<td align="left">小于</td>
</tr>
<tr>
<td>&lt;&#x3D;</td>
<td align="left">小于等于</td>
</tr>
<tr>
<td>&#x3D;</td>
<td align="left">等于</td>
</tr>
<tr>
<td>&lt;&gt; 或 !&#x3D;</td>
<td align="left">不等于</td>
</tr>
<tr>
<td>between…and…</td>
<td align="left">介于范围之内（between 小 and 大）</td>
</tr>
<tr>
<td>in(…)</td>
<td align="left">在in之内的列表中的值，满足一个即可</td>
</tr>
<tr>
<td>like 占位符</td>
<td align="left">模糊匹配（_匹配单个字符，%匹配任意个字符）</td>
</tr>
<tr>
<td>is null</td>
<td align="left">判断是否为空</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>逻辑运算符</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>and 或 &amp;&amp;</td>
<td>并且（多个条件同时成立）</td>
</tr>
<tr>
<td>or 或 ||</td>
<td>或者（多个条件任意一个成立）</td>
</tr>
<tr>
<td>not 或 ！</td>
<td>非，不是</td>
</tr>
</tbody></table>
<h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><ul>
<li><strong>select 聚合函数(字段列表) from 表名;</strong></li>
</ul>
<p>定义：将一列数据作为一个整体，进行纵向计算</p>
<p>null值不参与所有聚合函数的运算</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>count</td>
<td>统计数量</td>
</tr>
<tr>
<td>max</td>
<td>最大值</td>
</tr>
<tr>
<td>min</td>
<td>最小值</td>
</tr>
<tr>
<td>avg</td>
<td>平均值</td>
</tr>
<tr>
<td>sum</td>
<td>求和</td>
</tr>
</tbody></table>
<h2 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h2><ul>
<li><strong>select 字段列表 from 表名 [where 条件] group by 分组字段名 [having 分组后过滤条件];</strong></li>
</ul>
<h2 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h2><ul>
<li><strong>select 字段列表 from 表名 order by 字段1,排序方式1,字段2,排序方式2,…;</strong></li>
</ul>
<p>排序方式有：ASC升序(默认)、DESC降序</p>
<h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><ul>
<li><strong>select 字段列表 from 表名 limit 起始索引,查询记录数;</strong></li>
</ul>
<p>起始索引从0开始，起始索引&#x3D;(查询页码 - 1) * 每页显示记录数</p>
<p>如果查询的是第一页数据，起始索引可以省略</p>
<h2 id="DQL语句执行顺序"><a href="#DQL语句执行顺序" class="headerlink" title="DQL语句执行顺序"></a>DQL语句执行顺序</h2><ol>
<li>from 表名列表</li>
<li>where 条件列表</li>
<li>group by 分组字段列表</li>
<li>having 分组后条件列表</li>
<li>select 字段列表</li>
<li>order by 排序字段列表</li>
<li>limit 分页参数</li>
</ol>
<hr>
<h1 id="DCL语句"><a href="#DCL语句" class="headerlink" title="DCL语句"></a>DCL语句</h1><p>数据控制语言，用来管理数据库用户、控制数据库的访问权限。</p>
<table>
<thead>
<tr>
<th>权限（常用）</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>all(all privileges)</td>
<td>所有权限</td>
</tr>
<tr>
<td>select</td>
<td>查询数据</td>
</tr>
<tr>
<td>insert</td>
<td>插入数据</td>
</tr>
<tr>
<td>update</td>
<td>修改数据</td>
</tr>
<tr>
<td>delete</td>
<td>删除数据</td>
</tr>
<tr>
<td>alter</td>
<td>修改表</td>
</tr>
<tr>
<td>drop</td>
<td>删除数据库&#x2F;表&#x2F;视图</td>
</tr>
<tr>
<td>create</td>
<td>创建数据库&#x2F;表</td>
</tr>
</tbody></table>
<h2 id="管理用户"><a href="#管理用户" class="headerlink" title="管理用户"></a>管理用户</h2><ul>
<li>查询用户：use mysql;  &#x3D;&gt;  <strong>select * from user;</strong></li>
<li>创建用户：<strong>create user ‘user name‘@’host name’ identified by ‘password’;</strong></li>
<li>修改用户密码：<strong>alter user ‘user name‘@’host name’ identified with mysql_native_password by ‘new password’;</strong></li>
<li>删除用户：<strong>drop user ‘user name‘@’host name’;</strong></li>
</ul>
<h2 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h2><ul>
<li>查询权限：<strong>show grants for ‘user name‘@’host name’;</strong></li>
<li>授予权限：<strong>grant 权限列表 on 数据库名.表名 to ‘user name‘@’host name’;</strong></li>
<li>撤销权限：<strong>revoke 权限列表 on 数据库名.表名 from ‘user name‘@’host name’;</strong></li>
</ul>
<hr>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h2><table>
<thead>
<tr>
<th>函数（常用）</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>concat(S1, S2, S3, … ,Sn)</td>
<td>字符串拼接，将S1…Sn拼接成一个字符串</td>
</tr>
<tr>
<td>lower(str)</td>
<td>将字符串str全部转为小写</td>
</tr>
<tr>
<td>upper(str)</td>
<td>将字符串str全部转为大写</td>
</tr>
<tr>
<td>lpad(str, n, pad)</td>
<td>左填充，用字符串pad对str的左边进行填充，达到n个字符串长度</td>
</tr>
<tr>
<td>rpad(str, n, pad)</td>
<td>右填充，用字符串pad对str的右边进行填充，达到n个字符串长度</td>
</tr>
<tr>
<td>trim(str)</td>
<td>去掉字符串头部和尾部的空格</td>
</tr>
<tr>
<td>substring(str, start, len)</td>
<td>返回从字符串str从start位置起的len个长度的字符串</td>
</tr>
</tbody></table>
<p>例：study数据库的employee表中将员工编号workno更改，将编号前补齐’0’以达到五位数编号</p>
<p>答：update employee set wordno &#x3D; lpad(workno, 5, ‘0’);</p>
<hr>
<h2 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h2><table>
<thead>
<tr>
<th>函数（常用）</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>ceil(x)</td>
<td>向上取整</td>
</tr>
<tr>
<td>floor(x)</td>
<td>向下取整</td>
</tr>
<tr>
<td>mod(x, y)</td>
<td>返回x&#x2F;y的模（整除后的余数）</td>
</tr>
<tr>
<td>rand()</td>
<td>返回0~1内的随机数</td>
</tr>
<tr>
<td>round(x, y)</td>
<td>求参数x的四舍五入的值，保留y位小数</td>
</tr>
</tbody></table>
<p>例：使用数据库的函数，实现随机生成6位验证码</p>
<p>答：lpad(round(select rand() * 1000000, 0), 6, ‘0’);</p>
<p>此方法运用了round()函数，替换成向上或向下取整函数依然可以完成，lpad或rpad同理。</p>
<hr>
<h2 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h2><table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>curdate()</td>
<td>返回当前日期</td>
</tr>
<tr>
<td>curtime()</td>
<td>返回当前时间</td>
</tr>
<tr>
<td>now()</td>
<td>返回当前日期和时间</td>
</tr>
<tr>
<td>year(date)</td>
<td>获取指定date的年份</td>
</tr>
<tr>
<td>month(date)</td>
<td>获取指定date的月份</td>
</tr>
<tr>
<td>day(date)</td>
<td>获取指定date的日期</td>
</tr>
<tr>
<td>date_add(date, interval expr type)</td>
<td>计算date加expr type后对应的时间,expr表示数值，type表示类型如年月日</td>
</tr>
<tr>
<td>datediff(date1, date2)</td>
<td>计算date1 和 date2之间相隔的天数</td>
</tr>
</tbody></table>
<p>函数举例：date_add(now(), interval 90 day) &#x3D;&#x3D;&gt;&gt; 2022-07-08 18:54:37</p>
<p>函数举例：datediff(‘2022-4-9’, ‘2022-7-1’) &#x3D;&#x3D;&gt;&gt; -83</p>
<p>例：根据study数据库的employee表，计算所有员工入职时间，用天数表示，并按天数降序排序</p>
<p>答：select name, datediff(curdate(), entrydate) from employee order by datediff(curdate(), entrydate) desc;</p>
<hr>
<h2 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h2><table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>if(value, t, f)</td>
<td>如果value为true，则返回t，否则返回f</td>
</tr>
<tr>
<td>ifnull(value1, value2)</td>
<td>如果value1不为空，返回value1，否则返回value2</td>
</tr>
<tr>
<td>case when [val1] then [res1] … else [default] end</td>
<td>如果val1为true，返回res1，…否则返回default默认值</td>
</tr>
<tr>
<td>case [expr] when [val1] then [res1] … else [default] end</td>
<td>如果expr的值等于val1，返回res1，…否则返回default默认值</td>
</tr>
</tbody></table>
<p>例：根据study数据库的score表，将学生成绩置换成’优秀’&gt;&#x3D;85,60&#x3D;&lt;’及格’&#x3D;&lt;85,’不及格’&lt;60</p>
<p>答：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select</span><br><span class="line">    id,</span><br><span class="line">    name,</span><br><span class="line">    (case when math &gt;= 85 then &#x27;优秀&#x27; when math &lt; 60 then &#x27;不及格&#x27; else &#x27;及格&#x27; end),</span><br><span class="line">    (case when english &gt;= 85 then &#x27;优秀&#x27; when english &lt; 60 then &#x27;不及格&#x27; else &#x27;及格&#x27; end),</span><br><span class="line">    (case when chinese &gt;= 85 then &#x27;优秀&#x27; when chinese &lt; 60 then &#x27;不及格&#x27; else &#x27;及格&#x27; end)</span><br><span class="line">from score;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h1><h2 id="基本定义"><a href="#基本定义" class="headerlink" title="基本定义"></a>基本定义</h2><p>概念：约束是作用于表中字段上的规则，用于限制存储在表中的数据。</p>
<p>目的：保证数据库中数据的正确、有效性和完整性。</p>
<p>分类：</p>
<table>
<thead>
<tr>
<th>约束</th>
<th>描述</th>
<th>关键字</th>
</tr>
</thead>
<tbody><tr>
<td>非空约束</td>
<td>限制该字段的数据不能为null</td>
<td>not null</td>
</tr>
<tr>
<td>唯一约束</td>
<td>保证该字段的所有数据都是唯一、不重复的</td>
<td>unique</td>
</tr>
<tr>
<td>主键约束</td>
<td>主键是一行数据的唯一标识，要求非空且唯一</td>
<td>primary key</td>
</tr>
<tr>
<td>默认约束</td>
<td>保存数据时，如果未指定该字段的值，则采用默认值</td>
<td>default</td>
</tr>
<tr>
<td>检查约束</td>
<td>保证字段值满足某一个条件</td>
<td>check</td>
</tr>
<tr>
<td>外键约束</td>
<td>用来让两张表的数据之间建立连接，保证数据的一致性和完整性</td>
<td>foreign key</td>
</tr>
</tbody></table>
<p>注意：约束是作用于表中字段上的，可以在创建表&#x2F;修改表的时候添加约束。</p>
<p>例：</p>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table user</span><br><span class="line">(</span><br><span class="line"> id int primary key auto_increment comment &#x27;主键&#x27;,</span><br><span class="line"> name varchar(10) not null unique comment &#x27;姓名&#x27;,</span><br><span class="line"> age int check (age&gt;0 &amp;&amp; age&lt;=120) comment &#x27;年龄&#x27;,</span><br><span class="line"> status char(1) default &#x27;1&#x27; comment &#x27;状态&#x27;,</span><br><span class="line"> gender char(1) comment &#x27;性别&#x27;</span><br><span class="line">)comment &#x27;用户表&#x27;;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h2><h3 id="基本定义-1"><a href="#基本定义-1" class="headerlink" title="基本定义"></a>基本定义</h3><p>概念：外键用来让两张表的数据之间建立连接，从而保证数据的一致性和完整性。</p>
<p>注意：在数据库层面，未建立外键关联的两张表之间通过外键约束，是无法保证数据的一致性和完整性的。</p>
<hr>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>添加外键：</p>
<ul>
<li><strong>create table 表名(</strong></li>
<li>​		<strong>字段名		数据类型,</strong></li>
<li>​		<strong>……			 ……</strong></li>
<li>​		<strong>[constraint] [外键名称] foreign key (外键字段名) references 主表(主表列名)</strong></li>
<li><strong>);</strong></li>
</ul>
<p>或：</p>
<ul>
<li><strong>alter table 表名 add constraint 外键名称 foreign key(外键字段名) references 主表(主表字段名);</strong></li>
</ul>
<p>删除外键：</p>
<ul>
<li><strong>alter table 表名 drop foreign key 外键名称;</strong></li>
</ul>
<hr>
<h3 id="删除-x2F-更新行为"><a href="#删除-x2F-更新行为" class="headerlink" title="删除&#x2F;更新行为"></a>删除&#x2F;更新行为</h3><ul>
<li><strong>alter table 表名 add constraint 外键名称 foreign key(外键字段名) references 主表(主表字段名) on update cascade on delete cascade;</strong></li>
</ul>
<table>
<thead>
<tr>
<th>行为</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>no action</td>
<td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除&#x2F;更新(与restrict一致)</td>
</tr>
<tr>
<td>restrict</td>
<td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除&#x2F;更新(与no action一致)</td>
</tr>
<tr>
<td>cascade</td>
<td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有，则也删除&#x2F;更新外键在子表中的记录</td>
</tr>
<tr>
<td>set null</td>
<td>当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为null(这就要求该外键允许取null)</td>
</tr>
<tr>
<td>set default</td>
<td>父表有变更时，子表将外键列设置成一个默认的值(innodb不支持)</td>
</tr>
</tbody></table>
<hr>
<h1 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h1><h2 id="多表关系"><a href="#多表关系" class="headerlink" title="多表关系"></a>多表关系</h2><p>项目开发中，在进行数据库表结构设计时，会根据业务需求及业务模块之间的关系，分析并设计表结构，由于业务之间相互关联，所以各个表结构之间也存在着各种联系，基本上分为三种：一对多、多对多、一对一。</p>
<h3 id="多对多关系"><a href="#多对多关系" class="headerlink" title="多对多关系"></a>多对多关系</h3><p>实现：建立第三张中间表，中间至少包含两个外键，分别关联两方主键</p>
<p>常见多对多关系如：学生与课程</p>


<h3 id="一对一关系"><a href="#一对一关系" class="headerlink" title="一对一关系"></a>一对一关系</h3><p>关系：一对一关系，多用于单标拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中。</p>
<p>实现：在任意一方加入外键，关联另外一方的主键，并且<strong>设置外键为唯一的(UNIQUE)</strong></p>
<h2 id="多表查询分类"><a href="#多表查询分类" class="headerlink" title="多表查询分类"></a>多表查询分类</h2><p>定义：指从多张表中查询数据</p>
<p><strong>连接查询：</strong></p>
<p>内连接：相当于查询A、B交集部分数据</p>
<p>外连接：	</p>
<ul>
<li>左外连接：查询左表所有数据，以及两张表交集部分数据</li>
<li>右外连接：查询右表所有数据，以及两张表交集部分数据</li>
</ul>
<p>自连接：当前表与自身的连接查询，自连接必须使用表别名</p>
<p>子查询</p>
<h2 id="多表查询语句"><a href="#多表查询语句" class="headerlink" title="多表查询语句"></a>多表查询语句</h2><h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><p>隐式内连接：<strong>select 字段列表 from 表1, 表2 where 条件…;</strong></p>
<p>显式内连接：<strong>select 字段列表 from 表1 [inner] join 表2 on 连接条件…;</strong></p>
<h3 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h3><p>查询表1的所有数据 包含表1和表2交集部分的数据)：</p>
<p><strong>select 字段列表 from 表1 left [outer] join 表2 on 条件…;</strong></p>
<p>右外连接(相当于查询表2的所有数据 包含表1和表2交集部分的数据)：</p>
<p><strong>select 字段列表 from 表1 right [outer] join 表2 on 条件…;</strong></p>
<h3 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h3><p><strong>select 字段列表 from 表A 别名A join 表A 别名B on 条件…;</strong></p>
<h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>SQL语句中嵌套select语句，称为嵌套查询，又称子查询</p>
<p><strong>select * from t1 where column1&#x3D; (select column1 from t2);</strong></p>
<p>子查询外部的语句可以是insert&#x2F;update&#x2F;delete&#x2F;select的任何一个</p>
<p>根据子查询结果不同，分为：</p>
<ul>
<li>标量子查询(子查询结果为单个值，常用的操作符：&#x3D;&#x3D;、&lt;&gt;、&gt;、&gt;&#x3D;、&lt;、&lt;&#x3D;)</li>
<li>列子查询(子查询结果为一列，常用的操作符：in、not in、any、some、all)</li>
<li>行子查询(子查询结果为一行，常用的操作符：&#x3D;、&lt;&gt;、in、not in)</li>
<li>表子查询(子查询结果为多行多列，常用的操作符：in)</li>
</ul>
<p>根据子查询位置，分为：where之后、from之后、select之后</p>
<hr>
<h1 id="联合查询-union"><a href="#联合查询-union" class="headerlink" title="联合查询-union"></a>联合查询-union</h1><p>对于union查询，就是把多次查询的结果合并起来，形成一个新的查询结果集。</p>
<p>对于联合查询的多张表的列数必须保持一致，字段类型也需要保持一致</p>
<p>union all会将全部的数据直接合并在一起输出，union会对合并之后的数据去重再输出</p>
<p><strong>select 字段列表 from 表A …</strong></p>
<p><strong>union [all]</strong></p>
<p><strong>select 字段列表 from 表B …;</strong></p>
<hr>
<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>事务是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</p>
<h2 id="事务操作"><a href="#事务操作" class="headerlink" title="事务操作"></a>事务操作</h2><p>查看&#x2F;设置事务提交方式：</p>
<p><strong>select @@autocommit;</strong></p>
<p><strong>set @@autocommit &#x3D; 0;</strong>  ## 切换为手动提交</p>
<p>提交事务：<strong>commit;</strong></p>
<p>回滚事务：<strong>rollback;</strong></p>
<h2 id="事务四大特性ACID"><a href="#事务四大特性ACID" class="headerlink" title="事务四大特性ACID"></a>事务四大特性ACID</h2><ul>
<li>原子性：事务是不可分割的最小操作单元，要么全部成功，要么全部失败。</li>
<li>一致性：事务完成时，必须使所有的数据都保持一致状态。</li>
<li>隔离性：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。</li>
<li>持久性：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。</li>
</ul>
<h2 id="并发事务问题"><a href="#并发事务问题" class="headerlink" title="并发事务问题"></a>并发事务问题</h2><table>
<thead>
<tr>
<th>问题</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>脏读</td>
<td>一个事务读到另外一个事务还没有提交的数据</td>
</tr>
<tr>
<td>不可重复读</td>
<td>一个事务先后读取同一条记录，但两次读取的数据不同</td>
</tr>
<tr>
<td>幻读</td>
<td>一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据时又发现这行数据</td>
</tr>
</tbody></table>
<h2 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h2><table>
<thead>
<tr>
<th align="center">隔离级别</th>
<th align="center">脏读</th>
<th align="center">不可重复读</th>
<th align="center">幻读</th>
</tr>
</thead>
<tbody><tr>
<td align="center">read uncommitted</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">×</td>
</tr>
<tr>
<td align="center">read committed</td>
<td align="center">×</td>
<td align="center">√</td>
<td align="center">√</td>
</tr>
<tr>
<td align="center">repeatable read</td>
<td align="center">×</td>
<td align="center">×</td>
<td align="center">√</td>
</tr>
<tr>
<td align="center">serializable</td>
<td align="center">×</td>
<td align="center">×</td>
<td align="center">×</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>2</tag>
      </tags>
  </entry>
  <entry>
    <title>Next主题博客美化</title>
    <url>/posts/e23f9c5e.html</url>
    <content><![CDATA[<p><strong>优化美化博客插件推荐（自用）</strong></p>
<span id="more"></span>

<h1 id="唯一ID链接博文"><a href="#唯一ID链接博文" class="headerlink" title="唯一ID链接博文"></a>唯一ID链接博文</h1><p>插件名及链接地址：<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a></p>
<p>Git Bash 输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>

<p>站点config.yml添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># URL</span><br><span class="line">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span><br><span class="line">url: http://example.com</span><br><span class="line">permalink: posts/:abbrlink.html</span><br><span class="line">permalink_defaults:</span><br><span class="line">pretty_urls:</span><br><span class="line">  trailing_index: true # Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span><br><span class="line">  trailing_html: true # Set to false to remove trailing &#x27;.html&#x27; from permalinks</span><br><span class="line"></span><br><span class="line">## abbrlink config</span><br><span class="line">abbrlink:</span><br><span class="line">  alg: crc32      #support crc16(default) and crc32 进制</span><br><span class="line">  rep: hex        #support dec(default) and hex  算法</span><br><span class="line">  drafts: false   #(true)Process draft,(false)Do not process draft. false(default) </span><br><span class="line">  ## Generate categories from directory-tree</span><br><span class="line">  ## depth: the max_depth of directory-tree you want to generate, should &gt; 0</span><br><span class="line">  auto_category:</span><br><span class="line">     enable: true  #true(default)</span><br><span class="line">     depth:        #3(default)</span><br><span class="line">     over_write: false </span><br><span class="line">  auto_title: false #enable auto title, it can auto fill the title by path</span><br><span class="line">  auto_date: false #enable auto date, it can auto fill the date by time today</span><br><span class="line">  force: false #enable force mode,in this mode, the plugin will ignore the cache, and calc the abbrlink for every post even it already had abbrlink.</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="本地搜索功能"><a href="#本地搜索功能" class="headerlink" title="本地搜索功能"></a>本地搜索功能</h1><p>插件名及链接地址：<a href="https://github.com/theme-next/hexo-generator-searchdb">hexo-generator-searchdb</a></p>
<p>Git Bash 输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<p>站点config.yml添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="加密浏览博文"><a href="#加密浏览博文" class="headerlink" title="加密浏览博文"></a>加密浏览博文</h1><p>插件名及链接地址：<a href="https://github.com/D0n9X1n/hexo-blog-encrypt">hexo-blog-encrypt</a></p>
<p>Git Bash 输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-blog-encrypt --save</span><br></pre></td></tr></table></figure>

<p>站点config.yml添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Security</span><br><span class="line">encrypt: # hexo-blog-encrypt</span><br><span class="line">  silent: true</span><br><span class="line">  abstract: 本文加密，请输入密码以查看！</span><br><span class="line">  message: 当前文章暂不对外可见，请输入密码后查看！</span><br><span class="line">  tags:</span><br><span class="line">  - &#123;name: private, password: hello&#125;</span><br><span class="line">  wrong_pass_message: 密码错误，请重新输入！</span><br><span class="line">  wrong_hash_message: 抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容！</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="静态看板娘"><a href="#静态看板娘" class="headerlink" title="静态看板娘"></a>静态看板娘</h1><p>插件名及链接地址：<a href="https://github.com/EYHN/hexo-helper-live2d">hexo-helper-live2d</a></p>
<p>看板娘模板：</p>
<ul>
<li><code>live2d-widget-model-chitose</code></li>
<li><code>live2d-widget-model-epsilon2_1</code></li>
<li><code>live2d-widget-model-gf</code></li>
<li><code>live2d-widget-model-haru/01</code> (use <code>npm install --save live2d-widget-model-haru</code>)</li>
<li><code>live2d-widget-model-haru/02</code> (use <code>npm install --save live2d-widget-model-haru</code>)</li>
<li><code>live2d-widget-model-haruto</code></li>
<li><code>live2d-widget-model-hibiki</code></li>
<li><code>live2d-widget-model-hijiki</code></li>
<li><code>live2d-widget-model-izumi</code></li>
<li><code>live2d-widget-model-koharu</code></li>
<li><code>live2d-widget-model-miku</code></li>
<li><code>live2d-widget-model-ni-j</code></li>
<li><code>live2d-widget-model-nico</code></li>
<li><code>live2d-widget-model-nietzsche</code></li>
<li><code>live2d-widget-model-nipsilon</code></li>
<li><code>live2d-widget-model-nito</code></li>
<li><code>live2d-widget-model-shizuku</code></li>
<li><code>live2d-widget-model-tororo</code></li>
<li><code>live2d-widget-model-tsumiki</code></li>
<li><code>live2d-widget-model-unitychan</code></li>
<li><code>live2d-widget-model-wanko</code></li>
<li><code>live2d-widget-model-z16</code></li>
</ul>
<p>根据以上模板挑选并Git Bash 输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install live2d-widget-model-您选择的模板名 --save</span><br></pre></td></tr></table></figure>

<p>Git Bash 输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-helper-live2d --save</span><br></pre></td></tr></table></figure>

<p>站点config.yml添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">live2d:</span><br><span class="line">  enable: true    # 是否启用看板娘</span><br><span class="line">  scriptFrom: local    # 默认</span><br><span class="line">  pluginRootPath: live2dw/    # 插件在站点上的根目录(相对路径)</span><br><span class="line">  pluginJsPath: lib/    # 脚本文件相对与插件根目录路径</span><br><span class="line">  pluginModelPath: assets/    # 模型文件相对与插件根目录路径</span><br><span class="line">  # scriptFrom: jsdelivr    # jsdelivr CDN</span><br><span class="line">  # scriptFrom: unpkg    # unpkg CDN</span><br><span class="line">  # scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js    # 你的自定义 url</span><br><span class="line">  tagMode: false # 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中</span><br><span class="line">  debug: false # 调试, 是否在控制台输出日志</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-z16 # 根据自己选择并下载的模板改名！！！</span><br><span class="line">    scale: 1</span><br><span class="line">    hHeadPos: 0.5</span><br><span class="line">    vHeadPos: 0.618</span><br><span class="line">  display:</span><br><span class="line">    superSample: 2</span><br><span class="line">    width: 200	# 宽</span><br><span class="line">    height: 400	# 高</span><br><span class="line">    position: left    # 左侧还是右侧</span><br><span class="line">    hOffset: 0</span><br><span class="line">    vOffset: -10    # 距底部距离</span><br><span class="line">  mobile:</span><br><span class="line">    show: false    # 手机端是否可见，建议不可见否则可能影响阅读</span><br><span class="line">    scale: 0.5</span><br><span class="line">  react:</span><br><span class="line">    opacityDefault: 0.7</span><br><span class="line">    opacityOnHover: 0.2</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="一键部署博客"><a href="#一键部署博客" class="headerlink" title="一键部署博客"></a>一键部署博客</h1><p>插件名及链接地址：<a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a></p>
<p>Git Bash 输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>站点config.yml配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: &lt;仓库链接&gt; # 可以是 https 链接也可以是 git 链接</span><br><span class="line">  branch: [分支] # GitHub 的网站分支为 gh-pages，其他网站可能有所不同</span><br><span class="line">  message: [message] # 默认是 Site updated: &#123;&#123; now(&#x27;YYYY-MM-DD HH:mm:ss&#x27;) &#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="统计博文字数和阅读时长"><a href="#统计博文字数和阅读时长" class="headerlink" title="统计博文字数和阅读时长"></a>统计博文字数和阅读时长</h1><p>插件名及链接地址：<a href="https://github.com/theme-next/hexo-symbols-count-time">hexo-symbols-count-time</a></p>
<p>Git Bash 输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure>

<p>站点config.yml添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  symbols: true</span><br><span class="line">  time: true</span><br><span class="line">  total_symbols: true</span><br><span class="line">  total_time: true</span><br><span class="line">  exclude_codeblock: false</span><br><span class="line">  awl: 4</span><br><span class="line">  wpm: 275</span><br><span class="line">  suffix: &quot;mins.&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="sitemap浏览器爬取博客"><a href="#sitemap浏览器爬取博客" class="headerlink" title="sitemap浏览器爬取博客"></a>sitemap浏览器爬取博客</h1><p>插件名及链接地址：<a href="https://github.com/hexojs/hexo-generator-sitemap">hexo-generator-sitemap</a></p>
<p>Git Bash 输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure>

<p>站点config.yml添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># hexo-generator-sitemap</span><br><span class="line">## https://github.com/hexojs/hexo-generator-sitemap</span><br><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br><span class="line">  # template: ./sitemap_template.xml</span><br><span class="line">  rel: true</span><br><span class="line">  tags: false</span><br><span class="line">  categories: false</span><br></pre></td></tr></table></figure>

<p>具体参考：<a href="https://ywang-wnlo.github.io/posts/abac0c46">https://ywang-wnlo.github.io/posts/abac0c46</a></p>
<hr>
<h1 id="鼠标左键点击爱心特效"><a href="#鼠标左键点击爱心特效" class="headerlink" title="鼠标左键点击爱心特效"></a>鼠标左键点击爱心特效</h1><p>Blog文件夹 -&gt; themes -&gt; next（你的主题名文件夹） -&gt; source -&gt; js</p>
<p>在js文件夹下新建一个“love.js”，并存入以下内容保存。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"><span class="variable language_">window</span>, <span class="variable language_">document</span>, <span class="literal">undefined</span></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> hearts = [];</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">requestAnimationFrame</span> = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">window</span>.<span class="property">requestAnimationFrame</span> ||</span><br><span class="line">            <span class="variable language_">window</span>.<span class="property">webkitRequestAnimationFrame</span> ||</span><br><span class="line">            <span class="variable language_">window</span>.<span class="property">mozRequestAnimationFrame</span> ||</span><br><span class="line">            <span class="variable language_">window</span>.<span class="property">oRequestAnimationFrame</span> ||</span><br><span class="line">            <span class="variable language_">window</span>.<span class="property">msRequestAnimationFrame</span> ||</span><br><span class="line">            <span class="keyword">function</span> (<span class="params">callback</span>) &#123;</span><br><span class="line">                <span class="built_in">setTimeout</span>(callback, <span class="number">1000</span> / <span class="number">60</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line">    <span class="title function_">init</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">css</span>(</span><br><span class="line">            <span class="string">&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: absolute;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;</span></span><br><span class="line">        );</span><br><span class="line">        <span class="title function_">attachEvent</span>();</span><br><span class="line">        <span class="title function_">gameloop</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">gameloop</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; hearts.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hearts[i].<span class="property">alpha</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(hearts[i].<span class="property">el</span>);</span><br><span class="line">                hearts.<span class="title function_">splice</span>(i, <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            hearts[i].<span class="property">y</span>--;</span><br><span class="line">            hearts[i].<span class="property">scale</span> += <span class="number">0.004</span>;</span><br><span class="line">            hearts[i].<span class="property">alpha</span> -= <span class="number">0.013</span>;</span><br><span class="line">            hearts[i].<span class="property">el</span>.<span class="property">style</span>.<span class="property">cssText</span> = <span class="string">&quot;left:&quot;</span> + hearts[i].<span class="property">x</span> + <span class="string">&quot;px;top:&quot;</span> + hearts[i].<span class="property">y</span> + <span class="string">&quot;px;opacity:&quot;</span> + hearts[i]</span><br><span class="line">                .<span class="property">alpha</span> + <span class="string">&quot;;transform:scale(&quot;</span> + hearts[i].<span class="property">scale</span> + <span class="string">&quot;,&quot;</span> + hearts[i].<span class="property">scale</span> +</span><br><span class="line">                <span class="string">&quot;) rotate(45deg);background:&quot;</span> + hearts[i].<span class="property">color</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">requestAnimationFrame</span>(gameloop);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">attachEvent</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> old = <span class="keyword">typeof</span> <span class="variable language_">window</span>.<span class="property">onclick</span> === <span class="string">&quot;function&quot;</span> &amp;&amp; <span class="variable language_">window</span>.<span class="property">onclick</span>;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">            old &amp;&amp; <span class="title function_">old</span>();</span><br><span class="line">            <span class="title function_">createHeart</span>(event);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">createHeart</span>(<span class="params">event</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> d = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">        d.<span class="property">className</span> = <span class="string">&quot;heart&quot;</span>;</span><br><span class="line">        hearts.<span class="title function_">push</span>(&#123;</span><br><span class="line">            <span class="attr">el</span>: d,</span><br><span class="line">            <span class="attr">x</span>: event.<span class="property">clientX</span> - <span class="number">5</span>,</span><br><span class="line">            <span class="attr">y</span>: event.<span class="property">clientY</span> - <span class="number">5</span>,</span><br><span class="line">            <span class="attr">scale</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">alpha</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">color</span>: <span class="title function_">randomColor</span>()</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(d);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">css</span>(<span class="params">css</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> style = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;style&quot;</span>);</span><br><span class="line">        style.<span class="property">type</span> = <span class="string">&quot;text/css&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            style.<span class="title function_">appendChild</span>(<span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(css));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">            style.<span class="property">styleSheet</span>.<span class="property">cssText</span> = css;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;head&#x27;</span>)[<span class="number">0</span>].<span class="title function_">appendChild</span>(style);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">randomColor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;rgb(&quot;</span> + (~~(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">255</span>)) + <span class="string">&quot;,&quot;</span> + (~~(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">255</span>)) + <span class="string">&quot;,&quot;</span> + (~~(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">255</span>)) +</span><br><span class="line">            <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(<span class="variable language_">window</span>, <span class="variable language_">document</span>);</span><br></pre></td></tr></table></figure>



<p>再到	themes -&gt; next（你的主题名文件夹） -&gt; layout</p>
<p>打开“_layout.swig”文件夹，在最后的 body 之前添加：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 页面点击小红心 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/love.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>7</tag>
      </tags>
  </entry>
  <entry>
    <title>Python学习</title>
    <url>/posts/e39e2a4e.html</url>
    <content><![CDATA[<p><strong>Python的学习记录</strong></p>
<span id="more"></span>

<h1 id="Python数据结构"><a href="#Python数据结构" class="headerlink" title="Python数据结构"></a>Python数据结构</h1><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">时间复杂度：是用来估计算法运行时间的一个式子</span><br><span class="line"></span><br><span class="line">一般来说，时间复杂度高的算法比复杂度低的算法慢</span><br><span class="line"></span><br><span class="line">常见时间复杂度效率排序（由高到低）：</span><br><span class="line">O(1) &lt; O(log2^n) &lt; O(n) &lt; O(n * log2^n) &lt; O(n^2) &lt; O(n^2 * log2^n) &lt; O(n^3)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">快速判断算法时间复杂度：</span><br><span class="line">确定问题规模n</span><br><span class="line">循环减半----&gt;&gt;log n</span><br><span class="line">k层关于n的循环----&gt;&gt;n^k</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">空间复杂度：用来评估算法内存占用大小的式子</span><br><span class="line"></span><br><span class="line">算法使用了几个变量：O(1)</span><br><span class="line">算法使用了长度为n的一维列表：O(n)</span><br><span class="line">算法使用了m行n列的二维列表：O(mn)</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>函数的嵌套调用，在函数中调用它自身</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> x &gt; <span class="number">0</span>:</span><br><span class="line">        func1(x-<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func2</span>(<span class="params">y</span>):</span><br><span class="line">    <span class="keyword">if</span> y &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(y)</span><br><span class="line">        func2(y-<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>递归：计算1+2+…+100的值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum_int</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> n + sum_int(n-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>递归：汉诺塔问题实例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">汉诺塔问题</span></span><br><span class="line"><span class="string">有n个大小不同的碗，三个盘子，需要将n个碗从一个盘子，保持原样的移动到另一个盘子中去，不改变原本n个碗的摆放顺序</span></span><br><span class="line"><span class="string">    初始 : n个碗由上到下，由小至大放置于一个盘子之上</span></span><br><span class="line"><span class="string">    结果 : 在不改变n个碗的摆放顺序的条件下，将所有n个碗&quot;平移&quot;到另一个盘子之上</span></span><br><span class="line"><span class="string">        要求 : 一次只能移动一个碗，且小碗必须在大碗上面</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">例:</span></span><br><span class="line"><span class="string">现有 A B C 三个盘子，a(小碗) b(中碗) c(大碗) 三个碗，</span></span><br><span class="line"><span class="string">初始: abc摞在A上</span></span><br><span class="line"><span class="string">过程:</span></span><br><span class="line"><span class="string">    a -&gt; C | b -&gt; B | a -&gt; B | c -&gt; C | a -&gt; A | b -&gt; C | a -&gt; C</span></span><br><span class="line"><span class="string">结束: 原在A上的abc，平移至C上，共计如上移动了七次</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">当有n个碗需要平移时，可以近似将n个碗拆分成 最大的第n个碗 和 其他(n-1)个碗</span></span><br><span class="line"><span class="string">此时类似于</span></span><br><span class="line"><span class="string">    第一步 : (n-1)个碗 从A 经过C 至B</span></span><br><span class="line"><span class="string">    第二步 : 最大的第n个碗 从A 至C</span></span><br><span class="line"><span class="string">    第三步 : (n-1)个碗 从B 经过A 至C</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hanoi</span>(<span class="params">n, a, b, c</span>):  <span class="comment"># 定义的参数的意思是(n个碗， 从盘子a， 经过盘子b， 到达盘子c)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> n &gt; <span class="number">0</span>:  <span class="comment"># 碗的数量大于0，才有后续递归。即递归终止的条件</span></span><br><span class="line">        hanoi(n-<span class="number">1</span>, a, c, b)  <span class="comment"># 对应上述第一步:从a 经过c 到达b</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;从 %s 到 %s&quot;</span> % (a, c))</span><br><span class="line">        hanoi(n-<span class="number">1</span>, b, a, c)  <span class="comment"># 对应上述第三步:从b 经过a 到达c</span></span><br><span class="line"></span><br><span class="line">hanoi(<span class="number">3</span>, <span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>)</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="Python算法"><a href="#Python算法" class="headerlink" title="Python算法"></a>Python算法</h1><p><strong>查找:在一些数据元素中，通过一定的方法找出与给定关键字相同的数据元素的过程</strong></p>
<p>列表查找(线性表查找):从列表中查找指定元素<br>    输入:列表、待查找元素<br>    输出:元素下标(未找到元素时一般返回None或-1)</p>
<p><strong>Python内置列表查找函数: index()</strong></p>
<h2 id="线性查找"><a href="#线性查找" class="headerlink" title="线性查找"></a>线性查找</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 线性查找(linear_search)：从列表第一个元素开始，顺序进行搜索，直到找到元素或搜索到列表最后一个元素为止。</span></span><br><span class="line"><span class="comment"># 时间复杂度 O(n)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">linear_search</span>(<span class="params">li, val</span>):</span><br><span class="line">    <span class="keyword">for</span> ind, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(li):  <span class="comment"># enumerate()是Python的内置函数</span></span><br><span class="line">        <span class="keyword">if</span> v == val:</span><br><span class="line">            <span class="keyword">return</span> ind</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">不用<span class="built_in">enumerate</span>()函数的代码:</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">linear_search</span>(<span class="params">list_str, n, val</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, n):</span><br><span class="line">        <span class="keyword">if</span> (list_str[i] == val):</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure>

<h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 二分查找的对象必须为 【！！！ 有序列表 ！！！】</span></span><br><span class="line"><span class="comment"># 二分查找(Binary_search):又叫折半查找，从有序列表的初始候选区li[0:n]开始，通过对待查找的值与候选区中间值的比较，可以使候选区减少一半</span></span><br><span class="line"><span class="comment"># 时间复杂度 O(log n)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">binary_search</span>(<span class="params">li, val</span>):</span><br><span class="line">    left = <span class="number">0</span></span><br><span class="line">    right = <span class="built_in">len</span>(li) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> left &lt;= right:  <span class="comment"># 候选区有值</span></span><br><span class="line">        mid = (left + right) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> li[mid] == val:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">elif</span> li[mid] &gt; val:</span><br><span class="line">            right = mid - <span class="number">1</span>  <span class="comment"># 待查找的值在mid左侧</span></span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># li(mid) &lt; val 待查找的值在mid右侧</span></span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>

<hr>
<p><strong>排序 : 将一组 无序 的记录序列调整为 有序 的记录序列</strong></p>
<p>列表排序 : 将无序列表变为有序列表<br>    输入 : 列表<br>    输出 : 有序列表</p>
<p>升序与降序</p>
<p><strong>Python内置排序函数 : sort()</strong></p>
<p>常见排序算法：冒泡排序，选择排序，插入排序<br>            快速排序，堆排序，归并排序<br>            希尔排序，计数排序，基数排序</p>
<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">冒泡排序Bubble Sort         时间复杂度O(n^2)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">列表每两个相邻的数，如果前面的比后面的大，则交换这两个数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">一趟排序完成后，则无序区减少一个数，有序区增加一个数</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bubble_sort</span>(<span class="params">li</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)-<span class="number">1</span>):  <span class="comment"># 第i趟</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)-i-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> li[j] &gt; li[j+<span class="number">1</span>]:  <span class="comment"># j &gt; j+1 为升序排序，改为j &lt; j+1 则为降序排序</span></span><br><span class="line">                li[j], li[j+<span class="number">1</span>] = li[j+<span class="number">1</span>], li[j]</span><br><span class="line">        <span class="built_in">print</span>(li)  <span class="comment"># 打印每一趟排序</span></span><br></pre></td></tr></table></figure>

<h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">选择排序select sort         时间复杂度O(n^2)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">依次遍历列表，每次遍历返回一个最小的元素，再遍历剩下元素找到剩下元素中最小的，循环直到遍历全部最小的元素</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">select_sort</span>(<span class="params">li</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)-<span class="number">1</span>):  <span class="comment"># i是第几趟</span></span><br><span class="line">        min_loc = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, <span class="built_in">len</span>(li)):</span><br><span class="line">            <span class="keyword">if</span> li[j] &lt; li[min_loc]:</span><br><span class="line">                min_loc = j</span><br><span class="line">        li[i], li[min_loc] = li[min_loc], li[i]</span><br><span class="line">        <span class="built_in">print</span>(li)</span><br></pre></td></tr></table></figure>

<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">插入排序insert sort         时间复杂度O(n^2)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">初始有序区只有一个元素，从无序区拿来一个元素，按有序插入原有序区，如此循环</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">insert_sort</span>(<span class="params">li</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(li)):  <span class="comment"># i 表示拿到的元素的下标</span></span><br><span class="line">        tmp = li[i]</span><br><span class="line">        j = i - <span class="number">1</span>  <span class="comment"># j 指的是已存入有序区的元素</span></span><br><span class="line">        <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> li[j] &gt; tmp:</span><br><span class="line">            li[j+<span class="number">1</span>] = li[j]</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        li[j+<span class="number">1</span>] = tmp</span><br><span class="line">        <span class="built_in">print</span>(li)</span><br></pre></td></tr></table></figure>

<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">快速排序quick sort:         时间复杂度O(n * log n)</span></span><br><span class="line"><span class="string">取一个元素p（第一个元素），使元素p归位</span></span><br><span class="line"><span class="string">列表被p分成左右两个部分，左边都比p小，右边都比p大。递归完成排序。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">partition</span>(<span class="params">li, left, right</span>):  <span class="comment"># left左指针对应0号元素，right右指针对应n-1号元素</span></span><br><span class="line">    tmp = li[left]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> left &lt; right:</span><br><span class="line">        <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> li[right] &gt;= tmp:  <span class="comment"># 从右边找比tmp小的数</span></span><br><span class="line">            right -= <span class="number">1</span>           <span class="comment"># 往左走一步</span></span><br><span class="line">        li[left] = li[right]  <span class="comment"># 把右边的值写到左边空位上</span></span><br><span class="line">        <span class="comment"># print(li)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> li[left] &lt;= tmp:   <span class="comment"># 从左边找比tmp大的数</span></span><br><span class="line">            left += <span class="number">1</span>            <span class="comment"># 往右走一步</span></span><br><span class="line">        li[right] = li[left]  <span class="comment"># 把左边的值写到右边空位上</span></span><br><span class="line">        <span class="comment"># print(li)</span></span><br><span class="line"></span><br><span class="line">    li[left] = tmp  <span class="comment"># 把tmp归位</span></span><br><span class="line">    <span class="keyword">return</span> left</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">quick_sort</span>(<span class="params">li, left, right</span>):</span><br><span class="line">    <span class="keyword">if</span> left &lt; right:  <span class="comment"># 表示列表至少有两个元素</span></span><br><span class="line">        mid = partition(li, left, right)</span><br><span class="line">        quick_sort(li, left, mid-<span class="number">1</span>)</span><br><span class="line">        quick_sort(li, mid+<span class="number">1</span>, right)</span><br></pre></td></tr></table></figure>

<h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">堆排序的过程：         时间复杂度O(n * log n)</span></span><br><span class="line"><span class="string">        建立堆</span></span><br><span class="line"><span class="string">        得到堆顶元素，为最大元素</span></span><br><span class="line"><span class="string">        去掉堆顶，将堆最后一个元素放到堆顶，此时可通过一次调整重新使堆有序</span></span><br><span class="line"><span class="string">        堆顶元素为第二大元素</span></span><br><span class="line"><span class="string">        重复&quot;去掉堆顶...&quot;操作，直到堆变空</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sift</span>(<span class="params">li, low, high</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param li: 列表</span></span><br><span class="line"><span class="string">    :param low: 堆的根节点的位置</span></span><br><span class="line"><span class="string">    :param high: 堆的最后一个元素的位置</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    i = low  <span class="comment"># i最开始指向根节点</span></span><br><span class="line">    j = <span class="number">2</span> * i + <span class="number">1</span>  <span class="comment"># j开始是i的左孩子</span></span><br><span class="line">    tmp = li[low]  <span class="comment"># 把堆顶存起来</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= high:  <span class="comment"># 只要j位置有数</span></span><br><span class="line">        <span class="keyword">if</span> j + <span class="number">1</span> &lt;= high <span class="keyword">and</span> li[j+<span class="number">1</span>] &gt; li[j]:  <span class="comment"># 如果右孩子存在且比左孩子大</span></span><br><span class="line">            j = j + <span class="number">1</span>  <span class="comment"># 将j指向右孩子</span></span><br><span class="line">        <span class="keyword">if</span> li[j] &gt; tmp:</span><br><span class="line">            li[i] = li[j]</span><br><span class="line">            i = j  <span class="comment"># 往下看一层</span></span><br><span class="line">            j = <span class="number">2</span> * i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># tmp更大，把tmp放到i的位置上</span></span><br><span class="line">            li[i] = tmp  <span class="comment"># 把tmp放到某一级领导位置上</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        li[i] = tmp  <span class="comment"># 把tmp放到叶子节点上</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">heap_sort</span>(<span class="params">li</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(li)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>((n-<span class="number">2</span>)//<span class="number">2</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># i表示建堆的时候调整的部分的根的下标</span></span><br><span class="line">        sift(li, i, n-<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 建堆完成</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        li[<span class="number">0</span>], li[i] = li[i], li[<span class="number">0</span>]</span><br><span class="line">        sift(li, <span class="number">0</span>, i-<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">将列表由mid分为两边low, high</span></span><br><span class="line"><span class="string">由low-&gt;mid，mid+1-&gt;high两部分</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">时间复杂度O(n * log n)</span></span><br><span class="line"><span class="string">空间复杂度O(n)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">分解：将列表越分越小，直至分成一个元素</span></span><br><span class="line"><span class="string">终止条件：一个元素是有序的</span></span><br><span class="line"><span class="string">合并：将两个有序列表归并，列表越来越大</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">li, low, mid, high</span>):</span><br><span class="line">    i = low</span><br><span class="line">    j = mid + <span class="number">1</span></span><br><span class="line">    ltmp = []</span><br><span class="line">    <span class="keyword">while</span> i &lt;= mid <span class="keyword">and</span> j &lt;= high:</span><br><span class="line">        <span class="keyword">if</span> li[i] &lt; li[j]:</span><br><span class="line">            ltmp.append(li[i])</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ltmp.append(li[j])</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">    <span class="comment"># while执行完后，左半和右半肯定有一部分没有可比较元素</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= mid:</span><br><span class="line">        ltmp.append(li[i])</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= high:</span><br><span class="line">        ltmp.append(li[j])</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">    li[low:high+<span class="number">1</span>] = ltmp</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge_sort</span>(<span class="params">li, low, high</span>):</span><br><span class="line">    <span class="keyword">if</span> low &lt; high:  <span class="comment"># 至少有两个元素</span></span><br><span class="line">        mid = (low + high) // <span class="number">2</span></span><br><span class="line">        merge_sort(li, low, mid)</span><br><span class="line">        merge_sort(li, mid+<span class="number">1</span>, high)</span><br><span class="line">        merge(li, low, mid, high)</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="Python实战"><a href="#Python实战" class="headerlink" title="Python实战"></a>Python实战</h1><h2 id="名片管理系统-基础"><a href="#名片管理系统-基础" class="headerlink" title="名片管理系统(基础)"></a>名片管理系统(基础)</h2><h3 id="实现的功能"><a href="#实现的功能" class="headerlink" title="实现的功能"></a>实现的功能</h3><ol>
<li>无限循环实现系统的连续操作</li>
<li>实现系统基本的增删改查和显示功能</li>
</ol>
<h3 id="cards-main-py"><a href="#cards-main-py" class="headerlink" title="cards_main.py"></a>cards_main.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cards_tools</span><br><span class="line"><span class="comment"># 无限循环方法</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 主界面显示</span></span><br><span class="line">    cards_tools.show_menu()</span><br><span class="line"></span><br><span class="line">    user = <span class="built_in">input</span>(<span class="string">&quot;请选择将要进行的操作:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;您选择的操作是 %s&quot;</span> % user)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 系统执行操作1、2、3</span></span><br><span class="line">    <span class="keyword">if</span> user <span class="keyword">in</span> [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>]:</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 新增名片功能</span></span><br><span class="line">        <span class="keyword">if</span> user == <span class="string">&quot;1&quot;</span>:</span><br><span class="line">            cards_tools.new_card()</span><br><span class="line">        <span class="comment"># 显示名片功能</span></span><br><span class="line">        <span class="keyword">elif</span> user == <span class="string">&quot;2&quot;</span>:</span><br><span class="line">            cards_tools.show_card()</span><br><span class="line">        <span class="comment"># 查询名片功能</span></span><br><span class="line">        <span class="keyword">elif</span> user == <span class="string">&quot;3&quot;</span>:</span><br><span class="line">            cards_tools.search_card()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 退出系统</span></span><br><span class="line">    <span class="keyword">elif</span> user == <span class="string">&quot;0&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;欢迎再次使用【名片管理系统】&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 用户输入错误3</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;输入错误，请重新输入&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="cards-tools-py"><a href="#cards-tools-py" class="headerlink" title="cards_tools.py"></a>cards_tools.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">card_list = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_menu</span>():</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;主界面的显示&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;* &quot;</span> * <span class="number">15</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;    欢迎使用【名片管理系统】&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;        1.新增名片&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;        2.显示名片&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;        3.查找名片&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;        0.退出系统&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;* &quot;</span> * <span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">new_card</span>():</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;新增名片&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;1.新增名片&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1.用户依次输入名片的所有信息</span></span><br><span class="line">    name = <span class="built_in">input</span>(<span class="string">&quot;请输入用户的姓名:&quot;</span>)</span><br><span class="line">    phone = <span class="built_in">input</span>(<span class="string">&quot;请输入用户的电话号码:&quot;</span>)</span><br><span class="line">    qq = <span class="built_in">input</span>(<span class="string">&quot;请输入用户的qq号码:&quot;</span>)</span><br><span class="line">    email = <span class="built_in">input</span>(<span class="string">&quot;请输入用户的邮箱:&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.新建一个字典用于保存用户的输入</span></span><br><span class="line">    card_dict = &#123;<span class="string">&quot;name&quot;</span>: name,</span><br><span class="line">                 <span class="string">&quot;phone&quot;</span>: phone,</span><br><span class="line">                 <span class="string">&quot;qq&quot;</span>: qq,</span><br><span class="line">                 <span class="string">&quot;email&quot;</span>: email&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3.将该字典的信息存放到数组上</span></span><br><span class="line">    card_list.append(card_dict)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(card_list)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4.提示用户添加成功</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;用户 %s 的信息添加成功&quot;</span> % name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_card</span>():</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示名片&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;2.显示名片&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;- &quot;</span> * <span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断是否存在名片信息记录，若没有，提示用户返回</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(card_list) == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;当前没有任何名片，请使用新增功能先添加名片再进行后续操作！&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打印表头</span></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> card_list:</span><br><span class="line">        <span class="built_in">print</span>(name, end=<span class="string">&quot;\t\t&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> card_dict <span class="keyword">in</span> card_list:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s\t\t%s\t\t%s\t\t%s&quot;</span> % (card_dict[<span class="string">&quot;name&quot;</span>],</span><br><span class="line">                                        card_dict[<span class="string">&quot;phone&quot;</span>],</span><br><span class="line">                                        card_dict[<span class="string">&quot;qq&quot;</span>],</span><br><span class="line">                                        card_dict[<span class="string">&quot;email&quot;</span>]))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;- &quot;</span> * <span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search_card</span>():</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;查找名片&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;3.查找名片&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1.提示用户输入要搜索的姓名</span></span><br><span class="line">    find_name = <span class="built_in">input</span>(<span class="string">&quot;请输入要搜索的用户姓名:&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.遍历名片列表，查询要搜索的姓名，若没有，需要提示用户</span></span><br><span class="line">    <span class="keyword">for</span> card_dict <span class="keyword">in</span> card_list:</span><br><span class="line">        <span class="keyword">if</span> card_dict[<span class="string">&quot;name&quot;</span>] == find_name:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;姓名\t\t电话\t\tQQ\t\t地址&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;%s\t\t%s\t\t%s\t\t%s&quot;</span> % (card_dict[<span class="string">&quot;name&quot;</span>],</span><br><span class="line">                                            card_dict[<span class="string">&quot;phone&quot;</span>],</span><br><span class="line">                                            card_dict[<span class="string">&quot;qq&quot;</span>],</span><br><span class="line">                                            card_dict[<span class="string">&quot;email&quot;</span>]))</span><br><span class="line">            <span class="comment"># 针对找到的名片执行修改和删除操作</span></span><br><span class="line">            deal_card(card_dict)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;没有找到 %s 的信息&quot;</span> % find_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deal_card</span>(<span class="params">find_dict</span>):</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(find_dict)</span><br><span class="line"></span><br><span class="line">    user_do = <span class="built_in">input</span>(<span class="string">&quot;请选择要执行的操作&quot;</span></span><br><span class="line">                    <span class="string">&quot;[1]修改  [2]删除  [0]返回上一级&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> user_do == <span class="string">&quot;1&quot;</span>:</span><br><span class="line">        find_dict[<span class="string">&quot;name&quot;</span>] = input_card_info(find_dict[<span class="string">&quot;name&quot;</span>], <span class="string">&quot;姓名:&quot;</span>)</span><br><span class="line">        find_dict[<span class="string">&quot;phone&quot;</span>] = input_card_info(find_dict[<span class="string">&quot;phone&quot;</span>], <span class="string">&quot;电话:&quot;</span>)</span><br><span class="line">        find_dict[<span class="string">&quot;qq&quot;</span>] = input_card_info(find_dict[<span class="string">&quot;qq&quot;</span>], <span class="string">&quot;QQ:&quot;</span>)</span><br><span class="line">        find_dict[<span class="string">&quot;email&quot;</span>] = input_card_info(find_dict[<span class="string">&quot;email&quot;</span>], <span class="string">&quot;邮箱:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;修改名片成功&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> user_do == <span class="string">&quot;2&quot;</span>:</span><br><span class="line">        card_list.remove(find_dict)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;删除名片成功&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">input_card_info</span>(<span class="params">dict_value, tip_message</span>):</span><br><span class="line"></span><br><span class="line">    result_str = <span class="built_in">input</span>(tip_message)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(result_str) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> result_str</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> dict_value</span><br></pre></td></tr></table></figure>

<h3 id="控制台效果展示"><a href="#控制台效果展示" class="headerlink" title="控制台效果展示"></a>控制台效果展示</h3><img src="/posts/e39e2a4e/%E5%90%8D%E7%89%87%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E6%95%88%E6%9E%9C%E5%9B%BE1.jpg" class="">

<img src="/posts/e39e2a4e/%E5%90%8D%E7%89%87%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E6%95%88%E6%9E%9C%E5%9B%BE2.jpg" class="">

<img src="/posts/e39e2a4e/%E5%90%8D%E7%89%87%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E6%95%88%E6%9E%9C%E5%9B%BE3.jpg" class="">

<hr>
<h2 id="飞机大战游戏-pygame"><a href="#飞机大战游戏-pygame" class="headerlink" title="飞机大战游戏(pygame)"></a>飞机大战游戏(pygame)</h2><h3 id="实现的功能-1"><a href="#实现的功能-1" class="headerlink" title="实现的功能"></a><strong>实现的功能</strong></h3><ol>
<li>背景图片的滚动播放</li>
<li>碰撞检测—-子弹碰撞飞机，敌机碰撞飞机</li>
<li>键盘←→控制飞机的左右移动</li>
<li>random随机数实现敌机的出现数量</li>
<li>代码中可直接修改所有飞机的移动速度</li>
</ol>
<h3 id="plane-main-py"><a href="#plane-main-py" class="headerlink" title="plane_main.py"></a>plane_main.py</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># import pygame 飞机精灵导入了pygame的模块</span></span><br><span class="line"><span class="keyword">from</span> plane_sprites <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PlaneGame</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;飞机大战主游戏&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;...游戏初始化...&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1.创建游戏窗口</span></span><br><span class="line">        self.screen = pygame.display.set_mode(SCREEN_RECT.size)</span><br><span class="line">        <span class="comment"># 2.创建游戏时钟</span></span><br><span class="line">        self.clock = pygame.time.Clock()</span><br><span class="line">        <span class="comment"># 3.调用私有方法，精灵和精灵组的创建</span></span><br><span class="line">        self.__create_sprites()</span><br><span class="line">        <span class="comment"># 4.设置定时器事件 - 创建敌机 1s/架</span></span><br><span class="line">        pygame.time.set_timer(CREATE_ENEMY_EVENT, <span class="number">1000</span>)  <span class="comment"># 第二个参数以毫秒为单位</span></span><br><span class="line">        pygame.time.set_timer(HERO_FIRE_EVENT, <span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__create_sprites</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 创建背景精灵和精灵组</span></span><br><span class="line">        bg1 = Background()</span><br><span class="line">        bg2 = Background(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        self.back_group = pygame.sprite.Group(bg1, bg2)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建敌机的精灵组</span></span><br><span class="line">        self.enemy_group = pygame.sprite.Group()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建英雄的精灵和精灵组</span></span><br><span class="line">        self.hero = Hero()</span><br><span class="line">        self.hero_group = pygame.sprite.Group(self.hero)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start_game</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;...游戏开始...&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 1.设置刷新帧率</span></span><br><span class="line">            self.clock.tick(FRAME_PER_SEC)</span><br><span class="line">            <span class="comment"># 2.事件监听</span></span><br><span class="line">            self.__event_handler()</span><br><span class="line">            <span class="comment"># 3.碰撞检测</span></span><br><span class="line">            self.__check_collide()</span><br><span class="line">            <span class="comment"># 4.更新/绘制精灵组</span></span><br><span class="line">            self.__update_sprites()</span><br><span class="line">            <span class="comment"># 5.更新显示</span></span><br><span class="line">            pygame.display.update()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__event_handler</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">            <span class="comment"># 判断是否退出游戏</span></span><br><span class="line">            <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.QUIT:</span><br><span class="line">                PlaneGame.__game_over()</span><br><span class="line">            <span class="keyword">elif</span> event.<span class="built_in">type</span> == CREATE_ENEMY_EVENT:</span><br><span class="line">                <span class="comment"># print(&quot;...敌机出场...&quot;)</span></span><br><span class="line">                <span class="comment"># 创建敌机精灵</span></span><br><span class="line">                enemy = Enemy()</span><br><span class="line">                <span class="comment"># 将敌机精灵添加到敌机精灵组</span></span><br><span class="line">                self.enemy_group.add(enemy)</span><br><span class="line">            <span class="keyword">elif</span> event.<span class="built_in">type</span> == HERO_FIRE_EVENT:</span><br><span class="line">                self.hero.fire()</span><br><span class="line">            <span class="comment"># elif event.type == pygame.KEY_DOWN and event.key == pygame.K_RIGHT:</span></span><br><span class="line">                <span class="comment"># print(&quot;向右移动&quot;)</span></span><br><span class="line">        <span class="comment"># 使用键盘提供的方法获取键盘按键</span></span><br><span class="line">        keys_pressed = pygame.key.get_pressed()</span><br><span class="line">        <span class="comment"># 判断元组中对应的按键索引值</span></span><br><span class="line">        <span class="keyword">if</span> keys_pressed[pygame.K_RIGHT]:</span><br><span class="line">            self.hero.speed = <span class="number">5</span></span><br><span class="line">        <span class="keyword">elif</span> keys_pressed[pygame.K_LEFT]:</span><br><span class="line">            self.hero.speed = -<span class="number">5</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.hero.speed = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__check_collide</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 1.子弹摧毁敌机</span></span><br><span class="line">        pygame.sprite.groupcollide(self.hero.bullets, self.enemy_group, <span class="literal">True</span>, <span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 2.敌机撞毁英雄</span></span><br><span class="line">        enemies = pygame.sprite.spritecollide(self.hero, self.enemy_group, <span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 3.判断列表是否有内容</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(enemies) &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 让英雄牺牲</span></span><br><span class="line">            self.hero.kill()</span><br><span class="line">            <span class="comment"># 结束游戏</span></span><br><span class="line">            PlaneGame.__game_over()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__update_sprites</span>(<span class="params">self</span>):</span><br><span class="line">        self.back_group.update()</span><br><span class="line">        self.back_group.draw(self.screen)</span><br><span class="line"></span><br><span class="line">        self.enemy_group.update()</span><br><span class="line">        self.enemy_group.draw(self.screen)</span><br><span class="line"></span><br><span class="line">        self.hero_group.update()</span><br><span class="line">        self.hero_group.draw(self.screen)</span><br><span class="line"></span><br><span class="line">        self.hero.bullets.update()</span><br><span class="line">        self.hero.bullets.draw(self.screen)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__game_over</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;游戏结束&quot;</span>)</span><br><span class="line">        pygame.quit()</span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 创建游戏对象</span></span><br><span class="line">    game = PlaneGame()</span><br><span class="line">    <span class="comment"># 启动游戏</span></span><br><span class="line">    game.start_game()</span><br></pre></td></tr></table></figure>

<h3 id="plane-sprites-py"><a href="#plane-sprites-py" class="headerlink" title="plane_sprites.py"></a>plane_sprites.py</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"></span><br><span class="line"><span class="comment"># 屏幕大小的常量</span></span><br><span class="line">SCREEN_RECT = pygame.Rect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">480</span>, <span class="number">700</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 刷新的帧率</span></span><br><span class="line">FRAME_PER_SEC = <span class="number">60</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建敌机的定时器常量</span></span><br><span class="line">CREATE_ENEMY_EVENT = pygame.USEREVENT</span><br><span class="line"></span><br><span class="line"><span class="comment"># 英雄发射子弹事件</span></span><br><span class="line">HERO_FIRE_EVENT = pygame.USEREVENT + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GameSprite</span>(pygame.sprite.Sprite):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;飞机大战游戏精灵&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, image_name, speed=<span class="number">1</span></span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 调用父类的初始化方法</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 定义对象的属性</span></span><br><span class="line">        self.image = pygame.image.load(image_name)</span><br><span class="line">        self.rect = self.image.get_rect()</span><br><span class="line">        self.speed = speed</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 在屏幕的垂直方向上移动</span></span><br><span class="line">        self.rect.y += self.speed</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Background</span>(<span class="title class_ inherited__">GameSprite</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;游戏背景精灵&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, is_alt=<span class="literal">False</span></span>):</span><br><span class="line">        <span class="comment"># 1.调用父类方法实现精灵的创建(image/rect/speed)</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(<span class="string">&quot;./images/background.png&quot;</span>)</span><br><span class="line">        <span class="comment"># 2.判断是否是交替图像，如果是，需要设置初始位置</span></span><br><span class="line">        <span class="keyword">if</span> is_alt:</span><br><span class="line">            self.rect.y = -self.rect.height</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1.调用父类的方法实现</span></span><br><span class="line">        <span class="built_in">super</span>().update()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2.判断图像是否移出屏幕，若移出，将图像设置到屏幕的上方</span></span><br><span class="line">        <span class="keyword">if</span> self.rect.y &gt;= SCREEN_RECT.height:</span><br><span class="line">            self.rect.y = -self.rect.height</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Enemy</span>(<span class="title class_ inherited__">GameSprite</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;敌机精灵&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 1.调用父类方法，创建敌机精灵，同时指定敌机图片</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(<span class="string">&quot;./images/enemy1.png&quot;</span>)</span><br><span class="line">        <span class="comment"># 2.指定敌机的初始随机速度</span></span><br><span class="line">        self.speed = random.randint(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line">        <span class="comment"># 3.指定敌机的初始随机位置</span></span><br><span class="line">        self.rect.bottom = <span class="number">0</span></span><br><span class="line">        max_x = SCREEN_RECT.width - self.rect.width</span><br><span class="line">        self.rect.x = random.randint(<span class="number">0</span>, max_x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 1.调用父类方法，保持垂直方向的飞行</span></span><br><span class="line">        <span class="built_in">super</span>().update()</span><br><span class="line">        <span class="comment"># 2.判断是否飞出屏幕，如果是，需要从精灵组删除敌机</span></span><br><span class="line">        <span class="keyword">if</span> self.rect.y &gt;= SCREEN_RECT.height:</span><br><span class="line">            <span class="comment"># print(&quot;飞出屏幕，需要从精灵组删除&quot;)</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># kill方法可以将精灵从所有精灵组中移出，精灵就会被自动销毁</span></span><br><span class="line">            self.kill()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># print(&quot;敌机爆炸 %s&quot; % self.rect)</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hero</span>(<span class="title class_ inherited__">GameSprite</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;英雄精灵&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 1.调用父类方法，设置image&amp;speed</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(<span class="string">&quot;./images/me1.png&quot;</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="comment"># 2.设置英雄的初始位置</span></span><br><span class="line">        self.rect.centerx = SCREEN_RECT.centerx</span><br><span class="line">        self.rect.bottom = SCREEN_RECT.bottom - <span class="number">120</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3.创建子弹的精灵组</span></span><br><span class="line">        self.bullets = pygame.sprite.Group()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 英雄在水平方向移动</span></span><br><span class="line">        self.rect.x += self.speed</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 控制英雄不能离开屏幕</span></span><br><span class="line">        <span class="keyword">if</span> self.rect.x &lt; <span class="number">0</span>:</span><br><span class="line">            self.rect.x = <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> self.rect.right &gt; SCREEN_RECT.right:</span><br><span class="line">            self.rect.right = SCREEN_RECT.right</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fire</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># print(&quot;发射子弹&quot;)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>):</span><br><span class="line">            <span class="comment"># 1.创建子弹精灵</span></span><br><span class="line">            bullet = Bullet()</span><br><span class="line">            <span class="comment"># 2.设置精灵的位置</span></span><br><span class="line">            bullet.rect.bottom = self.rect.y - i * <span class="number">20</span></span><br><span class="line">            bullet.rect.centerx = self.rect.centerx</span><br><span class="line">            <span class="comment"># 3.将精灵添加到精灵组</span></span><br><span class="line">            self.bullets.add(bullet)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bullet</span>(<span class="title class_ inherited__">GameSprite</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;子弹精灵&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 调用父类方法，设置子弹图片，设置初始速度</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(<span class="string">&quot;./images/bullet1.png&quot;</span>, -<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 调用父类方法，让子弹沿垂直方向飞行</span></span><br><span class="line">        <span class="built_in">super</span>().update()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断子弹是否飞出屏幕</span></span><br><span class="line">        <span class="keyword">if</span> self.rect.bottom &lt; <span class="number">0</span>:</span><br><span class="line">            self.kill()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># print(&quot;子弹被销毁&quot;)</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<h3 id="游戏运行效果展示图"><a href="#游戏运行效果展示图" class="headerlink" title="游戏运行效果展示图"></a>游戏运行效果展示图</h3><img src="/posts/e39e2a4e/%E9%A3%9E%E6%9C%BA%E5%A4%A7%E6%88%98.jpg" class="">

<hr>
<h1 id="Python面经"><a href="#Python面经" class="headerlink" title="Python面经"></a>Python面经</h1><h2 id="列表、元组、字典"><a href="#列表、元组、字典" class="headerlink" title="列表、元组、字典"></a>列表、元组、字典</h2><ol>
<li>列表是动态数组，它们不可变且可以重设长度（改变其内部元素的个数）。</li>
<li>元组是静态数组，它们不可变，且其内部数据一旦创建便无法改变。</li>
<li>元组缓存于Python运行时环境，这意味着我们每次使用元组时无须访问内核去分配内存。</li>
</ol>
<p><strong>列表元组字典的一些区别：</strong></p>
<p>1、列表list：有序，可变。</p>
<p>2、元组tuple：有序，不可变。</p>
<p>3、字典dict：无序，字典的key是不可变的，值是可变的；在python中字符串，数字，元组都是不可变的对象。</p>
<p>4、序列：列表，元组和字符串都属于序列；即成员有序排列，可以通过下标访问，可以进行切片操作。字符串（普通字符串和unicode字符串）</p>
<p>5、集合：没有顺序的简单对象的聚集。可以检查成员是否存在，是否是另一个集合的子集，得到两个集合的交集等等</p>
<p>6、复制一个列表或者类似的序列或者其他复杂对象，那么必须使用切片操作符来去的拷贝。当你创建一个对象并将它赋值给一个变量的时候，这个变量仅仅引用那个对象，而不是表示这个对象本身！也就是说，变量名指向你计算机中存储那个对象的内存。这被称作名称到对象的绑定。</p>
<h2 id="Python的异常机制"><a href="#Python的异常机制" class="headerlink" title="Python的异常机制"></a>Python的异常机制</h2><h3 id="1、什么是异常？"><a href="#1、什么是异常？" class="headerlink" title="1、什么是异常？"></a>1、什么是异常？</h3><p>异常即是一个事件，该事件会在程序执行过程中发生，影响了程序的正常执行。<br> 一般情况下，在Python无法正常处理程序时就会发生一个异常。<br> 异常是Python对象，表示一个错误。<br> 当Python脚本发生异常时我们需要捕获处理它，否则程序会终止执行。</p>
<h3 id="2、try…except…else结构"><a href="#2、try…except…else结构" class="headerlink" title="2、try…except…else结构"></a>2、try…except…else结构</h3><p>如果try块中没有抛出异常，则执行else块，如果try中抛出异常，则执行except模块<br> except：捕获所有的异常</p>
<p>不带任何异常类型使用except，如下实例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">    正常的操作</span><br><span class="line">   ......................</span><br><span class="line">except:</span><br><span class="line">    发生异常，执行这块代码</span><br><span class="line">   ......................</span><br><span class="line">else:</span><br><span class="line">    如果没有异常执行这块代码</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用相同的except语句来处理多个异常信息，如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">    正常的操作</span><br><span class="line">   ......................</span><br><span class="line">except(Exception1[, Exception2[,...ExceptionN]]):</span><br><span class="line">   发生以上多个异常中的一个，执行这块代码</span><br><span class="line">   ......................</span><br><span class="line">else:</span><br><span class="line">    如果没有异常执行这块代码</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3、try…except…else…finally"><a href="#3、try…except…else…finally" class="headerlink" title="3、try…except…else…finally"></a>3、try…except…else…finally</h3><p>finally块无论是否发生异常都会执行，能常用来解释try块中申请的的资源</p>
<h3 id="4、python中常见的异常类型"><a href="#4、python中常见的异常类型" class="headerlink" title="4、python中常见的异常类型"></a>4、python中常见的异常类型</h3><p>Exception：常规错误的基类<br>ZeroDivisionError：除(或取模)零 (所有数据类型)<br>AssertionError：断言语句失败<br>AttributeError：对象没有这个属性<br>IOError：输入&#x2F;输出操作失败<br>ImportError：导入模块&#x2F;对象失败<br>IndexError：序列中没有此索引(index)<br>KeyError：映射中没有这个键<br>NameError：未声明&#x2F;初始化对象 (没有属性)<br>SyntaxError：Python 语法错误<br>IndentationError：缩进错误<br>SystemError：一般的解释器系统错误<br>TypeError：对类型无效的操作<br>ValueError：传入无效的参数</p>
<h3 id="python异常代码块"><a href="#python异常代码块" class="headerlink" title="python异常代码块"></a>python异常代码块</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># func   # 可能会抛出异常的代码</span></span><br><span class="line"><span class="keyword">except</span> (Exception1, Exception2) <span class="keyword">as</span> e:  <span class="comment"># 可以捕获多个异常并处理</span></span><br><span class="line">    <span class="comment"># 异常处理的代码</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># pass  # 异常没有发生的时候代码逻辑</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="keyword">pass</span>     <span class="comment"># 无论异常有没有发生都会执行的代码，一般处理资源的关闭和释放</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Python中的GIL"><a href="#Python中的GIL" class="headerlink" title="Python中的GIL"></a>Python中的GIL</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>全局解释器锁 GIL，英文名称为 Global Interpreter Lock，它是解释器中一种线程同步的方式。</p>
<p>对于每一个解释器进程都具有一个 GIL ，它的直接作用是限制单个解释器进程中多线程的并行执行，使得即使在多核处理器上对于单个解释器进程来说，在同一时刻运行的线程仅限一个。 对于 Python 来讲，GIL 并不是它语言本身的特性，而是 CPython 解释器的实现特性。</p>
<p>Python 代码被编译后的字节码会在解释器中执行，在执行过程中，存在于 CPython 解释器中的 GIL 会致使在同一时刻只有一个线程可以执行字节码。 GIL 的存在引起的最直接的问题便是：在一个解释器进程中通过多线程的方式无法利用多核处理器来实现真正的并行。</p>
<p>因此，Python的多线程是伪多线程，无法利用多核资源，同一个时刻只有一个线程在真正的运行。</p>
<p>GIL的限制了程序的多核执行</p>
<p>  同一个时间只能有一个线程执行字节码</p>
<p>  CPU密集程序难以利用多核优势</p>
<p>  IO期间会释放GIL，对IO密集程序影响不大</p>
<p>面对GIL的存在，我们有可以有多个方法帮助我们提升性能</p>
<p>在 IO 密集型任务下，我们可以使用多线程或者协程来完成。</p>
<p>可以选择更换 Jython 等没有 GIL 的解释器，但并不推荐更换解释器，因为会错过众多 C 语言模块中的有用特性。</p>
<p>CPU密集可以使用多进程+进程池。</p>
<p>将计算密集型任务转移到 Python 的 C &#x2F; C++ 扩展模块中完成</p>
<h3 id="为什么有了GIL还要关注线程安全"><a href="#为什么有了GIL还要关注线程安全" class="headerlink" title="为什么有了GIL还要关注线程安全"></a>为什么有了GIL还要关注线程安全</h3><p>GIL 保证的是每一条字节码在执行过程中的独占性，即每一条字节码的执行都是原子性的。GIL 具有释放机制，所以 GIL 并不会保证字节码在执行过程中线程不会进行切换，即在多个字节码之间，线程具有切换的可能性。</p>
<p>我们可以用python的dis模块去查看a +&#x3D; 1执行的字节码，发现需要有多个字节码去完成，线程具有切换的可能性，所以它是非线程安全的。</p>
<p> 一个操作如果是一个字节码指令可以完成就是原子的，非原子操作不是线程安全的，原子的是可以保证线程安全的。</p>
<p> GIL 和线程互斥锁的粒度是不同的，GIL 是 Python 解释器级别的互斥，保证的是解释器级别共享资源的一致性，而线程互斥锁则是代码级（或用户级）的互斥，保证的是 Python 程序级别共享数据的一致性，所以我们仍需要线程互斥锁及其他线程同步方式来保证数据一致。</p>
<h2 id="迭代器和生成器"><a href="#迭代器和生成器" class="headerlink" title="迭代器和生成器"></a>迭代器和生成器</h2><img src="/posts/e39e2a4e/%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8.jpg" class="">

<p>容器（container）</p>
<p>container 可以理解为把多个元素组织在一起的数据结构，container 中的元素可以逐个地迭代获取，可以用 in, not in 关键字判断元素是否包含在容器中。比如Python中常见的container对象有list，deque，set</p>
<p>可迭代对象(iterables)</p>
<p>大部分的 container 都是可迭代对象，比如 list or set 都是可迭代对象，可以说只要是可以返回一个迭代器的都可以称作可迭代对象。</p>
<p>迭代器（iterator）</p>
<p>python中的容器有许多，比如列表、元组、字典、集合等，对于容器，可以很直观地想象成多个元素在一起的单元，所有的容器都是可迭代的（iterable）。</p>
<p>我们通常使用for in 语句对可迭代的对象进行枚举，其底层机制在于：</p>
<p>而可迭代对象，通过 iter() 函数返回一个迭代器（iterator），迭代器提供了一个 next 的方法。调用用这个方法后，你要么得到这个容器的下一个对象，要么得到一个StopIteration 的错误。</p>
<p>举个例子：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">  \&gt;&gt;&gt; x = [1, 2, 3]</span><br><span class="line"></span><br><span class="line">  \&gt;&gt;&gt; # Get the iterator</span><br><span class="line"></span><br><span class="line">  \&gt;&gt;&gt; y = iter(items) # Invokes items.<span class="strong">__iter__</span>()</span><br><span class="line"></span><br><span class="line">  \&gt;&gt;&gt; # Run the iterator</span><br><span class="line"></span><br><span class="line">  \&gt;&gt;&gt; next(y) # Invokes it.<span class="strong">__next__</span>()</span><br><span class="line"></span><br><span class="line">  1</span><br><span class="line"></span><br><span class="line">  \&gt;&gt;&gt; next(y)</span><br><span class="line"></span><br><span class="line">  2</span><br><span class="line"></span><br><span class="line">  \&gt;&gt;&gt; next(y)</span><br><span class="line"></span><br><span class="line">  3</span><br><span class="line"></span><br><span class="line">  \&gt;&gt;&gt; type(x)</span><br><span class="line"></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">class</span> &#x27;<span class="attr">list</span>&#x27;&gt;</span></span></span><br><span class="line"></span><br><span class="line">  \&gt;&gt;&gt; type(y)</span><br><span class="line"></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">class</span> &#x27;<span class="attr">list_iterator</span>&#x27;&gt;</span></span></span><br><span class="line"></span><br><span class="line">  \&gt;&gt;&gt; next(y)</span><br><span class="line"></span><br><span class="line">  Traceback (most recent call last):</span><br><span class="line"></span><br><span class="line">​    File &quot;<span class="language-xml"><span class="tag">&lt;<span class="name">stdin</span>&gt;</span></span>&quot;, line 1, in <span class="language-xml"><span class="tag">&lt;<span class="name">module</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  StopIteration</span><br><span class="line"></span><br><span class="line">  \&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<p>上面的例子中，x&#x3D;[1,2,3]是可迭代对象，这里也叫容器。y&#x3D;iter(x)则是迭代器，且实现了__iter__和__next__方法。</p>
<p>它们之间的关系如下图所示：</p>
<img src="/posts/e39e2a4e/%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%AE%9E%E4%BE%8B.jpg" class="">

<p>可见通过 iter 方法后就是迭代器。它是一个带状态的对象，调用 next 方法的时候返回容器中的下一个值，可以说任何实现了iter和 next 方法的对象都是迭代器，iter返回迭代器自身，next 返回容器中的下一个值，如果容器中没有更多元素了，则抛异常。</p>
<p>迭代器就像一个懒加载的工厂，等到有人需要的时候才给它生成值返回，没调用的时候就处于休眠状态等待下一次调用。</p>
<p>生成器（generator）</p>
<p>生成器(generator)可以简单理解为懒人版本的迭代器。</p>
<p>它相比于迭代器的优势是，生成器并不会像迭代器一样占用大量内存。比如声明一个迭代器：[i for i in range(100000000)]就可以声明一个包含一亿个元素的列表，每个元素在生成后都会保存到内存中。但实际上我们也许并不需要保存那么多东西，只希望在你用 next() 函数的时候，才会生成下一个变量，因此生成器应运而生，在python中的写法为(i for i in range(100000000))</p>
<p>此外，生成器还可以有别的形式，比如生成器函数，通过yield关键字，把结果返回到next()方法中，举个例子：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">frange</span>(<span class="params">start, stop, increment</span>):</span><br><span class="line">x = start</span><br><span class="line"><span class="keyword">while</span> x &lt; stop:</span><br><span class="line">	<span class="keyword">yield</span> x</span><br><span class="line">   	x += increment</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> frange(<span class="number">0</span>, <span class="number">2</span>, <span class="number">0.5</span>):</span><br><span class="line">   <span class="built_in">print</span>(n)</span><br><span class="line"></span><br><span class="line"> <span class="number">0</span></span><br><span class="line"> <span class="number">0.5</span></span><br><span class="line"> <span class="number">1.0</span></span><br><span class="line"> <span class="number">1.5</span></span><br></pre></td></tr></table></figure>

<p>相比于迭代器，生成器具有以下优点：</p>
<ol>
<li>减少内存</li>
<li>延迟计算</li>
<li>有效提高代码可读性</li>
</ol>
<h2 id="python深拷贝和浅拷贝"><a href="#python深拷贝和浅拷贝" class="headerlink" title="python深拷贝和浅拷贝"></a>python深拷贝和浅拷贝</h2><ul>
<li>浅拷贝，指的是重新分配一块内存，创建一个新的对象，但<strong>里面的元素是原对象中各个子对象的引用</strong>。</li>
<li>深拷贝，是指重新分配一块内存，创建一个新的对象，并且将原对象中的元素，以递归的方式，通过创建新的子对象拷贝到新对象中。因此，<strong>新对象和原对象没有任何关联</strong>。</li>
</ul>
<h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><ul>
<li>使用数据类型<strong>本身的构造器</strong></li>
<li>对于<strong>可变的序列</strong>，还可以通过切片操作符 : 来完成浅拷贝</li>
<li>Python 还提供了对应的函数 <strong>copy.copy()</strong> 函数，适用于任何数据类型</li>
</ul>
<p>对于元组，使用 tuple() 或者切片操作符 ‘:’ 不会创建一份浅拷贝，相反它会返回一个指向相同元组的引用：</p>
<p>使用 tuple() 或者切片操作符 ‘:’ <strong>不会创建一份浅拷贝</strong>，因为它开辟新的内存存储的是<strong>原对象的引用</strong>，而没有创建新的对象来存储原对象的子对象的引用，所以不是浅拷贝。相反它会返回一个<strong>指向相同元组的引用。</strong></p>
<p>对字符串使用 str() 或者切片操作符 ‘:’，原理和 元组相同。</p>
<p>也就是说，对字符串和元组使用 copy（）、[:]、本身的构造器完成的复制，都只是开辟了内存存储原对象的引用，而不是存储原对象的子对象的引用。</p>
<h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><p>Python 中以 copy.deepcopy() 来实现对象的深度拷贝</p>
<h3 id="两者的优缺点对比"><a href="#两者的优缺点对比" class="headerlink" title="两者的优缺点对比"></a>两者的优缺点对比</h3><p>（1）深拷贝拷贝程度高，将原数据复制到新的内存空间中。改变拷贝后的内容不影响原数据内容。但是深拷贝耗时长，且占用内存空间。<br>（2）浅拷贝拷贝程度低，只复制原数据的地址。其实是将副本的地址指向原数据地址。修改副本内容，是通过当前地址指向原数据地址，去修改。所以修改副本内容会影响到原数据内容。但是浅拷贝耗时短，占用内存空间少</p>
]]></content>
      <tags>
        <tag>4</tag>
      </tags>
  </entry>
  <entry>
    <title>Python数据分析与挖掘</title>
    <url>/posts/c1c7733e.html</url>
    <content><![CDATA[<p><strong>数据挖掘与分析部分模块的实例及原理应用</strong></p>
<span id="more"></span>

<h1 id="Numpy学习"><a href="#Numpy学习" class="headerlink" title="Numpy学习"></a>Numpy学习</h1><table>
<thead>
<tr>
<th align="center">姓名</th>
<th align="center">语文</th>
<th align="center">英语</th>
<th align="center">数学</th>
</tr>
</thead>
<tbody><tr>
<td align="center">张飞</td>
<td align="center">66</td>
<td align="center">65</td>
<td align="center">30</td>
</tr>
<tr>
<td align="center">关羽</td>
<td align="center">95</td>
<td align="center">85</td>
<td align="center">98</td>
</tr>
<tr>
<td align="center">赵云</td>
<td align="center">93</td>
<td align="center">92</td>
<td align="center">96</td>
</tr>
<tr>
<td align="center">黄忠</td>
<td align="center">90</td>
<td align="center">88</td>
<td align="center">77</td>
</tr>
<tr>
<td align="center">典韦</td>
<td align="center">80</td>
<td align="center">90</td>
<td align="center">90</td>
</tr>
</tbody></table>
<h2 id="题目具体要求"><a href="#题目具体要求" class="headerlink" title="题目具体要求"></a>题目具体要求</h2><p>1、使用 Numpy 统计团队中成员的语文、英语、数学的平均成绩、最小成绩、最大成绩、方差、标准差。</p>
<p>2、把这些人的总成绩排序，得出名次进行成绩输出。</p>
<h2 id="Numpy基本原理"><a href="#Numpy基本原理" class="headerlink" title="Numpy基本原理"></a><strong>Numpy基本原理</strong></h2><p>Numpy 是 Python 语言的一个第三方库，其支持大量高维度<a href="https://so.csdn.net/so/search?q=%E6%95%B0%E7%BB%84&spm=1001.2101.3001.7020">数组</a>与矩阵运算。此外，NumPy 也针对数组运算提供大量的数学函数。Numpy 中定义的最重要的对象是称为 <code>ndarray</code> 的 N 维数组类型。 它描述相同类型的元素<a href="https://so.csdn.net/so/search?q=%E9%9B%86%E5%90%88&spm=1001.2101.3001.7020">集合</a>。 可以使用基于零的索引访问集合中的项目。</p>
<h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">persontype = np.dtype(&#123;<span class="string">&#x27;names&#x27;</span>: [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;chinese&#x27;</span>, <span class="string">&#x27;math&#x27;</span>, <span class="string">&#x27;english&#x27;</span>, <span class="string">&#x27;total&#x27;</span>], <span class="string">&#x27;formats&#x27;</span>: [<span class="string">&#x27;S32&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;i&#x27;</span>]&#125;)</span><br><span class="line">peoples = np.array([(<span class="string">&quot;zhang fei&quot;</span>, <span class="number">18</span>, <span class="number">66</span>, <span class="number">30</span>, <span class="number">65</span>, <span class="number">0</span>), (<span class="string">&quot;guan yu&quot;</span>, <span class="number">19</span>, <span class="number">95</span>, <span class="number">98</span>, <span class="number">85</span>, <span class="number">0</span>), (<span class="string">&quot;zhao yun&quot;</span>, <span class="number">20</span>, <span class="number">93</span>, <span class="number">96</span>, <span class="number">92</span>, <span class="number">0</span>), (<span class="string">&quot;huang zhong&quot;</span>, <span class="number">21</span>, <span class="number">90</span>, <span class="number">77</span>, <span class="number">88</span>, <span class="number">0</span>)], dtype=persontype)</span><br><span class="line"></span><br><span class="line">ages = peoples[:][<span class="string">&#x27;age&#x27;</span>]</span><br><span class="line">chineses = peoples[:][<span class="string">&#x27;chinese&#x27;</span>]</span><br><span class="line">maths = peoples[:][<span class="string">&#x27;math&#x27;</span>]</span><br><span class="line">englishs = peoples[:][<span class="string">&#x27;english&#x27;</span>]</span><br><span class="line">total = peoples[:][<span class="string">&#x27;total&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;各项平均值&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;年龄：&quot;</span>, np.mean(ages))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;语文：&quot;</span>, np.mean(chineses))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数学：&quot;</span>, np.mean(maths))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;英语：&quot;</span>, np.mean(englishs))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;各项最大值&quot;</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;年龄：&quot;</span>, np.amax(ages))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;语文：&quot;</span>, np.amax(chineses))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数学：&quot;</span>, np.amax(maths))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;英语：&quot;</span>, np.amax(englishs))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;各项最小值&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;年龄：&quot;</span>, np.amin(ages))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;语文：&quot;</span>, np.amin(chineses))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数学：&quot;</span>, np.amin(maths))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;英语：&quot;</span>, np.amin(englishs))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;各项标准差&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;年龄：&quot;</span>, np.std(ages))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;语文：&quot;</span>, np.std(chineses))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数学：&quot;</span>, np.std(maths))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;英语：&quot;</span>, np.std(englishs))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;各项方差&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;年龄：&quot;</span>, np.var(ages))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;语文：&quot;</span>, np.var(chineses))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数学：&quot;</span>, np.var(maths))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;英语：&quot;</span>, np.var(englishs))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;总成绩排序&quot;</span>)</span><br><span class="line">peoples[:][<span class="string">&#x27;total&#x27;</span>] = chineses + maths + englishs</span><br><span class="line">rank = <span class="built_in">sorted</span>(peoples, key=<span class="keyword">lambda</span> t: t[<span class="number">4</span>], reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> rank:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>

<h2 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">各项平均值</span><br><span class="line">年龄： 19.5</span><br><span class="line">语文： 86.0</span><br><span class="line">数学： 75.25</span><br><span class="line">英语： 82.5</span><br><span class="line"></span><br><span class="line">各项最大值</span><br><span class="line">年龄： 21</span><br><span class="line">语文： 95</span><br><span class="line">数学： 98</span><br><span class="line">英语： 92</span><br><span class="line"></span><br><span class="line">各项最小值</span><br><span class="line">年龄： 18</span><br><span class="line">语文： 66</span><br><span class="line">数学： 30</span><br><span class="line">英语： 65</span><br><span class="line"></span><br><span class="line">各项标准差</span><br><span class="line">年龄： 1.118033988749895</span><br><span class="line">语文： 11.683321445547923</span><br><span class="line">数学： 27.380421837510102</span><br><span class="line">英语： 10.404326023342406</span><br><span class="line"></span><br><span class="line">各项方差</span><br><span class="line">年龄： 1.25</span><br><span class="line">语文： 136.5</span><br><span class="line">数学： 749.6875</span><br><span class="line">英语： 108.25</span><br><span class="line"></span><br><span class="line">总成绩排序</span><br><span class="line">(b&#x27;zhao yun&#x27;, 20, 93, 96, 92, 281)</span><br><span class="line">(b&#x27;huang zhong&#x27;, 21, 90, 77, 88, 255)</span><br><span class="line">(b&#x27;guan yu&#x27;, 19, 95, 98, 85, 278)</span><br><span class="line">(b&#x27;zhang fei&#x27;, 18, 66, 30, 65, 161)</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="Pandas学习"><a href="#Pandas学习" class="headerlink" title="Pandas学习"></a>Pandas学习</h1><p>学习数据结构：Series 和 DataFrame</p>
<p>Series 是个定长的字典序列。说是定长是因为在存储的时候，相当于两个 ndarray，这也是和字典结构最大的不同。因为在字典的结构里，元素的个数是不固定的。</p>
<p>Series 有两个基本属性：index 和 values。在 Series 结构中，index 默认是 0,1,2,……递增的整数序列，当然也可以自己来指定索引，比如 index&#x3D;[‘a’, ‘b’, ‘c’, ‘d’]。</p>
<p>DataFrame 类型数据结构类似数据库表，它包括了行索引和列索引，可以将 DataFrame 看成是由相同索引的 Series 组成的字典类型。</p>
<p>(二)  Pandas数据清洗</p>
<p>1.删除 DataFrame 中的不必要的列或行；</p>
<p>2.重命名列名 columns，让列表名更容易识别；</p>
<p>3.去重复的值数据采集可能存在重复的行；</p>
<p>4.格式问题；</p>
<p>5.查找空值。</p>
<hr>
<h1 id="Kaggle竞赛-Titanic乘客生存预测"><a href="#Kaggle竞赛-Titanic乘客生存预测" class="headerlink" title="Kaggle竞赛-Titanic乘客生存预测"></a>Kaggle竞赛-Titanic乘客生存预测</h1><p>决策树与AdaBoost实验</p>
<h2 id="目标任务"><a href="#目标任务" class="headerlink" title="目标任务"></a><strong>目标任务</strong></h2><p>（1） 学习决策树、AdaBoost的原理，特性；</p>
<p>（2） 学习使用Python编写决策树和AdaBoost分类器；</p>
<p>（3） 学习使用sklearn训练决策树和AdaBoost，熟悉数据挖掘的一般流程.</p>
<hr>
<h2 id="实验数据"><a href="#实验数据" class="headerlink" title="实验数据"></a><strong>实验数据</strong></h2><p>Kaggle数据挖掘竞赛平台之Titanic 乘客生存预测。问题描述：泰坦尼克海难是著名的十大灾难之一，究竟多少人遇难，各方统计的结果不一。Kaggle数据挖掘竞赛平台的数据集数据集格式为 csv，一共有两个文件：train.csv 是训练数据集，包含特征信息和存活与否的标签；test.csv: 测试数据集，只包含特征信息。</p>
<p>在训练集中，包括了以下字段，它们具体为：</p>
<table>
<thead>
<tr>
<th align="left">字段</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">PassengerId</td>
<td>乘客编号</td>
</tr>
<tr>
<td align="left">Survived</td>
<td>是否幸存</td>
</tr>
<tr>
<td align="left">Pclass</td>
<td>船票等级</td>
</tr>
<tr>
<td align="left">Name</td>
<td>乘客姓名</td>
</tr>
<tr>
<td align="left">Sex</td>
<td>乘客性别</td>
</tr>
<tr>
<td align="left">SibSp</td>
<td>亲戚数量（兄妹、配偶数）</td>
</tr>
<tr>
<td align="left">Parch</td>
<td>亲戚数量（父母、子女数）</td>
</tr>
<tr>
<td align="left">Ticket</td>
<td>船票号码</td>
</tr>
<tr>
<td align="left">Fare</td>
<td>船票价格</td>
</tr>
<tr>
<td align="left">Cabin</td>
<td>船舱</td>
</tr>
<tr>
<td align="left">Embarked</td>
<td>登陆港口</td>
</tr>
</tbody></table>
<hr>
<h2 id="生存预测的关键流程"><a href="#生存预测的关键流程" class="headerlink" title="生存预测的关键流程"></a><strong>生存预测的关键流程</strong></h2><p>要对训练集中乘客的生存进行预测，这个过程可以划分为两个重要的阶段：</p>
<p>准备阶段：首先需要对训练集、测试集的数据进行探索，分析数据质量，并对数据进行清洗，然后通过特征选择对数据进行降维，方便后续分类运算；</p>
<p>分类阶段：首先通过训练集的特征矩阵、分类结果得到分类器，然后将分类器应用于测试集。然后对分类器的准确性进行分析，并对模型进行可视化。</p>
<h2 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a><strong>实验过程</strong></h2><h3 id="实验导入模块"><a href="#实验导入模块" class="headerlink" title="实验导入模块"></a>实验导入模块</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xgboost <span class="keyword">as</span> xgb</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> AdaBoostClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_score</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="数据探索"><a href="#数据探索" class="headerlink" title="数据探索"></a><strong>数据探索</strong></h3><ul>
<li><p>info():了解数据表的基本情况，包括行数、列数、每列的数据类型、数据完整度；</p>
</li>
<li><p>describe():了解数据表的统计情况，包括总数、平均值、标准差、最小值、最大值等；</p>
</li>
<li><p>describe(include&#x3D;[‘O’]):查看字符串类型（非数字）的整体情况；</p>
</li>
<li><p>head():查看前几行数据（默认是前 5 行）；</p>
</li>
<li><p>tail():查看后几行数据（默认是最后 5 行）。</p>
</li>
</ul>
<p>具体代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment"># 数据加载</span></span><br><span class="line">train_data = pd.read_csv(<span class="string">&#x27;Titanic.train.csv&#x27;</span>)</span><br><span class="line">test_data = pd.read_csv(<span class="string">&#x27;Titanic.test.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据探索</span></span><br><span class="line"><span class="built_in">print</span>(train_data.info())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">30</span>)</span><br><span class="line"><span class="built_in">print</span>(train_data.describe())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">30</span>)</span><br><span class="line"><span class="built_in">print</span>(train_data.describe(include=[<span class="string">&#x27;O&#x27;</span>]))  <span class="comment"># include后面是大写的O字母</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">30</span>)</span><br></pre></td></tr></table></figure>

<p>数据读取结果：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">class</span> &#x27;<span class="attr">pandas.core.frame.DataFrame</span>&#x27;&gt;</span></span></span><br><span class="line">RangeIndex: 891 entries, 0 to 890</span><br><span class="line">Data columns (total 12 columns):</span><br><span class="line"> #   Column       Non-Null Count  Dtype  </span><br><span class="line">---  ------       --------------  -----  </span><br><span class="line"> 0   PassengerId  891 non-null    int64  </span><br><span class="line"> 1   Survived     891 non-null    int64  </span><br><span class="line"> 2   Pclass       891 non-null    int64  </span><br><span class="line"> 3   Name         891 non-null    object </span><br><span class="line"> 4   Sex          891 non-null    object </span><br><span class="line"> 5   Age          714 non-null    float64</span><br><span class="line"> 6   SibSp        891 non-null    int64  </span><br><span class="line"> 7   Parch        891 non-null    int64  </span><br><span class="line"> 8   Ticket       891 non-null    object </span><br><span class="line"> 9   Fare         891 non-null    float64</span><br><span class="line"> 10  Cabin        204 non-null    object </span><br><span class="line"> 11  Embarked     891 non-null    object </span><br><span class="line">dtypes: float64(2), int64(5), object(5)</span><br><span class="line">memory usage: 83.7+ KB</span><br><span class="line">None</span><br></pre></td></tr></table></figure>



<h3 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a><strong>数据清洗</strong></h3><p>通过数据探索，我们发现 Age、Fare 和 Cabin 这三个字段的数据有所缺失。其中 Age 为年龄字段，是数值型，我们可以通过平均值进行补齐；Fare 为船票价格，是数值型，我们也可以通过其他人购买船票的平均值进行补齐。具体实现的代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用平均年龄来填充年龄中的nan值</span></span><br><span class="line">train_data[<span class="string">&#x27;Age&#x27;</span>].fillna(train_data[<span class="string">&#x27;Age&#x27;</span>].mean(), inplace=<span class="literal">True</span>)</span><br><span class="line">test_data[<span class="string">&#x27;Age&#x27;</span>].fillna(test_data[<span class="string">&#x27;Age&#x27;</span>].mean(), inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用票价的均值填充票价中的nan值</span></span><br><span class="line">train_data[<span class="string">&#x27;Fare&#x27;</span>].fillna(train_data[<span class="string">&#x27;Fare&#x27;</span>].mean(), inplace=<span class="literal">True</span>)</span><br><span class="line">test_data[<span class="string">&#x27;Fare&#x27;</span>].fillna(test_data[<span class="string">&#x27;Fare&#x27;</span>].mean(), inplace=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(train_data[<span class="string">&#x27;Embarked&#x27;</span>].value_counts())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用登录最多的港口来填充登录港口的nan值</span></span><br><span class="line">train_data[<span class="string">&#x27;Embarked&#x27;</span>].fillna(<span class="string">&#x27;S&#x27;</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">test_data[<span class="string">&#x27;Embarked&#x27;</span>].fillna(<span class="string">&#x27;S&#x27;</span>, inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<h3 id="特征选择"><a href="#特征选择" class="headerlink" title="特征选择"></a><strong>特征选择</strong></h3><p>特征选择是分类器的关键。特征选择不同，得到的分类器也不同。那么该选择哪些特征做生存的预测呢？</p>
<p>通过数据探索发现，PassengerId 为乘客编号，对分类没有作用，可以放弃；Name 为乘客姓名，对分类没有作用，可以放弃；Cabin 字段缺失值太多，可以放弃；Ticket 字段为船票号码，杂乱无章且无规律，可以放弃。其余的字段包括：Pclass、Sex、Age、SibSp、Parch 和 Fare，这些属性分别表示了乘客的船票等级、性别、年龄、亲戚数量以及船票价格，可能会和乘客的生存预测分类有关系。具体是什么关系，我们可以交给分类器来处理。因此先将 Pclass、Sex、Age 等这些其余的字段作特征，放到特征向量 features 里。</p>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 模块3：特征选择</span></span><br><span class="line">features = [<span class="string">&#x27;Pclass&#x27;</span>, <span class="string">&#x27;Sex&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>, <span class="string">&#x27;SibSp&#x27;</span>, <span class="string">&#x27;Parch&#x27;</span>, <span class="string">&#x27;Fare&#x27;</span>, <span class="string">&#x27;Embarked&#x27;</span>]</span><br><span class="line">train_features = train_data[features]</span><br><span class="line">train_labels = train_data[<span class="string">&#x27;Survived&#x27;</span>]</span><br><span class="line">test_features = test_data[features]</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_extraction <span class="keyword">import</span> DictVectorizer</span><br><span class="line">dvec = DictVectorizer(sparse=<span class="literal">False</span>)</span><br><span class="line">train_features = dvec.fit_transform(train_features.to_dict(orient=<span class="string">&#x27;record&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(dvec.feature_names_)</span><br></pre></td></tr></table></figure>

<p>数据读取结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">S    644</span><br><span class="line">C    168</span><br><span class="line">Q     77</span><br><span class="line">U      2</span><br><span class="line">Name: Embarked, dtype: int64</span><br></pre></td></tr></table></figure>



<h3 id="分类模型及模型的评价"><a href="#分类模型及模型的评价" class="headerlink" title="分类模型及模型的评价"></a><strong>分类模型及模型的评价</strong></h3><p>1） 使用 sklearn 中的决策树模型。使用 ID3 算法使用DecisionTreeClassifier 时，设置 criterion&#x3D;‘entropy’，然后使用 fit 进行训练，将特征值矩阵和分类标识结果作为参数传入，得到决策树分类器。</p>
<p>2） 使用 sklearn 中的集成学习模型Adaboost()</p>
<p>3） 采用 K 折交叉验证准确率。sklearn 的 model_selection 模型选择中提供了 cross_val_score 函数。</p>
<p>Ø K 折交叉验证的原理：</p>
<p>拿出大部分样本进行训练，少量的用于分类器的验证。K 折交叉验证，就是做 K 次交叉验证，每次选取 K 分之一的数据作为验证，其余作为训练。轮流 K 次，取平均值。</p>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 决策树弱分类器</span></span><br><span class="line">dt_stump = DecisionTreeClassifier(max_depth=<span class="number">7</span>, min_samples_leaf=<span class="number">5</span>)</span><br><span class="line">dt_stump.fit(train_features, train_labels)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">u&#x27;决策树弱分类器准确率为 %.4lf&#x27;</span> % np.mean(cross_val_score(dt_stump, train_features, train_labels, cv=<span class="number">10</span>)))</span><br><span class="line"><span class="comment"># 决策树分类器</span></span><br><span class="line">dt = DecisionTreeClassifier()</span><br><span class="line">dt.fit(train_features, train_labels)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">u&#x27;决策树分类器准确率为 %.4lf&#x27;</span> % np.mean(cross_val_score(dt, train_features, train_labels, cv=<span class="number">10</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># AdaBoost分类器</span></span><br><span class="line">ada = AdaBoostClassifier()</span><br><span class="line">ada.fit(train_features, train_labels)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">u&#x27;AdaBoost 分类器准确率为 %.4lf&#x27;</span> %</span><br><span class="line">np.mean(cross_val_score(ada, train_features, train_labels, cv=<span class="number">15</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># XGBoost分类器</span></span><br><span class="line">xgb = xgb.XGBClassifier(max_depth=<span class="number">8</span>, min_child_weight=<span class="number">3</span>)</span><br><span class="line">xgb.fit(train_features, train_labels)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">u&#x27;XGBoost 分类器准确率为 %.4lf&#x27;</span> %</span><br><span class="line">np.mean(cross_val_score(ada, train_features, train_labels, cv=<span class="number">15</span>)))</span><br></pre></td></tr></table></figure>

<h3 id="各个分类器准确率"><a href="#各个分类器准确率" class="headerlink" title="各个分类器准确率"></a>各个分类器准确率</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">决策树弱分类器准确率为 0.8228</span><br><span class="line">决策树分类器准确率为 0.7778</span><br><span class="line">AdaBoost 分类器准确率为 0.8183</span><br><span class="line">XGBoost 分类器准确率为 0.8183</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="银行客户违约信用分析"><a href="#银行客户违约信用分析" class="headerlink" title="银行客户违约信用分析"></a>银行客户违约信用分析</h1><p>对银行客户基本信息数据集进行分析，提取不同信息进行特征分析和预测，通过多种分类器算法预测客户违约行为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_extraction <span class="keyword">import</span> DictVectorizer</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_score</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> AdaBoostClassifier</span><br><span class="line"><span class="keyword">import</span> xgboost <span class="keyword">as</span> xgb</span><br><span class="line"><span class="keyword">from</span> xgboost <span class="keyword">import</span> XGBClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> MultinomialNB<span class="comment">#多项式朴素贝叶斯分类器</span></span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> LinearSVC</span><br><span class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> BernoulliNB</span><br></pre></td></tr></table></figure>

<h2 id="数据集读取转换csv文件预处理"><a href="#数据集读取转换csv文件预处理" class="headerlink" title="数据集读取转换csv文件预处理"></a>数据集读取转换csv文件预处理</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># datafile = &#x27;data.xls&#x27;</span></span><br><span class="line">resultfile = <span class="string">&#x27;data.csv&#x27;</span></span><br><span class="line">data = pd.read_excel(<span class="string">&#x27;data.xls&#x27;</span>)</span><br><span class="line">data.to_csv(resultfile)</span><br><span class="line"><span class="comment">## excel转成csv表头中文乱码</span></span><br></pre></td></tr></table></figure>

<h2 id="数据探索-1"><a href="#数据探索-1" class="headerlink" title="数据探索"></a>数据探索</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">datafile = <span class="string">&#x27;data.csv&#x27;</span></span><br><span class="line">data = pd.read_csv(datafile)</span><br><span class="line"><span class="built_in">print</span>(data.info())</span><br><span class="line">data1 = data.describe()</span><br><span class="line">data1.to_excel(<span class="string">&#x27;data_dexcribe.xls&#x27;</span>)</span><br></pre></td></tr></table></figure>

<img src="/posts/c1c7733e/1.png" class="">

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">weiyue = pd.value_counts(data[<span class="string">&#x27;违约&#x27;</span>])[<span class="number">1</span>]</span><br><span class="line">not_weiyue = pd.value_counts(data[<span class="string">&#x27;违约&#x27;</span>])[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘图</span></span><br><span class="line">fig = plt.figure(figsize = (<span class="number">8</span>, <span class="number">5</span>))  <span class="comment"># 设置画布大小</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;KaiTi&#x27;</span>]</span><br><span class="line">plt.bar(x=<span class="built_in">range</span>(<span class="number">2</span>), height=[weiyue, not_weiyue,], width=<span class="number">0.4</span>, alpha=<span class="number">0.8</span>, color=<span class="string">&#x27;skyblue&#x27;</span>)</span><br><span class="line">plt.xticks([index <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)], [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;0&#x27;</span>])</span><br><span class="line">plt.xlabel(<span class="string">&#x27;是否违约&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;客户人数&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;客户是否违约柱状图&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line">plt.close()</span><br><span class="line"><span class="comment">## 输出可见违约：未违约大概2:5</span></span><br></pre></td></tr></table></figure>

<img src="/posts/c1c7733e/2.png" class="">

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 绘制 是否违约客户 与 年龄 的分布</span></span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="comment">## 提取年龄</span></span><br><span class="line">age = data[<span class="string">&#x27;年龄&#x27;</span>].dropna()</span><br><span class="line">age = age.astype(<span class="string">&#x27;int64&#x27;</span>)</span><br><span class="line"><span class="comment">## 绘制客户年龄分布箱型图</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line">fig, axes = plt.subplots(<span class="number">1</span>, <span class="number">3</span>, figsize=(<span class="number">10</span>, <span class="number">5</span>))</span><br><span class="line">sns.distplot(data[<span class="string">&quot;年龄&quot;</span>], ax = axes[<span class="number">0</span>], axlabel=<span class="string">&#x27;所有客户年龄分布&#x27;</span>)</span><br><span class="line">sns.distplot(data.loc[data[<span class="string">&quot;违约&quot;</span>]==<span class="number">0</span>][<span class="string">&quot;年龄&quot;</span>], ax = axes[<span class="number">1</span>], axlabel = <span class="string">&#x27;非违约客户年龄分布&#x27;</span>)</span><br><span class="line">sns.distplot(data.loc[data[<span class="string">&quot;违约&quot;</span>]==<span class="number">1</span>][<span class="string">&quot;年龄&quot;</span>], ax = axes[<span class="number">2</span>], axlabel = <span class="string">&#x27;违约客户年龄分布&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line">plt.close()</span><br></pre></td></tr></table></figure>

<img src="/posts/c1c7733e/3.png" class="">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 客户年龄中存在300岁，需要数据清洗删除异常值，用年龄均值填充</span></span><br><span class="line"><span class="comment"># plt.title(&#x27;客户是否违约柱状图&#x27;)</span></span><br><span class="line"><span class="comment"># plt.show()</span></span><br><span class="line"><span class="comment"># plt.close()</span></span><br><span class="line"><span class="comment"># 均值填充年龄</span></span><br><span class="line">data[<span class="string">&#x27;年龄&#x27;</span>].fillna(data[<span class="string">&#x27;年龄&#x27;</span>].mean(), inplace=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 删除年龄大于80的数据</span></span><br><span class="line">data.drop(data[(data[<span class="string">&#x27;年龄&#x27;</span>] &gt; <span class="number">80</span>)].index.tolist(), inplace=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(data[<span class="string">&quot;年龄&quot;</span>].describe())</span><br><span class="line"><span class="comment"># 将性别数据分别用female=1，male=0表示</span></span><br><span class="line">data.loc[data[<span class="string">&quot;性别&quot;</span>] == <span class="string">&quot;male&quot;</span>, <span class="string">&quot;性别&quot;</span>] = <span class="number">0</span></span><br><span class="line">data.loc[data[<span class="string">&quot;性别&quot;</span>] == <span class="string">&quot;female&quot;</span>, <span class="string">&quot;性别&quot;</span>] = <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>性别特性处理：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">count    699.000000</span><br><span class="line">mean      34.863308</span><br><span class="line">std        7.967906</span><br><span class="line">min       20.000000</span><br><span class="line">25%       29.000000</span><br><span class="line">50%       34.000000</span><br><span class="line">75%       40.000000</span><br><span class="line">max       56.000000</span><br><span class="line">Name: 年龄, dtype: float64</span><br></pre></td></tr></table></figure>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 计算相关性矩阵</span></span><br><span class="line">data_corr = data</span><br><span class="line">dt_corr = data_corr.corr(method = <span class="string">&#x27;pearson&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;相关性矩阵为：\n&#x27;</span>, dt_corr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制热力图</span></span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line">plt.subplots(figsize=(<span class="number">10</span>, <span class="number">10</span>))</span><br><span class="line">sns.heatmap(dt_corr, annot=<span class="literal">True</span>, vmax=<span class="number">1</span>, square=<span class="literal">True</span>, cmap=<span class="string">&#x27;Blues&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line">plt.close()</span><br></pre></td></tr></table></figure>

<img src="/posts/c1c7733e/4.png" class="">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_extraction <span class="keyword">import</span> DictVectorizer</span><br><span class="line"><span class="comment"># 通过分析选择合适的特征用于预测</span></span><br><span class="line">features = [<span class="string">&#x27;年龄&#x27;</span>, <span class="string">&#x27;教育&#x27;</span>, <span class="string">&#x27;工龄&#x27;</span>, <span class="string">&#x27;地址&#x27;</span>, <span class="string">&#x27;负债率&#x27;</span>, <span class="string">&#x27;信用卡负债&#x27;</span>, <span class="string">&#x27;收入&#x27;</span>]</span><br><span class="line">features_train = data[features]</span><br><span class="line">train_label = data[<span class="string">&#x27;违约&#x27;</span>]</span><br><span class="line">dev = DictVectorizer(sparse=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 转化成字典型</span></span><br><span class="line">features_train = dev.fit_transform(features_train.to_dict(orient=<span class="string">&#x27;record&#x27;</span>))</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(features_train,train_label,test_size=<span class="number">0.3</span>, random_state=<span class="number">23</span>,shuffle=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.neural_network <span class="keyword">import</span> MLPClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> confusion_matrix, classification_report</span><br><span class="line"><span class="keyword">import</span> sklearn.metrics <span class="keyword">as</span> metrics</span><br><span class="line"><span class="comment">#import sklearn.metrics.roc</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Confusion_matrix</span>(<span class="params">model</span>):</span><br><span class="line">    <span class="built_in">print</span>(confusion_matrix(y_test, model.predict(X_test)))  <span class="comment"># 混淆矩阵</span></span><br><span class="line">    <span class="built_in">print</span>(classification_report(y_test, model.predict(X_test)))  <span class="comment"># 分类报告</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="comment"># 混淆矩阵可视化</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plot_confusion_matrix</span>(<span class="params">cm, classes, normalize = <span class="literal">False</span>, title = <span class="string">&#x27;Confusion matrix&quot;&#x27;</span>, cmap = plt.cm.Blues</span>) :</span><br><span class="line">    plt.figure()</span><br><span class="line">    plt.imshow(cm, interpolation = <span class="string">&#x27;nearest&#x27;</span>, cmap = cmap)</span><br><span class="line">    plt.title(title)</span><br><span class="line">    plt.colorbar()</span><br><span class="line">    tick_marks = np.arange(<span class="built_in">len</span>(classes))</span><br><span class="line">    plt.xticks(tick_marks, classes, rotation = <span class="number">0</span>)</span><br><span class="line">    plt.yticks(tick_marks, classes)</span><br><span class="line"> </span><br><span class="line">    thresh = cm.<span class="built_in">max</span>() / <span class="number">2.</span></span><br><span class="line">    <span class="keyword">for</span> i, j <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(cm.shape[<span class="number">0</span>]), <span class="built_in">range</span>(cm.shape[<span class="number">1</span>])) :</span><br><span class="line">        plt.text(j, i, cm[i, j],</span><br><span class="line">                 horizontalalignment = <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">                 color = <span class="string">&#x27;white&#x27;</span> <span class="keyword">if</span> cm[i, j] &gt; thresh <span class="keyword">else</span> <span class="string">&#x27;black&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">    plt.tight_layout()</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;True label&#x27;</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;Predicted label&#x27;</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>

<h2 id="不同分类器处理结果呈现"><a href="#不同分类器处理结果呈现" class="headerlink" title="不同分类器处理结果呈现"></a>不同分类器处理结果呈现</h2><h3 id="决策树与决策树弱分类器"><a href="#决策树与决策树弱分类器" class="headerlink" title="决策树与决策树弱分类器"></a>决策树与决策树弱分类器</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#决策树分类器</span></span><br><span class="line">dt = DecisionTreeClassifier(max_depth=<span class="number">3</span>,min_samples_leaf=<span class="number">1</span>)</span><br><span class="line">dt.fit(features_train, train_label)</span><br><span class="line"></span><br><span class="line"><span class="comment">#决策树弱分类器</span></span><br><span class="line">dt_stump =DecisionTreeClassifier()</span><br><span class="line">dt_stump.fit(features_train,train_label)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 决策树分类器</span></span><br><span class="line">dt.fit(X_train, y_train)</span><br><span class="line">predict_y = dt.predict(X_test)</span><br><span class="line"></span><br><span class="line">cm1 = confusion_matrix(y_test, predict_y)</span><br><span class="line">class_names = [<span class="string">&#x27;违约&#x27;</span>, <span class="string">&#x27;未违约&#x27;</span>]</span><br><span class="line"><span class="comment"># 显示混淆矩阵</span></span><br><span class="line">plot_confusion_matrix(cm1, classes=class_names, title=<span class="string">&#x27;决策树分类&#x27;</span>)</span><br><span class="line"></span><br><span class="line">Confusion_matrix(dt)</span><br></pre></td></tr></table></figure>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 决策树分类器</span></span><br><span class="line">dt.fit(X_train, y_train)</span><br><span class="line">predict_y = dt.predict(X_test)</span><br><span class="line"></span><br><span class="line">cm1 = confusion_matrix(y_test, predict_y)</span><br><span class="line">class_names = [<span class="string">&#x27;违约&#x27;</span>, <span class="string">&#x27;未违约&#x27;</span>]</span><br><span class="line"><span class="comment"># 显示混淆矩阵</span></span><br><span class="line">plot_confusion_matrix(cm1, classes=class_names, title=<span class="string">&#x27;决策树分类&#x27;</span>)</span><br><span class="line"></span><br><span class="line">Confusion_matrix(dt)</span><br></pre></td></tr></table></figure>

<p>决策树分类器 混淆矩阵：</p>
<img src="/posts/c1c7733e/5.png" class="">

<p>决策树分类器 分类报告：</p>
<img src="/posts/c1c7733e/6.png" class="">

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 决策树弱分类器</span></span><br><span class="line"><span class="comment">#dt_stump = DecisionTreeClassifier()</span></span><br><span class="line">dt_stump.fit(X_train, y_train)</span><br><span class="line">predict_y = dt_stump.predict(X_test)</span><br><span class="line"><span class="comment">#score_y = dt_stump.decision_function(X_test)</span></span><br><span class="line">cm1 = confusion_matrix(y_test, predict_y)</span><br><span class="line">class_names = [<span class="string">&#x27;违约&#x27;</span>, <span class="string">&#x27;未违约&#x27;</span>]</span><br><span class="line"><span class="comment"># 显示混淆矩阵</span></span><br><span class="line">plot_confusion_matrix(cm1, classes=class_names, title=<span class="string">&#x27;决策树弱分类&#x27;</span>)</span><br><span class="line"></span><br><span class="line">Confusion_matrix(dt_stump)</span><br></pre></td></tr></table></figure>

<p>决策树弱分类器 混淆矩阵：</p>
<img src="/posts/c1c7733e/7.png" class="">

<p>决策树弱分类器 分类报告：</p>
<img src="/posts/c1c7733e/8.png" class="">

<h3 id="AdaBoost"><a href="#AdaBoost" class="headerlink" title="AdaBoost"></a>AdaBoost</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#AdaBoost分类器 基分类器提升（循环）次数,随机种子设置,</span></span><br><span class="line">ada = AdaBoostClassifier(n_estimators = <span class="number">10</span>,random_state = <span class="number">10</span>,learning_rate=<span class="number">1.1</span>)</span><br><span class="line">ada.fit(features_train,train_label)</span><br><span class="line"></span><br><span class="line">ada.fit(X_train, y_train)</span><br><span class="line">predict_y = ada.predict(X_test)</span><br><span class="line"></span><br><span class="line">cm2 = confusion_matrix(y_test, predict_y)</span><br><span class="line"></span><br><span class="line">class_names = [<span class="string">&#x27;违约&#x27;</span>, <span class="string">&#x27;未违约&#x27;</span>]</span><br><span class="line"><span class="comment"># 显示混淆矩阵</span></span><br><span class="line">plot_confusion_matrix(cm2, classes=class_names, title=<span class="string">&#x27;AdaBoost分类器&#x27;</span>)</span><br><span class="line"></span><br><span class="line">Confusion_matrix(ada)</span><br></pre></td></tr></table></figure>

<p>AdaBoost分类器 混淆矩阵：</p>
<img src="/posts/c1c7733e/9.png" class="">

<p>AdaBoost分类器 分类报告：</p>
<img src="/posts/c1c7733e/10.png" class="">

<h3 id="XGBoost"><a href="#XGBoost" class="headerlink" title="XGBoost"></a>XGBoost</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#XGBoost分类器</span></span><br><span class="line"><span class="comment">#xgb = XGBClassifier(n_estimators = 350, learning_rate=0.2)</span></span><br><span class="line">xgb = XGBClassifier()</span><br><span class="line">xgb.fit(features_train,train_label)</span><br><span class="line"></span><br><span class="line">xgb.fit(X_train, y_train)</span><br><span class="line">predict_y = xgb.predict(X_test)</span><br><span class="line"><span class="comment">#score_y = dt_stump.decision_function(X_test)</span></span><br><span class="line">cm3 = confusion_matrix(y_test, predict_y)</span><br><span class="line">class_names = [<span class="string">&#x27;违约&#x27;</span>, <span class="string">&#x27;未违约&#x27;</span>]</span><br><span class="line"><span class="comment"># 显示混淆矩阵</span></span><br><span class="line">plot_confusion_matrix(cm3, classes=class_names, title=<span class="string">&#x27;XGBoost分类器&#x27;</span>)</span><br><span class="line"></span><br><span class="line">Confusion_matrix(xgb)</span><br></pre></td></tr></table></figure>

<p>XGBoost分类器 混淆矩阵：</p>
<img src="/posts/c1c7733e/11.png" class="">

<p>XGBoost分类器 分类报告：</p>
<img src="/posts/c1c7733e/12.png" class="">

<h3 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 逻辑回归分类器</span></span><br><span class="line">log = LogisticRegression()</span><br><span class="line">log.fit(features_train, train_label)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 逻辑回归分类器</span></span><br><span class="line">log = LogisticRegression()</span><br><span class="line">log.fit(X_train, y_train)</span><br><span class="line">predict_y = log.predict(X_test)</span><br><span class="line">score_y = log.decision_function(X_test)</span><br><span class="line">cm = confusion_matrix(y_test, predict_y)</span><br><span class="line">class_names = [<span class="string">&#x27;违约&#x27;</span>, <span class="string">&#x27;未违约&#x27;</span>]</span><br><span class="line"><span class="comment"># 显示混淆矩阵</span></span><br><span class="line">plot_confusion_matrix(cm, classes=class_names, title=<span class="string">&#x27;逻辑回归&#x27;</span>)</span><br><span class="line"></span><br><span class="line">Confusion_matrix(log)</span><br></pre></td></tr></table></figure>

<p>逻辑回归 混淆矩阵：</p>
<img src="/posts/c1c7733e/13.png" class="">

<p>逻辑回归 分类报告：</p>
<img src="/posts/c1c7733e/14.png" class="">

<h3 id="朴素贝叶斯"><a href="#朴素贝叶斯" class="headerlink" title="朴素贝叶斯"></a>朴素贝叶斯</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 多项朴素贝叶斯分类器</span></span><br><span class="line">mul = MultinomialNB()</span><br><span class="line"><span class="comment">#mul.fit(features_train, train_label)</span></span><br><span class="line">mul.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment">#mul.fit(X_train, y_train)</span></span><br><span class="line">predict_y = mul.predict(X_test)</span><br><span class="line"><span class="comment">#score_y = mul.decision_function(X_test)</span></span><br><span class="line">cm4 = confusion_matrix(y_test, predict_y)</span><br><span class="line">class_names = [<span class="string">&#x27;违约&#x27;</span>, <span class="string">&#x27;未违约&#x27;</span>]</span><br><span class="line"><span class="comment"># 显示混淆矩阵</span></span><br><span class="line">plot_confusion_matrix(cm4, classes=class_names, title=<span class="string">&#x27;多项朴素贝叶斯&#x27;</span>)</span><br><span class="line"></span><br><span class="line">Confusion_matrix(mul)</span><br></pre></td></tr></table></figure>

<p>朴素贝叶斯 混淆矩阵：</p>
<img src="/posts/c1c7733e/15.png" class="">

<p>朴素贝叶斯 分类报告：</p>
<img src="/posts/c1c7733e/16.png" class="">

<h2 id="结果整合"><a href="#结果整合" class="headerlink" title="结果整合"></a>结果整合</h2><img src="/posts/c1c7733e/17.png" class="">

<hr>
<h1 id="GMM聚类"><a href="#GMM聚类" class="headerlink" title="GMM聚类"></a>GMM聚类</h1><p>EM算法处理王者荣耀英雄属性数据集</p>
<h2 id="使用EM算法工具完成聚类分析算法"><a href="#使用EM算法工具完成聚类分析算法" class="headerlink" title="使用EM算法工具完成聚类分析算法"></a>使用EM算法工具完成聚类分析算法</h2><p>实验目的： 学习使用EM算法工具完成聚类分析算法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#实验使用的工具包</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">from</span> sklearn.mixture <span class="keyword">import</span> GaussianMixture</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<h3 id="数据读取"><a href="#数据读取" class="headerlink" title="数据读取"></a>数据读取</h3><p>任务一：数据加载，避免中文乱码问题完成</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数据读取,请填写相应的代码！</span></span><br><span class="line">data_ori = pd.read_csv(<span class="string">&#x27;heros.csv&#x27;</span>, encoding=<span class="string">&#x27;gb18030&#x27;</span>)</span><br><span class="line">features = [<span class="string">u&#x27;最大生命&#x27;</span>,<span class="string">u&#x27;生命成长&#x27;</span>,<span class="string">u&#x27;初始生命&#x27;</span>,<span class="string">u&#x27;最大法力&#x27;</span>, <span class="string">u&#x27;法力成长&#x27;</span>,<span class="string">u&#x27;初始法力&#x27;</span>,<span class="string">u&#x27;最高物攻&#x27;</span>,<span class="string">u&#x27;物攻成长&#x27;</span>,<span class="string">u&#x27;初始物攻&#x27;</span>,<span class="string">u&#x27;最大物防&#x27;</span>,<span class="string">u&#x27;物防成长&#x27;</span>,<span class="string">u&#x27;初始物防&#x27;</span>, <span class="string">u&#x27;最大每5秒回血&#x27;</span>, <span class="string">u&#x27;每5秒回血成长&#x27;</span>, <span class="string">u&#x27;初始每5秒回血&#x27;</span>, <span class="string">u&#x27;最大每5秒回蓝&#x27;</span>, <span class="string">u&#x27;每5秒回蓝成长&#x27;</span>, <span class="string">u&#x27;初始每5秒回蓝&#x27;</span>, <span class="string">u&#x27;最大攻速&#x27;</span>, <span class="string">u&#x27;攻击范围&#x27;</span>]</span><br><span class="line">data = data_ori[features]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对英雄属性之间的关系进行可视化分析</span></span><br><span class="line"><span class="comment"># 设置 plt 正确显示中文</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>]=[<span class="string">&#x27;SimHei&#x27;</span>] <span class="comment"># 用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>]=<span class="literal">False</span> <span class="comment"># 用来正常显示负号</span></span><br></pre></td></tr></table></figure>

<h3 id="数据探索-2"><a href="#数据探索-2" class="headerlink" title="数据探索"></a>数据探索</h3><p>任务二：编写计算特征之间相似度的代码</p>
<p>用热力图呈现 features_mean 字段之间的相关性 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#填写相应代码！！</span></span><br><span class="line">corr = data[features].corr()</span><br><span class="line"><span class="built_in">print</span>(corr)</span><br><span class="line">             最大生命      生命成长      初始生命      最大法力      法力成长      初始法力      最高物攻  \</span><br><span class="line">最大生命     <span class="number">1.000000</span>  <span class="number">0.977408</span>  <span class="number">0.761300</span> -<span class="number">0.220133</span> -<span class="number">0.207130</span> -<span class="number">0.260449</span> -<span class="number">0.246412</span>   </span><br><span class="line">生命成长     <span class="number">0.977408</span>  <span class="number">1.000000</span>  <span class="number">0.658106</span> -<span class="number">0.224112</span> -<span class="number">0.212271</span> -<span class="number">0.260464</span> -<span class="number">0.268377</span>   </span><br><span class="line">初始生命     <span class="number">0.761300</span>  <span class="number">0.658106</span>  <span class="number">1.000000</span> -<span class="number">0.189349</span> -<span class="number">0.178674</span> -<span class="number">0.222314</span> -<span class="number">0.140356</span>   </span><br><span class="line">最大法力    -<span class="number">0.220133</span> -<span class="number">0.224112</span> -<span class="number">0.189349</span>  <span class="number">1.000000</span>  <span class="number">0.998958</span>  <span class="number">0.988178</span> -<span class="number">0.180428</span>   </span><br><span class="line">法力成长    -<span class="number">0.207130</span> -<span class="number">0.212271</span> -<span class="number">0.178674</span>  <span class="number">0.998958</span>  <span class="number">1.000000</span>  <span class="number">0.980154</span> -<span class="number">0.175029</span>   </span><br><span class="line">初始法力    -<span class="number">0.260449</span> -<span class="number">0.260464</span> -<span class="number">0.222314</span>  <span class="number">0.988178</span>  <span class="number">0.980154</span>  <span class="number">1.000000</span> -<span class="number">0.195800</span>   </span><br><span class="line">最高物攻    -<span class="number">0.246412</span> -<span class="number">0.268377</span> -<span class="number">0.140356</span> -<span class="number">0.180428</span> -<span class="number">0.175029</span> -<span class="number">0.195800</span>  <span class="number">1.000000</span>   </span><br><span class="line">物攻成长    -<span class="number">0.230507</span> -<span class="number">0.248988</span> -<span class="number">0.121609</span> -<span class="number">0.197617</span> -<span class="number">0.191883</span> -<span class="number">0.213851</span>  <span class="number">0.986098</span>   </span><br><span class="line">初始物攻    -<span class="number">0.195840</span> -<span class="number">0.223728</span> -<span class="number">0.161278</span>  <span class="number">0.003153</span>  <span class="number">0.003966</span>  <span class="number">0.000371</span>  <span class="number">0.536409</span>   </span><br><span class="line">最大物防     <span class="number">0.862472</span>  <span class="number">0.879106</span>  <span class="number">0.529737</span> -<span class="number">0.210425</span> -<span class="number">0.200722</span> -<span class="number">0.239802</span> -<span class="number">0.227352</span>   </span><br><span class="line">物防成长     <span class="number">0.832795</span>  <span class="number">0.847654</span>  <span class="number">0.528719</span> -<span class="number">0.226732</span> -<span class="number">0.217018</span> -<span class="number">0.255893</span> -<span class="number">0.182300</span>   </span><br><span class="line">初始物防     <span class="number">0.746460</span>  <span class="number">0.764736</span>  <span class="number">0.403032</span> -<span class="number">0.106082</span> -<span class="number">0.098780</span> -<span class="number">0.128992</span> -<span class="number">0.316263</span>   </span><br><span class="line">最大每<span class="number">5</span>秒回血  <span class="number">0.951013</span>  <span class="number">0.943635</span>  <span class="number">0.688104</span> -<span class="number">0.224234</span> -<span class="number">0.212305</span> -<span class="number">0.260875</span> -<span class="number">0.290216</span>   </span><br><span class="line">每<span class="number">5</span>秒回血成长  <span class="number">0.967369</span>  <span class="number">0.972436</span>  <span class="number">0.647438</span> -<span class="number">0.190258</span> -<span class="number">0.177943</span> -<span class="number">0.228721</span> -<span class="number">0.246922</span>   </span><br><span class="line">初始每<span class="number">5</span>秒回血  <span class="number">0.829468</span>  <span class="number">0.798746</span>  <span class="number">0.701547</span> -<span class="number">0.268561</span> -<span class="number">0.258510</span> -<span class="number">0.298217</span> -<span class="number">0.346468</span>   </span><br><span class="line">最大每<span class="number">5</span>秒回蓝 -<span class="number">0.286851</span> -<span class="number">0.297569</span> -<span class="number">0.224674</span>  <span class="number">0.872025</span>  <span class="number">0.853143</span>  <span class="number">0.922108</span> -<span class="number">0.193140</span>   </span><br><span class="line">每<span class="number">5</span>秒回蓝成长 -<span class="number">0.207165</span> -<span class="number">0.212225</span> -<span class="number">0.179819</span>  <span class="number">0.996253</span>  <span class="number">0.997483</span>  <span class="number">0.976856</span> -<span class="number">0.179123</span>   </span><br><span class="line">初始每<span class="number">5</span>秒回蓝 -<span class="number">0.279098</span> -<span class="number">0.292439</span> -<span class="number">0.199537</span>  <span class="number">0.450477</span>  <span class="number">0.415945</span>  <span class="number">0.559600</span> -<span class="number">0.145060</span>   </span><br><span class="line"></span><br><span class="line">             物攻成长      初始物攻      最大物防      物防成长      初始物防   最大每<span class="number">5</span>秒回血   每<span class="number">5</span>秒回血成长  \</span><br><span class="line">最大生命    -<span class="number">0.230507</span> -<span class="number">0.195840</span>  <span class="number">0.862472</span>  <span class="number">0.832795</span>  <span class="number">0.746460</span>  <span class="number">0.951013</span>  <span class="number">0.967369</span>   </span><br><span class="line">生命成长    -<span class="number">0.248988</span> -<span class="number">0.223728</span>  <span class="number">0.879106</span>  <span class="number">0.847654</span>  <span class="number">0.764736</span>  <span class="number">0.943635</span>  <span class="number">0.972436</span>   </span><br><span class="line">初始生命    -<span class="number">0.121609</span> -<span class="number">0.161278</span>  <span class="number">0.529737</span>  <span class="number">0.528719</span>  <span class="number">0.403032</span>  <span class="number">0.688104</span>  <span class="number">0.647438</span>   </span><br><span class="line">最大法力    -<span class="number">0.197617</span>  <span class="number">0.003153</span> -<span class="number">0.210425</span> -<span class="number">0.226732</span> -<span class="number">0.106082</span> -<span class="number">0.224234</span> -<span class="number">0.190258</span>   </span><br><span class="line">法力成长    -<span class="number">0.191883</span>  <span class="number">0.003966</span> -<span class="number">0.200722</span> -<span class="number">0.217018</span> -<span class="number">0.098780</span> -<span class="number">0.212305</span> -<span class="number">0.177943</span>   </span><br><span class="line">初始法力    -<span class="number">0.213851</span>  <span class="number">0.000371</span> -<span class="number">0.239802</span> -<span class="number">0.255893</span> -<span class="number">0.128992</span> -<span class="number">0.260875</span> -<span class="number">0.228721</span>   </span><br><span class="line">最高物攻     <span class="number">0.986098</span>  <span class="number">0.536409</span> -<span class="number">0.227352</span> -<span class="number">0.182300</span> -<span class="number">0.316263</span> -<span class="number">0.290216</span> -<span class="number">0.246922</span>   </span><br><span class="line">物攻成长     <span class="number">1.000000</span>  <span class="number">0.388718</span> -<span class="number">0.218394</span> -<span class="number">0.170773</span> -<span class="number">0.317801</span> -<span class="number">0.276067</span> -<span class="number">0.231988</span>   </span><br><span class="line">初始物攻     <span class="number">0.388718</span>  <span class="number">1.000000</span> -<span class="number">0.151566</span> -<span class="number">0.143719</span> -<span class="number">0.139327</span> -<span class="number">0.207319</span> -<span class="number">0.191102</span>   </span><br><span class="line">最大物防    -<span class="number">0.218394</span> -<span class="number">0.151566</span>  <span class="number">1.000000</span>  <span class="number">0.983223</span>  <span class="number">0.808768</span>  <span class="number">0.864672</span>  <span class="number">0.883474</span>   </span><br><span class="line">物防成长    -<span class="number">0.170773</span> -<span class="number">0.143719</span>  <span class="number">0.983223</span>  <span class="number">1.000000</span>  <span class="number">0.687920</span>  <span class="number">0.836301</span>  <span class="number">0.849445</span>   </span><br><span class="line">初始物防    -<span class="number">0.317801</span> -<span class="number">0.139327</span>  <span class="number">0.808768</span>  <span class="number">0.687920</span>  <span class="number">1.000000</span>  <span class="number">0.743957</span>  <span class="number">0.776385</span>   </span><br><span class="line">最大每<span class="number">5</span>秒回血 -<span class="number">0.276067</span> -<span class="number">0.207319</span>  <span class="number">0.864672</span>  <span class="number">0.836301</span>  <span class="number">0.743957</span>  <span class="number">1.000000</span>  <span class="number">0.983556</span>   </span><br><span class="line">每<span class="number">5</span>秒回血成长 -<span class="number">0.231988</span> -<span class="number">0.191102</span>  <span class="number">0.883474</span>  <span class="number">0.849445</span>  <span class="number">0.776385</span>  <span class="number">0.983556</span>  <span class="number">1.000000</span>   </span><br><span class="line">初始每<span class="number">5</span>秒回血 -<span class="number">0.335171</span> -<span class="number">0.219081</span>  <span class="number">0.746610</span>  <span class="number">0.731842</span>  <span class="number">0.611008</span>  <span class="number">0.937169</span>  <span class="number">0.858750</span>   </span><br><span class="line">最大每<span class="number">5</span>秒回蓝 -<span class="number">0.226294</span>  <span class="number">0.078473</span> -<span class="number">0.269346</span> -<span class="number">0.282500</span> -<span class="number">0.160954</span> -<span class="number">0.267749</span> -<span class="number">0.247764</span>   </span><br><span class="line">每<span class="number">5</span>秒回蓝成长 -<span class="number">0.196605</span>  <span class="number">0.005237</span> -<span class="number">0.202790</span> -<span class="number">0.217446</span> -<span class="number">0.105629</span> -<span class="number">0.202148</span> -<span class="number">0.169121</span>   </span><br><span class="line">初始每<span class="number">5</span>秒回蓝 -<span class="number">0.184345</span>  <span class="number">0.132174</span> -<span class="number">0.253111</span> -<span class="number">0.260324</span> -<span class="number">0.168099</span> -<span class="number">0.250934</span> -<span class="number">0.251700</span>   </span><br><span class="line"></span><br><span class="line">          初始每<span class="number">5</span>秒回血   最大每<span class="number">5</span>秒回蓝   每<span class="number">5</span>秒回蓝成长   初始每<span class="number">5</span>秒回蓝  </span><br><span class="line">最大生命     <span class="number">0.829468</span> -<span class="number">0.286851</span> -<span class="number">0.207165</span> -<span class="number">0.279098</span>  </span><br><span class="line">生命成长     <span class="number">0.798746</span> -<span class="number">0.297569</span> -<span class="number">0.212225</span> -<span class="number">0.292439</span>  </span><br><span class="line">初始生命     <span class="number">0.701547</span> -<span class="number">0.224674</span> -<span class="number">0.179819</span> -<span class="number">0.199537</span>  </span><br><span class="line">最大法力    -<span class="number">0.268561</span>  <span class="number">0.872025</span>  <span class="number">0.996253</span>  <span class="number">0.450477</span>  </span><br><span class="line">法力成长    -<span class="number">0.258510</span>  <span class="number">0.853143</span>  <span class="number">0.997483</span>  <span class="number">0.415945</span>  </span><br><span class="line">初始法力    -<span class="number">0.298217</span>  <span class="number">0.922108</span>  <span class="number">0.976856</span>  <span class="number">0.559600</span>  </span><br><span class="line">最高物攻    -<span class="number">0.346468</span> -<span class="number">0.193140</span> -<span class="number">0.179123</span> -<span class="number">0.145060</span>  </span><br><span class="line">物攻成长    -<span class="number">0.335171</span> -<span class="number">0.226294</span> -<span class="number">0.196605</span> -<span class="number">0.184345</span>  </span><br><span class="line">初始物攻    -<span class="number">0.219081</span>  <span class="number">0.078473</span>  <span class="number">0.005237</span>  <span class="number">0.132174</span>  </span><br><span class="line">最大物防     <span class="number">0.746610</span> -<span class="number">0.269346</span> -<span class="number">0.202790</span> -<span class="number">0.253111</span>  </span><br><span class="line">物防成长     <span class="number">0.731842</span> -<span class="number">0.282500</span> -<span class="number">0.217446</span> -<span class="number">0.260324</span>  </span><br><span class="line">初始物防     <span class="number">0.611008</span> -<span class="number">0.160954</span> -<span class="number">0.105629</span> -<span class="number">0.168099</span>  </span><br><span class="line">最大每<span class="number">5</span>秒回血  <span class="number">0.937169</span> -<span class="number">0.267749</span> -<span class="number">0.202148</span> -<span class="number">0.250934</span>  </span><br><span class="line">每<span class="number">5</span>秒回血成长  <span class="number">0.858750</span> -<span class="number">0.247764</span> -<span class="number">0.169121</span> -<span class="number">0.251700</span>  </span><br><span class="line">初始每<span class="number">5</span>秒回血  <span class="number">1.000000</span> -<span class="number">0.280945</span> -<span class="number">0.246737</span> -<span class="number">0.225670</span>  </span><br><span class="line">最大每<span class="number">5</span>秒回蓝 -<span class="number">0.280945</span>  <span class="number">1.000000</span>  <span class="number">0.856248</span>  <span class="number">0.827604</span>  </span><br><span class="line">每<span class="number">5</span>秒回蓝成长 -<span class="number">0.246737</span>  <span class="number">0.856248</span>  <span class="number">1.000000</span>  <span class="number">0.418679</span>  </span><br><span class="line">初始每<span class="number">5</span>秒回蓝 -<span class="number">0.225670</span>  <span class="number">0.827604</span>  <span class="number">0.418679</span>  <span class="number">1.000000</span>  </span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#热力图可视化！！</span></span><br><span class="line">plt.figure(figsize=(<span class="number">14</span>,<span class="number">14</span>))</span><br><span class="line"><span class="comment"># annot=True 显示每个方格的数据</span></span><br><span class="line">sns.heatmap(corr, annot=<span class="literal">True</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<img src="/posts/c1c7733e/GMM.png" class="">

<p>从图中可以看出“最大生命”，“生命成长”，“初始生命”这三个属性的相关性大，我们只 需保留一个属性即可。 features_remain数组保留了特征选择的属性，这样将原本的20个属性降维到了13个属性。 相关性大cong的属性保留一个，因此可以对属性进行降维</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将原本的20个属性降维到13个属性。请填写代码！</span></span><br><span class="line">features = [<span class="string">u&#x27;最大生命&#x27;</span>,<span class="string">u&#x27;生命成长&#x27;</span>,<span class="string">u&#x27;初始生命&#x27;</span>,<span class="string">u&#x27;最大法力&#x27;</span>, <span class="string">u&#x27;法力成长&#x27;</span>,<span class="string">u&#x27;初始法力&#x27;</span>,<span class="string">u&#x27;最高物攻&#x27;</span>,<span class="string">u&#x27;物攻成长&#x27;</span>,<span class="string">u&#x27;初始物攻&#x27;</span>,<span class="string">u&#x27;最大物防&#x27;</span>,<span class="string">u&#x27;物防成长&#x27;</span>,<span class="string">u&#x27;初始物防&#x27;</span>, <span class="string">u&#x27;最大每5秒回血&#x27;</span>, <span class="string">u&#x27;每5秒回血成长&#x27;</span>, <span class="string">u&#x27;初始每5秒回血&#x27;</span>, <span class="string">u&#x27;最大每5秒回蓝&#x27;</span>, <span class="string">u&#x27;每5秒回蓝成长&#x27;</span>, <span class="string">u&#x27;初始每5秒回蓝&#x27;</span>, <span class="string">u&#x27;最大攻速&#x27;</span>, <span class="string">u&#x27;攻击范围&#x27;</span>]</span><br><span class="line">data = data_ori[features]</span><br></pre></td></tr></table></figure>

<h3 id="数据清洗-1"><a href="#数据清洗-1" class="headerlink" title="数据清洗"></a>数据清洗</h3><p>任务三： “最大攻速”这个属性值是百分数，不适合做矩阵运算，需要将百分数转化成小数。 “攻击范围”这个字段的取值为远程或者近战，也不适合矩阵运算； </p>
<p>解决办法：将取值做个映射，用1代表远程，0代表近战。 </p>
<p>示例：map({‘远程’:1,’近战’:0})</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data[<span class="string">u&#x27;最大攻速&#x27;</span>] = data[<span class="string">u&#x27;最大攻速&#x27;</span>].apply(<span class="keyword">lambda</span> x:<span class="built_in">float</span>(x.strip(<span class="string">&#x27;%&#x27;</span>))/<span class="number">100</span>)</span><br><span class="line">data[<span class="string">u&#x27;攻击范围&#x27;</span>] = data[<span class="string">u&#x27;攻击范围&#x27;</span>].<span class="built_in">map</span>(&#123;<span class="string">&#x27;远程&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;近战&#x27;</span>:<span class="number">0</span>&#125;)</span><br><span class="line">&lt;ipython-<span class="built_in">input</span>-<span class="number">73</span>-cb0648147d53&gt;:<span class="number">2</span>: SettingWithCopyWarning: </span><br><span class="line">A value <span class="keyword">is</span> trying to be <span class="built_in">set</span> on a copy of a <span class="built_in">slice</span> <span class="keyword">from</span> a DataFrame.</span><br><span class="line">Try using .loc[row_indexer,col_indexer] = value instead</span><br><span class="line"></span><br><span class="line">See the caveats <span class="keyword">in</span> the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html<span class="comment">#returning-a-view-versus-a-copy</span></span><br><span class="line">  data[<span class="string">u&#x27;最大攻速&#x27;</span>] = data[<span class="string">u&#x27;最大攻速&#x27;</span>].apply(<span class="keyword">lambda</span> x:<span class="built_in">float</span>(x.strip(<span class="string">&#x27;%&#x27;</span>))/<span class="number">100</span>)</span><br><span class="line">&lt;ipython-<span class="built_in">input</span>-<span class="number">73</span>-cb0648147d53&gt;:<span class="number">3</span>: SettingWithCopyWarning: </span><br><span class="line">A value <span class="keyword">is</span> trying to be <span class="built_in">set</span> on a copy of a <span class="built_in">slice</span> <span class="keyword">from</span> a DataFrame.</span><br><span class="line">Try using .loc[row_indexer,col_indexer] = value instead</span><br><span class="line"></span><br><span class="line">See the caveats <span class="keyword">in</span> the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html<span class="comment">#returning-a-view-versus-a-copy</span></span><br><span class="line">  data[<span class="string">u&#x27;攻击范围&#x27;</span>] = data[<span class="string">u&#x27;攻击范围&#x27;</span>].<span class="built_in">map</span>(&#123;<span class="string">&#x27;远程&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;近战&#x27;</span>:<span class="number">0</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>采用 Z-Score 规范化数据，保证每个特征维度的数据均值为 0，方差为 1</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ss = StandardScaler()</span><br><span class="line">data = ss.fit_transform(data)</span><br></pre></td></tr></table></figure>

<p>构造GMM聚类模型，GaussianMixture()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gmm = GaussianMixture(n_components=<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练数据</span></span><br><span class="line">gmm.fit(data)</span><br><span class="line"></span><br><span class="line">prediction = gmm.predict(data)</span><br><span class="line"><span class="built_in">print</span>(prediction)</span><br><span class="line">[<span class="number">13</span> <span class="number">24</span> <span class="number">11</span> <span class="number">10</span>  <span class="number">2</span> <span class="number">25</span> <span class="number">20</span> <span class="number">11</span>  <span class="number">7</span> <span class="number">24</span> <span class="number">18</span> <span class="number">14</span> <span class="number">10</span>  <span class="number">0</span>  <span class="number">1</span> <span class="number">18</span> <span class="number">13</span>  <span class="number">7</span>  <span class="number">2</span> <span class="number">12</span> <span class="number">22</span> <span class="number">12</span> <span class="number">12</span> <span class="number">12</span></span><br><span class="line"> <span class="number">12</span> <span class="number">12</span> <span class="number">12</span> <span class="number">21</span> <span class="number">16</span> <span class="number">26</span> <span class="number">24</span>  <span class="number">9</span>  <span class="number">9</span> <span class="number">16</span> <span class="number">26</span>  <span class="number">9</span> <span class="number">16</span>  <span class="number">6</span>  <span class="number">4</span> <span class="number">15</span>  <span class="number">9</span> <span class="number">16</span> <span class="number">16</span>  <span class="number">9</span> <span class="number">16</span> <span class="number">15</span> <span class="number">14</span>  <span class="number">4</span></span><br><span class="line"> <span class="number">24</span> <span class="number">16</span> <span class="number">28</span>  <span class="number">5</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">3</span> <span class="number">13</span> <span class="number">29</span>  <span class="number">5</span> <span class="number">23</span>  <span class="number">2</span> <span class="number">29</span> <span class="number">19</span> <span class="number">17</span> <span class="number">13</span>  <span class="number">8</span>  <span class="number">5</span> <span class="number">27</span>  <span class="number">5</span> <span class="number">21</span>]</span><br><span class="line"> </span><br><span class="line"> <span class="comment"># 将分组结果输出到 CSV 文件中</span></span><br><span class="line">data_ori.insert(<span class="number">0</span>, <span class="string">&#x27;分组&#x27;</span>, prediction)</span><br><span class="line">data_ori.to_csv(<span class="string">&#x27;.hero_out.csv&#x27;</span>, index=<span class="literal">False</span>, sep=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> calinski_harabasz_score</span><br><span class="line"><span class="built_in">print</span>(calinski_harabasz_score(data, prediction))</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="航空公司客户价值分析"><a href="#航空公司客户价值分析" class="headerlink" title="航空公司客户价值分析"></a>航空公司客户价值分析</h1><img src="/posts/c1c7733e/%E8%88%AA%E7%A9%BA.png" class="">

<hr>
<h1 id="比特币价格预测"><a href="#比特币价格预测" class="headerlink" title="比特币价格预测"></a>比特币价格预测</h1><p>比特币价格走势预测</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># 比特币走势预测，使用时间序列ARMA</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> statsmodels.tsa.arima_model <span class="keyword">import</span> ARMA</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">warnings.filterwarnings(<span class="string">&#x27;ignore&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据加载</span></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;./bitcoin_2012-01-01_to_2018-10-31.csv&#x27;</span>)</span><br><span class="line"><span class="comment"># 将时间作为df的索</span></span><br><span class="line">df.Timestamp = pd.to_datetime(df.Timestamp)</span><br><span class="line">df.index = df.Timestamp</span><br><span class="line"><span class="comment"># 数据探索</span></span><br><span class="line"><span class="built_in">print</span>(df.head(<span class="number">10</span>))</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">数据探索部分打印内容：</span><br><span class="line">            Timestamp      Open      High       Low     Close  Volume_(BTC)  \</span><br><span class="line">Timestamp                                                                     </span><br><span class="line"><span class="number">2011</span>-<span class="number">12</span>-<span class="number">31</span> <span class="number">2011</span>-<span class="number">12</span>-<span class="number">31</span>  <span class="number">4.465000</span>  <span class="number">4.482500</span>  <span class="number">4.465000</span>  <span class="number">4.482500</span>     <span class="number">23.829470</span>   </span><br><span class="line"><span class="number">2012</span>-01-01 <span class="number">2012</span>-01-01  <span class="number">4.806667</span>  <span class="number">4.806667</span>  <span class="number">4.806667</span>  <span class="number">4.806667</span>      <span class="number">7.200667</span>   </span><br><span class="line"><span class="number">2012</span>-01-02 <span class="number">2012</span>-01-02  <span class="number">5.000000</span>  <span class="number">5.000000</span>  <span class="number">5.000000</span>  <span class="number">5.000000</span>     <span class="number">19.048000</span>   </span><br><span class="line"><span class="number">2012</span>-01-03 <span class="number">2012</span>-01-03  <span class="number">5.252500</span>  <span class="number">5.252500</span>  <span class="number">5.252500</span>  <span class="number">5.252500</span>     <span class="number">11.004660</span>   </span><br><span class="line"><span class="number">2012</span>-01-04 <span class="number">2012</span>-01-04  <span class="number">5.200000</span>  <span class="number">5.223333</span>  <span class="number">5.200000</span>  <span class="number">5.223333</span>     <span class="number">11.914807</span>   </span><br><span class="line"><span class="number">2012</span>-01-05 <span class="number">2012</span>-01-05  <span class="number">6.281429</span>  <span class="number">6.286190</span>  <span class="number">6.281429</span>  <span class="number">6.286190</span>      <span class="number">4.514373</span>   </span><br><span class="line"><span class="number">2012</span>-01-06 <span class="number">2012</span>-01-06  <span class="number">6.435000</span>  <span class="number">6.445000</span>  <span class="number">6.435000</span>  <span class="number">6.445000</span>      <span class="number">2.420196</span>   </span><br><span class="line"><span class="number">2012</span>-01-07 <span class="number">2012</span>-01-07  <span class="number">6.800000</span>  <span class="number">6.800000</span>  <span class="number">6.800000</span>  <span class="number">6.800000</span>      <span class="number">0.295858</span>   </span><br><span class="line"><span class="number">2012</span>-01-08 <span class="number">2012</span>-01-08  <span class="number">6.950000</span>  <span class="number">6.950000</span>  <span class="number">6.950000</span>  <span class="number">6.950000</span>      <span class="number">2.500000</span>   </span><br><span class="line"><span class="number">2012</span>-01-09 <span class="number">2012</span>-01-09  <span class="number">6.584167</span>  <span class="number">6.584167</span>  <span class="number">6.581667</span>  <span class="number">6.581667</span>      <span class="number">1.857481</span>   </span><br><span class="line"></span><br><span class="line">            Volume_(Currency)  Weighted_Price  </span><br><span class="line">Timestamp                                      </span><br><span class="line"><span class="number">2011</span>-<span class="number">12</span>-<span class="number">31</span>         <span class="number">106.330084</span>        <span class="number">4.471603</span>  </span><br><span class="line"><span class="number">2012</span>-01-01          <span class="number">35.259720</span>        <span class="number">4.806667</span>  </span><br><span class="line"><span class="number">2012</span>-01-02          <span class="number">95.240000</span>        <span class="number">5.000000</span>  </span><br><span class="line"><span class="number">2012</span>-01-03          <span class="number">58.100651</span>        <span class="number">5.252500</span>  </span><br><span class="line"><span class="number">2012</span>-01-04          <span class="number">63.119578</span>        <span class="number">5.208159</span>  </span><br><span class="line"><span class="number">2012</span>-01-05          <span class="number">27.987370</span>        <span class="number">6.284127</span>  </span><br><span class="line"><span class="number">2012</span>-01-06          <span class="number">15.914658</span>        <span class="number">6.438999</span>  </span><br><span class="line"><span class="number">2012</span>-01-07           <span class="number">2.011834</span>        <span class="number">6.800000</span>  </span><br><span class="line"><span class="number">2012</span>-01-08          <span class="number">17.300000</span>        <span class="number">6.950000</span>  </span><br><span class="line"><span class="number">2012</span>-01-09          <span class="number">12.306798</span>        <span class="number">6.582770</span>  </span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 按照月，季度，年来统计</span></span><br><span class="line">df_month = df.resample(<span class="string">&#x27;M&#x27;</span>).mean()</span><br><span class="line">df_Q = df.resample(<span class="string">&#x27;Q-DEC&#x27;</span>).mean()</span><br><span class="line">df_year = df.resample(<span class="string">&#x27;A-DEC&#x27;</span>).mean()</span><br><span class="line"><span class="comment"># 按照天，月，季度，年来显示比特币的走势</span></span><br><span class="line">fig = plt.figure(figsize=[<span class="number">15</span>, <span class="number">7</span>])</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>]=[<span class="string">&#x27;SimHei&#x27;</span>] <span class="comment">#用来正常显示中文标签</span></span><br><span class="line">plt.suptitle(<span class="string">&#x27;比特币金额（美金）&#x27;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">plt.subplot(<span class="number">221</span>)</span><br><span class="line"></span><br><span class="line">plt.plot(df.Weighted_Price, <span class="string">&#x27;-&#x27;</span>, label=<span class="string">&#x27;按天&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.subplot(<span class="number">222</span>)</span><br><span class="line"></span><br><span class="line">plt.plot(df.Weighted_Price, <span class="string">&#x27;-&#x27;</span>, label=<span class="string">&#x27;按月&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.subplot(<span class="number">223</span>)</span><br><span class="line"></span><br><span class="line">plt.plot(df.Weighted_Price, <span class="string">&#x27;-&#x27;</span>, label=<span class="string">&#x27;按季度&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.subplot(<span class="number">224</span>)</span><br><span class="line"></span><br><span class="line">plt.plot(df.Weighted_Price, <span class="string">&#x27;-&#x27;</span>, label=<span class="string">&#x27;按年&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>按照天、月、季度、年来统计显示比特币的走势：</p>
<img src="/posts/c1c7733e/bit1.png" class="">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置参数范围</span></span><br><span class="line">ps = <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line">qs = <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line">parameters = product(ps, qs)</span><br><span class="line">parameters_list = <span class="built_in">list</span>(parameters)</span><br><span class="line"><span class="comment"># 寻找最优ARMA模型参数，即best_aic最小</span></span><br><span class="line">results = []</span><br><span class="line">best_aic = <span class="built_in">float</span>(<span class="string">&quot;inf&quot;</span>) <span class="comment"># 正无穷</span></span><br><span class="line"><span class="keyword">for</span> param <span class="keyword">in</span> parameters_list:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        model = ARMA(df_month.Weighted_Price,order=(param[<span class="number">0</span>], param[<span class="number">1</span>])).fit()</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;参数错误:&#x27;</span>, param)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    aic = model.aic</span><br><span class="line">    <span class="keyword">if</span> aic &lt; best_aic:</span><br><span class="line">        best_model = model</span><br><span class="line">        best_aic = aic</span><br><span class="line">        best_param = param</span><br><span class="line">    results.append([param, model.aic])</span><br><span class="line"><span class="comment"># 输出最优模型</span></span><br><span class="line">result_table = pd.DataFrame(results)</span><br><span class="line">result_table.columns = [<span class="string">&#x27;parameters&#x27;</span>, <span class="string">&#x27;aic&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;最优模型:&#x27;</span>, best_model.summary())</span><br><span class="line"><span class="comment"># 比特币预测</span></span><br><span class="line">df_month2 = df_month[[<span class="string">&#x27;Weighted_Price&#x27;</span>]]</span><br><span class="line">date_list = [datetime(<span class="number">2018</span>, <span class="number">11</span>, <span class="number">30</span>), datetime(<span class="number">2018</span>, <span class="number">12</span>, <span class="number">31</span>), datetime(<span class="number">2019</span>, <span class="number">1</span>, <span class="number">31</span>),</span><br><span class="line">             datetime(<span class="number">2019</span>, <span class="number">2</span>, <span class="number">28</span>), datetime(<span class="number">2019</span>, <span class="number">3</span>, <span class="number">31</span>),</span><br><span class="line">             datetime(<span class="number">2019</span>, <span class="number">4</span>, <span class="number">30</span>), datetime(<span class="number">2019</span>, <span class="number">5</span>, <span class="number">31</span>), datetime(<span class="number">2019</span>, <span class="number">6</span>, <span class="number">30</span>)]</span><br><span class="line">future = pd.DataFrame(index=date_list, columns=df_month.columns)</span><br><span class="line">df_month2 = pd.concat([df_month2, future])</span><br><span class="line">df_month2[<span class="string">&#x27;forecast&#x27;</span>] = best_model.predict(start=<span class="number">0</span>, end=<span class="number">91</span>)</span><br><span class="line"><span class="comment"># 比特币预测结果显示</span></span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">7</span>))</span><br><span class="line">df_month2.Weighted_Price.plot(label=<span class="string">&#x27;实际金额&#x27;</span>)</span><br><span class="line">df_month2.forecast.plot(color=<span class="string">&#x27;r&#x27;</span>, ls=<span class="string">&#x27;--&#x27;</span>, label=<span class="string">&#x27;预测金额&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.title(<span class="string">&#x27;比特币金额(月)&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;时间&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;美金&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<img src="/posts/c1c7733e/bit2.png" class="">

<p>比特币预测结果：</p>
<img src="/posts/c1c7733e/bit3.png" class="">
]]></content>
      <tags>
        <tag>5</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫</title>
    <url>/posts/c386cf1b.html</url>
    <content><![CDATA[<p><strong>Python爬虫学习</strong></p>
<span id="more"></span>

<h1 id="requests模块案例一-搜狗首页数据提取"><a href="#requests模块案例一-搜狗首页数据提取" class="headerlink" title="requests模块案例一(搜狗首页数据提取)"></a>requests模块案例一(搜狗首页数据提取)</h1><p>requests模块：python中原生的一款基于网络请求的模块，功能非常强大，简单便携，效率极高</p>
<p>作用：模拟浏览器发请求</p>
<p>注意从URL下右键”检查”，查看 请求URL、请求方式、Content-Type的格式等，以及”响应”中的字典或列表格式</p>
<ul>
<li><strong>爬取搜狗首页的页面数据</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 爬取搜狗首页页面数据</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 指定url</span></span><br><span class="line">    url = <span class="string">&#x27;https://www.sogou.com/&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发起请求</span></span><br><span class="line">    <span class="comment"># response接收get方法返回的响应对象</span></span><br><span class="line">    response = requests.get(url=url)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取响应数据 .text返回的是字符串形式的响应数据</span></span><br><span class="line">    page_text = response.text</span><br><span class="line">    <span class="built_in">print</span>(page_text)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 持久化存储</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./sogou.html&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(page_text)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;爬取数据结束！&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>爬取结果：(源码臭长)</p>
<img src="/posts/c386cf1b/sogou.png" class="" title="搜狗首页html数据">

<hr>
<h1 id="requests模块案例二-网页采集器"><a href="#requests模块案例二-网页采集器" class="headerlink" title="requests模块案例二(网页采集器)"></a>requests模块案例二(网页采集器)</h1><ul>
<li><strong>简单的网页采集器</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># UA伪装：将对应的User-Agent封装到一个字段中</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.75 Safari/537.36 Edg/100.0.1185.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    url = <span class="string">&#x27;https://www.sogou.com/web?&#x27;</span></span><br><span class="line">    <span class="comment"># 处理url携带的参数query:封装到字典中</span></span><br><span class="line">    kw = <span class="built_in">input</span>(<span class="string">&quot;输入一个query:&quot;</span>)</span><br><span class="line">    param = &#123;</span><br><span class="line">        <span class="string">&#x27;query&#x27;</span>: kw</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 对指定的url发起的请求对应的url是携带参数的，并且请求过程中处理了参数</span></span><br><span class="line">    response = requests.get(url=url, params=param, headers=headers)</span><br><span class="line"></span><br><span class="line">    page_text = response.text</span><br><span class="line">    fileName = kw + <span class="string">&#x27;.html&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(fileName, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(page_text)</span><br><span class="line">    <span class="built_in">print</span>(fileName, <span class="string">&#x27;保存成功！&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>重点：</strong></p>
<p><strong>UA</strong>：User-Agent（请求载体的身份标识）</p>
<p><strong>UA检测</strong>(反爬)：门户网站的服务器会检测对应请求的载体身份标识，如果检测到请求的载体身份标识为某一款浏览器，则说明该请求是一个正常的请求。但如果检测到请求的载体身份标识不是基于某一款浏览器的，则表示该请求为不正常的请求(爬虫)则服务器端就可能拒绝该次请求。</p>
<p><strong>UA伪装</strong>(反反爬)：让爬虫对应的请求载体身份标识伪装成某一款浏览器</p>
<p><strong>实现：</strong></p>
<p>控制台输入一个query关键字，类似搜索引擎中的搜索输入框，输入关键字后对应生成它的html文件，文件下保存该关键字搜索的结果的html形式源码。</p>
<p>例：</p>
<p>query：武汉    &#x3D;&#x3D;&gt;&gt;  武汉.html生成，浏览器打开武汉.html有：</p>
<img src="/posts/c386cf1b/wuhan.png" class="" title="网页提取结果">

<hr>
<h1 id="requests模块案例三-破解百度翻译"><a href="#requests模块案例三-破解百度翻译" class="headerlink" title="requests模块案例三(破解百度翻译)"></a>requests模块案例三(破解百度翻译)</h1><ul>
<li><strong>编译器版本的”百度翻译”</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">post_url = <span class="string">&#x27;https://fanyi.baidu.com/sug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># UA伪装</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.75 Safari/537.36 Edg/100.0.1185.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">word = <span class="built_in">input</span>(<span class="string">&quot;输入您要查询的内容：&quot;</span>)</span><br><span class="line"><span class="comment"># post请求参数处理（同get请求一致）</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;kw&#x27;</span>: word</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求发送</span></span><br><span class="line">response = requests.post(url=post_url, data=data, headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取响应数据:json方法返回的是obj（如果确认响应数据是json类型才可以使用.json方法）</span></span><br><span class="line"><span class="comment"># Content-Type: application/json</span></span><br><span class="line">dic_obj = response.json()</span><br><span class="line"><span class="comment"># print</span></span><br><span class="line"></span><br><span class="line">fileName = word + <span class="string">&#x27;.json&#x27;</span></span><br><span class="line">fp = <span class="built_in">open</span>(fileName, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">json.dump(dic_obj, fp=fp, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;OVER&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>实现：</strong></p>
<p>控制台提示输入查询的内容后，自动生成对应内容的json文件，json文件下内容对应如下</p>
<img src="/posts/c386cf1b/%E7%BF%BB%E8%AF%91.png" class="" title="编译器同屏翻译">

<p><strong>功能</strong>：可以控制台输入某单词生成json文件实现对该单词的中文翻译</p>
<p><strong>问题</strong>：测试过程中输入长句英文是无法正确输出结果</p>
<hr>
<h1 id="requests模块案例四-豆瓣电影信息提取"><a href="#requests模块案例四-豆瓣电影信息提取" class="headerlink" title="requests模块案例四(豆瓣电影信息提取)"></a><strong>requests模块案例四(豆瓣电影信息提取)</strong></h1><ul>
<li>豆瓣喜剧电影排行榜中电影基本信息的捕获</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://movie.douban.com/j/chart/top_list?&#x27;</span></span><br><span class="line">param = &#123;</span><br><span class="line">    <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;24&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;interval_id&#x27;</span>: <span class="string">&#x27;100:90&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;action&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;start&#x27;</span>: <span class="string">&#x27;0&#x27;</span>,  <span class="comment"># 从库中的第几部电影去取</span></span><br><span class="line">    <span class="string">&#x27;limit&#x27;</span>: <span class="string">&#x27;20&#x27;</span>  <span class="comment"># 一次取出的个数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># UA伪装</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.75 Safari/537.36 Edg/100.0.1185.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(url=url, params=param, headers=headers)</span><br><span class="line"></span><br><span class="line">list_data = response.json()</span><br><span class="line"></span><br><span class="line">fp = <span class="built_in">open</span>(<span class="string">&#x27;./douban.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">json.dump(list_data, fp=fp, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;OVER&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>实现：</p>
<p>字典中start和limit可更改(见注释)，运行生成douban.json文件，显示取出limit数量个电影的基本信息</p>
<hr>
<h1 id="requests模块案例五-查询KFC餐厅地址"><a href="#requests模块案例五-查询KFC餐厅地址" class="headerlink" title="requests模块案例五(查询KFC餐厅地址)"></a>requests模块案例五(查询KFC餐厅地址)</h1><ul>
<li>检索国内某城市所有KFC餐厅的地址等信息</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://www.kfc.com.cn/kfccda/ashx/GetStoreList.ashx?op=keyword&#x27;</span></span><br><span class="line"></span><br><span class="line">param = &#123;</span><br><span class="line">    <span class="string">&#x27;cname&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;pid&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;keyword&#x27;</span>: <span class="string">&#x27;襄阳&#x27;</span>,  <span class="comment"># keyword处可改动，变化所要查询的国内城市名称</span></span><br><span class="line">    <span class="string">&#x27;pageIndex&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;pageSize&#x27;</span>: <span class="string">&#x27;10&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># UA伪装</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.75 Safari/537.36 Edg/100.0.1185.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(url=url, params=param, headers=headers)</span><br><span class="line"></span><br><span class="line">page_text = response.text</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./地址查询.html&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(page_text)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;OVER&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>实现：</strong></p>
<p>功能类似于官网<a href="http://www.kfc.com.cn/kfccda/storelist/index.aspx">肯德基餐厅信息查询 (kfc.com.cn)</a>下”餐厅关键字”查询，控制台输入关键字，即可生成html文件呈现该关键字城市下所有KFC餐厅的地址信息</p>
<p>例：</p>
<p>城市：襄阳</p>
<img src="/posts/c386cf1b/%E5%9C%B0%E5%9D%80%E6%9F%A5%E8%AF%A2.png" class="" title="查询对应城市KFC餐厅地址信息">
]]></content>
      <tags>
        <tag>3</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo使用方法及命令</title>
    <url>/posts/1eb58338.html</url>
    <content><![CDATA[<p><strong>介绍hexo常用的命令以及markdown常用语法</strong></p>
<span id="more"></span>

<h2 id="hexo常用命令"><a href="#hexo常用命令" class="headerlink" title="hexo常用命令"></a>hexo常用命令</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;postName&quot;</span>		<span class="comment">#新建文章</span></span><br><span class="line">hexo new page <span class="string">&quot;pageName&quot;</span><span class="comment">#新建页面</span></span><br><span class="line">hexo generate 			<span class="comment">#生成静态页面至public目录</span></span><br><span class="line">hexo server 			<span class="comment">#开启预览访问端口</span></span><br><span class="line">hexo deploy 			<span class="comment">#部署到GitHub</span></span><br><span class="line">hexo <span class="built_in">help</span>  				<span class="comment">#查看帮助</span></span><br><span class="line">hexo version  			<span class="comment">#查看Hexo的版本</span></span><br><span class="line">hexo clean 				<span class="comment">#清理public的内容</span></span><br><span class="line">组合命令：</span><br><span class="line">hexo s -g			 	<span class="comment">#生成并本地预览</span></span><br><span class="line">hexo d -g		 		<span class="comment">#生成并上传</span></span><br></pre></td></tr></table></figure>

<h2 id="Hexo-Markdown简明语法"><a href="#Hexo-Markdown简明语法" class="headerlink" title="Hexo Markdown简明语法"></a>Hexo Markdown简明语法</h2><h3 id="内容目录"><a href="#内容目录" class="headerlink" title="内容目录"></a>内容目录</h3><p>使用的yun主题自带目录生成(正确使用markdown语法)<br>新建的文章默认生成目录<br>新建的页面可以在首部添加: <code>toc: true</code></p>
<h3 id="斜体和粗体"><a href="#斜体和粗体" class="headerlink" title="斜体和粗体"></a>斜体和粗体</h3><p>使用<code>*</code>和<code>**</code>表示斜体和粗体，格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*斜体*，**粗体**</span><br></pre></td></tr></table></figure>

<p>效果如下：<em>斜体</em>，<strong>粗体</strong></p>
<h3 id="分级标题"><a href="#分级标题" class="headerlink" title="分级标题"></a>分级标题</h3><p>使用 <code>===</code>表示一级标题，使用<code>---</code>表示二级标题，格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这是一个一级标题</span><br><span class="line">===</span><br><span class="line">这是一个二级标题</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>或者：使用<code>#</code>号（建议<code>#</code>后面跟一个空格）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># H1</span><br><span class="line">## H2</span><br><span class="line">### H3</span><br><span class="line">#### H4</span><br><span class="line">##### H5</span><br><span class="line">###### H6</span><br></pre></td></tr></table></figure>

<h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>在单独的一行使用<code>***</code>或者<code>___</code>表示分割线</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">part1</span><br><span class="line">___ (三个下划线)</span><br><span class="line">part2</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p>part1</p>
<hr>
<p>part2</p>
<h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><p>使用<code>~~</code>表示删除线<br>（<code>~~</code>要紧跟文字不能空格）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~~我被划了吗？~~</span><br></pre></td></tr></table></figure>

<p><del>我被划了吗？</del></p>
<h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><h4 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h4><p>插入文字超链接的格式如下 ：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[链接文字](链接地址 &quot;链接标题&quot;)</span><br></pre></td></tr></table></figure>

<h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><p>插入图片超链接的格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![图片说明](图片链接 &quot;图片标题&quot;)</span><br></pre></td></tr></table></figure>

<h4 id="音频"><a href="#音频" class="headerlink" title="音频"></a>音频</h4><p>插入音频，使用插件hexo-tag-aplayer，语法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% aplayer title author url [picture_url, narrow, autoplay, width:xx%, lrc:xxx] %&#125;</span><br></pre></td></tr></table></figure>

<p>详情参见：hexo-tag-aplayer <a href="https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md">中文使用文档</a></p>
<h4 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h4><p>引用视频则直接插入iframe代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;/js/youtube-autoresizer.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;https://www.youtube.com/embed/HfElOZSEqn4&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure>

<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>用<code>\</code>表示注释，<code>\</code>后面的文字解析为纯文本格式。<br>渲染效果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\## 看我没有变成二级标题吧</span><br></pre></td></tr></table></figure>

<p>## 看我没有变成二级标题吧</p>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><h4 id="普通引用"><a href="#普通引用" class="headerlink" title="普通引用"></a>普通引用</h4><p>使用<code>&gt;</code>表示文字引用：<br>(必须要在每行的开头)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; 野火烧不尽，</span><br><span class="line">春风吹又生</span><br><span class="line"></span><br><span class="line">遇到换行结束</span><br></pre></td></tr></table></figure>

<p>eg：</p>
<blockquote>
<p>野火烧不尽，<br>春风吹又生</p>
</blockquote>
<p>遇到换行结束 </p>
<h4 id="嵌套引用"><a href="#嵌套引用" class="headerlink" title="嵌套引用"></a>嵌套引用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; 最外层引用</span><br><span class="line">&gt; &gt; 第二层引用</span><br><span class="line">&gt; &gt; &gt; 可以嵌套很多层</span><br></pre></td></tr></table></figure>

<blockquote>
<p>最外层引用</p>
<blockquote>
<p>第二层引用</p>
<blockquote>
<p>可以嵌套很多层</p>
</blockquote>
</blockquote>
</blockquote>
<h4 id="引用嵌套列表"><a href="#引用嵌套列表" class="headerlink" title="引用嵌套列表"></a>引用嵌套列表</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; - 这是引用里嵌套的一个列表</span><br><span class="line">&gt; - 还可以有子列表</span><br><span class="line">&gt; 	- 子列表</span><br><span class="line">&gt; 	- 子列表</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>这是引用里嵌套的一个列表</li>
<li>还可以有子列表<ul>
<li>子列表</li>
<li>子列表</li>
</ul>
</li>
</ul>
</blockquote>
<h4 id="引用嵌套代码"><a href="#引用嵌套代码" class="headerlink" title="引用嵌套代码"></a>引用嵌套代码</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;     同样的，在前面加四个空格形成代码块</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; ```</span><br><span class="line">&gt; 或者使用三个反引号形成代码块</span><br><span class="line">&gt; ```</span><br></pre></td></tr></table></figure>

<blockquote>
<pre><code>同样的，在前面加四个空格形成代码块
</code></pre>
</blockquote>
<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">或者使用三个反引号形成代码块</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="列表与表格"><a href="#列表与表格" class="headerlink" title="列表与表格"></a>列表与表格</h3><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><p>使用<code>*</code>, <code>+</code>, <code>-</code> 来显示无序列表<br>(后面加空格)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+ 无序列表项 一</span><br><span class="line">	- 子无序列表 一</span><br><span class="line">	- 子无序列表 二</span><br><span class="line">		* 子无序列表 三</span><br><span class="line">+ 无序列表项 二</span><br><span class="line">+ 无序列表项 三</span><br></pre></td></tr></table></figure>

<p>效果展示：</p>
<ul>
<li>无序列表项 一<ul>
<li>子无序列表 一</li>
<li>子无序列表 二<ul>
<li>子无序列表 三</li>
</ul>
</li>
</ul>
</li>
<li>无序列表项 二</li>
<li>无序列表项 三</li>
</ul>
<h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><p>使用数字和点表示有序列表：<br>(同样的，要加空格)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 有序列表项 一</span><br><span class="line">	1. 子有序列表项 一</span><br><span class="line">	2. 子有序列表项 二</span><br><span class="line">	4. 故意标错，会自动排序</span><br><span class="line">2. 有序列表项 二</span><br><span class="line">3. 有序列表项 三</span><br></pre></td></tr></table></figure>

<ol>
<li>有序列表项 一<ol>
<li>子有序列表项 一</li>
<li>子有序列表项 二</li>
<li>故意标错，会自动排序</li>
</ol>
</li>
<li>有序列表项 二</li>
<li>有序列表项 三</li>
</ol>
<h3 id="绘制表格"><a href="#绘制表格" class="headerlink" title="绘制表格"></a>绘制表格</h3><p>绘制表格格式如下：<br><code>|</code> 控制分列，<br><code>-</code> 控制分行，<br><code>:</code> 控制对齐方式。</p>
<p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">| 这是标题 | 自动加粗 | 标题下指定对齐方式 | 不指定对齐方式 |</span><br><span class="line">| :------- | --------: | :---: |---|</span><br><span class="line">| ↑左对齐 | 右对齐↑  | ↑居中↑     |默认左对齐|</span><br><span class="line">| 123456789    | ←空格不占位置   | 987654321 | 1 |</span><br><span class="line">| 123456789| ←没有空格     | 987654321 | 0 |</span><br></pre></td></tr></table></figure>

<p>效果展示：</p>
<table>
<thead>
<tr>
<th align="left">这是标题</th>
<th align="right">自动加粗</th>
<th align="center">标题下指定对齐方式</th>
<th>不指定对齐方式</th>
</tr>
</thead>
<tbody><tr>
<td align="left">↑左对齐</td>
<td align="right">右对齐↑</td>
<td align="center">↑居中↑</td>
<td>默认左对齐</td>
</tr>
<tr>
<td align="left">123456789</td>
<td align="right">←空格不占位置</td>
<td align="center">987654321</td>
<td>1</td>
</tr>
<tr>
<td align="left">123456789</td>
<td align="right">←没有空格</td>
<td align="center">987654321</td>
<td>0</td>
</tr>
</tbody></table>
<h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><h4 id="行内代码"><a href="#行内代码" class="headerlink" title="行内代码"></a>行内代码</h4><p>使用<code>`</code>符号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">可以用 `一个`，</span><br><span class="line">可以用 ``两个``，</span><br><span class="line">也可以用 ```三个```，</span><br><span class="line">总之就是要 ````成对````。</span><br></pre></td></tr></table></figure>

<p>可以用 <code>一个</code>，<br>可以用 <code>两个</code>，<br>也可以用 <code>三个</code>，<br>总之就是要 <code>成对</code>。</p>
<h4 id="多行代码"><a href="#多行代码" class="headerlink" title="多行代码"></a>多行代码</h4><p>使用：<code>`</code>符号<br>至少要三个连续的 <code>`</code>，数目要配对</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line">#include&lt;stdion.h&gt;</span><br><span class="line">int main</span><br><span class="line">&#123;</span><br><span class="line">	cout&lt;&lt;&quot;hello world!&quot;&lt;&lt;endl;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br><span class="line">```</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;stdion.h&gt;</span><br><span class="line">int main</span><br><span class="line">&#123;</span><br><span class="line">	cout&lt;&lt;&quot;hello world!&quot;&lt;&lt;endl;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="加强的代码块"><a href="#加强的代码块" class="headerlink" title="加强的代码块"></a>加强的代码块</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```cpp</span><br><span class="line">#include&lt;stdion.h&gt;</span><br><span class="line">int main</span><br><span class="line">&#123;</span><br><span class="line">	cout&lt;&lt;&quot;hello world!&quot;&lt;&lt;endl;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br><span class="line">```</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdion.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> main</span><br><span class="line">&#123;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;hello world!&quot;</span>&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>end</strong></em></p>
]]></content>
      <tags>
        <tag>1</tag>
      </tags>
  </entry>
</search>
